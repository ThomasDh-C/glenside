type List[A] {
  Cons(A, List[A]),
  Nil,
}

type Option[A] {
  Some(A),
  None,
}

type Tree[A] {
  Rose(A, List[Tree[A]]),
}

type tensor_float16_t {
  tensor_nil_float16,
  tensor0_float16(float16),
  tensor1_float16(Tensor[(?), float16]),
  tensor2_float16(Tensor[(?, ?), float16]),
  tensor3_float16(Tensor[(?, ?, ?), float16]),
  tensor4_float16(Tensor[(?, ?, ?, ?), float16]),
  tensor5_float16(Tensor[(?, ?, ?, ?, ?), float16]),
  tensor6_float16(Tensor[(?, ?, ?, ?, ?, ?), float16]),
}

type tensor_float32_t {
  tensor_nil_float32,
  tensor0_float32(float32),
  tensor1_float32(Tensor[(?), float32]),
  tensor2_float32(Tensor[(?, ?), float32]),
  tensor3_float32(Tensor[(?, ?, ?), float32]),
  tensor4_float32(Tensor[(?, ?, ?, ?), float32]),
  tensor5_float32(Tensor[(?, ?, ?, ?, ?), float32]),
  tensor6_float32(Tensor[(?, ?, ?, ?, ?, ?), float32]),
}

type tensor_float64_t {
  tensor_nil_float64,
  tensor0_float64(float64),
  tensor1_float64(Tensor[(?), float64]),
  tensor2_float64(Tensor[(?, ?), float64]),
  tensor3_float64(Tensor[(?, ?, ?), float64]),
  tensor4_float64(Tensor[(?, ?, ?, ?), float64]),
  tensor5_float64(Tensor[(?, ?, ?, ?, ?), float64]),
  tensor6_float64(Tensor[(?, ?, ?, ?, ?, ?), float64]),
}

type tensor_int16_t {
  tensor_nil_int16,
  tensor0_int16(int16),
  tensor1_int16(Tensor[(?), int16]),
  tensor2_int16(Tensor[(?, ?), int16]),
  tensor3_int16(Tensor[(?, ?, ?), int16]),
  tensor4_int16(Tensor[(?, ?, ?, ?), int16]),
  tensor5_int16(Tensor[(?, ?, ?, ?, ?), int16]),
  tensor6_int16(Tensor[(?, ?, ?, ?, ?, ?), int16]),
}

type tensor_int32_t {
  tensor_nil_int32,
  tensor0_int32(int32),
  tensor1_int32(Tensor[(?), int32]),
  tensor2_int32(Tensor[(?, ?), int32]),
  tensor3_int32(Tensor[(?, ?, ?), int32]),
  tensor4_int32(Tensor[(?, ?, ?, ?), int32]),
  tensor5_int32(Tensor[(?, ?, ?, ?, ?), int32]),
  tensor6_int32(Tensor[(?, ?, ?, ?, ?, ?), int32]),
}

type tensor_int64_t {
  tensor_nil_int64,
  tensor0_int64(int64),
  tensor1_int64(Tensor[(?), int64]),
  tensor2_int64(Tensor[(?, ?), int64]),
  tensor3_int64(Tensor[(?, ?, ?), int64]),
  tensor4_int64(Tensor[(?, ?, ?, ?), int64]),
  tensor5_int64(Tensor[(?, ?, ?, ?, ?), int64]),
  tensor6_int64(Tensor[(?, ?, ?, ?, ?, ?), int64]),
}

type tensor_int8_t {
  tensor_nil_int8,
  tensor0_int8(int8),
  tensor1_int8(Tensor[(?), int8]),
  tensor2_int8(Tensor[(?, ?), int8]),
  tensor3_int8(Tensor[(?, ?, ?), int8]),
  tensor4_int8(Tensor[(?, ?, ?, ?), int8]),
  tensor5_int8(Tensor[(?, ?, ?, ?, ?), int8]),
  tensor6_int8(Tensor[(?, ?, ?, ?, ?, ?), int8]),
}

type tensor_uint16_t {
  tensor_nil_uint16,
  tensor0_uint16(uint16),
  tensor1_uint16(Tensor[(?), uint16]),
  tensor2_uint16(Tensor[(?, ?), uint16]),
  tensor3_uint16(Tensor[(?, ?, ?), uint16]),
  tensor4_uint16(Tensor[(?, ?, ?, ?), uint16]),
  tensor5_uint16(Tensor[(?, ?, ?, ?, ?), uint16]),
  tensor6_uint16(Tensor[(?, ?, ?, ?, ?, ?), uint16]),
}

type tensor_uint8_t {
  tensor_nil_uint8,
  tensor0_uint8(uint8),
  tensor1_uint8(Tensor[(?), uint8]),
  tensor2_uint8(Tensor[(?, ?), uint8]),
  tensor3_uint8(Tensor[(?, ?, ?), uint8]),
  tensor4_uint8(Tensor[(?, ?, ?, ?), uint8]),
  tensor5_uint8(Tensor[(?, ?, ?, ?, ?), uint8]),
  tensor6_uint8(Tensor[(?, ?, ?, ?, ?, ?), uint8]),
}

def @main(%feats: Tensor[(277, 1, 240), float32] /* ty=Tensor[(277, 1, 240), float32] */, %txt: Tensor[(1, 47), int64] /* ty=Tensor[(1, 47), int64] */, %feat_lens: Tensor[(1), int32] /* ty=Tensor[(1), int32] */, %encoder.pre_rnn.lstm.weight_ih_l0: Tensor[(4096, 240), float32] /* ty=Tensor[(4096, 240), float32] */, %encoder.pre_rnn.lstm.weight_hh_l0: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.pre_rnn.lstm.bias_ih_l0: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.pre_rnn.lstm.bias_hh_l0: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.pre_rnn.lstm.weight_ih_l1: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.pre_rnn.lstm.weight_hh_l1: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.pre_rnn.lstm.bias_ih_l1: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.pre_rnn.lstm.bias_hh_l1: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.post_rnn.lstm.weight_ih_l0: Tensor[(4096, 2048), float32] /* ty=Tensor[(4096, 2048), float32] */, %encoder.post_rnn.lstm.weight_hh_l0: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.post_rnn.lstm.bias_ih_l0: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.post_rnn.lstm.bias_hh_l0: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.post_rnn.lstm.weight_ih_l1: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.post_rnn.lstm.weight_hh_l1: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.post_rnn.lstm.bias_ih_l1: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.post_rnn.lstm.bias_hh_l1: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.post_rnn.lstm.weight_ih_l2: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.post_rnn.lstm.weight_hh_l2: Tensor[(4096, 1024), float32] /* ty=Tensor[(4096, 1024), float32] */, %encoder.post_rnn.lstm.bias_ih_l2: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %encoder.post_rnn.lstm.bias_hh_l2: Tensor[(4096), float32] /* ty=Tensor[(4096), float32] */, %joint_enc.weight: Tensor[(512, 1024), float32] /* ty=Tensor[(512, 1024), float32] */, %joint_enc.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %prediction.embed.weight: Tensor[(500, 512), float32] /* ty=Tensor[(500, 512), float32] */, %prediction.dec_rnn.lstm.weight_ih_l0: Tensor[(2048, 512), float32] /* ty=Tensor[(2048, 512), float32] */, %prediction.dec_rnn.lstm.weight_hh_l0: Tensor[(2048, 512), float32] /* ty=Tensor[(2048, 512), float32] */, %prediction.dec_rnn.lstm.bias_ih_l0: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %prediction.dec_rnn.lstm.bias_hh_l0: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %prediction.dec_rnn.lstm.weight_ih_l1: Tensor[(2048, 512), float32] /* ty=Tensor[(2048, 512), float32] */, %prediction.dec_rnn.lstm.weight_hh_l1: Tensor[(2048, 512), float32] /* ty=Tensor[(2048, 512), float32] */, %prediction.dec_rnn.lstm.bias_ih_l1: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %prediction.dec_rnn.lstm.bias_hh_l1: Tensor[(2048), float32] /* ty=Tensor[(2048), float32] */, %joint_pred.weight: Tensor[(512, 512), float32] /* ty=Tensor[(512, 512), float32] */, %joint_pred.bias: Tensor[(512), float32] /* ty=Tensor[(512), float32] */, %joint_net.2.weight: Tensor[(501, 512), float32] /* ty=Tensor[(501, 512), float32] */, %joint_net.2.bias: Tensor[(501), float32] /* ty=Tensor[(501), float32] */) -> (Tensor[(1, 139, 48, 501), float32], Tensor[(1), int32]) {
  %0 = split(%feats, indices_or_sections=277) /* ty=(Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32], Tensor[(1, 1, 240), float32]) */;
  %1 = %0.0 /* ty=Tensor[(1, 1, 240), float32] */;
  %2 = %0.1 /* ty=Tensor[(1, 1, 240), float32] */;
  %3 = %0.2 /* ty=Tensor[(1, 1, 240), float32] */;
  %4 = %0.3 /* ty=Tensor[(1, 1, 240), float32] */;
  %5 = %0.4 /* ty=Tensor[(1, 1, 240), float32] */;
  %6 = %0.5 /* ty=Tensor[(1, 1, 240), float32] */;
  %7 = %0.6 /* ty=Tensor[(1, 1, 240), float32] */;
  %8 = %0.7 /* ty=Tensor[(1, 1, 240), float32] */;
  %9 = %0.8 /* ty=Tensor[(1, 1, 240), float32] */;
  %10 = %0.9 /* ty=Tensor[(1, 1, 240), float32] */;
  %11 = %0.10 /* ty=Tensor[(1, 1, 240), float32] */;
  %12 = %0.11 /* ty=Tensor[(1, 1, 240), float32] */;
  %13 = %0.12 /* ty=Tensor[(1, 1, 240), float32] */;
  %14 = %0.13 /* ty=Tensor[(1, 1, 240), float32] */;
  %15 = %0.14 /* ty=Tensor[(1, 1, 240), float32] */;
  %16 = %0.15 /* ty=Tensor[(1, 1, 240), float32] */;
  %17 = %0.16 /* ty=Tensor[(1, 1, 240), float32] */;
  %18 = %0.17 /* ty=Tensor[(1, 1, 240), float32] */;
  %19 = %0.18 /* ty=Tensor[(1, 1, 240), float32] */;
  %20 = %0.19 /* ty=Tensor[(1, 1, 240), float32] */;
  %21 = %0.20 /* ty=Tensor[(1, 1, 240), float32] */;
  %22 = %0.21 /* ty=Tensor[(1, 1, 240), float32] */;
  %23 = %0.22 /* ty=Tensor[(1, 1, 240), float32] */;
  %24 = %0.23 /* ty=Tensor[(1, 1, 240), float32] */;
  %25 = %0.24 /* ty=Tensor[(1, 1, 240), float32] */;
  %26 = %0.25 /* ty=Tensor[(1, 1, 240), float32] */;
  %27 = %0.26 /* ty=Tensor[(1, 1, 240), float32] */;
  %28 = %0.27 /* ty=Tensor[(1, 1, 240), float32] */;
  %29 = %0.28 /* ty=Tensor[(1, 1, 240), float32] */;
  %30 = %0.29 /* ty=Tensor[(1, 1, 240), float32] */;
  %31 = %0.30 /* ty=Tensor[(1, 1, 240), float32] */;
  %32 = %0.31 /* ty=Tensor[(1, 1, 240), float32] */;
  %33 = %0.32 /* ty=Tensor[(1, 1, 240), float32] */;
  %34 = %0.33 /* ty=Tensor[(1, 1, 240), float32] */;
  %35 = %0.34 /* ty=Tensor[(1, 1, 240), float32] */;
  %36 = %0.35 /* ty=Tensor[(1, 1, 240), float32] */;
  %37 = %0.36 /* ty=Tensor[(1, 1, 240), float32] */;
  %38 = %0.37 /* ty=Tensor[(1, 1, 240), float32] */;
  %39 = %0.38 /* ty=Tensor[(1, 1, 240), float32] */;
  %40 = %0.39 /* ty=Tensor[(1, 1, 240), float32] */;
  %41 = %0.40 /* ty=Tensor[(1, 1, 240), float32] */;
  %42 = %0.41 /* ty=Tensor[(1, 1, 240), float32] */;
  %43 = %0.42 /* ty=Tensor[(1, 1, 240), float32] */;
  %44 = %0.43 /* ty=Tensor[(1, 1, 240), float32] */;
  %45 = %0.44 /* ty=Tensor[(1, 1, 240), float32] */;
  %46 = %0.45 /* ty=Tensor[(1, 1, 240), float32] */;
  %47 = %0.46 /* ty=Tensor[(1, 1, 240), float32] */;
  %48 = %0.47 /* ty=Tensor[(1, 1, 240), float32] */;
  %49 = %0.48 /* ty=Tensor[(1, 1, 240), float32] */;
  %50 = %0.49 /* ty=Tensor[(1, 1, 240), float32] */;
  %51 = %0.50 /* ty=Tensor[(1, 1, 240), float32] */;
  %52 = %0.51 /* ty=Tensor[(1, 1, 240), float32] */;
  %53 = %0.52 /* ty=Tensor[(1, 1, 240), float32] */;
  %54 = %0.53 /* ty=Tensor[(1, 1, 240), float32] */;
  %55 = %0.54 /* ty=Tensor[(1, 1, 240), float32] */;
  %56 = %0.55 /* ty=Tensor[(1, 1, 240), float32] */;
  %57 = %0.56 /* ty=Tensor[(1, 1, 240), float32] */;
  %58 = %0.57 /* ty=Tensor[(1, 1, 240), float32] */;
  %59 = %0.58 /* ty=Tensor[(1, 1, 240), float32] */;
  %60 = %0.59 /* ty=Tensor[(1, 1, 240), float32] */;
  %61 = %0.60 /* ty=Tensor[(1, 1, 240), float32] */;
  %62 = %0.61 /* ty=Tensor[(1, 1, 240), float32] */;
  %63 = %0.62 /* ty=Tensor[(1, 1, 240), float32] */;
  %64 = %0.63 /* ty=Tensor[(1, 1, 240), float32] */;
  %65 = %0.64 /* ty=Tensor[(1, 1, 240), float32] */;
  %66 = %0.65 /* ty=Tensor[(1, 1, 240), float32] */;
  %67 = %0.66 /* ty=Tensor[(1, 1, 240), float32] */;
  %68 = %0.67 /* ty=Tensor[(1, 1, 240), float32] */;
  %69 = %0.68 /* ty=Tensor[(1, 1, 240), float32] */;
  %70 = %0.69 /* ty=Tensor[(1, 1, 240), float32] */;
  %71 = %0.70 /* ty=Tensor[(1, 1, 240), float32] */;
  %72 = %0.71 /* ty=Tensor[(1, 1, 240), float32] */;
  %73 = %0.72 /* ty=Tensor[(1, 1, 240), float32] */;
  %74 = %0.73 /* ty=Tensor[(1, 1, 240), float32] */;
  %75 = %0.74 /* ty=Tensor[(1, 1, 240), float32] */;
  %76 = %0.75 /* ty=Tensor[(1, 1, 240), float32] */;
  %77 = %0.76 /* ty=Tensor[(1, 1, 240), float32] */;
  %78 = %0.77 /* ty=Tensor[(1, 1, 240), float32] */;
  %79 = %0.78 /* ty=Tensor[(1, 1, 240), float32] */;
  %80 = %0.79 /* ty=Tensor[(1, 1, 240), float32] */;
  %81 = %0.80 /* ty=Tensor[(1, 1, 240), float32] */;
  %82 = %0.81 /* ty=Tensor[(1, 1, 240), float32] */;
  %83 = %0.82 /* ty=Tensor[(1, 1, 240), float32] */;
  %84 = %0.83 /* ty=Tensor[(1, 1, 240), float32] */;
  %85 = %0.84 /* ty=Tensor[(1, 1, 240), float32] */;
  %86 = %0.85 /* ty=Tensor[(1, 1, 240), float32] */;
  %87 = %0.86 /* ty=Tensor[(1, 1, 240), float32] */;
  %88 = %0.87 /* ty=Tensor[(1, 1, 240), float32] */;
  %89 = %0.88 /* ty=Tensor[(1, 1, 240), float32] */;
  %90 = %0.89 /* ty=Tensor[(1, 1, 240), float32] */;
  %91 = %0.90 /* ty=Tensor[(1, 1, 240), float32] */;
  %92 = %0.91 /* ty=Tensor[(1, 1, 240), float32] */;
  %93 = %0.92 /* ty=Tensor[(1, 1, 240), float32] */;
  %94 = %0.93 /* ty=Tensor[(1, 1, 240), float32] */;
  %95 = %0.94 /* ty=Tensor[(1, 1, 240), float32] */;
  %96 = %0.95 /* ty=Tensor[(1, 1, 240), float32] */;
  %97 = %0.96 /* ty=Tensor[(1, 1, 240), float32] */;
  %98 = %0.97 /* ty=Tensor[(1, 1, 240), float32] */;
  %99 = %0.98 /* ty=Tensor[(1, 1, 240), float32] */;
  %100 = %0.99 /* ty=Tensor[(1, 1, 240), float32] */;
  %101 = %0.100 /* ty=Tensor[(1, 1, 240), float32] */;
  %102 = %0.101 /* ty=Tensor[(1, 1, 240), float32] */;
  %103 = %0.102 /* ty=Tensor[(1, 1, 240), float32] */;
  %104 = %0.103 /* ty=Tensor[(1, 1, 240), float32] */;
  %105 = %0.104 /* ty=Tensor[(1, 1, 240), float32] */;
  %106 = %0.105 /* ty=Tensor[(1, 1, 240), float32] */;
  %107 = %0.106 /* ty=Tensor[(1, 1, 240), float32] */;
  %108 = %0.107 /* ty=Tensor[(1, 1, 240), float32] */;
  %109 = %0.108 /* ty=Tensor[(1, 1, 240), float32] */;
  %110 = %0.109 /* ty=Tensor[(1, 1, 240), float32] */;
  %111 = %0.110 /* ty=Tensor[(1, 1, 240), float32] */;
  %112 = %0.111 /* ty=Tensor[(1, 1, 240), float32] */;
  %113 = %0.112 /* ty=Tensor[(1, 1, 240), float32] */;
  %114 = %0.113 /* ty=Tensor[(1, 1, 240), float32] */;
  %115 = %0.114 /* ty=Tensor[(1, 1, 240), float32] */;
  %116 = %0.115 /* ty=Tensor[(1, 1, 240), float32] */;
  %117 = %0.116 /* ty=Tensor[(1, 1, 240), float32] */;
  %118 = %0.117 /* ty=Tensor[(1, 1, 240), float32] */;
  %119 = %0.118 /* ty=Tensor[(1, 1, 240), float32] */;
  %120 = %0.119 /* ty=Tensor[(1, 1, 240), float32] */;
  %121 = %0.120 /* ty=Tensor[(1, 1, 240), float32] */;
  %122 = %0.121 /* ty=Tensor[(1, 1, 240), float32] */;
  %123 = %0.122 /* ty=Tensor[(1, 1, 240), float32] */;
  %124 = %0.123 /* ty=Tensor[(1, 1, 240), float32] */;
  %125 = %0.124 /* ty=Tensor[(1, 1, 240), float32] */;
  %126 = %0.125 /* ty=Tensor[(1, 1, 240), float32] */;
  %127 = %0.126 /* ty=Tensor[(1, 1, 240), float32] */;
  %128 = %0.127 /* ty=Tensor[(1, 1, 240), float32] */;
  %129 = %0.128 /* ty=Tensor[(1, 1, 240), float32] */;
  %130 = %0.129 /* ty=Tensor[(1, 1, 240), float32] */;
  %131 = %0.130 /* ty=Tensor[(1, 1, 240), float32] */;
  %132 = %0.131 /* ty=Tensor[(1, 1, 240), float32] */;
  %133 = %0.132 /* ty=Tensor[(1, 1, 240), float32] */;
  %134 = %0.133 /* ty=Tensor[(1, 1, 240), float32] */;
  %135 = %0.134 /* ty=Tensor[(1, 1, 240), float32] */;
  %136 = %0.135 /* ty=Tensor[(1, 1, 240), float32] */;
  %137 = %0.136 /* ty=Tensor[(1, 1, 240), float32] */;
  %138 = %0.137 /* ty=Tensor[(1, 1, 240), float32] */;
  %139 = %0.138 /* ty=Tensor[(1, 1, 240), float32] */;
  %140 = %0.139 /* ty=Tensor[(1, 1, 240), float32] */;
  %141 = %0.140 /* ty=Tensor[(1, 1, 240), float32] */;
  %142 = %0.141 /* ty=Tensor[(1, 1, 240), float32] */;
  %143 = %0.142 /* ty=Tensor[(1, 1, 240), float32] */;
  %144 = %0.143 /* ty=Tensor[(1, 1, 240), float32] */;
  %145 = %0.144 /* ty=Tensor[(1, 1, 240), float32] */;
  %146 = %0.145 /* ty=Tensor[(1, 1, 240), float32] */;
  %147 = %0.146 /* ty=Tensor[(1, 1, 240), float32] */;
  %148 = %0.147 /* ty=Tensor[(1, 1, 240), float32] */;
  %149 = %0.148 /* ty=Tensor[(1, 1, 240), float32] */;
  %150 = %0.149 /* ty=Tensor[(1, 1, 240), float32] */;
  %151 = %0.150 /* ty=Tensor[(1, 1, 240), float32] */;
  %152 = %0.151 /* ty=Tensor[(1, 1, 240), float32] */;
  %153 = %0.152 /* ty=Tensor[(1, 1, 240), float32] */;
  %154 = %0.153 /* ty=Tensor[(1, 1, 240), float32] */;
  %155 = %0.154 /* ty=Tensor[(1, 1, 240), float32] */;
  %156 = %0.155 /* ty=Tensor[(1, 1, 240), float32] */;
  %157 = %0.156 /* ty=Tensor[(1, 1, 240), float32] */;
  %158 = %0.157 /* ty=Tensor[(1, 1, 240), float32] */;
  %159 = %0.158 /* ty=Tensor[(1, 1, 240), float32] */;
  %160 = %0.159 /* ty=Tensor[(1, 1, 240), float32] */;
  %161 = %0.160 /* ty=Tensor[(1, 1, 240), float32] */;
  %162 = %0.161 /* ty=Tensor[(1, 1, 240), float32] */;
  %163 = %0.162 /* ty=Tensor[(1, 1, 240), float32] */;
  %164 = %0.163 /* ty=Tensor[(1, 1, 240), float32] */;
  %165 = %0.164 /* ty=Tensor[(1, 1, 240), float32] */;
  %166 = %0.165 /* ty=Tensor[(1, 1, 240), float32] */;
  %167 = %0.166 /* ty=Tensor[(1, 1, 240), float32] */;
  %168 = %0.167 /* ty=Tensor[(1, 1, 240), float32] */;
  %169 = %0.168 /* ty=Tensor[(1, 1, 240), float32] */;
  %170 = %0.169 /* ty=Tensor[(1, 1, 240), float32] */;
  %171 = %0.170 /* ty=Tensor[(1, 1, 240), float32] */;
  %172 = %0.171 /* ty=Tensor[(1, 1, 240), float32] */;
  %173 = %0.172 /* ty=Tensor[(1, 1, 240), float32] */;
  %174 = %0.173 /* ty=Tensor[(1, 1, 240), float32] */;
  %175 = %0.174 /* ty=Tensor[(1, 1, 240), float32] */;
  %176 = %0.175 /* ty=Tensor[(1, 1, 240), float32] */;
  %177 = %0.176 /* ty=Tensor[(1, 1, 240), float32] */;
  %178 = %0.177 /* ty=Tensor[(1, 1, 240), float32] */;
  %179 = %0.178 /* ty=Tensor[(1, 1, 240), float32] */;
  %180 = %0.179 /* ty=Tensor[(1, 1, 240), float32] */;
  %181 = %0.180 /* ty=Tensor[(1, 1, 240), float32] */;
  %182 = %0.181 /* ty=Tensor[(1, 1, 240), float32] */;
  %183 = %0.182 /* ty=Tensor[(1, 1, 240), float32] */;
  %184 = %0.183 /* ty=Tensor[(1, 1, 240), float32] */;
  %185 = %0.184 /* ty=Tensor[(1, 1, 240), float32] */;
  %186 = %0.185 /* ty=Tensor[(1, 1, 240), float32] */;
  %187 = %0.186 /* ty=Tensor[(1, 1, 240), float32] */;
  %188 = %0.187 /* ty=Tensor[(1, 1, 240), float32] */;
  %189 = %0.188 /* ty=Tensor[(1, 1, 240), float32] */;
  %190 = %0.189 /* ty=Tensor[(1, 1, 240), float32] */;
  %191 = %0.190 /* ty=Tensor[(1, 1, 240), float32] */;
  %192 = %0.191 /* ty=Tensor[(1, 1, 240), float32] */;
  %193 = %0.192 /* ty=Tensor[(1, 1, 240), float32] */;
  %194 = %0.193 /* ty=Tensor[(1, 1, 240), float32] */;
  %195 = %0.194 /* ty=Tensor[(1, 1, 240), float32] */;
  %196 = %0.195 /* ty=Tensor[(1, 1, 240), float32] */;
  %197 = %0.196 /* ty=Tensor[(1, 1, 240), float32] */;
  %198 = %0.197 /* ty=Tensor[(1, 1, 240), float32] */;
  %199 = %0.198 /* ty=Tensor[(1, 1, 240), float32] */;
  %200 = %0.199 /* ty=Tensor[(1, 1, 240), float32] */;
  %201 = %0.200 /* ty=Tensor[(1, 1, 240), float32] */;
  %202 = %0.201 /* ty=Tensor[(1, 1, 240), float32] */;
  %203 = %0.202 /* ty=Tensor[(1, 1, 240), float32] */;
  %204 = %0.203 /* ty=Tensor[(1, 1, 240), float32] */;
  %205 = %0.204 /* ty=Tensor[(1, 1, 240), float32] */;
  %206 = %0.205 /* ty=Tensor[(1, 1, 240), float32] */;
  %207 = %0.206 /* ty=Tensor[(1, 1, 240), float32] */;
  %208 = %0.207 /* ty=Tensor[(1, 1, 240), float32] */;
  %209 = %0.208 /* ty=Tensor[(1, 1, 240), float32] */;
  %210 = %0.209 /* ty=Tensor[(1, 1, 240), float32] */;
  %211 = %0.210 /* ty=Tensor[(1, 1, 240), float32] */;
  %212 = %0.211 /* ty=Tensor[(1, 1, 240), float32] */;
  %213 = %0.212 /* ty=Tensor[(1, 1, 240), float32] */;
  %214 = %0.213 /* ty=Tensor[(1, 1, 240), float32] */;
  %215 = %0.214 /* ty=Tensor[(1, 1, 240), float32] */;
  %216 = %0.215 /* ty=Tensor[(1, 1, 240), float32] */;
  %217 = %0.216 /* ty=Tensor[(1, 1, 240), float32] */;
  %218 = %0.217 /* ty=Tensor[(1, 1, 240), float32] */;
  %219 = %0.218 /* ty=Tensor[(1, 1, 240), float32] */;
  %220 = %0.219 /* ty=Tensor[(1, 1, 240), float32] */;
  %221 = %0.220 /* ty=Tensor[(1, 1, 240), float32] */;
  %222 = %0.221 /* ty=Tensor[(1, 1, 240), float32] */;
  %223 = %0.222 /* ty=Tensor[(1, 1, 240), float32] */;
  %224 = %0.223 /* ty=Tensor[(1, 1, 240), float32] */;
  %225 = %0.224 /* ty=Tensor[(1, 1, 240), float32] */;
  %226 = %0.225 /* ty=Tensor[(1, 1, 240), float32] */;
  %227 = %0.226 /* ty=Tensor[(1, 1, 240), float32] */;
  %228 = %0.227 /* ty=Tensor[(1, 1, 240), float32] */;
  %229 = %0.228 /* ty=Tensor[(1, 1, 240), float32] */;
  %230 = %0.229 /* ty=Tensor[(1, 1, 240), float32] */;
  %231 = %0.230 /* ty=Tensor[(1, 1, 240), float32] */;
  %232 = %0.231 /* ty=Tensor[(1, 1, 240), float32] */;
  %233 = %0.232 /* ty=Tensor[(1, 1, 240), float32] */;
  %234 = %0.233 /* ty=Tensor[(1, 1, 240), float32] */;
  %235 = %0.234 /* ty=Tensor[(1, 1, 240), float32] */;
  %236 = %0.235 /* ty=Tensor[(1, 1, 240), float32] */;
  %237 = %0.236 /* ty=Tensor[(1, 1, 240), float32] */;
  %238 = %0.237 /* ty=Tensor[(1, 1, 240), float32] */;
  %239 = %0.238 /* ty=Tensor[(1, 1, 240), float32] */;
  %240 = %0.239 /* ty=Tensor[(1, 1, 240), float32] */;
  %241 = %0.240 /* ty=Tensor[(1, 1, 240), float32] */;
  %242 = %0.241 /* ty=Tensor[(1, 1, 240), float32] */;
  %243 = %0.242 /* ty=Tensor[(1, 1, 240), float32] */;
  %244 = %0.243 /* ty=Tensor[(1, 1, 240), float32] */;
  %245 = %0.244 /* ty=Tensor[(1, 1, 240), float32] */;
  %246 = %0.245 /* ty=Tensor[(1, 1, 240), float32] */;
  %247 = %0.246 /* ty=Tensor[(1, 1, 240), float32] */;
  %248 = %0.247 /* ty=Tensor[(1, 1, 240), float32] */;
  %249 = %0.248 /* ty=Tensor[(1, 1, 240), float32] */;
  %250 = %0.249 /* ty=Tensor[(1, 1, 240), float32] */;
  %251 = %0.250 /* ty=Tensor[(1, 1, 240), float32] */;
  %252 = %0.251 /* ty=Tensor[(1, 1, 240), float32] */;
  %253 = %0.252 /* ty=Tensor[(1, 1, 240), float32] */;
  %254 = %0.253 /* ty=Tensor[(1, 1, 240), float32] */;
  %255 = %0.254 /* ty=Tensor[(1, 1, 240), float32] */;
  %256 = %0.255 /* ty=Tensor[(1, 1, 240), float32] */;
  %257 = %0.256 /* ty=Tensor[(1, 1, 240), float32] */;
  %258 = %0.257 /* ty=Tensor[(1, 1, 240), float32] */;
  %259 = %0.258 /* ty=Tensor[(1, 1, 240), float32] */;
  %260 = %0.259 /* ty=Tensor[(1, 1, 240), float32] */;
  %261 = %0.260 /* ty=Tensor[(1, 1, 240), float32] */;
  %262 = %0.261 /* ty=Tensor[(1, 1, 240), float32] */;
  %263 = %0.262 /* ty=Tensor[(1, 1, 240), float32] */;
  %264 = %0.263 /* ty=Tensor[(1, 1, 240), float32] */;
  %265 = %0.264 /* ty=Tensor[(1, 1, 240), float32] */;
  %266 = %0.265 /* ty=Tensor[(1, 1, 240), float32] */;
  %267 = %0.266 /* ty=Tensor[(1, 1, 240), float32] */;
  %268 = %0.267 /* ty=Tensor[(1, 1, 240), float32] */;
  %269 = %0.268 /* ty=Tensor[(1, 1, 240), float32] */;
  %270 = %0.269 /* ty=Tensor[(1, 1, 240), float32] */;
  %271 = %0.270 /* ty=Tensor[(1, 1, 240), float32] */;
  %272 = %0.271 /* ty=Tensor[(1, 1, 240), float32] */;
  %273 = %0.272 /* ty=Tensor[(1, 1, 240), float32] */;
  %274 = %0.273 /* ty=Tensor[(1, 1, 240), float32] */;
  %275 = %0.274 /* ty=Tensor[(1, 1, 240), float32] */;
  %276 = %0.275 /* ty=Tensor[(1, 1, 240), float32] */;
  %277 = %0.276 /* ty=Tensor[(1, 1, 240), float32] */;
  %278 = squeeze(%1, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %279 = squeeze(%2, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %280 = squeeze(%3, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %281 = squeeze(%4, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %282 = squeeze(%5, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %283 = squeeze(%6, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %284 = squeeze(%7, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %285 = squeeze(%8, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %286 = squeeze(%9, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %287 = squeeze(%10, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %288 = squeeze(%11, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %289 = squeeze(%12, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %290 = squeeze(%13, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %291 = squeeze(%14, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %292 = squeeze(%15, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %293 = squeeze(%16, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %294 = squeeze(%17, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %295 = squeeze(%18, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %296 = squeeze(%19, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %297 = squeeze(%20, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %298 = squeeze(%21, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %299 = squeeze(%22, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %300 = squeeze(%23, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %301 = squeeze(%24, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %302 = squeeze(%25, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %303 = squeeze(%26, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %304 = squeeze(%27, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %305 = squeeze(%28, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %306 = squeeze(%29, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %307 = squeeze(%30, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %308 = squeeze(%31, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %309 = squeeze(%32, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %310 = squeeze(%33, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %311 = squeeze(%34, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %312 = squeeze(%35, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %313 = squeeze(%36, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %314 = squeeze(%37, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %315 = squeeze(%38, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %316 = squeeze(%39, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %317 = squeeze(%40, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %318 = squeeze(%41, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %319 = squeeze(%42, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %320 = squeeze(%43, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %321 = squeeze(%44, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %322 = squeeze(%45, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %323 = squeeze(%46, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %324 = squeeze(%47, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %325 = squeeze(%48, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %326 = squeeze(%49, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %327 = squeeze(%50, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %328 = squeeze(%51, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %329 = squeeze(%52, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %330 = squeeze(%53, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %331 = squeeze(%54, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %332 = squeeze(%55, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %333 = squeeze(%56, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %334 = squeeze(%57, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %335 = squeeze(%58, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %336 = squeeze(%59, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %337 = squeeze(%60, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %338 = squeeze(%61, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %339 = squeeze(%62, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %340 = squeeze(%63, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %341 = squeeze(%64, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %342 = squeeze(%65, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %343 = squeeze(%66, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %344 = squeeze(%67, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %345 = squeeze(%68, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %346 = squeeze(%69, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %347 = squeeze(%70, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %348 = squeeze(%71, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %349 = squeeze(%72, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %350 = squeeze(%73, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %351 = squeeze(%74, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %352 = squeeze(%75, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %353 = squeeze(%76, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %354 = squeeze(%77, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %355 = squeeze(%78, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %356 = squeeze(%79, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %357 = squeeze(%80, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %358 = squeeze(%81, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %359 = squeeze(%82, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %360 = squeeze(%83, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %361 = squeeze(%84, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %362 = squeeze(%85, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %363 = squeeze(%86, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %364 = squeeze(%87, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %365 = squeeze(%88, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %366 = squeeze(%89, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %367 = squeeze(%90, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %368 = squeeze(%91, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %369 = squeeze(%92, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %370 = squeeze(%93, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %371 = squeeze(%94, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %372 = squeeze(%95, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %373 = squeeze(%96, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %374 = squeeze(%97, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %375 = squeeze(%98, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %376 = squeeze(%99, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %377 = squeeze(%100, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %378 = squeeze(%101, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %379 = squeeze(%102, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %380 = squeeze(%103, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %381 = squeeze(%104, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %382 = squeeze(%105, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %383 = squeeze(%106, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %384 = squeeze(%107, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %385 = squeeze(%108, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %386 = squeeze(%109, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %387 = squeeze(%110, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %388 = squeeze(%111, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %389 = squeeze(%112, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %390 = squeeze(%113, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %391 = squeeze(%114, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %392 = squeeze(%115, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %393 = squeeze(%116, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %394 = squeeze(%117, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %395 = squeeze(%118, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %396 = squeeze(%119, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %397 = squeeze(%120, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %398 = squeeze(%121, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %399 = squeeze(%122, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %400 = squeeze(%123, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %401 = squeeze(%124, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %402 = squeeze(%125, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %403 = squeeze(%126, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %404 = squeeze(%127, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %405 = squeeze(%128, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %406 = squeeze(%129, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %407 = squeeze(%130, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %408 = squeeze(%131, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %409 = squeeze(%132, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %410 = squeeze(%133, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %411 = squeeze(%134, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %412 = squeeze(%135, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %413 = squeeze(%136, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %414 = squeeze(%137, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %415 = squeeze(%138, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %416 = squeeze(%139, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %417 = squeeze(%140, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %418 = squeeze(%141, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %419 = squeeze(%142, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %420 = squeeze(%143, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %421 = squeeze(%144, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %422 = squeeze(%145, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %423 = squeeze(%146, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %424 = squeeze(%147, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %425 = squeeze(%148, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %426 = squeeze(%149, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %427 = squeeze(%150, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %428 = squeeze(%151, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %429 = squeeze(%152, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %430 = squeeze(%153, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %431 = squeeze(%154, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %432 = squeeze(%155, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %433 = squeeze(%156, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %434 = squeeze(%157, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %435 = squeeze(%158, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %436 = squeeze(%159, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %437 = squeeze(%160, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %438 = squeeze(%161, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %439 = squeeze(%162, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %440 = squeeze(%163, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %441 = squeeze(%164, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %442 = squeeze(%165, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %443 = squeeze(%166, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %444 = squeeze(%167, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %445 = squeeze(%168, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %446 = squeeze(%169, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %447 = squeeze(%170, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %448 = squeeze(%171, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %449 = squeeze(%172, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %450 = squeeze(%173, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %451 = squeeze(%174, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %452 = squeeze(%175, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %453 = squeeze(%176, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %454 = squeeze(%177, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %455 = squeeze(%178, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %456 = squeeze(%179, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %457 = squeeze(%180, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %458 = squeeze(%181, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %459 = squeeze(%182, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %460 = squeeze(%183, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %461 = squeeze(%184, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %462 = squeeze(%185, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %463 = squeeze(%186, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %464 = squeeze(%187, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %465 = squeeze(%188, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %466 = squeeze(%189, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %467 = squeeze(%190, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %468 = squeeze(%191, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %469 = squeeze(%192, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %470 = squeeze(%193, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %471 = squeeze(%194, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %472 = squeeze(%195, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %473 = squeeze(%196, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %474 = squeeze(%197, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %475 = squeeze(%198, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %476 = squeeze(%199, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %477 = squeeze(%200, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %478 = squeeze(%201, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %479 = squeeze(%202, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %480 = squeeze(%203, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %481 = squeeze(%204, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %482 = squeeze(%205, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %483 = squeeze(%206, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %484 = squeeze(%207, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %485 = squeeze(%208, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %486 = squeeze(%209, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %487 = squeeze(%210, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %488 = squeeze(%211, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %489 = squeeze(%212, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %490 = squeeze(%213, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %491 = squeeze(%214, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %492 = squeeze(%215, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %493 = squeeze(%216, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %494 = squeeze(%217, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %495 = squeeze(%218, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %496 = squeeze(%219, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %497 = squeeze(%220, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %498 = squeeze(%221, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %499 = squeeze(%222, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %500 = squeeze(%223, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %501 = squeeze(%224, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %502 = squeeze(%225, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %503 = squeeze(%226, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %504 = squeeze(%227, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %505 = squeeze(%228, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %506 = squeeze(%229, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %507 = squeeze(%230, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %508 = squeeze(%231, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %509 = squeeze(%232, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %510 = squeeze(%233, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %511 = squeeze(%234, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %512 = squeeze(%235, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %513 = squeeze(%236, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %514 = squeeze(%237, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %515 = squeeze(%238, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %516 = squeeze(%239, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %517 = squeeze(%240, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %518 = squeeze(%241, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %519 = squeeze(%242, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %520 = squeeze(%243, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %521 = squeeze(%244, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %522 = squeeze(%245, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %523 = squeeze(%246, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %524 = squeeze(%247, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %525 = squeeze(%248, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %526 = squeeze(%249, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %527 = squeeze(%250, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %528 = squeeze(%251, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %529 = squeeze(%252, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %530 = squeeze(%253, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %531 = squeeze(%254, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %532 = squeeze(%255, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %533 = squeeze(%256, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %534 = squeeze(%257, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %535 = squeeze(%258, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %536 = squeeze(%259, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %537 = squeeze(%260, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %538 = squeeze(%261, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %539 = squeeze(%262, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %540 = squeeze(%263, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %541 = squeeze(%264, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %542 = squeeze(%265, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %543 = squeeze(%266, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %544 = squeeze(%267, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %545 = squeeze(%268, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %546 = squeeze(%269, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %547 = squeeze(%270, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %548 = squeeze(%271, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %549 = squeeze(%272, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %550 = squeeze(%273, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %551 = squeeze(%274, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %552 = squeeze(%275, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %553 = squeeze(%276, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
  %554 = squeeze(%277, axis=[0]) /* ty=Tensor[(1, 240), float32] */;
ty=(Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32], Tensor[(1, 240), float32]) */;
  %556 = full(0f /* ty=float32 */, shape=[2, 1, 1024], dtype="float32") /* ty=Tensor[(2, 1, 1024), float32] */;
  %557 = split(%556, indices_or_sections=2) /* ty=(Tensor[(1, 1, 1024), float32], Tensor[(1, 1, 1024), float32]) */;
  %558 = %557.0 /* ty=Tensor[(1, 1, 1024), float32] */;
  %559 = %557.1 /* ty=Tensor[(1, 1, 1024), float32] */;
  %560 = squeeze(%558, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %561 = squeeze(%559, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %562 = (%560, %561) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %563 = %555.0 /* ty=Tensor[(1, 240), float32] */;
  %564 = %562.0 /* ty=Tensor[(1, 1024), float32] */;
  %565 = (%563, %564) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %566 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %567 = concatenate(%565, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %568 = concatenate(%566, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %569 = nn.dense(%567, %568, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %570 = add(%569, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %571 = add(%570, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %572 = split(%571, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %573 = %572.3 /* ty=Tensor[(1, 1024), float32] */;
  %574 = %572.1 /* ty=Tensor[(1, 1024), float32] */;
  %575 = split(%556, indices_or_sections=2) /* ty=(Tensor[(1, 1, 1024), float32], Tensor[(1, 1, 1024), float32]) */;
  %576 = %575.0 /* ty=Tensor[(1, 1, 1024), float32] */;
  %577 = %575.1 /* ty=Tensor[(1, 1, 1024), float32] */;
  %578 = squeeze(%576, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %579 = squeeze(%577, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %580 = (%578, %579) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %581 = sigmoid(%574) /* ty=Tensor[(1, 1024), float32] */;
  %582 = %580.0 /* ty=Tensor[(1, 1024), float32] */;
  %583 = %572.0 /* ty=Tensor[(1, 1024), float32] */;
  %584 = %572.2 /* ty=Tensor[(1, 1024), float32] */;
  %585 = sigmoid(%583) /* ty=Tensor[(1, 1024), float32] */;
  %586 = tanh(%584) /* ty=Tensor[(1, 1024), float32] */;
  %587 = multiply(%581, %582) /* ty=Tensor[(1, 1024), float32] */;
  %588 = multiply(%585, %586) /* ty=Tensor[(1, 1024), float32] */;
  %589 = add(%587, %588) /* ty=Tensor[(1, 1024), float32] */;
  %590 = sigmoid(%573) /* ty=Tensor[(1, 1024), float32] */;
  %591 = tanh(%589) /* ty=Tensor[(1, 1024), float32] */;
  %592 = multiply(%590, %591) /* ty=Tensor[(1, 1024), float32] */;
  %593 = %562.1 /* ty=Tensor[(1, 1024), float32] */;
  %594 = (%592, %593) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %595 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %596 = concatenate(%594, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %597 = concatenate(%595, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %598 = nn.dense(%596, %597, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %599 = add(%598, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %600 = add(%599, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %601 = split(%600, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %602 = %601.3 /* ty=Tensor[(1, 1024), float32] */;
  %603 = %601.1 /* ty=Tensor[(1, 1024), float32] */;
  %604 = sigmoid(%603) /* ty=Tensor[(1, 1024), float32] */;
  %605 = %580.1 /* ty=Tensor[(1, 1024), float32] */;
  %606 = %601.0 /* ty=Tensor[(1, 1024), float32] */;
  %607 = %601.2 /* ty=Tensor[(1, 1024), float32] */;
  %608 = sigmoid(%606) /* ty=Tensor[(1, 1024), float32] */;
  %609 = tanh(%607) /* ty=Tensor[(1, 1024), float32] */;
  %610 = multiply(%604, %605) /* ty=Tensor[(1, 1024), float32] */;
  %611 = multiply(%608, %609) /* ty=Tensor[(1, 1024), float32] */;
  %612 = add(%610, %611) /* ty=Tensor[(1, 1024), float32] */;
  %613 = sigmoid(%602) /* ty=Tensor[(1, 1024), float32] */;
  %614 = tanh(%612) /* ty=Tensor[(1, 1024), float32] */;
  %615 = %555.1 /* ty=Tensor[(1, 240), float32] */;
  %616 = (%615, %592) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %617 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %618 = concatenate(%616, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %619 = concatenate(%617, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %620 = nn.dense(%618, %619, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %621 = add(%620, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %622 = add(%621, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %623 = split(%622, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %624 = %623.3 /* ty=Tensor[(1, 1024), float32] */;
  %625 = %623.1 /* ty=Tensor[(1, 1024), float32] */;
  %626 = sigmoid(%625) /* ty=Tensor[(1, 1024), float32] */;
  %627 = %623.0 /* ty=Tensor[(1, 1024), float32] */;
  %628 = %623.2 /* ty=Tensor[(1, 1024), float32] */;
  %629 = sigmoid(%627) /* ty=Tensor[(1, 1024), float32] */;
  %630 = tanh(%628) /* ty=Tensor[(1, 1024), float32] */;
  %631 = multiply(%626, %589) /* ty=Tensor[(1, 1024), float32] */;
  %632 = multiply(%629, %630) /* ty=Tensor[(1, 1024), float32] */;
  %633 = add(%631, %632) /* ty=Tensor[(1, 1024), float32] */;
  %634 = sigmoid(%624) /* ty=Tensor[(1, 1024), float32] */;
  %635 = tanh(%633) /* ty=Tensor[(1, 1024), float32] */;
  %636 = multiply(%634, %635) /* ty=Tensor[(1, 1024), float32] */;
  %637 = multiply(%613, %614) /* ty=Tensor[(1, 1024), float32] */;
  %638 = (%636, %637) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %639 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %640 = concatenate(%638, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %641 = concatenate(%639, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %642 = nn.dense(%640, %641, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %643 = add(%642, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %644 = add(%643, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %645 = split(%644, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %646 = %645.3 /* ty=Tensor[(1, 1024), float32] */;
  %647 = %645.1 /* ty=Tensor[(1, 1024), float32] */;
  %648 = sigmoid(%647) /* ty=Tensor[(1, 1024), float32] */;
  %649 = %645.0 /* ty=Tensor[(1, 1024), float32] */;
  %650 = %645.2 /* ty=Tensor[(1, 1024), float32] */;
  %651 = sigmoid(%649) /* ty=Tensor[(1, 1024), float32] */;
  %652 = tanh(%650) /* ty=Tensor[(1, 1024), float32] */;
  %653 = multiply(%648, %612) /* ty=Tensor[(1, 1024), float32] */;
  %654 = multiply(%651, %652) /* ty=Tensor[(1, 1024), float32] */;
  %655 = add(%653, %654) /* ty=Tensor[(1, 1024), float32] */;
  %656 = sigmoid(%646) /* ty=Tensor[(1, 1024), float32] */;
  %657 = tanh(%655) /* ty=Tensor[(1, 1024), float32] */;
  %658 = %555.2 /* ty=Tensor[(1, 240), float32] */;
  %659 = (%658, %636) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %660 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %661 = concatenate(%659, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %662 = concatenate(%660, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %663 = nn.dense(%661, %662, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %664 = add(%663, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %665 = add(%664, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %666 = split(%665, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %667 = %666.3 /* ty=Tensor[(1, 1024), float32] */;
  %668 = %666.1 /* ty=Tensor[(1, 1024), float32] */;
  %669 = sigmoid(%668) /* ty=Tensor[(1, 1024), float32] */;
  %670 = %666.0 /* ty=Tensor[(1, 1024), float32] */;
  %671 = %666.2 /* ty=Tensor[(1, 1024), float32] */;
  %672 = sigmoid(%670) /* ty=Tensor[(1, 1024), float32] */;
  %673 = tanh(%671) /* ty=Tensor[(1, 1024), float32] */;
  %674 = multiply(%669, %633) /* ty=Tensor[(1, 1024), float32] */;
  %675 = multiply(%672, %673) /* ty=Tensor[(1, 1024), float32] */;
  %676 = add(%674, %675) /* ty=Tensor[(1, 1024), float32] */;
  %677 = sigmoid(%667) /* ty=Tensor[(1, 1024), float32] */;
  %678 = tanh(%676) /* ty=Tensor[(1, 1024), float32] */;
  %679 = multiply(%677, %678) /* ty=Tensor[(1, 1024), float32] */;
  %680 = multiply(%656, %657) /* ty=Tensor[(1, 1024), float32] */;
  %681 = (%679, %680) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %682 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %683 = concatenate(%681, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %684 = concatenate(%682, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %685 = nn.dense(%683, %684, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %686 = add(%685, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %687 = add(%686, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %688 = split(%687, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %689 = %688.3 /* ty=Tensor[(1, 1024), float32] */;
  %690 = %688.1 /* ty=Tensor[(1, 1024), float32] */;
  %691 = sigmoid(%690) /* ty=Tensor[(1, 1024), float32] */;
  %692 = %688.0 /* ty=Tensor[(1, 1024), float32] */;
  %693 = %688.2 /* ty=Tensor[(1, 1024), float32] */;
  %694 = sigmoid(%692) /* ty=Tensor[(1, 1024), float32] */;
  %695 = tanh(%693) /* ty=Tensor[(1, 1024), float32] */;
  %696 = multiply(%691, %655) /* ty=Tensor[(1, 1024), float32] */;
  %697 = multiply(%694, %695) /* ty=Tensor[(1, 1024), float32] */;
  %698 = add(%696, %697) /* ty=Tensor[(1, 1024), float32] */;
  %699 = sigmoid(%689) /* ty=Tensor[(1, 1024), float32] */;
  %700 = tanh(%698) /* ty=Tensor[(1, 1024), float32] */;
  %701 = %555.3 /* ty=Tensor[(1, 240), float32] */;
  %702 = (%701, %679) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %703 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %704 = concatenate(%702, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %705 = concatenate(%703, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %706 = nn.dense(%704, %705, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %707 = add(%706, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %708 = add(%707, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %709 = split(%708, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %710 = %709.3 /* ty=Tensor[(1, 1024), float32] */;
  %711 = %709.1 /* ty=Tensor[(1, 1024), float32] */;
  %712 = sigmoid(%711) /* ty=Tensor[(1, 1024), float32] */;
  %713 = %709.0 /* ty=Tensor[(1, 1024), float32] */;
  %714 = %709.2 /* ty=Tensor[(1, 1024), float32] */;
  %715 = sigmoid(%713) /* ty=Tensor[(1, 1024), float32] */;
  %716 = tanh(%714) /* ty=Tensor[(1, 1024), float32] */;
  %717 = multiply(%712, %676) /* ty=Tensor[(1, 1024), float32] */;
  %718 = multiply(%715, %716) /* ty=Tensor[(1, 1024), float32] */;
  %719 = add(%717, %718) /* ty=Tensor[(1, 1024), float32] */;
  %720 = sigmoid(%710) /* ty=Tensor[(1, 1024), float32] */;
  %721 = tanh(%719) /* ty=Tensor[(1, 1024), float32] */;
  %722 = multiply(%720, %721) /* ty=Tensor[(1, 1024), float32] */;
  %723 = multiply(%699, %700) /* ty=Tensor[(1, 1024), float32] */;
  %724 = (%722, %723) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %725 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %726 = concatenate(%724, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %727 = concatenate(%725, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %728 = nn.dense(%726, %727, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %729 = add(%728, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %730 = add(%729, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %731 = split(%730, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %732 = %731.3 /* ty=Tensor[(1, 1024), float32] */;
  %733 = %731.1 /* ty=Tensor[(1, 1024), float32] */;
  %734 = sigmoid(%733) /* ty=Tensor[(1, 1024), float32] */;
  %735 = %731.0 /* ty=Tensor[(1, 1024), float32] */;
  %736 = %731.2 /* ty=Tensor[(1, 1024), float32] */;
  %737 = sigmoid(%735) /* ty=Tensor[(1, 1024), float32] */;
  %738 = tanh(%736) /* ty=Tensor[(1, 1024), float32] */;
  %739 = multiply(%734, %698) /* ty=Tensor[(1, 1024), float32] */;
  %740 = multiply(%737, %738) /* ty=Tensor[(1, 1024), float32] */;
  %741 = add(%739, %740) /* ty=Tensor[(1, 1024), float32] */;
  %742 = sigmoid(%732) /* ty=Tensor[(1, 1024), float32] */;
  %743 = tanh(%741) /* ty=Tensor[(1, 1024), float32] */;
  %744 = %555.4 /* ty=Tensor[(1, 240), float32] */;
  %745 = (%744, %722) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %746 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %747 = concatenate(%745, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %748 = concatenate(%746, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %749 = nn.dense(%747, %748, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %750 = add(%749, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %751 = add(%750, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %752 = split(%751, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %753 = %752.3 /* ty=Tensor[(1, 1024), float32] */;
  %754 = %752.1 /* ty=Tensor[(1, 1024), float32] */;
  %755 = sigmoid(%754) /* ty=Tensor[(1, 1024), float32] */;
  %756 = %752.0 /* ty=Tensor[(1, 1024), float32] */;
  %757 = %752.2 /* ty=Tensor[(1, 1024), float32] */;
  %758 = sigmoid(%756) /* ty=Tensor[(1, 1024), float32] */;
  %759 = tanh(%757) /* ty=Tensor[(1, 1024), float32] */;
  %760 = multiply(%755, %719) /* ty=Tensor[(1, 1024), float32] */;
  %761 = multiply(%758, %759) /* ty=Tensor[(1, 1024), float32] */;
  %762 = add(%760, %761) /* ty=Tensor[(1, 1024), float32] */;
  %763 = sigmoid(%753) /* ty=Tensor[(1, 1024), float32] */;
  %764 = tanh(%762) /* ty=Tensor[(1, 1024), float32] */;
  %765 = multiply(%763, %764) /* ty=Tensor[(1, 1024), float32] */;
  %766 = multiply(%742, %743) /* ty=Tensor[(1, 1024), float32] */;
  %767 = (%765, %766) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %768 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %769 = concatenate(%767, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %770 = concatenate(%768, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %771 = nn.dense(%769, %770, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %772 = add(%771, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %773 = add(%772, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %774 = split(%773, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %775 = %774.3 /* ty=Tensor[(1, 1024), float32] */;
  %776 = %774.1 /* ty=Tensor[(1, 1024), float32] */;
  %777 = sigmoid(%776) /* ty=Tensor[(1, 1024), float32] */;
  %778 = %774.0 /* ty=Tensor[(1, 1024), float32] */;
  %779 = %774.2 /* ty=Tensor[(1, 1024), float32] */;
  %780 = sigmoid(%778) /* ty=Tensor[(1, 1024), float32] */;
  %781 = tanh(%779) /* ty=Tensor[(1, 1024), float32] */;
  %782 = multiply(%777, %741) /* ty=Tensor[(1, 1024), float32] */;
  %783 = multiply(%780, %781) /* ty=Tensor[(1, 1024), float32] */;
  %784 = add(%782, %783) /* ty=Tensor[(1, 1024), float32] */;
  %785 = sigmoid(%775) /* ty=Tensor[(1, 1024), float32] */;
  %786 = tanh(%784) /* ty=Tensor[(1, 1024), float32] */;
  %787 = %555.5 /* ty=Tensor[(1, 240), float32] */;
  %788 = (%787, %765) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %789 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %790 = concatenate(%788, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %791 = concatenate(%789, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %792 = nn.dense(%790, %791, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %793 = add(%792, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %794 = add(%793, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %795 = split(%794, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %796 = %795.3 /* ty=Tensor[(1, 1024), float32] */;
  %797 = %795.1 /* ty=Tensor[(1, 1024), float32] */;
  %798 = sigmoid(%797) /* ty=Tensor[(1, 1024), float32] */;
  %799 = %795.0 /* ty=Tensor[(1, 1024), float32] */;
  %800 = %795.2 /* ty=Tensor[(1, 1024), float32] */;
  %801 = sigmoid(%799) /* ty=Tensor[(1, 1024), float32] */;
  %802 = tanh(%800) /* ty=Tensor[(1, 1024), float32] */;
  %803 = multiply(%798, %762) /* ty=Tensor[(1, 1024), float32] */;
  %804 = multiply(%801, %802) /* ty=Tensor[(1, 1024), float32] */;
  %805 = add(%803, %804) /* ty=Tensor[(1, 1024), float32] */;
  %806 = sigmoid(%796) /* ty=Tensor[(1, 1024), float32] */;
  %807 = tanh(%805) /* ty=Tensor[(1, 1024), float32] */;
  %808 = multiply(%806, %807) /* ty=Tensor[(1, 1024), float32] */;
  %809 = multiply(%785, %786) /* ty=Tensor[(1, 1024), float32] */;
  %810 = (%808, %809) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %811 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %812 = concatenate(%810, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %813 = concatenate(%811, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %814 = nn.dense(%812, %813, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %815 = add(%814, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %816 = add(%815, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %817 = split(%816, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %818 = %817.3 /* ty=Tensor[(1, 1024), float32] */;
  %819 = %817.1 /* ty=Tensor[(1, 1024), float32] */;
  %820 = sigmoid(%819) /* ty=Tensor[(1, 1024), float32] */;
  %821 = %817.0 /* ty=Tensor[(1, 1024), float32] */;
  %822 = %817.2 /* ty=Tensor[(1, 1024), float32] */;
  %823 = sigmoid(%821) /* ty=Tensor[(1, 1024), float32] */;
  %824 = tanh(%822) /* ty=Tensor[(1, 1024), float32] */;
  %825 = multiply(%820, %784) /* ty=Tensor[(1, 1024), float32] */;
  %826 = multiply(%823, %824) /* ty=Tensor[(1, 1024), float32] */;
  %827 = add(%825, %826) /* ty=Tensor[(1, 1024), float32] */;
  %828 = sigmoid(%818) /* ty=Tensor[(1, 1024), float32] */;
  %829 = tanh(%827) /* ty=Tensor[(1, 1024), float32] */;
  %830 = %555.6 /* ty=Tensor[(1, 240), float32] */;
  %831 = (%830, %808) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %832 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %833 = concatenate(%831, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %834 = concatenate(%832, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %835 = nn.dense(%833, %834, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %836 = add(%835, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %837 = add(%836, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %838 = split(%837, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %839 = %838.3 /* ty=Tensor[(1, 1024), float32] */;
  %840 = %838.1 /* ty=Tensor[(1, 1024), float32] */;
  %841 = sigmoid(%840) /* ty=Tensor[(1, 1024), float32] */;
  %842 = %838.0 /* ty=Tensor[(1, 1024), float32] */;
  %843 = %838.2 /* ty=Tensor[(1, 1024), float32] */;
  %844 = sigmoid(%842) /* ty=Tensor[(1, 1024), float32] */;
  %845 = tanh(%843) /* ty=Tensor[(1, 1024), float32] */;
  %846 = multiply(%841, %805) /* ty=Tensor[(1, 1024), float32] */;
  %847 = multiply(%844, %845) /* ty=Tensor[(1, 1024), float32] */;
  %848 = add(%846, %847) /* ty=Tensor[(1, 1024), float32] */;
  %849 = sigmoid(%839) /* ty=Tensor[(1, 1024), float32] */;
  %850 = tanh(%848) /* ty=Tensor[(1, 1024), float32] */;
  %851 = multiply(%849, %850) /* ty=Tensor[(1, 1024), float32] */;
  %852 = multiply(%828, %829) /* ty=Tensor[(1, 1024), float32] */;
  %853 = (%851, %852) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %854 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %855 = concatenate(%853, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %856 = concatenate(%854, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %857 = nn.dense(%855, %856, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %858 = add(%857, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %859 = add(%858, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %860 = split(%859, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %861 = %860.3 /* ty=Tensor[(1, 1024), float32] */;
  %862 = %860.1 /* ty=Tensor[(1, 1024), float32] */;
  %863 = sigmoid(%862) /* ty=Tensor[(1, 1024), float32] */;
  %864 = %860.0 /* ty=Tensor[(1, 1024), float32] */;
  %865 = %860.2 /* ty=Tensor[(1, 1024), float32] */;
  %866 = sigmoid(%864) /* ty=Tensor[(1, 1024), float32] */;
  %867 = tanh(%865) /* ty=Tensor[(1, 1024), float32] */;
  %868 = multiply(%863, %827) /* ty=Tensor[(1, 1024), float32] */;
  %869 = multiply(%866, %867) /* ty=Tensor[(1, 1024), float32] */;
  %870 = add(%868, %869) /* ty=Tensor[(1, 1024), float32] */;
  %871 = sigmoid(%861) /* ty=Tensor[(1, 1024), float32] */;
  %872 = tanh(%870) /* ty=Tensor[(1, 1024), float32] */;
  %873 = %555.7 /* ty=Tensor[(1, 240), float32] */;
  %874 = (%873, %851) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %875 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %876 = concatenate(%874, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %877 = concatenate(%875, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %878 = nn.dense(%876, %877, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %879 = add(%878, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %880 = add(%879, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %881 = split(%880, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %882 = %881.3 /* ty=Tensor[(1, 1024), float32] */;
  %883 = %881.1 /* ty=Tensor[(1, 1024), float32] */;
  %884 = sigmoid(%883) /* ty=Tensor[(1, 1024), float32] */;
  %885 = %881.0 /* ty=Tensor[(1, 1024), float32] */;
  %886 = %881.2 /* ty=Tensor[(1, 1024), float32] */;
  %887 = sigmoid(%885) /* ty=Tensor[(1, 1024), float32] */;
  %888 = tanh(%886) /* ty=Tensor[(1, 1024), float32] */;
  %889 = multiply(%884, %848) /* ty=Tensor[(1, 1024), float32] */;
  %890 = multiply(%887, %888) /* ty=Tensor[(1, 1024), float32] */;
  %891 = add(%889, %890) /* ty=Tensor[(1, 1024), float32] */;
  %892 = sigmoid(%882) /* ty=Tensor[(1, 1024), float32] */;
  %893 = tanh(%891) /* ty=Tensor[(1, 1024), float32] */;
  %894 = multiply(%892, %893) /* ty=Tensor[(1, 1024), float32] */;
  %895 = multiply(%871, %872) /* ty=Tensor[(1, 1024), float32] */;
  %896 = (%894, %895) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %897 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %898 = concatenate(%896, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %899 = concatenate(%897, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %900 = nn.dense(%898, %899, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %901 = add(%900, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %902 = add(%901, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %903 = split(%902, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %904 = %903.3 /* ty=Tensor[(1, 1024), float32] */;
  %905 = %903.1 /* ty=Tensor[(1, 1024), float32] */;
  %906 = sigmoid(%905) /* ty=Tensor[(1, 1024), float32] */;
  %907 = %903.0 /* ty=Tensor[(1, 1024), float32] */;
  %908 = %903.2 /* ty=Tensor[(1, 1024), float32] */;
  %909 = sigmoid(%907) /* ty=Tensor[(1, 1024), float32] */;
  %910 = tanh(%908) /* ty=Tensor[(1, 1024), float32] */;
  %911 = multiply(%906, %870) /* ty=Tensor[(1, 1024), float32] */;
  %912 = multiply(%909, %910) /* ty=Tensor[(1, 1024), float32] */;
  %913 = add(%911, %912) /* ty=Tensor[(1, 1024), float32] */;
  %914 = sigmoid(%904) /* ty=Tensor[(1, 1024), float32] */;
  %915 = tanh(%913) /* ty=Tensor[(1, 1024), float32] */;
  %916 = %555.8 /* ty=Tensor[(1, 240), float32] */;
  %917 = (%916, %894) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %918 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %919 = concatenate(%917, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %920 = concatenate(%918, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %921 = nn.dense(%919, %920, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %922 = add(%921, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %923 = add(%922, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %924 = split(%923, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %925 = %924.3 /* ty=Tensor[(1, 1024), float32] */;
  %926 = %924.1 /* ty=Tensor[(1, 1024), float32] */;
  %927 = sigmoid(%926) /* ty=Tensor[(1, 1024), float32] */;
  %928 = %924.0 /* ty=Tensor[(1, 1024), float32] */;
  %929 = %924.2 /* ty=Tensor[(1, 1024), float32] */;
  %930 = sigmoid(%928) /* ty=Tensor[(1, 1024), float32] */;
  %931 = tanh(%929) /* ty=Tensor[(1, 1024), float32] */;
  %932 = multiply(%927, %891) /* ty=Tensor[(1, 1024), float32] */;
  %933 = multiply(%930, %931) /* ty=Tensor[(1, 1024), float32] */;
  %934 = add(%932, %933) /* ty=Tensor[(1, 1024), float32] */;
  %935 = sigmoid(%925) /* ty=Tensor[(1, 1024), float32] */;
  %936 = tanh(%934) /* ty=Tensor[(1, 1024), float32] */;
  %937 = multiply(%935, %936) /* ty=Tensor[(1, 1024), float32] */;
  %938 = multiply(%914, %915) /* ty=Tensor[(1, 1024), float32] */;
  %939 = (%937, %938) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %940 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %941 = concatenate(%939, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %942 = concatenate(%940, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %943 = nn.dense(%941, %942, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %944 = add(%943, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %945 = add(%944, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %946 = split(%945, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %947 = %946.3 /* ty=Tensor[(1, 1024), float32] */;
  %948 = %946.1 /* ty=Tensor[(1, 1024), float32] */;
  %949 = sigmoid(%948) /* ty=Tensor[(1, 1024), float32] */;
  %950 = %946.0 /* ty=Tensor[(1, 1024), float32] */;
  %951 = %946.2 /* ty=Tensor[(1, 1024), float32] */;
  %952 = sigmoid(%950) /* ty=Tensor[(1, 1024), float32] */;
  %953 = tanh(%951) /* ty=Tensor[(1, 1024), float32] */;
  %954 = multiply(%949, %913) /* ty=Tensor[(1, 1024), float32] */;
  %955 = multiply(%952, %953) /* ty=Tensor[(1, 1024), float32] */;
  %956 = add(%954, %955) /* ty=Tensor[(1, 1024), float32] */;
  %957 = sigmoid(%947) /* ty=Tensor[(1, 1024), float32] */;
  %958 = tanh(%956) /* ty=Tensor[(1, 1024), float32] */;
  %959 = %555.9 /* ty=Tensor[(1, 240), float32] */;
  %960 = (%959, %937) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %961 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %962 = concatenate(%960, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %963 = concatenate(%961, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %964 = nn.dense(%962, %963, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %965 = add(%964, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %966 = add(%965, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %967 = split(%966, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %968 = %967.3 /* ty=Tensor[(1, 1024), float32] */;
  %969 = %967.1 /* ty=Tensor[(1, 1024), float32] */;
  %970 = sigmoid(%969) /* ty=Tensor[(1, 1024), float32] */;
  %971 = %967.0 /* ty=Tensor[(1, 1024), float32] */;
  %972 = %967.2 /* ty=Tensor[(1, 1024), float32] */;
  %973 = sigmoid(%971) /* ty=Tensor[(1, 1024), float32] */;
  %974 = tanh(%972) /* ty=Tensor[(1, 1024), float32] */;
  %975 = multiply(%970, %934) /* ty=Tensor[(1, 1024), float32] */;
  %976 = multiply(%973, %974) /* ty=Tensor[(1, 1024), float32] */;
  %977 = add(%975, %976) /* ty=Tensor[(1, 1024), float32] */;
  %978 = sigmoid(%968) /* ty=Tensor[(1, 1024), float32] */;
  %979 = tanh(%977) /* ty=Tensor[(1, 1024), float32] */;
  %980 = multiply(%978, %979) /* ty=Tensor[(1, 1024), float32] */;
  %981 = multiply(%957, %958) /* ty=Tensor[(1, 1024), float32] */;
  %982 = (%980, %981) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %983 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %984 = concatenate(%982, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %985 = concatenate(%983, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %986 = nn.dense(%984, %985, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %987 = add(%986, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %988 = add(%987, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %989 = split(%988, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %990 = %989.3 /* ty=Tensor[(1, 1024), float32] */;
  %991 = %989.1 /* ty=Tensor[(1, 1024), float32] */;
  %992 = sigmoid(%991) /* ty=Tensor[(1, 1024), float32] */;
  %993 = %989.0 /* ty=Tensor[(1, 1024), float32] */;
  %994 = %989.2 /* ty=Tensor[(1, 1024), float32] */;
  %995 = sigmoid(%993) /* ty=Tensor[(1, 1024), float32] */;
  %996 = tanh(%994) /* ty=Tensor[(1, 1024), float32] */;
  %997 = multiply(%992, %956) /* ty=Tensor[(1, 1024), float32] */;
  %998 = multiply(%995, %996) /* ty=Tensor[(1, 1024), float32] */;
  %999 = add(%997, %998) /* ty=Tensor[(1, 1024), float32] */;
  %1000 = sigmoid(%990) /* ty=Tensor[(1, 1024), float32] */;
  %1001 = tanh(%999) /* ty=Tensor[(1, 1024), float32] */;
  %1002 = %555.10 /* ty=Tensor[(1, 240), float32] */;
  %1003 = (%1002, %980) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1004 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1005 = concatenate(%1003, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1006 = concatenate(%1004, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1007 = nn.dense(%1005, %1006, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1008 = add(%1007, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1009 = add(%1008, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1010 = split(%1009, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1011 = %1010.3 /* ty=Tensor[(1, 1024), float32] */;
  %1012 = %1010.1 /* ty=Tensor[(1, 1024), float32] */;
  %1013 = sigmoid(%1012) /* ty=Tensor[(1, 1024), float32] */;
  %1014 = %1010.0 /* ty=Tensor[(1, 1024), float32] */;
  %1015 = %1010.2 /* ty=Tensor[(1, 1024), float32] */;
  %1016 = sigmoid(%1014) /* ty=Tensor[(1, 1024), float32] */;
  %1017 = tanh(%1015) /* ty=Tensor[(1, 1024), float32] */;
  %1018 = multiply(%1013, %977) /* ty=Tensor[(1, 1024), float32] */;
  %1019 = multiply(%1016, %1017) /* ty=Tensor[(1, 1024), float32] */;
  %1020 = add(%1018, %1019) /* ty=Tensor[(1, 1024), float32] */;
  %1021 = sigmoid(%1011) /* ty=Tensor[(1, 1024), float32] */;
  %1022 = tanh(%1020) /* ty=Tensor[(1, 1024), float32] */;
  %1023 = multiply(%1021, %1022) /* ty=Tensor[(1, 1024), float32] */;
  %1024 = multiply(%1000, %1001) /* ty=Tensor[(1, 1024), float32] */;
  %1025 = (%1023, %1024) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1026 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1027 = concatenate(%1025, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1028 = concatenate(%1026, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1029 = nn.dense(%1027, %1028, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1030 = add(%1029, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1031 = add(%1030, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1032 = split(%1031, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1033 = %1032.3 /* ty=Tensor[(1, 1024), float32] */;
  %1034 = %1032.1 /* ty=Tensor[(1, 1024), float32] */;
  %1035 = sigmoid(%1034) /* ty=Tensor[(1, 1024), float32] */;
  %1036 = %1032.0 /* ty=Tensor[(1, 1024), float32] */;
  %1037 = %1032.2 /* ty=Tensor[(1, 1024), float32] */;
  %1038 = sigmoid(%1036) /* ty=Tensor[(1, 1024), float32] */;
  %1039 = tanh(%1037) /* ty=Tensor[(1, 1024), float32] */;
  %1040 = multiply(%1035, %999) /* ty=Tensor[(1, 1024), float32] */;
  %1041 = multiply(%1038, %1039) /* ty=Tensor[(1, 1024), float32] */;
  %1042 = add(%1040, %1041) /* ty=Tensor[(1, 1024), float32] */;
  %1043 = sigmoid(%1033) /* ty=Tensor[(1, 1024), float32] */;
  %1044 = tanh(%1042) /* ty=Tensor[(1, 1024), float32] */;
  %1045 = %555.11 /* ty=Tensor[(1, 240), float32] */;
  %1046 = (%1045, %1023) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1047 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1048 = concatenate(%1046, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1049 = concatenate(%1047, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1050 = nn.dense(%1048, %1049, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1051 = add(%1050, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1052 = add(%1051, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1053 = split(%1052, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1054 = %1053.3 /* ty=Tensor[(1, 1024), float32] */;
  %1055 = %1053.1 /* ty=Tensor[(1, 1024), float32] */;
  %1056 = sigmoid(%1055) /* ty=Tensor[(1, 1024), float32] */;
  %1057 = %1053.0 /* ty=Tensor[(1, 1024), float32] */;
  %1058 = %1053.2 /* ty=Tensor[(1, 1024), float32] */;
  %1059 = sigmoid(%1057) /* ty=Tensor[(1, 1024), float32] */;
  %1060 = tanh(%1058) /* ty=Tensor[(1, 1024), float32] */;
  %1061 = multiply(%1056, %1020) /* ty=Tensor[(1, 1024), float32] */;
  %1062 = multiply(%1059, %1060) /* ty=Tensor[(1, 1024), float32] */;
  %1063 = add(%1061, %1062) /* ty=Tensor[(1, 1024), float32] */;
  %1064 = sigmoid(%1054) /* ty=Tensor[(1, 1024), float32] */;
  %1065 = tanh(%1063) /* ty=Tensor[(1, 1024), float32] */;
  %1066 = multiply(%1064, %1065) /* ty=Tensor[(1, 1024), float32] */;
  %1067 = multiply(%1043, %1044) /* ty=Tensor[(1, 1024), float32] */;
  %1068 = (%1066, %1067) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1069 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1070 = concatenate(%1068, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1071 = concatenate(%1069, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1072 = nn.dense(%1070, %1071, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1073 = add(%1072, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1074 = add(%1073, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1075 = split(%1074, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1076 = %1075.3 /* ty=Tensor[(1, 1024), float32] */;
  %1077 = %1075.1 /* ty=Tensor[(1, 1024), float32] */;
  %1078 = sigmoid(%1077) /* ty=Tensor[(1, 1024), float32] */;
  %1079 = %1075.0 /* ty=Tensor[(1, 1024), float32] */;
  %1080 = %1075.2 /* ty=Tensor[(1, 1024), float32] */;
  %1081 = sigmoid(%1079) /* ty=Tensor[(1, 1024), float32] */;
  %1082 = tanh(%1080) /* ty=Tensor[(1, 1024), float32] */;
  %1083 = multiply(%1078, %1042) /* ty=Tensor[(1, 1024), float32] */;
  %1084 = multiply(%1081, %1082) /* ty=Tensor[(1, 1024), float32] */;
  %1085 = add(%1083, %1084) /* ty=Tensor[(1, 1024), float32] */;
  %1086 = sigmoid(%1076) /* ty=Tensor[(1, 1024), float32] */;
  %1087 = tanh(%1085) /* ty=Tensor[(1, 1024), float32] */;
  %1088 = %555.12 /* ty=Tensor[(1, 240), float32] */;
  %1089 = (%1088, %1066) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1090 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1091 = concatenate(%1089, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1092 = concatenate(%1090, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1093 = nn.dense(%1091, %1092, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1094 = add(%1093, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1095 = add(%1094, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1096 = split(%1095, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1097 = %1096.3 /* ty=Tensor[(1, 1024), float32] */;
  %1098 = %1096.1 /* ty=Tensor[(1, 1024), float32] */;
  %1099 = sigmoid(%1098) /* ty=Tensor[(1, 1024), float32] */;
  %1100 = %1096.0 /* ty=Tensor[(1, 1024), float32] */;
  %1101 = %1096.2 /* ty=Tensor[(1, 1024), float32] */;
  %1102 = sigmoid(%1100) /* ty=Tensor[(1, 1024), float32] */;
  %1103 = tanh(%1101) /* ty=Tensor[(1, 1024), float32] */;
  %1104 = multiply(%1099, %1063) /* ty=Tensor[(1, 1024), float32] */;
  %1105 = multiply(%1102, %1103) /* ty=Tensor[(1, 1024), float32] */;
  %1106 = add(%1104, %1105) /* ty=Tensor[(1, 1024), float32] */;
  %1107 = sigmoid(%1097) /* ty=Tensor[(1, 1024), float32] */;
  %1108 = tanh(%1106) /* ty=Tensor[(1, 1024), float32] */;
  %1109 = multiply(%1107, %1108) /* ty=Tensor[(1, 1024), float32] */;
  %1110 = multiply(%1086, %1087) /* ty=Tensor[(1, 1024), float32] */;
  %1111 = (%1109, %1110) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1112 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1113 = concatenate(%1111, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1114 = concatenate(%1112, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1115 = nn.dense(%1113, %1114, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1116 = add(%1115, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1117 = add(%1116, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1118 = split(%1117, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1119 = %1118.3 /* ty=Tensor[(1, 1024), float32] */;
  %1120 = %1118.1 /* ty=Tensor[(1, 1024), float32] */;
  %1121 = sigmoid(%1120) /* ty=Tensor[(1, 1024), float32] */;
  %1122 = %1118.0 /* ty=Tensor[(1, 1024), float32] */;
  %1123 = %1118.2 /* ty=Tensor[(1, 1024), float32] */;
  %1124 = sigmoid(%1122) /* ty=Tensor[(1, 1024), float32] */;
  %1125 = tanh(%1123) /* ty=Tensor[(1, 1024), float32] */;
  %1126 = multiply(%1121, %1085) /* ty=Tensor[(1, 1024), float32] */;
  %1127 = multiply(%1124, %1125) /* ty=Tensor[(1, 1024), float32] */;
  %1128 = add(%1126, %1127) /* ty=Tensor[(1, 1024), float32] */;
  %1129 = sigmoid(%1119) /* ty=Tensor[(1, 1024), float32] */;
  %1130 = tanh(%1128) /* ty=Tensor[(1, 1024), float32] */;
  %1131 = %555.13 /* ty=Tensor[(1, 240), float32] */;
  %1132 = (%1131, %1109) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1133 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1134 = concatenate(%1132, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1135 = concatenate(%1133, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1136 = nn.dense(%1134, %1135, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1137 = add(%1136, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1138 = add(%1137, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1139 = split(%1138, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1140 = %1139.3 /* ty=Tensor[(1, 1024), float32] */;
  %1141 = %1139.1 /* ty=Tensor[(1, 1024), float32] */;
  %1142 = sigmoid(%1141) /* ty=Tensor[(1, 1024), float32] */;
  %1143 = %1139.0 /* ty=Tensor[(1, 1024), float32] */;
  %1144 = %1139.2 /* ty=Tensor[(1, 1024), float32] */;
  %1145 = sigmoid(%1143) /* ty=Tensor[(1, 1024), float32] */;
  %1146 = tanh(%1144) /* ty=Tensor[(1, 1024), float32] */;
  %1147 = multiply(%1142, %1106) /* ty=Tensor[(1, 1024), float32] */;
  %1148 = multiply(%1145, %1146) /* ty=Tensor[(1, 1024), float32] */;
  %1149 = add(%1147, %1148) /* ty=Tensor[(1, 1024), float32] */;
  %1150 = sigmoid(%1140) /* ty=Tensor[(1, 1024), float32] */;
  %1151 = tanh(%1149) /* ty=Tensor[(1, 1024), float32] */;
  %1152 = multiply(%1150, %1151) /* ty=Tensor[(1, 1024), float32] */;
  %1153 = multiply(%1129, %1130) /* ty=Tensor[(1, 1024), float32] */;
  %1154 = (%1152, %1153) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1155 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1156 = concatenate(%1154, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1157 = concatenate(%1155, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1158 = nn.dense(%1156, %1157, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1159 = add(%1158, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1160 = add(%1159, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1161 = split(%1160, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1162 = %1161.3 /* ty=Tensor[(1, 1024), float32] */;
  %1163 = %1161.1 /* ty=Tensor[(1, 1024), float32] */;
  %1164 = sigmoid(%1163) /* ty=Tensor[(1, 1024), float32] */;
  %1165 = %1161.0 /* ty=Tensor[(1, 1024), float32] */;
  %1166 = %1161.2 /* ty=Tensor[(1, 1024), float32] */;
  %1167 = sigmoid(%1165) /* ty=Tensor[(1, 1024), float32] */;
  %1168 = tanh(%1166) /* ty=Tensor[(1, 1024), float32] */;
  %1169 = multiply(%1164, %1128) /* ty=Tensor[(1, 1024), float32] */;
  %1170 = multiply(%1167, %1168) /* ty=Tensor[(1, 1024), float32] */;
  %1171 = add(%1169, %1170) /* ty=Tensor[(1, 1024), float32] */;
  %1172 = sigmoid(%1162) /* ty=Tensor[(1, 1024), float32] */;
  %1173 = tanh(%1171) /* ty=Tensor[(1, 1024), float32] */;
  %1174 = %555.14 /* ty=Tensor[(1, 240), float32] */;
  %1175 = (%1174, %1152) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1176 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1177 = concatenate(%1175, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1178 = concatenate(%1176, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1179 = nn.dense(%1177, %1178, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1180 = add(%1179, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1181 = add(%1180, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1182 = split(%1181, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1183 = %1182.3 /* ty=Tensor[(1, 1024), float32] */;
  %1184 = %1182.1 /* ty=Tensor[(1, 1024), float32] */;
  %1185 = sigmoid(%1184) /* ty=Tensor[(1, 1024), float32] */;
  %1186 = %1182.0 /* ty=Tensor[(1, 1024), float32] */;
  %1187 = %1182.2 /* ty=Tensor[(1, 1024), float32] */;
  %1188 = sigmoid(%1186) /* ty=Tensor[(1, 1024), float32] */;
  %1189 = tanh(%1187) /* ty=Tensor[(1, 1024), float32] */;
  %1190 = multiply(%1185, %1149) /* ty=Tensor[(1, 1024), float32] */;
  %1191 = multiply(%1188, %1189) /* ty=Tensor[(1, 1024), float32] */;
  %1192 = add(%1190, %1191) /* ty=Tensor[(1, 1024), float32] */;
  %1193 = sigmoid(%1183) /* ty=Tensor[(1, 1024), float32] */;
  %1194 = tanh(%1192) /* ty=Tensor[(1, 1024), float32] */;
  %1195 = multiply(%1193, %1194) /* ty=Tensor[(1, 1024), float32] */;
  %1196 = multiply(%1172, %1173) /* ty=Tensor[(1, 1024), float32] */;
  %1197 = (%1195, %1196) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1198 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1199 = concatenate(%1197, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1200 = concatenate(%1198, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1201 = nn.dense(%1199, %1200, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1202 = add(%1201, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1203 = add(%1202, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1204 = split(%1203, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1205 = %1204.3 /* ty=Tensor[(1, 1024), float32] */;
  %1206 = %1204.1 /* ty=Tensor[(1, 1024), float32] */;
  %1207 = sigmoid(%1206) /* ty=Tensor[(1, 1024), float32] */;
  %1208 = %1204.0 /* ty=Tensor[(1, 1024), float32] */;
  %1209 = %1204.2 /* ty=Tensor[(1, 1024), float32] */;
  %1210 = sigmoid(%1208) /* ty=Tensor[(1, 1024), float32] */;
  %1211 = tanh(%1209) /* ty=Tensor[(1, 1024), float32] */;
  %1212 = multiply(%1207, %1171) /* ty=Tensor[(1, 1024), float32] */;
  %1213 = multiply(%1210, %1211) /* ty=Tensor[(1, 1024), float32] */;
  %1214 = add(%1212, %1213) /* ty=Tensor[(1, 1024), float32] */;
  %1215 = sigmoid(%1205) /* ty=Tensor[(1, 1024), float32] */;
  %1216 = tanh(%1214) /* ty=Tensor[(1, 1024), float32] */;
  %1217 = %555.15 /* ty=Tensor[(1, 240), float32] */;
  %1218 = (%1217, %1195) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1219 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1220 = concatenate(%1218, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1221 = concatenate(%1219, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1222 = nn.dense(%1220, %1221, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1223 = add(%1222, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1224 = add(%1223, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1225 = split(%1224, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1226 = %1225.3 /* ty=Tensor[(1, 1024), float32] */;
  %1227 = %1225.1 /* ty=Tensor[(1, 1024), float32] */;
  %1228 = sigmoid(%1227) /* ty=Tensor[(1, 1024), float32] */;
  %1229 = %1225.0 /* ty=Tensor[(1, 1024), float32] */;
  %1230 = %1225.2 /* ty=Tensor[(1, 1024), float32] */;
  %1231 = sigmoid(%1229) /* ty=Tensor[(1, 1024), float32] */;
  %1232 = tanh(%1230) /* ty=Tensor[(1, 1024), float32] */;
  %1233 = multiply(%1228, %1192) /* ty=Tensor[(1, 1024), float32] */;
  %1234 = multiply(%1231, %1232) /* ty=Tensor[(1, 1024), float32] */;
  %1235 = add(%1233, %1234) /* ty=Tensor[(1, 1024), float32] */;
  %1236 = sigmoid(%1226) /* ty=Tensor[(1, 1024), float32] */;
  %1237 = tanh(%1235) /* ty=Tensor[(1, 1024), float32] */;
  %1238 = multiply(%1236, %1237) /* ty=Tensor[(1, 1024), float32] */;
  %1239 = multiply(%1215, %1216) /* ty=Tensor[(1, 1024), float32] */;
  %1240 = (%1238, %1239) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1241 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1242 = concatenate(%1240, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1243 = concatenate(%1241, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1244 = nn.dense(%1242, %1243, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1245 = add(%1244, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1246 = add(%1245, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1247 = split(%1246, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1248 = %1247.3 /* ty=Tensor[(1, 1024), float32] */;
  %1249 = %1247.1 /* ty=Tensor[(1, 1024), float32] */;
  %1250 = sigmoid(%1249) /* ty=Tensor[(1, 1024), float32] */;
  %1251 = %1247.0 /* ty=Tensor[(1, 1024), float32] */;
  %1252 = %1247.2 /* ty=Tensor[(1, 1024), float32] */;
  %1253 = sigmoid(%1251) /* ty=Tensor[(1, 1024), float32] */;
  %1254 = tanh(%1252) /* ty=Tensor[(1, 1024), float32] */;
  %1255 = multiply(%1250, %1214) /* ty=Tensor[(1, 1024), float32] */;
  %1256 = multiply(%1253, %1254) /* ty=Tensor[(1, 1024), float32] */;
  %1257 = add(%1255, %1256) /* ty=Tensor[(1, 1024), float32] */;
  %1258 = sigmoid(%1248) /* ty=Tensor[(1, 1024), float32] */;
  %1259 = tanh(%1257) /* ty=Tensor[(1, 1024), float32] */;
  %1260 = %555.16 /* ty=Tensor[(1, 240), float32] */;
  %1261 = (%1260, %1238) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1262 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1263 = concatenate(%1261, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1264 = concatenate(%1262, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1265 = nn.dense(%1263, %1264, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1266 = add(%1265, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1267 = add(%1266, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1268 = split(%1267, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1269 = %1268.3 /* ty=Tensor[(1, 1024), float32] */;
  %1270 = %1268.1 /* ty=Tensor[(1, 1024), float32] */;
  %1271 = sigmoid(%1270) /* ty=Tensor[(1, 1024), float32] */;
  %1272 = %1268.0 /* ty=Tensor[(1, 1024), float32] */;
  %1273 = %1268.2 /* ty=Tensor[(1, 1024), float32] */;
  %1274 = sigmoid(%1272) /* ty=Tensor[(1, 1024), float32] */;
  %1275 = tanh(%1273) /* ty=Tensor[(1, 1024), float32] */;
  %1276 = multiply(%1271, %1235) /* ty=Tensor[(1, 1024), float32] */;
  %1277 = multiply(%1274, %1275) /* ty=Tensor[(1, 1024), float32] */;
  %1278 = add(%1276, %1277) /* ty=Tensor[(1, 1024), float32] */;
  %1279 = sigmoid(%1269) /* ty=Tensor[(1, 1024), float32] */;
  %1280 = tanh(%1278) /* ty=Tensor[(1, 1024), float32] */;
  %1281 = multiply(%1279, %1280) /* ty=Tensor[(1, 1024), float32] */;
  %1282 = multiply(%1258, %1259) /* ty=Tensor[(1, 1024), float32] */;
  %1283 = (%1281, %1282) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1284 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1285 = concatenate(%1283, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1286 = concatenate(%1284, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1287 = nn.dense(%1285, %1286, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1288 = add(%1287, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1289 = add(%1288, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1290 = split(%1289, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1291 = %1290.3 /* ty=Tensor[(1, 1024), float32] */;
  %1292 = %1290.1 /* ty=Tensor[(1, 1024), float32] */;
  %1293 = sigmoid(%1292) /* ty=Tensor[(1, 1024), float32] */;
  %1294 = %1290.0 /* ty=Tensor[(1, 1024), float32] */;
  %1295 = %1290.2 /* ty=Tensor[(1, 1024), float32] */;
  %1296 = sigmoid(%1294) /* ty=Tensor[(1, 1024), float32] */;
  %1297 = tanh(%1295) /* ty=Tensor[(1, 1024), float32] */;
  %1298 = multiply(%1293, %1257) /* ty=Tensor[(1, 1024), float32] */;
  %1299 = multiply(%1296, %1297) /* ty=Tensor[(1, 1024), float32] */;
  %1300 = add(%1298, %1299) /* ty=Tensor[(1, 1024), float32] */;
  %1301 = sigmoid(%1291) /* ty=Tensor[(1, 1024), float32] */;
  %1302 = tanh(%1300) /* ty=Tensor[(1, 1024), float32] */;
  %1303 = %555.17 /* ty=Tensor[(1, 240), float32] */;
  %1304 = (%1303, %1281) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1305 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1306 = concatenate(%1304, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1307 = concatenate(%1305, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1308 = nn.dense(%1306, %1307, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1309 = add(%1308, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1310 = add(%1309, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1311 = split(%1310, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1312 = %1311.3 /* ty=Tensor[(1, 1024), float32] */;
  %1313 = %1311.1 /* ty=Tensor[(1, 1024), float32] */;
  %1314 = sigmoid(%1313) /* ty=Tensor[(1, 1024), float32] */;
  %1315 = %1311.0 /* ty=Tensor[(1, 1024), float32] */;
  %1316 = %1311.2 /* ty=Tensor[(1, 1024), float32] */;
  %1317 = sigmoid(%1315) /* ty=Tensor[(1, 1024), float32] */;
  %1318 = tanh(%1316) /* ty=Tensor[(1, 1024), float32] */;
  %1319 = multiply(%1314, %1278) /* ty=Tensor[(1, 1024), float32] */;
  %1320 = multiply(%1317, %1318) /* ty=Tensor[(1, 1024), float32] */;
  %1321 = add(%1319, %1320) /* ty=Tensor[(1, 1024), float32] */;
  %1322 = sigmoid(%1312) /* ty=Tensor[(1, 1024), float32] */;
  %1323 = tanh(%1321) /* ty=Tensor[(1, 1024), float32] */;
  %1324 = multiply(%1322, %1323) /* ty=Tensor[(1, 1024), float32] */;
  %1325 = multiply(%1301, %1302) /* ty=Tensor[(1, 1024), float32] */;
  %1326 = (%1324, %1325) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1327 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1328 = concatenate(%1326, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1329 = concatenate(%1327, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1330 = nn.dense(%1328, %1329, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1331 = add(%1330, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1332 = add(%1331, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1333 = split(%1332, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1334 = %1333.3 /* ty=Tensor[(1, 1024), float32] */;
  %1335 = %1333.1 /* ty=Tensor[(1, 1024), float32] */;
  %1336 = sigmoid(%1335) /* ty=Tensor[(1, 1024), float32] */;
  %1337 = %1333.0 /* ty=Tensor[(1, 1024), float32] */;
  %1338 = %1333.2 /* ty=Tensor[(1, 1024), float32] */;
  %1339 = sigmoid(%1337) /* ty=Tensor[(1, 1024), float32] */;
  %1340 = tanh(%1338) /* ty=Tensor[(1, 1024), float32] */;
  %1341 = multiply(%1336, %1300) /* ty=Tensor[(1, 1024), float32] */;
  %1342 = multiply(%1339, %1340) /* ty=Tensor[(1, 1024), float32] */;
  %1343 = add(%1341, %1342) /* ty=Tensor[(1, 1024), float32] */;
  %1344 = sigmoid(%1334) /* ty=Tensor[(1, 1024), float32] */;
  %1345 = tanh(%1343) /* ty=Tensor[(1, 1024), float32] */;
  %1346 = %555.18 /* ty=Tensor[(1, 240), float32] */;
  %1347 = (%1346, %1324) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1348 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1349 = concatenate(%1347, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1350 = concatenate(%1348, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1351 = nn.dense(%1349, %1350, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1352 = add(%1351, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1353 = add(%1352, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1354 = split(%1353, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1355 = %1354.3 /* ty=Tensor[(1, 1024), float32] */;
  %1356 = %1354.1 /* ty=Tensor[(1, 1024), float32] */;
  %1357 = sigmoid(%1356) /* ty=Tensor[(1, 1024), float32] */;
  %1358 = %1354.0 /* ty=Tensor[(1, 1024), float32] */;
  %1359 = %1354.2 /* ty=Tensor[(1, 1024), float32] */;
  %1360 = sigmoid(%1358) /* ty=Tensor[(1, 1024), float32] */;
  %1361 = tanh(%1359) /* ty=Tensor[(1, 1024), float32] */;
  %1362 = multiply(%1357, %1321) /* ty=Tensor[(1, 1024), float32] */;
  %1363 = multiply(%1360, %1361) /* ty=Tensor[(1, 1024), float32] */;
  %1364 = add(%1362, %1363) /* ty=Tensor[(1, 1024), float32] */;
  %1365 = sigmoid(%1355) /* ty=Tensor[(1, 1024), float32] */;
  %1366 = tanh(%1364) /* ty=Tensor[(1, 1024), float32] */;
  %1367 = multiply(%1365, %1366) /* ty=Tensor[(1, 1024), float32] */;
  %1368 = multiply(%1344, %1345) /* ty=Tensor[(1, 1024), float32] */;
  %1369 = (%1367, %1368) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1370 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1371 = concatenate(%1369, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1372 = concatenate(%1370, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1373 = nn.dense(%1371, %1372, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1374 = add(%1373, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1375 = add(%1374, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1376 = split(%1375, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1377 = %1376.3 /* ty=Tensor[(1, 1024), float32] */;
  %1378 = %1376.1 /* ty=Tensor[(1, 1024), float32] */;
  %1379 = sigmoid(%1378) /* ty=Tensor[(1, 1024), float32] */;
  %1380 = %1376.0 /* ty=Tensor[(1, 1024), float32] */;
  %1381 = %1376.2 /* ty=Tensor[(1, 1024), float32] */;
  %1382 = sigmoid(%1380) /* ty=Tensor[(1, 1024), float32] */;
  %1383 = tanh(%1381) /* ty=Tensor[(1, 1024), float32] */;
  %1384 = multiply(%1379, %1343) /* ty=Tensor[(1, 1024), float32] */;
  %1385 = multiply(%1382, %1383) /* ty=Tensor[(1, 1024), float32] */;
  %1386 = add(%1384, %1385) /* ty=Tensor[(1, 1024), float32] */;
  %1387 = sigmoid(%1377) /* ty=Tensor[(1, 1024), float32] */;
  %1388 = tanh(%1386) /* ty=Tensor[(1, 1024), float32] */;
  %1389 = %555.19 /* ty=Tensor[(1, 240), float32] */;
  %1390 = (%1389, %1367) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1391 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1392 = concatenate(%1390, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1393 = concatenate(%1391, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1394 = nn.dense(%1392, %1393, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1395 = add(%1394, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1396 = add(%1395, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1397 = split(%1396, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1398 = %1397.3 /* ty=Tensor[(1, 1024), float32] */;
  %1399 = %1397.1 /* ty=Tensor[(1, 1024), float32] */;
  %1400 = sigmoid(%1399) /* ty=Tensor[(1, 1024), float32] */;
  %1401 = %1397.0 /* ty=Tensor[(1, 1024), float32] */;
  %1402 = %1397.2 /* ty=Tensor[(1, 1024), float32] */;
  %1403 = sigmoid(%1401) /* ty=Tensor[(1, 1024), float32] */;
  %1404 = tanh(%1402) /* ty=Tensor[(1, 1024), float32] */;
  %1405 = multiply(%1400, %1364) /* ty=Tensor[(1, 1024), float32] */;
  %1406 = multiply(%1403, %1404) /* ty=Tensor[(1, 1024), float32] */;
  %1407 = add(%1405, %1406) /* ty=Tensor[(1, 1024), float32] */;
  %1408 = sigmoid(%1398) /* ty=Tensor[(1, 1024), float32] */;
  %1409 = tanh(%1407) /* ty=Tensor[(1, 1024), float32] */;
  %1410 = multiply(%1408, %1409) /* ty=Tensor[(1, 1024), float32] */;
  %1411 = multiply(%1387, %1388) /* ty=Tensor[(1, 1024), float32] */;
  %1412 = (%1410, %1411) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1413 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1414 = concatenate(%1412, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1415 = concatenate(%1413, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1416 = nn.dense(%1414, %1415, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1417 = add(%1416, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1418 = add(%1417, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1419 = split(%1418, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1420 = %1419.3 /* ty=Tensor[(1, 1024), float32] */;
  %1421 = %1419.1 /* ty=Tensor[(1, 1024), float32] */;
  %1422 = sigmoid(%1421) /* ty=Tensor[(1, 1024), float32] */;
  %1423 = %1419.0 /* ty=Tensor[(1, 1024), float32] */;
  %1424 = %1419.2 /* ty=Tensor[(1, 1024), float32] */;
  %1425 = sigmoid(%1423) /* ty=Tensor[(1, 1024), float32] */;
  %1426 = tanh(%1424) /* ty=Tensor[(1, 1024), float32] */;
  %1427 = multiply(%1422, %1386) /* ty=Tensor[(1, 1024), float32] */;
  %1428 = multiply(%1425, %1426) /* ty=Tensor[(1, 1024), float32] */;
  %1429 = add(%1427, %1428) /* ty=Tensor[(1, 1024), float32] */;
  %1430 = sigmoid(%1420) /* ty=Tensor[(1, 1024), float32] */;
  %1431 = tanh(%1429) /* ty=Tensor[(1, 1024), float32] */;
  %1432 = %555.20 /* ty=Tensor[(1, 240), float32] */;
  %1433 = (%1432, %1410) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1434 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1435 = concatenate(%1433, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1436 = concatenate(%1434, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1437 = nn.dense(%1435, %1436, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1438 = add(%1437, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1439 = add(%1438, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1440 = split(%1439, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1441 = %1440.3 /* ty=Tensor[(1, 1024), float32] */;
  %1442 = %1440.1 /* ty=Tensor[(1, 1024), float32] */;
  %1443 = sigmoid(%1442) /* ty=Tensor[(1, 1024), float32] */;
  %1444 = %1440.0 /* ty=Tensor[(1, 1024), float32] */;
  %1445 = %1440.2 /* ty=Tensor[(1, 1024), float32] */;
  %1446 = sigmoid(%1444) /* ty=Tensor[(1, 1024), float32] */;
  %1447 = tanh(%1445) /* ty=Tensor[(1, 1024), float32] */;
  %1448 = multiply(%1443, %1407) /* ty=Tensor[(1, 1024), float32] */;
  %1449 = multiply(%1446, %1447) /* ty=Tensor[(1, 1024), float32] */;
  %1450 = add(%1448, %1449) /* ty=Tensor[(1, 1024), float32] */;
  %1451 = sigmoid(%1441) /* ty=Tensor[(1, 1024), float32] */;
  %1452 = tanh(%1450) /* ty=Tensor[(1, 1024), float32] */;
  %1453 = multiply(%1451, %1452) /* ty=Tensor[(1, 1024), float32] */;
  %1454 = multiply(%1430, %1431) /* ty=Tensor[(1, 1024), float32] */;
  %1455 = (%1453, %1454) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1456 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1457 = concatenate(%1455, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1458 = concatenate(%1456, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1459 = nn.dense(%1457, %1458, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1460 = add(%1459, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1461 = add(%1460, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1462 = split(%1461, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1463 = %1462.3 /* ty=Tensor[(1, 1024), float32] */;
  %1464 = %1462.1 /* ty=Tensor[(1, 1024), float32] */;
  %1465 = sigmoid(%1464) /* ty=Tensor[(1, 1024), float32] */;
  %1466 = %1462.0 /* ty=Tensor[(1, 1024), float32] */;
  %1467 = %1462.2 /* ty=Tensor[(1, 1024), float32] */;
  %1468 = sigmoid(%1466) /* ty=Tensor[(1, 1024), float32] */;
  %1469 = tanh(%1467) /* ty=Tensor[(1, 1024), float32] */;
  %1470 = multiply(%1465, %1429) /* ty=Tensor[(1, 1024), float32] */;
  %1471 = multiply(%1468, %1469) /* ty=Tensor[(1, 1024), float32] */;
  %1472 = add(%1470, %1471) /* ty=Tensor[(1, 1024), float32] */;
  %1473 = sigmoid(%1463) /* ty=Tensor[(1, 1024), float32] */;
  %1474 = tanh(%1472) /* ty=Tensor[(1, 1024), float32] */;
  %1475 = %555.21 /* ty=Tensor[(1, 240), float32] */;
  %1476 = (%1475, %1453) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1477 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1478 = concatenate(%1476, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1479 = concatenate(%1477, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1480 = nn.dense(%1478, %1479, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1481 = add(%1480, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1482 = add(%1481, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1483 = split(%1482, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1484 = %1483.3 /* ty=Tensor[(1, 1024), float32] */;
  %1485 = %1483.1 /* ty=Tensor[(1, 1024), float32] */;
  %1486 = sigmoid(%1485) /* ty=Tensor[(1, 1024), float32] */;
  %1487 = %1483.0 /* ty=Tensor[(1, 1024), float32] */;
  %1488 = %1483.2 /* ty=Tensor[(1, 1024), float32] */;
  %1489 = sigmoid(%1487) /* ty=Tensor[(1, 1024), float32] */;
  %1490 = tanh(%1488) /* ty=Tensor[(1, 1024), float32] */;
  %1491 = multiply(%1486, %1450) /* ty=Tensor[(1, 1024), float32] */;
  %1492 = multiply(%1489, %1490) /* ty=Tensor[(1, 1024), float32] */;
  %1493 = add(%1491, %1492) /* ty=Tensor[(1, 1024), float32] */;
  %1494 = sigmoid(%1484) /* ty=Tensor[(1, 1024), float32] */;
  %1495 = tanh(%1493) /* ty=Tensor[(1, 1024), float32] */;
  %1496 = multiply(%1494, %1495) /* ty=Tensor[(1, 1024), float32] */;
  %1497 = multiply(%1473, %1474) /* ty=Tensor[(1, 1024), float32] */;
  %1498 = (%1496, %1497) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1499 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1500 = concatenate(%1498, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1501 = concatenate(%1499, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1502 = nn.dense(%1500, %1501, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1503 = add(%1502, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1504 = add(%1503, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1505 = split(%1504, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1506 = %1505.3 /* ty=Tensor[(1, 1024), float32] */;
  %1507 = %1505.1 /* ty=Tensor[(1, 1024), float32] */;
  %1508 = sigmoid(%1507) /* ty=Tensor[(1, 1024), float32] */;
  %1509 = %1505.0 /* ty=Tensor[(1, 1024), float32] */;
  %1510 = %1505.2 /* ty=Tensor[(1, 1024), float32] */;
  %1511 = sigmoid(%1509) /* ty=Tensor[(1, 1024), float32] */;
  %1512 = tanh(%1510) /* ty=Tensor[(1, 1024), float32] */;
  %1513 = multiply(%1508, %1472) /* ty=Tensor[(1, 1024), float32] */;
  %1514 = multiply(%1511, %1512) /* ty=Tensor[(1, 1024), float32] */;
  %1515 = add(%1513, %1514) /* ty=Tensor[(1, 1024), float32] */;
  %1516 = sigmoid(%1506) /* ty=Tensor[(1, 1024), float32] */;
  %1517 = tanh(%1515) /* ty=Tensor[(1, 1024), float32] */;
  %1518 = %555.22 /* ty=Tensor[(1, 240), float32] */;
  %1519 = (%1518, %1496) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1520 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1521 = concatenate(%1519, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1522 = concatenate(%1520, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1523 = nn.dense(%1521, %1522, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1524 = add(%1523, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1525 = add(%1524, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1526 = split(%1525, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1527 = %1526.3 /* ty=Tensor[(1, 1024), float32] */;
  %1528 = %1526.1 /* ty=Tensor[(1, 1024), float32] */;
  %1529 = sigmoid(%1528) /* ty=Tensor[(1, 1024), float32] */;
  %1530 = %1526.0 /* ty=Tensor[(1, 1024), float32] */;
  %1531 = %1526.2 /* ty=Tensor[(1, 1024), float32] */;
  %1532 = sigmoid(%1530) /* ty=Tensor[(1, 1024), float32] */;
  %1533 = tanh(%1531) /* ty=Tensor[(1, 1024), float32] */;
  %1534 = multiply(%1529, %1493) /* ty=Tensor[(1, 1024), float32] */;
  %1535 = multiply(%1532, %1533) /* ty=Tensor[(1, 1024), float32] */;
  %1536 = add(%1534, %1535) /* ty=Tensor[(1, 1024), float32] */;
  %1537 = sigmoid(%1527) /* ty=Tensor[(1, 1024), float32] */;
  %1538 = tanh(%1536) /* ty=Tensor[(1, 1024), float32] */;
  %1539 = multiply(%1537, %1538) /* ty=Tensor[(1, 1024), float32] */;
  %1540 = multiply(%1516, %1517) /* ty=Tensor[(1, 1024), float32] */;
  %1541 = (%1539, %1540) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1542 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1543 = concatenate(%1541, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1544 = concatenate(%1542, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1545 = nn.dense(%1543, %1544, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1546 = add(%1545, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1547 = add(%1546, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1548 = split(%1547, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1549 = %1548.3 /* ty=Tensor[(1, 1024), float32] */;
  %1550 = %1548.1 /* ty=Tensor[(1, 1024), float32] */;
  %1551 = sigmoid(%1550) /* ty=Tensor[(1, 1024), float32] */;
  %1552 = %1548.0 /* ty=Tensor[(1, 1024), float32] */;
  %1553 = %1548.2 /* ty=Tensor[(1, 1024), float32] */;
  %1554 = sigmoid(%1552) /* ty=Tensor[(1, 1024), float32] */;
  %1555 = tanh(%1553) /* ty=Tensor[(1, 1024), float32] */;
  %1556 = multiply(%1551, %1515) /* ty=Tensor[(1, 1024), float32] */;
  %1557 = multiply(%1554, %1555) /* ty=Tensor[(1, 1024), float32] */;
  %1558 = add(%1556, %1557) /* ty=Tensor[(1, 1024), float32] */;
  %1559 = sigmoid(%1549) /* ty=Tensor[(1, 1024), float32] */;
  %1560 = tanh(%1558) /* ty=Tensor[(1, 1024), float32] */;
  %1561 = %555.23 /* ty=Tensor[(1, 240), float32] */;
  %1562 = (%1561, %1539) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1563 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1564 = concatenate(%1562, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1565 = concatenate(%1563, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1566 = nn.dense(%1564, %1565, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1567 = add(%1566, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1568 = add(%1567, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1569 = split(%1568, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1570 = %1569.3 /* ty=Tensor[(1, 1024), float32] */;
  %1571 = %1569.1 /* ty=Tensor[(1, 1024), float32] */;
  %1572 = sigmoid(%1571) /* ty=Tensor[(1, 1024), float32] */;
  %1573 = %1569.0 /* ty=Tensor[(1, 1024), float32] */;
  %1574 = %1569.2 /* ty=Tensor[(1, 1024), float32] */;
  %1575 = sigmoid(%1573) /* ty=Tensor[(1, 1024), float32] */;
  %1576 = tanh(%1574) /* ty=Tensor[(1, 1024), float32] */;
  %1577 = multiply(%1572, %1536) /* ty=Tensor[(1, 1024), float32] */;
  %1578 = multiply(%1575, %1576) /* ty=Tensor[(1, 1024), float32] */;
  %1579 = add(%1577, %1578) /* ty=Tensor[(1, 1024), float32] */;
  %1580 = sigmoid(%1570) /* ty=Tensor[(1, 1024), float32] */;
  %1581 = tanh(%1579) /* ty=Tensor[(1, 1024), float32] */;
  %1582 = multiply(%1580, %1581) /* ty=Tensor[(1, 1024), float32] */;
  %1583 = multiply(%1559, %1560) /* ty=Tensor[(1, 1024), float32] */;
  %1584 = (%1582, %1583) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1585 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1586 = concatenate(%1584, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1587 = concatenate(%1585, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1588 = nn.dense(%1586, %1587, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1589 = add(%1588, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1590 = add(%1589, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1591 = split(%1590, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1592 = %1591.3 /* ty=Tensor[(1, 1024), float32] */;
  %1593 = %1591.1 /* ty=Tensor[(1, 1024), float32] */;
  %1594 = sigmoid(%1593) /* ty=Tensor[(1, 1024), float32] */;
  %1595 = %1591.0 /* ty=Tensor[(1, 1024), float32] */;
  %1596 = %1591.2 /* ty=Tensor[(1, 1024), float32] */;
  %1597 = sigmoid(%1595) /* ty=Tensor[(1, 1024), float32] */;
  %1598 = tanh(%1596) /* ty=Tensor[(1, 1024), float32] */;
  %1599 = multiply(%1594, %1558) /* ty=Tensor[(1, 1024), float32] */;
  %1600 = multiply(%1597, %1598) /* ty=Tensor[(1, 1024), float32] */;
  %1601 = add(%1599, %1600) /* ty=Tensor[(1, 1024), float32] */;
  %1602 = sigmoid(%1592) /* ty=Tensor[(1, 1024), float32] */;
  %1603 = tanh(%1601) /* ty=Tensor[(1, 1024), float32] */;
  %1604 = %555.24 /* ty=Tensor[(1, 240), float32] */;
  %1605 = (%1604, %1582) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1606 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1607 = concatenate(%1605, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1608 = concatenate(%1606, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1609 = nn.dense(%1607, %1608, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1610 = add(%1609, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1611 = add(%1610, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1612 = split(%1611, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1613 = %1612.3 /* ty=Tensor[(1, 1024), float32] */;
  %1614 = %1612.1 /* ty=Tensor[(1, 1024), float32] */;
  %1615 = sigmoid(%1614) /* ty=Tensor[(1, 1024), float32] */;
  %1616 = %1612.0 /* ty=Tensor[(1, 1024), float32] */;
  %1617 = %1612.2 /* ty=Tensor[(1, 1024), float32] */;
  %1618 = sigmoid(%1616) /* ty=Tensor[(1, 1024), float32] */;
  %1619 = tanh(%1617) /* ty=Tensor[(1, 1024), float32] */;
  %1620 = multiply(%1615, %1579) /* ty=Tensor[(1, 1024), float32] */;
  %1621 = multiply(%1618, %1619) /* ty=Tensor[(1, 1024), float32] */;
  %1622 = add(%1620, %1621) /* ty=Tensor[(1, 1024), float32] */;
  %1623 = sigmoid(%1613) /* ty=Tensor[(1, 1024), float32] */;
  %1624 = tanh(%1622) /* ty=Tensor[(1, 1024), float32] */;
  %1625 = multiply(%1623, %1624) /* ty=Tensor[(1, 1024), float32] */;
  %1626 = multiply(%1602, %1603) /* ty=Tensor[(1, 1024), float32] */;
  %1627 = (%1625, %1626) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1628 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1629 = concatenate(%1627, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1630 = concatenate(%1628, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1631 = nn.dense(%1629, %1630, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1632 = add(%1631, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1633 = add(%1632, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1634 = split(%1633, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1635 = %1634.3 /* ty=Tensor[(1, 1024), float32] */;
  %1636 = %1634.1 /* ty=Tensor[(1, 1024), float32] */;
  %1637 = sigmoid(%1636) /* ty=Tensor[(1, 1024), float32] */;
  %1638 = %1634.0 /* ty=Tensor[(1, 1024), float32] */;
  %1639 = %1634.2 /* ty=Tensor[(1, 1024), float32] */;
  %1640 = sigmoid(%1638) /* ty=Tensor[(1, 1024), float32] */;
  %1641 = tanh(%1639) /* ty=Tensor[(1, 1024), float32] */;
  %1642 = multiply(%1637, %1601) /* ty=Tensor[(1, 1024), float32] */;
  %1643 = multiply(%1640, %1641) /* ty=Tensor[(1, 1024), float32] */;
  %1644 = add(%1642, %1643) /* ty=Tensor[(1, 1024), float32] */;
  %1645 = sigmoid(%1635) /* ty=Tensor[(1, 1024), float32] */;
  %1646 = tanh(%1644) /* ty=Tensor[(1, 1024), float32] */;
  %1647 = %555.25 /* ty=Tensor[(1, 240), float32] */;
  %1648 = (%1647, %1625) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1649 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1650 = concatenate(%1648, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1651 = concatenate(%1649, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1652 = nn.dense(%1650, %1651, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1653 = add(%1652, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1654 = add(%1653, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1655 = split(%1654, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1656 = %1655.3 /* ty=Tensor[(1, 1024), float32] */;
  %1657 = %1655.1 /* ty=Tensor[(1, 1024), float32] */;
  %1658 = sigmoid(%1657) /* ty=Tensor[(1, 1024), float32] */;
  %1659 = %1655.0 /* ty=Tensor[(1, 1024), float32] */;
  %1660 = %1655.2 /* ty=Tensor[(1, 1024), float32] */;
  %1661 = sigmoid(%1659) /* ty=Tensor[(1, 1024), float32] */;
  %1662 = tanh(%1660) /* ty=Tensor[(1, 1024), float32] */;
  %1663 = multiply(%1658, %1622) /* ty=Tensor[(1, 1024), float32] */;
  %1664 = multiply(%1661, %1662) /* ty=Tensor[(1, 1024), float32] */;
  %1665 = add(%1663, %1664) /* ty=Tensor[(1, 1024), float32] */;
  %1666 = sigmoid(%1656) /* ty=Tensor[(1, 1024), float32] */;
  %1667 = tanh(%1665) /* ty=Tensor[(1, 1024), float32] */;
  %1668 = multiply(%1666, %1667) /* ty=Tensor[(1, 1024), float32] */;
  %1669 = multiply(%1645, %1646) /* ty=Tensor[(1, 1024), float32] */;
  %1670 = (%1668, %1669) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1671 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1672 = concatenate(%1670, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1673 = concatenate(%1671, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1674 = nn.dense(%1672, %1673, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1675 = add(%1674, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1676 = add(%1675, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1677 = split(%1676, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1678 = %1677.3 /* ty=Tensor[(1, 1024), float32] */;
  %1679 = %1677.1 /* ty=Tensor[(1, 1024), float32] */;
  %1680 = sigmoid(%1679) /* ty=Tensor[(1, 1024), float32] */;
  %1681 = %1677.0 /* ty=Tensor[(1, 1024), float32] */;
  %1682 = %1677.2 /* ty=Tensor[(1, 1024), float32] */;
  %1683 = sigmoid(%1681) /* ty=Tensor[(1, 1024), float32] */;
  %1684 = tanh(%1682) /* ty=Tensor[(1, 1024), float32] */;
  %1685 = multiply(%1680, %1644) /* ty=Tensor[(1, 1024), float32] */;
  %1686 = multiply(%1683, %1684) /* ty=Tensor[(1, 1024), float32] */;
  %1687 = add(%1685, %1686) /* ty=Tensor[(1, 1024), float32] */;
  %1688 = sigmoid(%1678) /* ty=Tensor[(1, 1024), float32] */;
  %1689 = tanh(%1687) /* ty=Tensor[(1, 1024), float32] */;
  %1690 = %555.26 /* ty=Tensor[(1, 240), float32] */;
  %1691 = (%1690, %1668) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1692 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1693 = concatenate(%1691, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1694 = concatenate(%1692, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1695 = nn.dense(%1693, %1694, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1696 = add(%1695, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1697 = add(%1696, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1698 = split(%1697, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1699 = %1698.3 /* ty=Tensor[(1, 1024), float32] */;
  %1700 = %1698.1 /* ty=Tensor[(1, 1024), float32] */;
  %1701 = sigmoid(%1700) /* ty=Tensor[(1, 1024), float32] */;
  %1702 = %1698.0 /* ty=Tensor[(1, 1024), float32] */;
  %1703 = %1698.2 /* ty=Tensor[(1, 1024), float32] */;
  %1704 = sigmoid(%1702) /* ty=Tensor[(1, 1024), float32] */;
  %1705 = tanh(%1703) /* ty=Tensor[(1, 1024), float32] */;
  %1706 = multiply(%1701, %1665) /* ty=Tensor[(1, 1024), float32] */;
  %1707 = multiply(%1704, %1705) /* ty=Tensor[(1, 1024), float32] */;
  %1708 = add(%1706, %1707) /* ty=Tensor[(1, 1024), float32] */;
  %1709 = sigmoid(%1699) /* ty=Tensor[(1, 1024), float32] */;
  %1710 = tanh(%1708) /* ty=Tensor[(1, 1024), float32] */;
  %1711 = multiply(%1709, %1710) /* ty=Tensor[(1, 1024), float32] */;
  %1712 = multiply(%1688, %1689) /* ty=Tensor[(1, 1024), float32] */;
  %1713 = (%1711, %1712) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1714 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1715 = concatenate(%1713, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1716 = concatenate(%1714, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1717 = nn.dense(%1715, %1716, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1718 = add(%1717, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1719 = add(%1718, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1720 = split(%1719, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1721 = %1720.3 /* ty=Tensor[(1, 1024), float32] */;
  %1722 = %1720.1 /* ty=Tensor[(1, 1024), float32] */;
  %1723 = sigmoid(%1722) /* ty=Tensor[(1, 1024), float32] */;
  %1724 = %1720.0 /* ty=Tensor[(1, 1024), float32] */;
  %1725 = %1720.2 /* ty=Tensor[(1, 1024), float32] */;
  %1726 = sigmoid(%1724) /* ty=Tensor[(1, 1024), float32] */;
  %1727 = tanh(%1725) /* ty=Tensor[(1, 1024), float32] */;
  %1728 = multiply(%1723, %1687) /* ty=Tensor[(1, 1024), float32] */;
  %1729 = multiply(%1726, %1727) /* ty=Tensor[(1, 1024), float32] */;
  %1730 = add(%1728, %1729) /* ty=Tensor[(1, 1024), float32] */;
  %1731 = sigmoid(%1721) /* ty=Tensor[(1, 1024), float32] */;
  %1732 = tanh(%1730) /* ty=Tensor[(1, 1024), float32] */;
  %1733 = %555.27 /* ty=Tensor[(1, 240), float32] */;
  %1734 = (%1733, %1711) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1735 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1736 = concatenate(%1734, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1737 = concatenate(%1735, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1738 = nn.dense(%1736, %1737, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1739 = add(%1738, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1740 = add(%1739, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1741 = split(%1740, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1742 = %1741.3 /* ty=Tensor[(1, 1024), float32] */;
  %1743 = %1741.1 /* ty=Tensor[(1, 1024), float32] */;
  %1744 = sigmoid(%1743) /* ty=Tensor[(1, 1024), float32] */;
  %1745 = %1741.0 /* ty=Tensor[(1, 1024), float32] */;
  %1746 = %1741.2 /* ty=Tensor[(1, 1024), float32] */;
  %1747 = sigmoid(%1745) /* ty=Tensor[(1, 1024), float32] */;
  %1748 = tanh(%1746) /* ty=Tensor[(1, 1024), float32] */;
  %1749 = multiply(%1744, %1708) /* ty=Tensor[(1, 1024), float32] */;
  %1750 = multiply(%1747, %1748) /* ty=Tensor[(1, 1024), float32] */;
  %1751 = add(%1749, %1750) /* ty=Tensor[(1, 1024), float32] */;
  %1752 = sigmoid(%1742) /* ty=Tensor[(1, 1024), float32] */;
  %1753 = tanh(%1751) /* ty=Tensor[(1, 1024), float32] */;
  %1754 = multiply(%1752, %1753) /* ty=Tensor[(1, 1024), float32] */;
  %1755 = multiply(%1731, %1732) /* ty=Tensor[(1, 1024), float32] */;
  %1756 = (%1754, %1755) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1757 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1758 = concatenate(%1756, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1759 = concatenate(%1757, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1760 = nn.dense(%1758, %1759, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1761 = add(%1760, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1762 = add(%1761, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1763 = split(%1762, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1764 = %1763.3 /* ty=Tensor[(1, 1024), float32] */;
  %1765 = %1763.1 /* ty=Tensor[(1, 1024), float32] */;
  %1766 = sigmoid(%1765) /* ty=Tensor[(1, 1024), float32] */;
  %1767 = %1763.0 /* ty=Tensor[(1, 1024), float32] */;
  %1768 = %1763.2 /* ty=Tensor[(1, 1024), float32] */;
  %1769 = sigmoid(%1767) /* ty=Tensor[(1, 1024), float32] */;
  %1770 = tanh(%1768) /* ty=Tensor[(1, 1024), float32] */;
  %1771 = multiply(%1766, %1730) /* ty=Tensor[(1, 1024), float32] */;
  %1772 = multiply(%1769, %1770) /* ty=Tensor[(1, 1024), float32] */;
  %1773 = add(%1771, %1772) /* ty=Tensor[(1, 1024), float32] */;
  %1774 = sigmoid(%1764) /* ty=Tensor[(1, 1024), float32] */;
  %1775 = tanh(%1773) /* ty=Tensor[(1, 1024), float32] */;
  %1776 = %555.28 /* ty=Tensor[(1, 240), float32] */;
  %1777 = (%1776, %1754) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1778 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1779 = concatenate(%1777, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1780 = concatenate(%1778, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1781 = nn.dense(%1779, %1780, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1782 = add(%1781, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1783 = add(%1782, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1784 = split(%1783, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1785 = %1784.3 /* ty=Tensor[(1, 1024), float32] */;
  %1786 = %1784.1 /* ty=Tensor[(1, 1024), float32] */;
  %1787 = sigmoid(%1786) /* ty=Tensor[(1, 1024), float32] */;
  %1788 = %1784.0 /* ty=Tensor[(1, 1024), float32] */;
  %1789 = %1784.2 /* ty=Tensor[(1, 1024), float32] */;
  %1790 = sigmoid(%1788) /* ty=Tensor[(1, 1024), float32] */;
  %1791 = tanh(%1789) /* ty=Tensor[(1, 1024), float32] */;
  %1792 = multiply(%1787, %1751) /* ty=Tensor[(1, 1024), float32] */;
  %1793 = multiply(%1790, %1791) /* ty=Tensor[(1, 1024), float32] */;
  %1794 = add(%1792, %1793) /* ty=Tensor[(1, 1024), float32] */;
  %1795 = sigmoid(%1785) /* ty=Tensor[(1, 1024), float32] */;
  %1796 = tanh(%1794) /* ty=Tensor[(1, 1024), float32] */;
  %1797 = multiply(%1795, %1796) /* ty=Tensor[(1, 1024), float32] */;
  %1798 = multiply(%1774, %1775) /* ty=Tensor[(1, 1024), float32] */;
  %1799 = (%1797, %1798) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1800 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1801 = concatenate(%1799, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1802 = concatenate(%1800, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1803 = nn.dense(%1801, %1802, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1804 = add(%1803, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1805 = add(%1804, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1806 = split(%1805, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1807 = %1806.3 /* ty=Tensor[(1, 1024), float32] */;
  %1808 = %1806.1 /* ty=Tensor[(1, 1024), float32] */;
  %1809 = sigmoid(%1808) /* ty=Tensor[(1, 1024), float32] */;
  %1810 = %1806.0 /* ty=Tensor[(1, 1024), float32] */;
  %1811 = %1806.2 /* ty=Tensor[(1, 1024), float32] */;
  %1812 = sigmoid(%1810) /* ty=Tensor[(1, 1024), float32] */;
  %1813 = tanh(%1811) /* ty=Tensor[(1, 1024), float32] */;
  %1814 = multiply(%1809, %1773) /* ty=Tensor[(1, 1024), float32] */;
  %1815 = multiply(%1812, %1813) /* ty=Tensor[(1, 1024), float32] */;
  %1816 = add(%1814, %1815) /* ty=Tensor[(1, 1024), float32] */;
  %1817 = sigmoid(%1807) /* ty=Tensor[(1, 1024), float32] */;
  %1818 = tanh(%1816) /* ty=Tensor[(1, 1024), float32] */;
  %1819 = %555.29 /* ty=Tensor[(1, 240), float32] */;
  %1820 = (%1819, %1797) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1821 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1822 = concatenate(%1820, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1823 = concatenate(%1821, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1824 = nn.dense(%1822, %1823, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1825 = add(%1824, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1826 = add(%1825, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1827 = split(%1826, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1828 = %1827.3 /* ty=Tensor[(1, 1024), float32] */;
  %1829 = %1827.1 /* ty=Tensor[(1, 1024), float32] */;
  %1830 = sigmoid(%1829) /* ty=Tensor[(1, 1024), float32] */;
  %1831 = %1827.0 /* ty=Tensor[(1, 1024), float32] */;
  %1832 = %1827.2 /* ty=Tensor[(1, 1024), float32] */;
  %1833 = sigmoid(%1831) /* ty=Tensor[(1, 1024), float32] */;
  %1834 = tanh(%1832) /* ty=Tensor[(1, 1024), float32] */;
  %1835 = multiply(%1830, %1794) /* ty=Tensor[(1, 1024), float32] */;
  %1836 = multiply(%1833, %1834) /* ty=Tensor[(1, 1024), float32] */;
  %1837 = add(%1835, %1836) /* ty=Tensor[(1, 1024), float32] */;
  %1838 = sigmoid(%1828) /* ty=Tensor[(1, 1024), float32] */;
  %1839 = tanh(%1837) /* ty=Tensor[(1, 1024), float32] */;
  %1840 = multiply(%1838, %1839) /* ty=Tensor[(1, 1024), float32] */;
  %1841 = multiply(%1817, %1818) /* ty=Tensor[(1, 1024), float32] */;
  %1842 = (%1840, %1841) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1843 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1844 = concatenate(%1842, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1845 = concatenate(%1843, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1846 = nn.dense(%1844, %1845, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1847 = add(%1846, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1848 = add(%1847, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1849 = split(%1848, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1850 = %1849.3 /* ty=Tensor[(1, 1024), float32] */;
  %1851 = %1849.1 /* ty=Tensor[(1, 1024), float32] */;
  %1852 = sigmoid(%1851) /* ty=Tensor[(1, 1024), float32] */;
  %1853 = %1849.0 /* ty=Tensor[(1, 1024), float32] */;
  %1854 = %1849.2 /* ty=Tensor[(1, 1024), float32] */;
  %1855 = sigmoid(%1853) /* ty=Tensor[(1, 1024), float32] */;
  %1856 = tanh(%1854) /* ty=Tensor[(1, 1024), float32] */;
  %1857 = multiply(%1852, %1816) /* ty=Tensor[(1, 1024), float32] */;
  %1858 = multiply(%1855, %1856) /* ty=Tensor[(1, 1024), float32] */;
  %1859 = add(%1857, %1858) /* ty=Tensor[(1, 1024), float32] */;
  %1860 = sigmoid(%1850) /* ty=Tensor[(1, 1024), float32] */;
  %1861 = tanh(%1859) /* ty=Tensor[(1, 1024), float32] */;
  %1862 = %555.30 /* ty=Tensor[(1, 240), float32] */;
  %1863 = (%1862, %1840) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1864 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1865 = concatenate(%1863, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1866 = concatenate(%1864, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1867 = nn.dense(%1865, %1866, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1868 = add(%1867, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1869 = add(%1868, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1870 = split(%1869, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1871 = %1870.3 /* ty=Tensor[(1, 1024), float32] */;
  %1872 = %1870.1 /* ty=Tensor[(1, 1024), float32] */;
  %1873 = sigmoid(%1872) /* ty=Tensor[(1, 1024), float32] */;
  %1874 = %1870.0 /* ty=Tensor[(1, 1024), float32] */;
  %1875 = %1870.2 /* ty=Tensor[(1, 1024), float32] */;
  %1876 = sigmoid(%1874) /* ty=Tensor[(1, 1024), float32] */;
  %1877 = tanh(%1875) /* ty=Tensor[(1, 1024), float32] */;
  %1878 = multiply(%1873, %1837) /* ty=Tensor[(1, 1024), float32] */;
  %1879 = multiply(%1876, %1877) /* ty=Tensor[(1, 1024), float32] */;
  %1880 = add(%1878, %1879) /* ty=Tensor[(1, 1024), float32] */;
  %1881 = sigmoid(%1871) /* ty=Tensor[(1, 1024), float32] */;
  %1882 = tanh(%1880) /* ty=Tensor[(1, 1024), float32] */;
  %1883 = multiply(%1881, %1882) /* ty=Tensor[(1, 1024), float32] */;
  %1884 = multiply(%1860, %1861) /* ty=Tensor[(1, 1024), float32] */;
  %1885 = (%1883, %1884) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1886 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1887 = concatenate(%1885, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1888 = concatenate(%1886, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1889 = nn.dense(%1887, %1888, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1890 = add(%1889, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1891 = add(%1890, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1892 = split(%1891, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1893 = %1892.3 /* ty=Tensor[(1, 1024), float32] */;
  %1894 = %1892.1 /* ty=Tensor[(1, 1024), float32] */;
  %1895 = sigmoid(%1894) /* ty=Tensor[(1, 1024), float32] */;
  %1896 = %1892.0 /* ty=Tensor[(1, 1024), float32] */;
  %1897 = %1892.2 /* ty=Tensor[(1, 1024), float32] */;
  %1898 = sigmoid(%1896) /* ty=Tensor[(1, 1024), float32] */;
  %1899 = tanh(%1897) /* ty=Tensor[(1, 1024), float32] */;
  %1900 = multiply(%1895, %1859) /* ty=Tensor[(1, 1024), float32] */;
  %1901 = multiply(%1898, %1899) /* ty=Tensor[(1, 1024), float32] */;
  %1902 = add(%1900, %1901) /* ty=Tensor[(1, 1024), float32] */;
  %1903 = sigmoid(%1893) /* ty=Tensor[(1, 1024), float32] */;
  %1904 = tanh(%1902) /* ty=Tensor[(1, 1024), float32] */;
  %1905 = %555.31 /* ty=Tensor[(1, 240), float32] */;
  %1906 = (%1905, %1883) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1907 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1908 = concatenate(%1906, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1909 = concatenate(%1907, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1910 = nn.dense(%1908, %1909, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1911 = add(%1910, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1912 = add(%1911, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1913 = split(%1912, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1914 = %1913.3 /* ty=Tensor[(1, 1024), float32] */;
  %1915 = %1913.1 /* ty=Tensor[(1, 1024), float32] */;
  %1916 = sigmoid(%1915) /* ty=Tensor[(1, 1024), float32] */;
  %1917 = %1913.0 /* ty=Tensor[(1, 1024), float32] */;
  %1918 = %1913.2 /* ty=Tensor[(1, 1024), float32] */;
  %1919 = sigmoid(%1917) /* ty=Tensor[(1, 1024), float32] */;
  %1920 = tanh(%1918) /* ty=Tensor[(1, 1024), float32] */;
  %1921 = multiply(%1916, %1880) /* ty=Tensor[(1, 1024), float32] */;
  %1922 = multiply(%1919, %1920) /* ty=Tensor[(1, 1024), float32] */;
  %1923 = add(%1921, %1922) /* ty=Tensor[(1, 1024), float32] */;
  %1924 = sigmoid(%1914) /* ty=Tensor[(1, 1024), float32] */;
  %1925 = tanh(%1923) /* ty=Tensor[(1, 1024), float32] */;
  %1926 = multiply(%1924, %1925) /* ty=Tensor[(1, 1024), float32] */;
  %1927 = multiply(%1903, %1904) /* ty=Tensor[(1, 1024), float32] */;
  %1928 = (%1926, %1927) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1929 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1930 = concatenate(%1928, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1931 = concatenate(%1929, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1932 = nn.dense(%1930, %1931, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1933 = add(%1932, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1934 = add(%1933, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1935 = split(%1934, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1936 = %1935.3 /* ty=Tensor[(1, 1024), float32] */;
  %1937 = %1935.1 /* ty=Tensor[(1, 1024), float32] */;
  %1938 = sigmoid(%1937) /* ty=Tensor[(1, 1024), float32] */;
  %1939 = %1935.0 /* ty=Tensor[(1, 1024), float32] */;
  %1940 = %1935.2 /* ty=Tensor[(1, 1024), float32] */;
  %1941 = sigmoid(%1939) /* ty=Tensor[(1, 1024), float32] */;
  %1942 = tanh(%1940) /* ty=Tensor[(1, 1024), float32] */;
  %1943 = multiply(%1938, %1902) /* ty=Tensor[(1, 1024), float32] */;
  %1944 = multiply(%1941, %1942) /* ty=Tensor[(1, 1024), float32] */;
  %1945 = add(%1943, %1944) /* ty=Tensor[(1, 1024), float32] */;
  %1946 = sigmoid(%1936) /* ty=Tensor[(1, 1024), float32] */;
  %1947 = tanh(%1945) /* ty=Tensor[(1, 1024), float32] */;
  %1948 = %555.32 /* ty=Tensor[(1, 240), float32] */;
  %1949 = (%1948, %1926) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1950 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1951 = concatenate(%1949, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1952 = concatenate(%1950, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1953 = nn.dense(%1951, %1952, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1954 = add(%1953, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1955 = add(%1954, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1956 = split(%1955, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1957 = %1956.3 /* ty=Tensor[(1, 1024), float32] */;
  %1958 = %1956.1 /* ty=Tensor[(1, 1024), float32] */;
  %1959 = sigmoid(%1958) /* ty=Tensor[(1, 1024), float32] */;
  %1960 = %1956.0 /* ty=Tensor[(1, 1024), float32] */;
  %1961 = %1956.2 /* ty=Tensor[(1, 1024), float32] */;
  %1962 = sigmoid(%1960) /* ty=Tensor[(1, 1024), float32] */;
  %1963 = tanh(%1961) /* ty=Tensor[(1, 1024), float32] */;
  %1964 = multiply(%1959, %1923) /* ty=Tensor[(1, 1024), float32] */;
  %1965 = multiply(%1962, %1963) /* ty=Tensor[(1, 1024), float32] */;
  %1966 = add(%1964, %1965) /* ty=Tensor[(1, 1024), float32] */;
  %1967 = sigmoid(%1957) /* ty=Tensor[(1, 1024), float32] */;
  %1968 = tanh(%1966) /* ty=Tensor[(1, 1024), float32] */;
  %1969 = multiply(%1967, %1968) /* ty=Tensor[(1, 1024), float32] */;
  %1970 = multiply(%1946, %1947) /* ty=Tensor[(1, 1024), float32] */;
  %1971 = (%1969, %1970) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1972 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %1973 = concatenate(%1971, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %1974 = concatenate(%1972, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %1975 = nn.dense(%1973, %1974, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1976 = add(%1975, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1977 = add(%1976, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %1978 = split(%1977, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %1979 = %1978.3 /* ty=Tensor[(1, 1024), float32] */;
  %1980 = %1978.1 /* ty=Tensor[(1, 1024), float32] */;
  %1981 = sigmoid(%1980) /* ty=Tensor[(1, 1024), float32] */;
  %1982 = %1978.0 /* ty=Tensor[(1, 1024), float32] */;
  %1983 = %1978.2 /* ty=Tensor[(1, 1024), float32] */;
  %1984 = sigmoid(%1982) /* ty=Tensor[(1, 1024), float32] */;
  %1985 = tanh(%1983) /* ty=Tensor[(1, 1024), float32] */;
  %1986 = multiply(%1981, %1945) /* ty=Tensor[(1, 1024), float32] */;
  %1987 = multiply(%1984, %1985) /* ty=Tensor[(1, 1024), float32] */;
  %1988 = add(%1986, %1987) /* ty=Tensor[(1, 1024), float32] */;
  %1989 = sigmoid(%1979) /* ty=Tensor[(1, 1024), float32] */;
  %1990 = tanh(%1988) /* ty=Tensor[(1, 1024), float32] */;
  %1991 = %555.33 /* ty=Tensor[(1, 240), float32] */;
  %1992 = (%1991, %1969) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %1993 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %1994 = concatenate(%1992, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %1995 = concatenate(%1993, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %1996 = nn.dense(%1994, %1995, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %1997 = add(%1996, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1998 = add(%1997, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %1999 = split(%1998, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2000 = %1999.3 /* ty=Tensor[(1, 1024), float32] */;
  %2001 = %1999.1 /* ty=Tensor[(1, 1024), float32] */;
  %2002 = sigmoid(%2001) /* ty=Tensor[(1, 1024), float32] */;
  %2003 = %1999.0 /* ty=Tensor[(1, 1024), float32] */;
  %2004 = %1999.2 /* ty=Tensor[(1, 1024), float32] */;
  %2005 = sigmoid(%2003) /* ty=Tensor[(1, 1024), float32] */;
  %2006 = tanh(%2004) /* ty=Tensor[(1, 1024), float32] */;
  %2007 = multiply(%2002, %1966) /* ty=Tensor[(1, 1024), float32] */;
  %2008 = multiply(%2005, %2006) /* ty=Tensor[(1, 1024), float32] */;
  %2009 = add(%2007, %2008) /* ty=Tensor[(1, 1024), float32] */;
  %2010 = sigmoid(%2000) /* ty=Tensor[(1, 1024), float32] */;
  %2011 = tanh(%2009) /* ty=Tensor[(1, 1024), float32] */;
  %2012 = multiply(%2010, %2011) /* ty=Tensor[(1, 1024), float32] */;
  %2013 = multiply(%1989, %1990) /* ty=Tensor[(1, 1024), float32] */;
  %2014 = (%2012, %2013) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2015 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2016 = concatenate(%2014, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2017 = concatenate(%2015, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2018 = nn.dense(%2016, %2017, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2019 = add(%2018, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2020 = add(%2019, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2021 = split(%2020, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2022 = %2021.3 /* ty=Tensor[(1, 1024), float32] */;
  %2023 = %2021.1 /* ty=Tensor[(1, 1024), float32] */;
  %2024 = sigmoid(%2023) /* ty=Tensor[(1, 1024), float32] */;
  %2025 = %2021.0 /* ty=Tensor[(1, 1024), float32] */;
  %2026 = %2021.2 /* ty=Tensor[(1, 1024), float32] */;
  %2027 = sigmoid(%2025) /* ty=Tensor[(1, 1024), float32] */;
  %2028 = tanh(%2026) /* ty=Tensor[(1, 1024), float32] */;
  %2029 = multiply(%2024, %1988) /* ty=Tensor[(1, 1024), float32] */;
  %2030 = multiply(%2027, %2028) /* ty=Tensor[(1, 1024), float32] */;
  %2031 = add(%2029, %2030) /* ty=Tensor[(1, 1024), float32] */;
  %2032 = sigmoid(%2022) /* ty=Tensor[(1, 1024), float32] */;
  %2033 = tanh(%2031) /* ty=Tensor[(1, 1024), float32] */;
  %2034 = %555.34 /* ty=Tensor[(1, 240), float32] */;
  %2035 = (%2034, %2012) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2036 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2037 = concatenate(%2035, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2038 = concatenate(%2036, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2039 = nn.dense(%2037, %2038, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2040 = add(%2039, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2041 = add(%2040, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2042 = split(%2041, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2043 = %2042.3 /* ty=Tensor[(1, 1024), float32] */;
  %2044 = %2042.1 /* ty=Tensor[(1, 1024), float32] */;
  %2045 = sigmoid(%2044) /* ty=Tensor[(1, 1024), float32] */;
  %2046 = %2042.0 /* ty=Tensor[(1, 1024), float32] */;
  %2047 = %2042.2 /* ty=Tensor[(1, 1024), float32] */;
  %2048 = sigmoid(%2046) /* ty=Tensor[(1, 1024), float32] */;
  %2049 = tanh(%2047) /* ty=Tensor[(1, 1024), float32] */;
  %2050 = multiply(%2045, %2009) /* ty=Tensor[(1, 1024), float32] */;
  %2051 = multiply(%2048, %2049) /* ty=Tensor[(1, 1024), float32] */;
  %2052 = add(%2050, %2051) /* ty=Tensor[(1, 1024), float32] */;
  %2053 = sigmoid(%2043) /* ty=Tensor[(1, 1024), float32] */;
  %2054 = tanh(%2052) /* ty=Tensor[(1, 1024), float32] */;
  %2055 = multiply(%2053, %2054) /* ty=Tensor[(1, 1024), float32] */;
  %2056 = multiply(%2032, %2033) /* ty=Tensor[(1, 1024), float32] */;
  %2057 = (%2055, %2056) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2058 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2059 = concatenate(%2057, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2060 = concatenate(%2058, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2061 = nn.dense(%2059, %2060, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2062 = add(%2061, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2063 = add(%2062, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2064 = split(%2063, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2065 = %2064.3 /* ty=Tensor[(1, 1024), float32] */;
  %2066 = %2064.1 /* ty=Tensor[(1, 1024), float32] */;
  %2067 = sigmoid(%2066) /* ty=Tensor[(1, 1024), float32] */;
  %2068 = %2064.0 /* ty=Tensor[(1, 1024), float32] */;
  %2069 = %2064.2 /* ty=Tensor[(1, 1024), float32] */;
  %2070 = sigmoid(%2068) /* ty=Tensor[(1, 1024), float32] */;
  %2071 = tanh(%2069) /* ty=Tensor[(1, 1024), float32] */;
  %2072 = multiply(%2067, %2031) /* ty=Tensor[(1, 1024), float32] */;
  %2073 = multiply(%2070, %2071) /* ty=Tensor[(1, 1024), float32] */;
  %2074 = add(%2072, %2073) /* ty=Tensor[(1, 1024), float32] */;
  %2075 = sigmoid(%2065) /* ty=Tensor[(1, 1024), float32] */;
  %2076 = tanh(%2074) /* ty=Tensor[(1, 1024), float32] */;
  %2077 = %555.35 /* ty=Tensor[(1, 240), float32] */;
  %2078 = (%2077, %2055) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2079 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2080 = concatenate(%2078, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2081 = concatenate(%2079, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2082 = nn.dense(%2080, %2081, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2083 = add(%2082, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2084 = add(%2083, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2085 = split(%2084, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2086 = %2085.3 /* ty=Tensor[(1, 1024), float32] */;
  %2087 = %2085.1 /* ty=Tensor[(1, 1024), float32] */;
  %2088 = sigmoid(%2087) /* ty=Tensor[(1, 1024), float32] */;
  %2089 = %2085.0 /* ty=Tensor[(1, 1024), float32] */;
  %2090 = %2085.2 /* ty=Tensor[(1, 1024), float32] */;
  %2091 = sigmoid(%2089) /* ty=Tensor[(1, 1024), float32] */;
  %2092 = tanh(%2090) /* ty=Tensor[(1, 1024), float32] */;
  %2093 = multiply(%2088, %2052) /* ty=Tensor[(1, 1024), float32] */;
  %2094 = multiply(%2091, %2092) /* ty=Tensor[(1, 1024), float32] */;
  %2095 = add(%2093, %2094) /* ty=Tensor[(1, 1024), float32] */;
  %2096 = sigmoid(%2086) /* ty=Tensor[(1, 1024), float32] */;
  %2097 = tanh(%2095) /* ty=Tensor[(1, 1024), float32] */;
  %2098 = multiply(%2096, %2097) /* ty=Tensor[(1, 1024), float32] */;
  %2099 = multiply(%2075, %2076) /* ty=Tensor[(1, 1024), float32] */;
  %2100 = (%2098, %2099) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2101 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2102 = concatenate(%2100, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2103 = concatenate(%2101, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2104 = nn.dense(%2102, %2103, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2105 = add(%2104, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2106 = add(%2105, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2107 = split(%2106, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2108 = %2107.3 /* ty=Tensor[(1, 1024), float32] */;
  %2109 = %2107.1 /* ty=Tensor[(1, 1024), float32] */;
  %2110 = sigmoid(%2109) /* ty=Tensor[(1, 1024), float32] */;
  %2111 = %2107.0 /* ty=Tensor[(1, 1024), float32] */;
  %2112 = %2107.2 /* ty=Tensor[(1, 1024), float32] */;
  %2113 = sigmoid(%2111) /* ty=Tensor[(1, 1024), float32] */;
  %2114 = tanh(%2112) /* ty=Tensor[(1, 1024), float32] */;
  %2115 = multiply(%2110, %2074) /* ty=Tensor[(1, 1024), float32] */;
  %2116 = multiply(%2113, %2114) /* ty=Tensor[(1, 1024), float32] */;
  %2117 = add(%2115, %2116) /* ty=Tensor[(1, 1024), float32] */;
  %2118 = sigmoid(%2108) /* ty=Tensor[(1, 1024), float32] */;
  %2119 = tanh(%2117) /* ty=Tensor[(1, 1024), float32] */;
  %2120 = %555.36 /* ty=Tensor[(1, 240), float32] */;
  %2121 = (%2120, %2098) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2122 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2123 = concatenate(%2121, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2124 = concatenate(%2122, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2125 = nn.dense(%2123, %2124, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2126 = add(%2125, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2127 = add(%2126, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2128 = split(%2127, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2129 = %2128.3 /* ty=Tensor[(1, 1024), float32] */;
  %2130 = %2128.1 /* ty=Tensor[(1, 1024), float32] */;
  %2131 = sigmoid(%2130) /* ty=Tensor[(1, 1024), float32] */;
  %2132 = %2128.0 /* ty=Tensor[(1, 1024), float32] */;
  %2133 = %2128.2 /* ty=Tensor[(1, 1024), float32] */;
  %2134 = sigmoid(%2132) /* ty=Tensor[(1, 1024), float32] */;
  %2135 = tanh(%2133) /* ty=Tensor[(1, 1024), float32] */;
  %2136 = multiply(%2131, %2095) /* ty=Tensor[(1, 1024), float32] */;
  %2137 = multiply(%2134, %2135) /* ty=Tensor[(1, 1024), float32] */;
  %2138 = add(%2136, %2137) /* ty=Tensor[(1, 1024), float32] */;
  %2139 = sigmoid(%2129) /* ty=Tensor[(1, 1024), float32] */;
  %2140 = tanh(%2138) /* ty=Tensor[(1, 1024), float32] */;
  %2141 = multiply(%2139, %2140) /* ty=Tensor[(1, 1024), float32] */;
  %2142 = multiply(%2118, %2119) /* ty=Tensor[(1, 1024), float32] */;
  %2143 = (%2141, %2142) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2144 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2145 = concatenate(%2143, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2146 = concatenate(%2144, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2147 = nn.dense(%2145, %2146, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2148 = add(%2147, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2149 = add(%2148, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2150 = split(%2149, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2151 = %2150.3 /* ty=Tensor[(1, 1024), float32] */;
  %2152 = %2150.1 /* ty=Tensor[(1, 1024), float32] */;
  %2153 = sigmoid(%2152) /* ty=Tensor[(1, 1024), float32] */;
  %2154 = %2150.0 /* ty=Tensor[(1, 1024), float32] */;
  %2155 = %2150.2 /* ty=Tensor[(1, 1024), float32] */;
  %2156 = sigmoid(%2154) /* ty=Tensor[(1, 1024), float32] */;
  %2157 = tanh(%2155) /* ty=Tensor[(1, 1024), float32] */;
  %2158 = multiply(%2153, %2117) /* ty=Tensor[(1, 1024), float32] */;
  %2159 = multiply(%2156, %2157) /* ty=Tensor[(1, 1024), float32] */;
  %2160 = add(%2158, %2159) /* ty=Tensor[(1, 1024), float32] */;
  %2161 = sigmoid(%2151) /* ty=Tensor[(1, 1024), float32] */;
  %2162 = tanh(%2160) /* ty=Tensor[(1, 1024), float32] */;
  %2163 = %555.37 /* ty=Tensor[(1, 240), float32] */;
  %2164 = (%2163, %2141) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2165 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2166 = concatenate(%2164, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2167 = concatenate(%2165, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2168 = nn.dense(%2166, %2167, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2169 = add(%2168, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2170 = add(%2169, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2171 = split(%2170, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2172 = %2171.3 /* ty=Tensor[(1, 1024), float32] */;
  %2173 = %2171.1 /* ty=Tensor[(1, 1024), float32] */;
  %2174 = sigmoid(%2173) /* ty=Tensor[(1, 1024), float32] */;
  %2175 = %2171.0 /* ty=Tensor[(1, 1024), float32] */;
  %2176 = %2171.2 /* ty=Tensor[(1, 1024), float32] */;
  %2177 = sigmoid(%2175) /* ty=Tensor[(1, 1024), float32] */;
  %2178 = tanh(%2176) /* ty=Tensor[(1, 1024), float32] */;
  %2179 = multiply(%2174, %2138) /* ty=Tensor[(1, 1024), float32] */;
  %2180 = multiply(%2177, %2178) /* ty=Tensor[(1, 1024), float32] */;
  %2181 = add(%2179, %2180) /* ty=Tensor[(1, 1024), float32] */;
  %2182 = sigmoid(%2172) /* ty=Tensor[(1, 1024), float32] */;
  %2183 = tanh(%2181) /* ty=Tensor[(1, 1024), float32] */;
  %2184 = multiply(%2182, %2183) /* ty=Tensor[(1, 1024), float32] */;
  %2185 = multiply(%2161, %2162) /* ty=Tensor[(1, 1024), float32] */;
  %2186 = (%2184, %2185) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2187 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2188 = concatenate(%2186, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2189 = concatenate(%2187, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2190 = nn.dense(%2188, %2189, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2191 = add(%2190, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2192 = add(%2191, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2193 = split(%2192, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2194 = %2193.3 /* ty=Tensor[(1, 1024), float32] */;
  %2195 = %2193.1 /* ty=Tensor[(1, 1024), float32] */;
  %2196 = sigmoid(%2195) /* ty=Tensor[(1, 1024), float32] */;
  %2197 = %2193.0 /* ty=Tensor[(1, 1024), float32] */;
  %2198 = %2193.2 /* ty=Tensor[(1, 1024), float32] */;
  %2199 = sigmoid(%2197) /* ty=Tensor[(1, 1024), float32] */;
  %2200 = tanh(%2198) /* ty=Tensor[(1, 1024), float32] */;
  %2201 = multiply(%2196, %2160) /* ty=Tensor[(1, 1024), float32] */;
  %2202 = multiply(%2199, %2200) /* ty=Tensor[(1, 1024), float32] */;
  %2203 = add(%2201, %2202) /* ty=Tensor[(1, 1024), float32] */;
  %2204 = sigmoid(%2194) /* ty=Tensor[(1, 1024), float32] */;
  %2205 = tanh(%2203) /* ty=Tensor[(1, 1024), float32] */;
  %2206 = %555.38 /* ty=Tensor[(1, 240), float32] */;
  %2207 = (%2206, %2184) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2208 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2209 = concatenate(%2207, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2210 = concatenate(%2208, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2211 = nn.dense(%2209, %2210, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2212 = add(%2211, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2213 = add(%2212, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2214 = split(%2213, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2215 = %2214.3 /* ty=Tensor[(1, 1024), float32] */;
  %2216 = %2214.1 /* ty=Tensor[(1, 1024), float32] */;
  %2217 = sigmoid(%2216) /* ty=Tensor[(1, 1024), float32] */;
  %2218 = %2214.0 /* ty=Tensor[(1, 1024), float32] */;
  %2219 = %2214.2 /* ty=Tensor[(1, 1024), float32] */;
  %2220 = sigmoid(%2218) /* ty=Tensor[(1, 1024), float32] */;
  %2221 = tanh(%2219) /* ty=Tensor[(1, 1024), float32] */;
  %2222 = multiply(%2217, %2181) /* ty=Tensor[(1, 1024), float32] */;
  %2223 = multiply(%2220, %2221) /* ty=Tensor[(1, 1024), float32] */;
  %2224 = add(%2222, %2223) /* ty=Tensor[(1, 1024), float32] */;
  %2225 = sigmoid(%2215) /* ty=Tensor[(1, 1024), float32] */;
  %2226 = tanh(%2224) /* ty=Tensor[(1, 1024), float32] */;
  %2227 = multiply(%2225, %2226) /* ty=Tensor[(1, 1024), float32] */;
  %2228 = multiply(%2204, %2205) /* ty=Tensor[(1, 1024), float32] */;
  %2229 = (%2227, %2228) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2230 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2231 = concatenate(%2229, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2232 = concatenate(%2230, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2233 = nn.dense(%2231, %2232, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2234 = add(%2233, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2235 = add(%2234, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2236 = split(%2235, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2237 = %2236.3 /* ty=Tensor[(1, 1024), float32] */;
  %2238 = %2236.1 /* ty=Tensor[(1, 1024), float32] */;
  %2239 = sigmoid(%2238) /* ty=Tensor[(1, 1024), float32] */;
  %2240 = %2236.0 /* ty=Tensor[(1, 1024), float32] */;
  %2241 = %2236.2 /* ty=Tensor[(1, 1024), float32] */;
  %2242 = sigmoid(%2240) /* ty=Tensor[(1, 1024), float32] */;
  %2243 = tanh(%2241) /* ty=Tensor[(1, 1024), float32] */;
  %2244 = multiply(%2239, %2203) /* ty=Tensor[(1, 1024), float32] */;
  %2245 = multiply(%2242, %2243) /* ty=Tensor[(1, 1024), float32] */;
  %2246 = add(%2244, %2245) /* ty=Tensor[(1, 1024), float32] */;
  %2247 = sigmoid(%2237) /* ty=Tensor[(1, 1024), float32] */;
  %2248 = tanh(%2246) /* ty=Tensor[(1, 1024), float32] */;
  %2249 = %555.39 /* ty=Tensor[(1, 240), float32] */;
  %2250 = (%2249, %2227) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2251 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2252 = concatenate(%2250, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2253 = concatenate(%2251, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2254 = nn.dense(%2252, %2253, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2255 = add(%2254, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2256 = add(%2255, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2257 = split(%2256, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2258 = %2257.3 /* ty=Tensor[(1, 1024), float32] */;
  %2259 = %2257.1 /* ty=Tensor[(1, 1024), float32] */;
  %2260 = sigmoid(%2259) /* ty=Tensor[(1, 1024), float32] */;
  %2261 = %2257.0 /* ty=Tensor[(1, 1024), float32] */;
  %2262 = %2257.2 /* ty=Tensor[(1, 1024), float32] */;
  %2263 = sigmoid(%2261) /* ty=Tensor[(1, 1024), float32] */;
  %2264 = tanh(%2262) /* ty=Tensor[(1, 1024), float32] */;
  %2265 = multiply(%2260, %2224) /* ty=Tensor[(1, 1024), float32] */;
  %2266 = multiply(%2263, %2264) /* ty=Tensor[(1, 1024), float32] */;
  %2267 = add(%2265, %2266) /* ty=Tensor[(1, 1024), float32] */;
  %2268 = sigmoid(%2258) /* ty=Tensor[(1, 1024), float32] */;
  %2269 = tanh(%2267) /* ty=Tensor[(1, 1024), float32] */;
  %2270 = multiply(%2268, %2269) /* ty=Tensor[(1, 1024), float32] */;
  %2271 = multiply(%2247, %2248) /* ty=Tensor[(1, 1024), float32] */;
  %2272 = (%2270, %2271) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2273 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2274 = concatenate(%2272, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2275 = concatenate(%2273, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2276 = nn.dense(%2274, %2275, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2277 = add(%2276, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2278 = add(%2277, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2279 = split(%2278, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2280 = %2279.3 /* ty=Tensor[(1, 1024), float32] */;
  %2281 = %2279.1 /* ty=Tensor[(1, 1024), float32] */;
  %2282 = sigmoid(%2281) /* ty=Tensor[(1, 1024), float32] */;
  %2283 = %2279.0 /* ty=Tensor[(1, 1024), float32] */;
  %2284 = %2279.2 /* ty=Tensor[(1, 1024), float32] */;
  %2285 = sigmoid(%2283) /* ty=Tensor[(1, 1024), float32] */;
  %2286 = tanh(%2284) /* ty=Tensor[(1, 1024), float32] */;
  %2287 = multiply(%2282, %2246) /* ty=Tensor[(1, 1024), float32] */;
  %2288 = multiply(%2285, %2286) /* ty=Tensor[(1, 1024), float32] */;
  %2289 = add(%2287, %2288) /* ty=Tensor[(1, 1024), float32] */;
  %2290 = sigmoid(%2280) /* ty=Tensor[(1, 1024), float32] */;
  %2291 = tanh(%2289) /* ty=Tensor[(1, 1024), float32] */;
  %2292 = %555.40 /* ty=Tensor[(1, 240), float32] */;
  %2293 = (%2292, %2270) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2294 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2295 = concatenate(%2293, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2296 = concatenate(%2294, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2297 = nn.dense(%2295, %2296, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2298 = add(%2297, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2299 = add(%2298, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2300 = split(%2299, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2301 = %2300.3 /* ty=Tensor[(1, 1024), float32] */;
  %2302 = %2300.1 /* ty=Tensor[(1, 1024), float32] */;
  %2303 = sigmoid(%2302) /* ty=Tensor[(1, 1024), float32] */;
  %2304 = %2300.0 /* ty=Tensor[(1, 1024), float32] */;
  %2305 = %2300.2 /* ty=Tensor[(1, 1024), float32] */;
  %2306 = sigmoid(%2304) /* ty=Tensor[(1, 1024), float32] */;
  %2307 = tanh(%2305) /* ty=Tensor[(1, 1024), float32] */;
  %2308 = multiply(%2303, %2267) /* ty=Tensor[(1, 1024), float32] */;
  %2309 = multiply(%2306, %2307) /* ty=Tensor[(1, 1024), float32] */;
  %2310 = add(%2308, %2309) /* ty=Tensor[(1, 1024), float32] */;
  %2311 = sigmoid(%2301) /* ty=Tensor[(1, 1024), float32] */;
  %2312 = tanh(%2310) /* ty=Tensor[(1, 1024), float32] */;
  %2313 = multiply(%2311, %2312) /* ty=Tensor[(1, 1024), float32] */;
  %2314 = multiply(%2290, %2291) /* ty=Tensor[(1, 1024), float32] */;
  %2315 = (%2313, %2314) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2316 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2317 = concatenate(%2315, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2318 = concatenate(%2316, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2319 = nn.dense(%2317, %2318, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2320 = add(%2319, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2321 = add(%2320, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2322 = split(%2321, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2323 = %2322.3 /* ty=Tensor[(1, 1024), float32] */;
  %2324 = %2322.1 /* ty=Tensor[(1, 1024), float32] */;
  %2325 = sigmoid(%2324) /* ty=Tensor[(1, 1024), float32] */;
  %2326 = %2322.0 /* ty=Tensor[(1, 1024), float32] */;
  %2327 = %2322.2 /* ty=Tensor[(1, 1024), float32] */;
  %2328 = sigmoid(%2326) /* ty=Tensor[(1, 1024), float32] */;
  %2329 = tanh(%2327) /* ty=Tensor[(1, 1024), float32] */;
  %2330 = multiply(%2325, %2289) /* ty=Tensor[(1, 1024), float32] */;
  %2331 = multiply(%2328, %2329) /* ty=Tensor[(1, 1024), float32] */;
  %2332 = add(%2330, %2331) /* ty=Tensor[(1, 1024), float32] */;
  %2333 = sigmoid(%2323) /* ty=Tensor[(1, 1024), float32] */;
  %2334 = tanh(%2332) /* ty=Tensor[(1, 1024), float32] */;
  %2335 = %555.41 /* ty=Tensor[(1, 240), float32] */;
  %2336 = (%2335, %2313) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2337 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2338 = concatenate(%2336, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2339 = concatenate(%2337, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2340 = nn.dense(%2338, %2339, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2341 = add(%2340, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2342 = add(%2341, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2343 = split(%2342, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2344 = %2343.3 /* ty=Tensor[(1, 1024), float32] */;
  %2345 = %2343.1 /* ty=Tensor[(1, 1024), float32] */;
  %2346 = sigmoid(%2345) /* ty=Tensor[(1, 1024), float32] */;
  %2347 = %2343.0 /* ty=Tensor[(1, 1024), float32] */;
  %2348 = %2343.2 /* ty=Tensor[(1, 1024), float32] */;
  %2349 = sigmoid(%2347) /* ty=Tensor[(1, 1024), float32] */;
  %2350 = tanh(%2348) /* ty=Tensor[(1, 1024), float32] */;
  %2351 = multiply(%2346, %2310) /* ty=Tensor[(1, 1024), float32] */;
  %2352 = multiply(%2349, %2350) /* ty=Tensor[(1, 1024), float32] */;
  %2353 = add(%2351, %2352) /* ty=Tensor[(1, 1024), float32] */;
  %2354 = sigmoid(%2344) /* ty=Tensor[(1, 1024), float32] */;
  %2355 = tanh(%2353) /* ty=Tensor[(1, 1024), float32] */;
  %2356 = multiply(%2354, %2355) /* ty=Tensor[(1, 1024), float32] */;
  %2357 = multiply(%2333, %2334) /* ty=Tensor[(1, 1024), float32] */;
  %2358 = (%2356, %2357) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2359 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2360 = concatenate(%2358, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2361 = concatenate(%2359, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2362 = nn.dense(%2360, %2361, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2363 = add(%2362, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2364 = add(%2363, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2365 = split(%2364, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2366 = %2365.3 /* ty=Tensor[(1, 1024), float32] */;
  %2367 = %2365.1 /* ty=Tensor[(1, 1024), float32] */;
  %2368 = sigmoid(%2367) /* ty=Tensor[(1, 1024), float32] */;
  %2369 = %2365.0 /* ty=Tensor[(1, 1024), float32] */;
  %2370 = %2365.2 /* ty=Tensor[(1, 1024), float32] */;
  %2371 = sigmoid(%2369) /* ty=Tensor[(1, 1024), float32] */;
  %2372 = tanh(%2370) /* ty=Tensor[(1, 1024), float32] */;
  %2373 = multiply(%2368, %2332) /* ty=Tensor[(1, 1024), float32] */;
  %2374 = multiply(%2371, %2372) /* ty=Tensor[(1, 1024), float32] */;
  %2375 = add(%2373, %2374) /* ty=Tensor[(1, 1024), float32] */;
  %2376 = sigmoid(%2366) /* ty=Tensor[(1, 1024), float32] */;
  %2377 = tanh(%2375) /* ty=Tensor[(1, 1024), float32] */;
  %2378 = %555.42 /* ty=Tensor[(1, 240), float32] */;
  %2379 = (%2378, %2356) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2380 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2381 = concatenate(%2379, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2382 = concatenate(%2380, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2383 = nn.dense(%2381, %2382, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2384 = add(%2383, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2385 = add(%2384, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2386 = split(%2385, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2387 = %2386.3 /* ty=Tensor[(1, 1024), float32] */;
  %2388 = %2386.1 /* ty=Tensor[(1, 1024), float32] */;
  %2389 = sigmoid(%2388) /* ty=Tensor[(1, 1024), float32] */;
  %2390 = %2386.0 /* ty=Tensor[(1, 1024), float32] */;
  %2391 = %2386.2 /* ty=Tensor[(1, 1024), float32] */;
  %2392 = sigmoid(%2390) /* ty=Tensor[(1, 1024), float32] */;
  %2393 = tanh(%2391) /* ty=Tensor[(1, 1024), float32] */;
  %2394 = multiply(%2389, %2353) /* ty=Tensor[(1, 1024), float32] */;
  %2395 = multiply(%2392, %2393) /* ty=Tensor[(1, 1024), float32] */;
  %2396 = add(%2394, %2395) /* ty=Tensor[(1, 1024), float32] */;
  %2397 = sigmoid(%2387) /* ty=Tensor[(1, 1024), float32] */;
  %2398 = tanh(%2396) /* ty=Tensor[(1, 1024), float32] */;
  %2399 = multiply(%2397, %2398) /* ty=Tensor[(1, 1024), float32] */;
  %2400 = multiply(%2376, %2377) /* ty=Tensor[(1, 1024), float32] */;
  %2401 = (%2399, %2400) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2402 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2403 = concatenate(%2401, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2404 = concatenate(%2402, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2405 = nn.dense(%2403, %2404, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2406 = add(%2405, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2407 = add(%2406, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2408 = split(%2407, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2409 = %2408.3 /* ty=Tensor[(1, 1024), float32] */;
  %2410 = %2408.1 /* ty=Tensor[(1, 1024), float32] */;
  %2411 = sigmoid(%2410) /* ty=Tensor[(1, 1024), float32] */;
  %2412 = %2408.0 /* ty=Tensor[(1, 1024), float32] */;
  %2413 = %2408.2 /* ty=Tensor[(1, 1024), float32] */;
  %2414 = sigmoid(%2412) /* ty=Tensor[(1, 1024), float32] */;
  %2415 = tanh(%2413) /* ty=Tensor[(1, 1024), float32] */;
  %2416 = multiply(%2411, %2375) /* ty=Tensor[(1, 1024), float32] */;
  %2417 = multiply(%2414, %2415) /* ty=Tensor[(1, 1024), float32] */;
  %2418 = add(%2416, %2417) /* ty=Tensor[(1, 1024), float32] */;
  %2419 = sigmoid(%2409) /* ty=Tensor[(1, 1024), float32] */;
  %2420 = tanh(%2418) /* ty=Tensor[(1, 1024), float32] */;
  %2421 = %555.43 /* ty=Tensor[(1, 240), float32] */;
  %2422 = (%2421, %2399) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2423 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2424 = concatenate(%2422, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2425 = concatenate(%2423, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2426 = nn.dense(%2424, %2425, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2427 = add(%2426, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2428 = add(%2427, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2429 = split(%2428, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2430 = %2429.3 /* ty=Tensor[(1, 1024), float32] */;
  %2431 = %2429.1 /* ty=Tensor[(1, 1024), float32] */;
  %2432 = sigmoid(%2431) /* ty=Tensor[(1, 1024), float32] */;
  %2433 = %2429.0 /* ty=Tensor[(1, 1024), float32] */;
  %2434 = %2429.2 /* ty=Tensor[(1, 1024), float32] */;
  %2435 = sigmoid(%2433) /* ty=Tensor[(1, 1024), float32] */;
  %2436 = tanh(%2434) /* ty=Tensor[(1, 1024), float32] */;
  %2437 = multiply(%2432, %2396) /* ty=Tensor[(1, 1024), float32] */;
  %2438 = multiply(%2435, %2436) /* ty=Tensor[(1, 1024), float32] */;
  %2439 = add(%2437, %2438) /* ty=Tensor[(1, 1024), float32] */;
  %2440 = sigmoid(%2430) /* ty=Tensor[(1, 1024), float32] */;
  %2441 = tanh(%2439) /* ty=Tensor[(1, 1024), float32] */;
  %2442 = multiply(%2440, %2441) /* ty=Tensor[(1, 1024), float32] */;
  %2443 = multiply(%2419, %2420) /* ty=Tensor[(1, 1024), float32] */;
  %2444 = (%2442, %2443) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2445 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2446 = concatenate(%2444, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2447 = concatenate(%2445, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2448 = nn.dense(%2446, %2447, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2449 = add(%2448, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2450 = add(%2449, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2451 = split(%2450, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2452 = %2451.3 /* ty=Tensor[(1, 1024), float32] */;
  %2453 = %2451.1 /* ty=Tensor[(1, 1024), float32] */;
  %2454 = sigmoid(%2453) /* ty=Tensor[(1, 1024), float32] */;
  %2455 = %2451.0 /* ty=Tensor[(1, 1024), float32] */;
  %2456 = %2451.2 /* ty=Tensor[(1, 1024), float32] */;
  %2457 = sigmoid(%2455) /* ty=Tensor[(1, 1024), float32] */;
  %2458 = tanh(%2456) /* ty=Tensor[(1, 1024), float32] */;
  %2459 = multiply(%2454, %2418) /* ty=Tensor[(1, 1024), float32] */;
  %2460 = multiply(%2457, %2458) /* ty=Tensor[(1, 1024), float32] */;
  %2461 = add(%2459, %2460) /* ty=Tensor[(1, 1024), float32] */;
  %2462 = sigmoid(%2452) /* ty=Tensor[(1, 1024), float32] */;
  %2463 = tanh(%2461) /* ty=Tensor[(1, 1024), float32] */;
  %2464 = %555.44 /* ty=Tensor[(1, 240), float32] */;
  %2465 = (%2464, %2442) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2466 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2467 = concatenate(%2465, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2468 = concatenate(%2466, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2469 = nn.dense(%2467, %2468, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2470 = add(%2469, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2471 = add(%2470, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2472 = split(%2471, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2473 = %2472.3 /* ty=Tensor[(1, 1024), float32] */;
  %2474 = %2472.1 /* ty=Tensor[(1, 1024), float32] */;
  %2475 = sigmoid(%2474) /* ty=Tensor[(1, 1024), float32] */;
  %2476 = %2472.0 /* ty=Tensor[(1, 1024), float32] */;
  %2477 = %2472.2 /* ty=Tensor[(1, 1024), float32] */;
  %2478 = sigmoid(%2476) /* ty=Tensor[(1, 1024), float32] */;
  %2479 = tanh(%2477) /* ty=Tensor[(1, 1024), float32] */;
  %2480 = multiply(%2475, %2439) /* ty=Tensor[(1, 1024), float32] */;
  %2481 = multiply(%2478, %2479) /* ty=Tensor[(1, 1024), float32] */;
  %2482 = add(%2480, %2481) /* ty=Tensor[(1, 1024), float32] */;
  %2483 = sigmoid(%2473) /* ty=Tensor[(1, 1024), float32] */;
  %2484 = tanh(%2482) /* ty=Tensor[(1, 1024), float32] */;
  %2485 = multiply(%2483, %2484) /* ty=Tensor[(1, 1024), float32] */;
  %2486 = multiply(%2462, %2463) /* ty=Tensor[(1, 1024), float32] */;
  %2487 = (%2485, %2486) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2488 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2489 = concatenate(%2487, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2490 = concatenate(%2488, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2491 = nn.dense(%2489, %2490, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2492 = add(%2491, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2493 = add(%2492, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2494 = split(%2493, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2495 = %2494.3 /* ty=Tensor[(1, 1024), float32] */;
  %2496 = %2494.1 /* ty=Tensor[(1, 1024), float32] */;
  %2497 = sigmoid(%2496) /* ty=Tensor[(1, 1024), float32] */;
  %2498 = %2494.0 /* ty=Tensor[(1, 1024), float32] */;
  %2499 = %2494.2 /* ty=Tensor[(1, 1024), float32] */;
  %2500 = sigmoid(%2498) /* ty=Tensor[(1, 1024), float32] */;
  %2501 = tanh(%2499) /* ty=Tensor[(1, 1024), float32] */;
  %2502 = multiply(%2497, %2461) /* ty=Tensor[(1, 1024), float32] */;
  %2503 = multiply(%2500, %2501) /* ty=Tensor[(1, 1024), float32] */;
  %2504 = add(%2502, %2503) /* ty=Tensor[(1, 1024), float32] */;
  %2505 = sigmoid(%2495) /* ty=Tensor[(1, 1024), float32] */;
  %2506 = tanh(%2504) /* ty=Tensor[(1, 1024), float32] */;
  %2507 = %555.45 /* ty=Tensor[(1, 240), float32] */;
  %2508 = (%2507, %2485) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2509 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2510 = concatenate(%2508, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2511 = concatenate(%2509, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2512 = nn.dense(%2510, %2511, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2513 = add(%2512, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2514 = add(%2513, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2515 = split(%2514, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2516 = %2515.3 /* ty=Tensor[(1, 1024), float32] */;
  %2517 = %2515.1 /* ty=Tensor[(1, 1024), float32] */;
  %2518 = sigmoid(%2517) /* ty=Tensor[(1, 1024), float32] */;
  %2519 = %2515.0 /* ty=Tensor[(1, 1024), float32] */;
  %2520 = %2515.2 /* ty=Tensor[(1, 1024), float32] */;
  %2521 = sigmoid(%2519) /* ty=Tensor[(1, 1024), float32] */;
  %2522 = tanh(%2520) /* ty=Tensor[(1, 1024), float32] */;
  %2523 = multiply(%2518, %2482) /* ty=Tensor[(1, 1024), float32] */;
  %2524 = multiply(%2521, %2522) /* ty=Tensor[(1, 1024), float32] */;
  %2525 = add(%2523, %2524) /* ty=Tensor[(1, 1024), float32] */;
  %2526 = sigmoid(%2516) /* ty=Tensor[(1, 1024), float32] */;
  %2527 = tanh(%2525) /* ty=Tensor[(1, 1024), float32] */;
  %2528 = multiply(%2526, %2527) /* ty=Tensor[(1, 1024), float32] */;
  %2529 = multiply(%2505, %2506) /* ty=Tensor[(1, 1024), float32] */;
  %2530 = (%2528, %2529) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2531 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2532 = concatenate(%2530, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2533 = concatenate(%2531, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2534 = nn.dense(%2532, %2533, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2535 = add(%2534, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2536 = add(%2535, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2537 = split(%2536, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2538 = %2537.3 /* ty=Tensor[(1, 1024), float32] */;
  %2539 = %2537.1 /* ty=Tensor[(1, 1024), float32] */;
  %2540 = sigmoid(%2539) /* ty=Tensor[(1, 1024), float32] */;
  %2541 = %2537.0 /* ty=Tensor[(1, 1024), float32] */;
  %2542 = %2537.2 /* ty=Tensor[(1, 1024), float32] */;
  %2543 = sigmoid(%2541) /* ty=Tensor[(1, 1024), float32] */;
  %2544 = tanh(%2542) /* ty=Tensor[(1, 1024), float32] */;
  %2545 = multiply(%2540, %2504) /* ty=Tensor[(1, 1024), float32] */;
  %2546 = multiply(%2543, %2544) /* ty=Tensor[(1, 1024), float32] */;
  %2547 = add(%2545, %2546) /* ty=Tensor[(1, 1024), float32] */;
  %2548 = sigmoid(%2538) /* ty=Tensor[(1, 1024), float32] */;
  %2549 = tanh(%2547) /* ty=Tensor[(1, 1024), float32] */;
  %2550 = %555.46 /* ty=Tensor[(1, 240), float32] */;
  %2551 = (%2550, %2528) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2552 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2553 = concatenate(%2551, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2554 = concatenate(%2552, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2555 = nn.dense(%2553, %2554, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2556 = add(%2555, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2557 = add(%2556, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2558 = split(%2557, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2559 = %2558.3 /* ty=Tensor[(1, 1024), float32] */;
  %2560 = %2558.1 /* ty=Tensor[(1, 1024), float32] */;
  %2561 = sigmoid(%2560) /* ty=Tensor[(1, 1024), float32] */;
  %2562 = %2558.0 /* ty=Tensor[(1, 1024), float32] */;
  %2563 = %2558.2 /* ty=Tensor[(1, 1024), float32] */;
  %2564 = sigmoid(%2562) /* ty=Tensor[(1, 1024), float32] */;
  %2565 = tanh(%2563) /* ty=Tensor[(1, 1024), float32] */;
  %2566 = multiply(%2561, %2525) /* ty=Tensor[(1, 1024), float32] */;
  %2567 = multiply(%2564, %2565) /* ty=Tensor[(1, 1024), float32] */;
  %2568 = add(%2566, %2567) /* ty=Tensor[(1, 1024), float32] */;
  %2569 = sigmoid(%2559) /* ty=Tensor[(1, 1024), float32] */;
  %2570 = tanh(%2568) /* ty=Tensor[(1, 1024), float32] */;
  %2571 = multiply(%2569, %2570) /* ty=Tensor[(1, 1024), float32] */;
  %2572 = multiply(%2548, %2549) /* ty=Tensor[(1, 1024), float32] */;
  %2573 = (%2571, %2572) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2574 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2575 = concatenate(%2573, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2576 = concatenate(%2574, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2577 = nn.dense(%2575, %2576, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2578 = add(%2577, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2579 = add(%2578, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2580 = split(%2579, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2581 = %2580.3 /* ty=Tensor[(1, 1024), float32] */;
  %2582 = %2580.1 /* ty=Tensor[(1, 1024), float32] */;
  %2583 = sigmoid(%2582) /* ty=Tensor[(1, 1024), float32] */;
  %2584 = %2580.0 /* ty=Tensor[(1, 1024), float32] */;
  %2585 = %2580.2 /* ty=Tensor[(1, 1024), float32] */;
  %2586 = sigmoid(%2584) /* ty=Tensor[(1, 1024), float32] */;
  %2587 = tanh(%2585) /* ty=Tensor[(1, 1024), float32] */;
  %2588 = multiply(%2583, %2547) /* ty=Tensor[(1, 1024), float32] */;
  %2589 = multiply(%2586, %2587) /* ty=Tensor[(1, 1024), float32] */;
  %2590 = add(%2588, %2589) /* ty=Tensor[(1, 1024), float32] */;
  %2591 = sigmoid(%2581) /* ty=Tensor[(1, 1024), float32] */;
  %2592 = tanh(%2590) /* ty=Tensor[(1, 1024), float32] */;
  %2593 = %555.47 /* ty=Tensor[(1, 240), float32] */;
  %2594 = (%2593, %2571) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2595 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2596 = concatenate(%2594, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2597 = concatenate(%2595, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2598 = nn.dense(%2596, %2597, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2599 = add(%2598, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2600 = add(%2599, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2601 = split(%2600, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2602 = %2601.3 /* ty=Tensor[(1, 1024), float32] */;
  %2603 = %2601.1 /* ty=Tensor[(1, 1024), float32] */;
  %2604 = sigmoid(%2603) /* ty=Tensor[(1, 1024), float32] */;
  %2605 = %2601.0 /* ty=Tensor[(1, 1024), float32] */;
  %2606 = %2601.2 /* ty=Tensor[(1, 1024), float32] */;
  %2607 = sigmoid(%2605) /* ty=Tensor[(1, 1024), float32] */;
  %2608 = tanh(%2606) /* ty=Tensor[(1, 1024), float32] */;
  %2609 = multiply(%2604, %2568) /* ty=Tensor[(1, 1024), float32] */;
  %2610 = multiply(%2607, %2608) /* ty=Tensor[(1, 1024), float32] */;
  %2611 = add(%2609, %2610) /* ty=Tensor[(1, 1024), float32] */;
  %2612 = sigmoid(%2602) /* ty=Tensor[(1, 1024), float32] */;
  %2613 = tanh(%2611) /* ty=Tensor[(1, 1024), float32] */;
  %2614 = multiply(%2612, %2613) /* ty=Tensor[(1, 1024), float32] */;
  %2615 = multiply(%2591, %2592) /* ty=Tensor[(1, 1024), float32] */;
  %2616 = (%2614, %2615) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2617 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2618 = concatenate(%2616, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2619 = concatenate(%2617, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2620 = nn.dense(%2618, %2619, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2621 = add(%2620, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2622 = add(%2621, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2623 = split(%2622, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2624 = %2623.3 /* ty=Tensor[(1, 1024), float32] */;
  %2625 = %2623.1 /* ty=Tensor[(1, 1024), float32] */;
  %2626 = sigmoid(%2625) /* ty=Tensor[(1, 1024), float32] */;
  %2627 = %2623.0 /* ty=Tensor[(1, 1024), float32] */;
  %2628 = %2623.2 /* ty=Tensor[(1, 1024), float32] */;
  %2629 = sigmoid(%2627) /* ty=Tensor[(1, 1024), float32] */;
  %2630 = tanh(%2628) /* ty=Tensor[(1, 1024), float32] */;
  %2631 = multiply(%2626, %2590) /* ty=Tensor[(1, 1024), float32] */;
  %2632 = multiply(%2629, %2630) /* ty=Tensor[(1, 1024), float32] */;
  %2633 = add(%2631, %2632) /* ty=Tensor[(1, 1024), float32] */;
  %2634 = sigmoid(%2624) /* ty=Tensor[(1, 1024), float32] */;
  %2635 = tanh(%2633) /* ty=Tensor[(1, 1024), float32] */;
  %2636 = %555.48 /* ty=Tensor[(1, 240), float32] */;
  %2637 = (%2636, %2614) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2638 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2639 = concatenate(%2637, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2640 = concatenate(%2638, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2641 = nn.dense(%2639, %2640, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2642 = add(%2641, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2643 = add(%2642, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2644 = split(%2643, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2645 = %2644.3 /* ty=Tensor[(1, 1024), float32] */;
  %2646 = %2644.1 /* ty=Tensor[(1, 1024), float32] */;
  %2647 = sigmoid(%2646) /* ty=Tensor[(1, 1024), float32] */;
  %2648 = %2644.0 /* ty=Tensor[(1, 1024), float32] */;
  %2649 = %2644.2 /* ty=Tensor[(1, 1024), float32] */;
  %2650 = sigmoid(%2648) /* ty=Tensor[(1, 1024), float32] */;
  %2651 = tanh(%2649) /* ty=Tensor[(1, 1024), float32] */;
  %2652 = multiply(%2647, %2611) /* ty=Tensor[(1, 1024), float32] */;
  %2653 = multiply(%2650, %2651) /* ty=Tensor[(1, 1024), float32] */;
  %2654 = add(%2652, %2653) /* ty=Tensor[(1, 1024), float32] */;
  %2655 = sigmoid(%2645) /* ty=Tensor[(1, 1024), float32] */;
  %2656 = tanh(%2654) /* ty=Tensor[(1, 1024), float32] */;
  %2657 = multiply(%2655, %2656) /* ty=Tensor[(1, 1024), float32] */;
  %2658 = multiply(%2634, %2635) /* ty=Tensor[(1, 1024), float32] */;
  %2659 = (%2657, %2658) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2660 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2661 = concatenate(%2659, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2662 = concatenate(%2660, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2663 = nn.dense(%2661, %2662, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2664 = add(%2663, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2665 = add(%2664, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2666 = split(%2665, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2667 = %2666.3 /* ty=Tensor[(1, 1024), float32] */;
  %2668 = %2666.1 /* ty=Tensor[(1, 1024), float32] */;
  %2669 = sigmoid(%2668) /* ty=Tensor[(1, 1024), float32] */;
  %2670 = %2666.0 /* ty=Tensor[(1, 1024), float32] */;
  %2671 = %2666.2 /* ty=Tensor[(1, 1024), float32] */;
  %2672 = sigmoid(%2670) /* ty=Tensor[(1, 1024), float32] */;
  %2673 = tanh(%2671) /* ty=Tensor[(1, 1024), float32] */;
  %2674 = multiply(%2669, %2633) /* ty=Tensor[(1, 1024), float32] */;
  %2675 = multiply(%2672, %2673) /* ty=Tensor[(1, 1024), float32] */;
  %2676 = add(%2674, %2675) /* ty=Tensor[(1, 1024), float32] */;
  %2677 = sigmoid(%2667) /* ty=Tensor[(1, 1024), float32] */;
  %2678 = tanh(%2676) /* ty=Tensor[(1, 1024), float32] */;
  %2679 = %555.49 /* ty=Tensor[(1, 240), float32] */;
  %2680 = (%2679, %2657) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2681 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2682 = concatenate(%2680, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2683 = concatenate(%2681, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2684 = nn.dense(%2682, %2683, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2685 = add(%2684, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2686 = add(%2685, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2687 = split(%2686, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2688 = %2687.3 /* ty=Tensor[(1, 1024), float32] */;
  %2689 = %2687.1 /* ty=Tensor[(1, 1024), float32] */;
  %2690 = sigmoid(%2689) /* ty=Tensor[(1, 1024), float32] */;
  %2691 = %2687.0 /* ty=Tensor[(1, 1024), float32] */;
  %2692 = %2687.2 /* ty=Tensor[(1, 1024), float32] */;
  %2693 = sigmoid(%2691) /* ty=Tensor[(1, 1024), float32] */;
  %2694 = tanh(%2692) /* ty=Tensor[(1, 1024), float32] */;
  %2695 = multiply(%2690, %2654) /* ty=Tensor[(1, 1024), float32] */;
  %2696 = multiply(%2693, %2694) /* ty=Tensor[(1, 1024), float32] */;
  %2697 = add(%2695, %2696) /* ty=Tensor[(1, 1024), float32] */;
  %2698 = sigmoid(%2688) /* ty=Tensor[(1, 1024), float32] */;
  %2699 = tanh(%2697) /* ty=Tensor[(1, 1024), float32] */;
  %2700 = multiply(%2698, %2699) /* ty=Tensor[(1, 1024), float32] */;
  %2701 = multiply(%2677, %2678) /* ty=Tensor[(1, 1024), float32] */;
  %2702 = (%2700, %2701) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2703 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2704 = concatenate(%2702, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2705 = concatenate(%2703, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2706 = nn.dense(%2704, %2705, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2707 = add(%2706, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2708 = add(%2707, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2709 = split(%2708, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2710 = %2709.3 /* ty=Tensor[(1, 1024), float32] */;
  %2711 = %2709.1 /* ty=Tensor[(1, 1024), float32] */;
  %2712 = sigmoid(%2711) /* ty=Tensor[(1, 1024), float32] */;
  %2713 = %2709.0 /* ty=Tensor[(1, 1024), float32] */;
  %2714 = %2709.2 /* ty=Tensor[(1, 1024), float32] */;
  %2715 = sigmoid(%2713) /* ty=Tensor[(1, 1024), float32] */;
  %2716 = tanh(%2714) /* ty=Tensor[(1, 1024), float32] */;
  %2717 = multiply(%2712, %2676) /* ty=Tensor[(1, 1024), float32] */;
  %2718 = multiply(%2715, %2716) /* ty=Tensor[(1, 1024), float32] */;
  %2719 = add(%2717, %2718) /* ty=Tensor[(1, 1024), float32] */;
  %2720 = sigmoid(%2710) /* ty=Tensor[(1, 1024), float32] */;
  %2721 = tanh(%2719) /* ty=Tensor[(1, 1024), float32] */;
  %2722 = %555.50 /* ty=Tensor[(1, 240), float32] */;
  %2723 = (%2722, %2700) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2724 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2725 = concatenate(%2723, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2726 = concatenate(%2724, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2727 = nn.dense(%2725, %2726, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2728 = add(%2727, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2729 = add(%2728, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2730 = split(%2729, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2731 = %2730.3 /* ty=Tensor[(1, 1024), float32] */;
  %2732 = %2730.1 /* ty=Tensor[(1, 1024), float32] */;
  %2733 = sigmoid(%2732) /* ty=Tensor[(1, 1024), float32] */;
  %2734 = %2730.0 /* ty=Tensor[(1, 1024), float32] */;
  %2735 = %2730.2 /* ty=Tensor[(1, 1024), float32] */;
  %2736 = sigmoid(%2734) /* ty=Tensor[(1, 1024), float32] */;
  %2737 = tanh(%2735) /* ty=Tensor[(1, 1024), float32] */;
  %2738 = multiply(%2733, %2697) /* ty=Tensor[(1, 1024), float32] */;
  %2739 = multiply(%2736, %2737) /* ty=Tensor[(1, 1024), float32] */;
  %2740 = add(%2738, %2739) /* ty=Tensor[(1, 1024), float32] */;
  %2741 = sigmoid(%2731) /* ty=Tensor[(1, 1024), float32] */;
  %2742 = tanh(%2740) /* ty=Tensor[(1, 1024), float32] */;
  %2743 = multiply(%2741, %2742) /* ty=Tensor[(1, 1024), float32] */;
  %2744 = multiply(%2720, %2721) /* ty=Tensor[(1, 1024), float32] */;
  %2745 = (%2743, %2744) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2746 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2747 = concatenate(%2745, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2748 = concatenate(%2746, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2749 = nn.dense(%2747, %2748, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2750 = add(%2749, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2751 = add(%2750, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2752 = split(%2751, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2753 = %2752.3 /* ty=Tensor[(1, 1024), float32] */;
  %2754 = %2752.1 /* ty=Tensor[(1, 1024), float32] */;
  %2755 = sigmoid(%2754) /* ty=Tensor[(1, 1024), float32] */;
  %2756 = %2752.0 /* ty=Tensor[(1, 1024), float32] */;
  %2757 = %2752.2 /* ty=Tensor[(1, 1024), float32] */;
  %2758 = sigmoid(%2756) /* ty=Tensor[(1, 1024), float32] */;
  %2759 = tanh(%2757) /* ty=Tensor[(1, 1024), float32] */;
  %2760 = multiply(%2755, %2719) /* ty=Tensor[(1, 1024), float32] */;
  %2761 = multiply(%2758, %2759) /* ty=Tensor[(1, 1024), float32] */;
  %2762 = add(%2760, %2761) /* ty=Tensor[(1, 1024), float32] */;
  %2763 = sigmoid(%2753) /* ty=Tensor[(1, 1024), float32] */;
  %2764 = tanh(%2762) /* ty=Tensor[(1, 1024), float32] */;
  %2765 = %555.51 /* ty=Tensor[(1, 240), float32] */;
  %2766 = (%2765, %2743) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2767 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2768 = concatenate(%2766, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2769 = concatenate(%2767, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2770 = nn.dense(%2768, %2769, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2771 = add(%2770, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2772 = add(%2771, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2773 = split(%2772, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2774 = %2773.3 /* ty=Tensor[(1, 1024), float32] */;
  %2775 = %2773.1 /* ty=Tensor[(1, 1024), float32] */;
  %2776 = sigmoid(%2775) /* ty=Tensor[(1, 1024), float32] */;
  %2777 = %2773.0 /* ty=Tensor[(1, 1024), float32] */;
  %2778 = %2773.2 /* ty=Tensor[(1, 1024), float32] */;
  %2779 = sigmoid(%2777) /* ty=Tensor[(1, 1024), float32] */;
  %2780 = tanh(%2778) /* ty=Tensor[(1, 1024), float32] */;
  %2781 = multiply(%2776, %2740) /* ty=Tensor[(1, 1024), float32] */;
  %2782 = multiply(%2779, %2780) /* ty=Tensor[(1, 1024), float32] */;
  %2783 = add(%2781, %2782) /* ty=Tensor[(1, 1024), float32] */;
  %2784 = sigmoid(%2774) /* ty=Tensor[(1, 1024), float32] */;
  %2785 = tanh(%2783) /* ty=Tensor[(1, 1024), float32] */;
  %2786 = multiply(%2784, %2785) /* ty=Tensor[(1, 1024), float32] */;
  %2787 = multiply(%2763, %2764) /* ty=Tensor[(1, 1024), float32] */;
  %2788 = (%2786, %2787) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2789 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2790 = concatenate(%2788, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2791 = concatenate(%2789, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2792 = nn.dense(%2790, %2791, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2793 = add(%2792, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2794 = add(%2793, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2795 = split(%2794, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2796 = %2795.3 /* ty=Tensor[(1, 1024), float32] */;
  %2797 = %2795.1 /* ty=Tensor[(1, 1024), float32] */;
  %2798 = sigmoid(%2797) /* ty=Tensor[(1, 1024), float32] */;
  %2799 = %2795.0 /* ty=Tensor[(1, 1024), float32] */;
  %2800 = %2795.2 /* ty=Tensor[(1, 1024), float32] */;
  %2801 = sigmoid(%2799) /* ty=Tensor[(1, 1024), float32] */;
  %2802 = tanh(%2800) /* ty=Tensor[(1, 1024), float32] */;
  %2803 = multiply(%2798, %2762) /* ty=Tensor[(1, 1024), float32] */;
  %2804 = multiply(%2801, %2802) /* ty=Tensor[(1, 1024), float32] */;
  %2805 = add(%2803, %2804) /* ty=Tensor[(1, 1024), float32] */;
  %2806 = sigmoid(%2796) /* ty=Tensor[(1, 1024), float32] */;
  %2807 = tanh(%2805) /* ty=Tensor[(1, 1024), float32] */;
  %2808 = %555.52 /* ty=Tensor[(1, 240), float32] */;
  %2809 = (%2808, %2786) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2810 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2811 = concatenate(%2809, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2812 = concatenate(%2810, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2813 = nn.dense(%2811, %2812, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2814 = add(%2813, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2815 = add(%2814, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2816 = split(%2815, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2817 = %2816.3 /* ty=Tensor[(1, 1024), float32] */;
  %2818 = %2816.1 /* ty=Tensor[(1, 1024), float32] */;
  %2819 = sigmoid(%2818) /* ty=Tensor[(1, 1024), float32] */;
  %2820 = %2816.0 /* ty=Tensor[(1, 1024), float32] */;
  %2821 = %2816.2 /* ty=Tensor[(1, 1024), float32] */;
  %2822 = sigmoid(%2820) /* ty=Tensor[(1, 1024), float32] */;
  %2823 = tanh(%2821) /* ty=Tensor[(1, 1024), float32] */;
  %2824 = multiply(%2819, %2783) /* ty=Tensor[(1, 1024), float32] */;
  %2825 = multiply(%2822, %2823) /* ty=Tensor[(1, 1024), float32] */;
  %2826 = add(%2824, %2825) /* ty=Tensor[(1, 1024), float32] */;
  %2827 = sigmoid(%2817) /* ty=Tensor[(1, 1024), float32] */;
  %2828 = tanh(%2826) /* ty=Tensor[(1, 1024), float32] */;
  %2829 = multiply(%2827, %2828) /* ty=Tensor[(1, 1024), float32] */;
  %2830 = multiply(%2806, %2807) /* ty=Tensor[(1, 1024), float32] */;
  %2831 = (%2829, %2830) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2832 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2833 = concatenate(%2831, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2834 = concatenate(%2832, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2835 = nn.dense(%2833, %2834, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2836 = add(%2835, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2837 = add(%2836, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2838 = split(%2837, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2839 = %2838.3 /* ty=Tensor[(1, 1024), float32] */;
  %2840 = %2838.1 /* ty=Tensor[(1, 1024), float32] */;
  %2841 = sigmoid(%2840) /* ty=Tensor[(1, 1024), float32] */;
  %2842 = %2838.0 /* ty=Tensor[(1, 1024), float32] */;
  %2843 = %2838.2 /* ty=Tensor[(1, 1024), float32] */;
  %2844 = sigmoid(%2842) /* ty=Tensor[(1, 1024), float32] */;
  %2845 = tanh(%2843) /* ty=Tensor[(1, 1024), float32] */;
  %2846 = multiply(%2841, %2805) /* ty=Tensor[(1, 1024), float32] */;
  %2847 = multiply(%2844, %2845) /* ty=Tensor[(1, 1024), float32] */;
  %2848 = add(%2846, %2847) /* ty=Tensor[(1, 1024), float32] */;
  %2849 = sigmoid(%2839) /* ty=Tensor[(1, 1024), float32] */;
  %2850 = tanh(%2848) /* ty=Tensor[(1, 1024), float32] */;
  %2851 = %555.53 /* ty=Tensor[(1, 240), float32] */;
  %2852 = (%2851, %2829) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2853 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2854 = concatenate(%2852, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2855 = concatenate(%2853, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2856 = nn.dense(%2854, %2855, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2857 = add(%2856, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2858 = add(%2857, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2859 = split(%2858, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2860 = %2859.3 /* ty=Tensor[(1, 1024), float32] */;
  %2861 = %2859.1 /* ty=Tensor[(1, 1024), float32] */;
  %2862 = sigmoid(%2861) /* ty=Tensor[(1, 1024), float32] */;
  %2863 = %2859.0 /* ty=Tensor[(1, 1024), float32] */;
  %2864 = %2859.2 /* ty=Tensor[(1, 1024), float32] */;
  %2865 = sigmoid(%2863) /* ty=Tensor[(1, 1024), float32] */;
  %2866 = tanh(%2864) /* ty=Tensor[(1, 1024), float32] */;
  %2867 = multiply(%2862, %2826) /* ty=Tensor[(1, 1024), float32] */;
  %2868 = multiply(%2865, %2866) /* ty=Tensor[(1, 1024), float32] */;
  %2869 = add(%2867, %2868) /* ty=Tensor[(1, 1024), float32] */;
  %2870 = sigmoid(%2860) /* ty=Tensor[(1, 1024), float32] */;
  %2871 = tanh(%2869) /* ty=Tensor[(1, 1024), float32] */;
  %2872 = multiply(%2870, %2871) /* ty=Tensor[(1, 1024), float32] */;
  %2873 = multiply(%2849, %2850) /* ty=Tensor[(1, 1024), float32] */;
  %2874 = (%2872, %2873) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2875 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2876 = concatenate(%2874, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2877 = concatenate(%2875, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2878 = nn.dense(%2876, %2877, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2879 = add(%2878, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2880 = add(%2879, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2881 = split(%2880, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2882 = %2881.3 /* ty=Tensor[(1, 1024), float32] */;
  %2883 = %2881.1 /* ty=Tensor[(1, 1024), float32] */;
  %2884 = sigmoid(%2883) /* ty=Tensor[(1, 1024), float32] */;
  %2885 = %2881.0 /* ty=Tensor[(1, 1024), float32] */;
  %2886 = %2881.2 /* ty=Tensor[(1, 1024), float32] */;
  %2887 = sigmoid(%2885) /* ty=Tensor[(1, 1024), float32] */;
  %2888 = tanh(%2886) /* ty=Tensor[(1, 1024), float32] */;
  %2889 = multiply(%2884, %2848) /* ty=Tensor[(1, 1024), float32] */;
  %2890 = multiply(%2887, %2888) /* ty=Tensor[(1, 1024), float32] */;
  %2891 = add(%2889, %2890) /* ty=Tensor[(1, 1024), float32] */;
  %2892 = sigmoid(%2882) /* ty=Tensor[(1, 1024), float32] */;
  %2893 = tanh(%2891) /* ty=Tensor[(1, 1024), float32] */;
  %2894 = %555.54 /* ty=Tensor[(1, 240), float32] */;
  %2895 = (%2894, %2872) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2896 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2897 = concatenate(%2895, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2898 = concatenate(%2896, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2899 = nn.dense(%2897, %2898, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2900 = add(%2899, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2901 = add(%2900, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2902 = split(%2901, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2903 = %2902.3 /* ty=Tensor[(1, 1024), float32] */;
  %2904 = %2902.1 /* ty=Tensor[(1, 1024), float32] */;
  %2905 = sigmoid(%2904) /* ty=Tensor[(1, 1024), float32] */;
  %2906 = %2902.0 /* ty=Tensor[(1, 1024), float32] */;
  %2907 = %2902.2 /* ty=Tensor[(1, 1024), float32] */;
  %2908 = sigmoid(%2906) /* ty=Tensor[(1, 1024), float32] */;
  %2909 = tanh(%2907) /* ty=Tensor[(1, 1024), float32] */;
  %2910 = multiply(%2905, %2869) /* ty=Tensor[(1, 1024), float32] */;
  %2911 = multiply(%2908, %2909) /* ty=Tensor[(1, 1024), float32] */;
  %2912 = add(%2910, %2911) /* ty=Tensor[(1, 1024), float32] */;
  %2913 = sigmoid(%2903) /* ty=Tensor[(1, 1024), float32] */;
  %2914 = tanh(%2912) /* ty=Tensor[(1, 1024), float32] */;
  %2915 = multiply(%2913, %2914) /* ty=Tensor[(1, 1024), float32] */;
  %2916 = multiply(%2892, %2893) /* ty=Tensor[(1, 1024), float32] */;
  %2917 = (%2915, %2916) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2918 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2919 = concatenate(%2917, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2920 = concatenate(%2918, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2921 = nn.dense(%2919, %2920, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2922 = add(%2921, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2923 = add(%2922, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2924 = split(%2923, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2925 = %2924.3 /* ty=Tensor[(1, 1024), float32] */;
  %2926 = %2924.1 /* ty=Tensor[(1, 1024), float32] */;
  %2927 = sigmoid(%2926) /* ty=Tensor[(1, 1024), float32] */;
  %2928 = %2924.0 /* ty=Tensor[(1, 1024), float32] */;
  %2929 = %2924.2 /* ty=Tensor[(1, 1024), float32] */;
  %2930 = sigmoid(%2928) /* ty=Tensor[(1, 1024), float32] */;
  %2931 = tanh(%2929) /* ty=Tensor[(1, 1024), float32] */;
  %2932 = multiply(%2927, %2891) /* ty=Tensor[(1, 1024), float32] */;
  %2933 = multiply(%2930, %2931) /* ty=Tensor[(1, 1024), float32] */;
  %2934 = add(%2932, %2933) /* ty=Tensor[(1, 1024), float32] */;
  %2935 = sigmoid(%2925) /* ty=Tensor[(1, 1024), float32] */;
  %2936 = tanh(%2934) /* ty=Tensor[(1, 1024), float32] */;
  %2937 = %555.55 /* ty=Tensor[(1, 240), float32] */;
  %2938 = (%2937, %2915) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2939 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2940 = concatenate(%2938, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2941 = concatenate(%2939, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2942 = nn.dense(%2940, %2941, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2943 = add(%2942, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2944 = add(%2943, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2945 = split(%2944, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2946 = %2945.3 /* ty=Tensor[(1, 1024), float32] */;
  %2947 = %2945.1 /* ty=Tensor[(1, 1024), float32] */;
  %2948 = sigmoid(%2947) /* ty=Tensor[(1, 1024), float32] */;
  %2949 = %2945.0 /* ty=Tensor[(1, 1024), float32] */;
  %2950 = %2945.2 /* ty=Tensor[(1, 1024), float32] */;
  %2951 = sigmoid(%2949) /* ty=Tensor[(1, 1024), float32] */;
  %2952 = tanh(%2950) /* ty=Tensor[(1, 1024), float32] */;
  %2953 = multiply(%2948, %2912) /* ty=Tensor[(1, 1024), float32] */;
  %2954 = multiply(%2951, %2952) /* ty=Tensor[(1, 1024), float32] */;
  %2955 = add(%2953, %2954) /* ty=Tensor[(1, 1024), float32] */;
  %2956 = sigmoid(%2946) /* ty=Tensor[(1, 1024), float32] */;
  %2957 = tanh(%2955) /* ty=Tensor[(1, 1024), float32] */;
  %2958 = multiply(%2956, %2957) /* ty=Tensor[(1, 1024), float32] */;
  %2959 = multiply(%2935, %2936) /* ty=Tensor[(1, 1024), float32] */;
  %2960 = (%2958, %2959) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2961 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %2962 = concatenate(%2960, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %2963 = concatenate(%2961, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %2964 = nn.dense(%2962, %2963, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2965 = add(%2964, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2966 = add(%2965, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %2967 = split(%2966, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2968 = %2967.3 /* ty=Tensor[(1, 1024), float32] */;
  %2969 = %2967.1 /* ty=Tensor[(1, 1024), float32] */;
  %2970 = sigmoid(%2969) /* ty=Tensor[(1, 1024), float32] */;
  %2971 = %2967.0 /* ty=Tensor[(1, 1024), float32] */;
  %2972 = %2967.2 /* ty=Tensor[(1, 1024), float32] */;
  %2973 = sigmoid(%2971) /* ty=Tensor[(1, 1024), float32] */;
  %2974 = tanh(%2972) /* ty=Tensor[(1, 1024), float32] */;
  %2975 = multiply(%2970, %2934) /* ty=Tensor[(1, 1024), float32] */;
  %2976 = multiply(%2973, %2974) /* ty=Tensor[(1, 1024), float32] */;
  %2977 = add(%2975, %2976) /* ty=Tensor[(1, 1024), float32] */;
  %2978 = sigmoid(%2968) /* ty=Tensor[(1, 1024), float32] */;
  %2979 = tanh(%2977) /* ty=Tensor[(1, 1024), float32] */;
  %2980 = %555.56 /* ty=Tensor[(1, 240), float32] */;
  %2981 = (%2980, %2958) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %2982 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %2983 = concatenate(%2981, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %2984 = concatenate(%2982, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %2985 = nn.dense(%2983, %2984, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %2986 = add(%2985, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2987 = add(%2986, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %2988 = split(%2987, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %2989 = %2988.3 /* ty=Tensor[(1, 1024), float32] */;
  %2990 = %2988.1 /* ty=Tensor[(1, 1024), float32] */;
  %2991 = sigmoid(%2990) /* ty=Tensor[(1, 1024), float32] */;
  %2992 = %2988.0 /* ty=Tensor[(1, 1024), float32] */;
  %2993 = %2988.2 /* ty=Tensor[(1, 1024), float32] */;
  %2994 = sigmoid(%2992) /* ty=Tensor[(1, 1024), float32] */;
  %2995 = tanh(%2993) /* ty=Tensor[(1, 1024), float32] */;
  %2996 = multiply(%2991, %2955) /* ty=Tensor[(1, 1024), float32] */;
  %2997 = multiply(%2994, %2995) /* ty=Tensor[(1, 1024), float32] */;
  %2998 = add(%2996, %2997) /* ty=Tensor[(1, 1024), float32] */;
  %2999 = sigmoid(%2989) /* ty=Tensor[(1, 1024), float32] */;
  %3000 = tanh(%2998) /* ty=Tensor[(1, 1024), float32] */;
  %3001 = multiply(%2999, %3000) /* ty=Tensor[(1, 1024), float32] */;
  %3002 = multiply(%2978, %2979) /* ty=Tensor[(1, 1024), float32] */;
  %3003 = (%3001, %3002) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3004 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3005 = concatenate(%3003, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3006 = concatenate(%3004, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3007 = nn.dense(%3005, %3006, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3008 = add(%3007, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3009 = add(%3008, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3010 = split(%3009, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3011 = %3010.3 /* ty=Tensor[(1, 1024), float32] */;
  %3012 = %3010.1 /* ty=Tensor[(1, 1024), float32] */;
  %3013 = sigmoid(%3012) /* ty=Tensor[(1, 1024), float32] */;
  %3014 = %3010.0 /* ty=Tensor[(1, 1024), float32] */;
  %3015 = %3010.2 /* ty=Tensor[(1, 1024), float32] */;
  %3016 = sigmoid(%3014) /* ty=Tensor[(1, 1024), float32] */;
  %3017 = tanh(%3015) /* ty=Tensor[(1, 1024), float32] */;
  %3018 = multiply(%3013, %2977) /* ty=Tensor[(1, 1024), float32] */;
  %3019 = multiply(%3016, %3017) /* ty=Tensor[(1, 1024), float32] */;
  %3020 = add(%3018, %3019) /* ty=Tensor[(1, 1024), float32] */;
  %3021 = sigmoid(%3011) /* ty=Tensor[(1, 1024), float32] */;
  %3022 = tanh(%3020) /* ty=Tensor[(1, 1024), float32] */;
  %3023 = %555.57 /* ty=Tensor[(1, 240), float32] */;
  %3024 = (%3023, %3001) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3025 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3026 = concatenate(%3024, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3027 = concatenate(%3025, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3028 = nn.dense(%3026, %3027, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3029 = add(%3028, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3030 = add(%3029, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3031 = split(%3030, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3032 = %3031.3 /* ty=Tensor[(1, 1024), float32] */;
  %3033 = %3031.1 /* ty=Tensor[(1, 1024), float32] */;
  %3034 = sigmoid(%3033) /* ty=Tensor[(1, 1024), float32] */;
  %3035 = %3031.0 /* ty=Tensor[(1, 1024), float32] */;
  %3036 = %3031.2 /* ty=Tensor[(1, 1024), float32] */;
  %3037 = sigmoid(%3035) /* ty=Tensor[(1, 1024), float32] */;
  %3038 = tanh(%3036) /* ty=Tensor[(1, 1024), float32] */;
  %3039 = multiply(%3034, %2998) /* ty=Tensor[(1, 1024), float32] */;
  %3040 = multiply(%3037, %3038) /* ty=Tensor[(1, 1024), float32] */;
  %3041 = add(%3039, %3040) /* ty=Tensor[(1, 1024), float32] */;
  %3042 = sigmoid(%3032) /* ty=Tensor[(1, 1024), float32] */;
  %3043 = tanh(%3041) /* ty=Tensor[(1, 1024), float32] */;
  %3044 = multiply(%3042, %3043) /* ty=Tensor[(1, 1024), float32] */;
  %3045 = multiply(%3021, %3022) /* ty=Tensor[(1, 1024), float32] */;
  %3046 = (%3044, %3045) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3047 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3048 = concatenate(%3046, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3049 = concatenate(%3047, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3050 = nn.dense(%3048, %3049, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3051 = add(%3050, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3052 = add(%3051, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3053 = split(%3052, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3054 = %3053.3 /* ty=Tensor[(1, 1024), float32] */;
  %3055 = %3053.1 /* ty=Tensor[(1, 1024), float32] */;
  %3056 = sigmoid(%3055) /* ty=Tensor[(1, 1024), float32] */;
  %3057 = %3053.0 /* ty=Tensor[(1, 1024), float32] */;
  %3058 = %3053.2 /* ty=Tensor[(1, 1024), float32] */;
  %3059 = sigmoid(%3057) /* ty=Tensor[(1, 1024), float32] */;
  %3060 = tanh(%3058) /* ty=Tensor[(1, 1024), float32] */;
  %3061 = multiply(%3056, %3020) /* ty=Tensor[(1, 1024), float32] */;
  %3062 = multiply(%3059, %3060) /* ty=Tensor[(1, 1024), float32] */;
  %3063 = add(%3061, %3062) /* ty=Tensor[(1, 1024), float32] */;
  %3064 = sigmoid(%3054) /* ty=Tensor[(1, 1024), float32] */;
  %3065 = tanh(%3063) /* ty=Tensor[(1, 1024), float32] */;
  %3066 = %555.58 /* ty=Tensor[(1, 240), float32] */;
  %3067 = (%3066, %3044) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3068 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3069 = concatenate(%3067, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3070 = concatenate(%3068, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3071 = nn.dense(%3069, %3070, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3072 = add(%3071, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3073 = add(%3072, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3074 = split(%3073, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3075 = %3074.3 /* ty=Tensor[(1, 1024), float32] */;
  %3076 = %3074.1 /* ty=Tensor[(1, 1024), float32] */;
  %3077 = sigmoid(%3076) /* ty=Tensor[(1, 1024), float32] */;
  %3078 = %3074.0 /* ty=Tensor[(1, 1024), float32] */;
  %3079 = %3074.2 /* ty=Tensor[(1, 1024), float32] */;
  %3080 = sigmoid(%3078) /* ty=Tensor[(1, 1024), float32] */;
  %3081 = tanh(%3079) /* ty=Tensor[(1, 1024), float32] */;
  %3082 = multiply(%3077, %3041) /* ty=Tensor[(1, 1024), float32] */;
  %3083 = multiply(%3080, %3081) /* ty=Tensor[(1, 1024), float32] */;
  %3084 = add(%3082, %3083) /* ty=Tensor[(1, 1024), float32] */;
  %3085 = sigmoid(%3075) /* ty=Tensor[(1, 1024), float32] */;
  %3086 = tanh(%3084) /* ty=Tensor[(1, 1024), float32] */;
  %3087 = multiply(%3085, %3086) /* ty=Tensor[(1, 1024), float32] */;
  %3088 = multiply(%3064, %3065) /* ty=Tensor[(1, 1024), float32] */;
  %3089 = (%3087, %3088) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3090 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3091 = concatenate(%3089, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3092 = concatenate(%3090, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3093 = nn.dense(%3091, %3092, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3094 = add(%3093, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3095 = add(%3094, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3096 = split(%3095, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3097 = %3096.3 /* ty=Tensor[(1, 1024), float32] */;
  %3098 = %3096.1 /* ty=Tensor[(1, 1024), float32] */;
  %3099 = sigmoid(%3098) /* ty=Tensor[(1, 1024), float32] */;
  %3100 = %3096.0 /* ty=Tensor[(1, 1024), float32] */;
  %3101 = %3096.2 /* ty=Tensor[(1, 1024), float32] */;
  %3102 = sigmoid(%3100) /* ty=Tensor[(1, 1024), float32] */;
  %3103 = tanh(%3101) /* ty=Tensor[(1, 1024), float32] */;
  %3104 = multiply(%3099, %3063) /* ty=Tensor[(1, 1024), float32] */;
  %3105 = multiply(%3102, %3103) /* ty=Tensor[(1, 1024), float32] */;
  %3106 = add(%3104, %3105) /* ty=Tensor[(1, 1024), float32] */;
  %3107 = sigmoid(%3097) /* ty=Tensor[(1, 1024), float32] */;
  %3108 = tanh(%3106) /* ty=Tensor[(1, 1024), float32] */;
  %3109 = %555.59 /* ty=Tensor[(1, 240), float32] */;
  %3110 = (%3109, %3087) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3111 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3112 = concatenate(%3110, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3113 = concatenate(%3111, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3114 = nn.dense(%3112, %3113, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3115 = add(%3114, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3116 = add(%3115, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3117 = split(%3116, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3118 = %3117.3 /* ty=Tensor[(1, 1024), float32] */;
  %3119 = %3117.1 /* ty=Tensor[(1, 1024), float32] */;
  %3120 = sigmoid(%3119) /* ty=Tensor[(1, 1024), float32] */;
  %3121 = %3117.0 /* ty=Tensor[(1, 1024), float32] */;
  %3122 = %3117.2 /* ty=Tensor[(1, 1024), float32] */;
  %3123 = sigmoid(%3121) /* ty=Tensor[(1, 1024), float32] */;
  %3124 = tanh(%3122) /* ty=Tensor[(1, 1024), float32] */;
  %3125 = multiply(%3120, %3084) /* ty=Tensor[(1, 1024), float32] */;
  %3126 = multiply(%3123, %3124) /* ty=Tensor[(1, 1024), float32] */;
  %3127 = add(%3125, %3126) /* ty=Tensor[(1, 1024), float32] */;
  %3128 = sigmoid(%3118) /* ty=Tensor[(1, 1024), float32] */;
  %3129 = tanh(%3127) /* ty=Tensor[(1, 1024), float32] */;
  %3130 = multiply(%3128, %3129) /* ty=Tensor[(1, 1024), float32] */;
  %3131 = multiply(%3107, %3108) /* ty=Tensor[(1, 1024), float32] */;
  %3132 = (%3130, %3131) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3133 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3134 = concatenate(%3132, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3135 = concatenate(%3133, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3136 = nn.dense(%3134, %3135, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3137 = add(%3136, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3138 = add(%3137, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3139 = split(%3138, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3140 = %3139.3 /* ty=Tensor[(1, 1024), float32] */;
  %3141 = %3139.1 /* ty=Tensor[(1, 1024), float32] */;
  %3142 = sigmoid(%3141) /* ty=Tensor[(1, 1024), float32] */;
  %3143 = %3139.0 /* ty=Tensor[(1, 1024), float32] */;
  %3144 = %3139.2 /* ty=Tensor[(1, 1024), float32] */;
  %3145 = sigmoid(%3143) /* ty=Tensor[(1, 1024), float32] */;
  %3146 = tanh(%3144) /* ty=Tensor[(1, 1024), float32] */;
  %3147 = multiply(%3142, %3106) /* ty=Tensor[(1, 1024), float32] */;
  %3148 = multiply(%3145, %3146) /* ty=Tensor[(1, 1024), float32] */;
  %3149 = add(%3147, %3148) /* ty=Tensor[(1, 1024), float32] */;
  %3150 = sigmoid(%3140) /* ty=Tensor[(1, 1024), float32] */;
  %3151 = tanh(%3149) /* ty=Tensor[(1, 1024), float32] */;
  %3152 = %555.60 /* ty=Tensor[(1, 240), float32] */;
  %3153 = (%3152, %3130) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3154 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3155 = concatenate(%3153, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3156 = concatenate(%3154, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3157 = nn.dense(%3155, %3156, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3158 = add(%3157, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3159 = add(%3158, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3160 = split(%3159, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3161 = %3160.3 /* ty=Tensor[(1, 1024), float32] */;
  %3162 = %3160.1 /* ty=Tensor[(1, 1024), float32] */;
  %3163 = sigmoid(%3162) /* ty=Tensor[(1, 1024), float32] */;
  %3164 = %3160.0 /* ty=Tensor[(1, 1024), float32] */;
  %3165 = %3160.2 /* ty=Tensor[(1, 1024), float32] */;
  %3166 = sigmoid(%3164) /* ty=Tensor[(1, 1024), float32] */;
  %3167 = tanh(%3165) /* ty=Tensor[(1, 1024), float32] */;
  %3168 = multiply(%3163, %3127) /* ty=Tensor[(1, 1024), float32] */;
  %3169 = multiply(%3166, %3167) /* ty=Tensor[(1, 1024), float32] */;
  %3170 = add(%3168, %3169) /* ty=Tensor[(1, 1024), float32] */;
  %3171 = sigmoid(%3161) /* ty=Tensor[(1, 1024), float32] */;
  %3172 = tanh(%3170) /* ty=Tensor[(1, 1024), float32] */;
  %3173 = multiply(%3171, %3172) /* ty=Tensor[(1, 1024), float32] */;
  %3174 = multiply(%3150, %3151) /* ty=Tensor[(1, 1024), float32] */;
  %3175 = (%3173, %3174) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3176 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3177 = concatenate(%3175, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3178 = concatenate(%3176, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3179 = nn.dense(%3177, %3178, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3180 = add(%3179, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3181 = add(%3180, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3182 = split(%3181, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3183 = %3182.3 /* ty=Tensor[(1, 1024), float32] */;
  %3184 = %3182.1 /* ty=Tensor[(1, 1024), float32] */;
  %3185 = sigmoid(%3184) /* ty=Tensor[(1, 1024), float32] */;
  %3186 = %3182.0 /* ty=Tensor[(1, 1024), float32] */;
  %3187 = %3182.2 /* ty=Tensor[(1, 1024), float32] */;
  %3188 = sigmoid(%3186) /* ty=Tensor[(1, 1024), float32] */;
  %3189 = tanh(%3187) /* ty=Tensor[(1, 1024), float32] */;
  %3190 = multiply(%3185, %3149) /* ty=Tensor[(1, 1024), float32] */;
  %3191 = multiply(%3188, %3189) /* ty=Tensor[(1, 1024), float32] */;
  %3192 = add(%3190, %3191) /* ty=Tensor[(1, 1024), float32] */;
  %3193 = sigmoid(%3183) /* ty=Tensor[(1, 1024), float32] */;
  %3194 = tanh(%3192) /* ty=Tensor[(1, 1024), float32] */;
  %3195 = %555.61 /* ty=Tensor[(1, 240), float32] */;
  %3196 = (%3195, %3173) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3197 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3198 = concatenate(%3196, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3199 = concatenate(%3197, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3200 = nn.dense(%3198, %3199, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3201 = add(%3200, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3202 = add(%3201, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3203 = split(%3202, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3204 = %3203.3 /* ty=Tensor[(1, 1024), float32] */;
  %3205 = %3203.1 /* ty=Tensor[(1, 1024), float32] */;
  %3206 = sigmoid(%3205) /* ty=Tensor[(1, 1024), float32] */;
  %3207 = %3203.0 /* ty=Tensor[(1, 1024), float32] */;
  %3208 = %3203.2 /* ty=Tensor[(1, 1024), float32] */;
  %3209 = sigmoid(%3207) /* ty=Tensor[(1, 1024), float32] */;
  %3210 = tanh(%3208) /* ty=Tensor[(1, 1024), float32] */;
  %3211 = multiply(%3206, %3170) /* ty=Tensor[(1, 1024), float32] */;
  %3212 = multiply(%3209, %3210) /* ty=Tensor[(1, 1024), float32] */;
  %3213 = add(%3211, %3212) /* ty=Tensor[(1, 1024), float32] */;
  %3214 = sigmoid(%3204) /* ty=Tensor[(1, 1024), float32] */;
  %3215 = tanh(%3213) /* ty=Tensor[(1, 1024), float32] */;
  %3216 = multiply(%3214, %3215) /* ty=Tensor[(1, 1024), float32] */;
  %3217 = multiply(%3193, %3194) /* ty=Tensor[(1, 1024), float32] */;
  %3218 = (%3216, %3217) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3219 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3220 = concatenate(%3218, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3221 = concatenate(%3219, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3222 = nn.dense(%3220, %3221, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3223 = add(%3222, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3224 = add(%3223, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3225 = split(%3224, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3226 = %3225.3 /* ty=Tensor[(1, 1024), float32] */;
  %3227 = %3225.1 /* ty=Tensor[(1, 1024), float32] */;
  %3228 = sigmoid(%3227) /* ty=Tensor[(1, 1024), float32] */;
  %3229 = %3225.0 /* ty=Tensor[(1, 1024), float32] */;
  %3230 = %3225.2 /* ty=Tensor[(1, 1024), float32] */;
  %3231 = sigmoid(%3229) /* ty=Tensor[(1, 1024), float32] */;
  %3232 = tanh(%3230) /* ty=Tensor[(1, 1024), float32] */;
  %3233 = multiply(%3228, %3192) /* ty=Tensor[(1, 1024), float32] */;
  %3234 = multiply(%3231, %3232) /* ty=Tensor[(1, 1024), float32] */;
  %3235 = add(%3233, %3234) /* ty=Tensor[(1, 1024), float32] */;
  %3236 = sigmoid(%3226) /* ty=Tensor[(1, 1024), float32] */;
  %3237 = tanh(%3235) /* ty=Tensor[(1, 1024), float32] */;
  %3238 = %555.62 /* ty=Tensor[(1, 240), float32] */;
  %3239 = (%3238, %3216) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3240 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3241 = concatenate(%3239, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3242 = concatenate(%3240, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3243 = nn.dense(%3241, %3242, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3244 = add(%3243, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3245 = add(%3244, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3246 = split(%3245, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3247 = %3246.3 /* ty=Tensor[(1, 1024), float32] */;
  %3248 = %3246.1 /* ty=Tensor[(1, 1024), float32] */;
  %3249 = sigmoid(%3248) /* ty=Tensor[(1, 1024), float32] */;
  %3250 = %3246.0 /* ty=Tensor[(1, 1024), float32] */;
  %3251 = %3246.2 /* ty=Tensor[(1, 1024), float32] */;
  %3252 = sigmoid(%3250) /* ty=Tensor[(1, 1024), float32] */;
  %3253 = tanh(%3251) /* ty=Tensor[(1, 1024), float32] */;
  %3254 = multiply(%3249, %3213) /* ty=Tensor[(1, 1024), float32] */;
  %3255 = multiply(%3252, %3253) /* ty=Tensor[(1, 1024), float32] */;
  %3256 = add(%3254, %3255) /* ty=Tensor[(1, 1024), float32] */;
  %3257 = sigmoid(%3247) /* ty=Tensor[(1, 1024), float32] */;
  %3258 = tanh(%3256) /* ty=Tensor[(1, 1024), float32] */;
  %3259 = multiply(%3257, %3258) /* ty=Tensor[(1, 1024), float32] */;
  %3260 = multiply(%3236, %3237) /* ty=Tensor[(1, 1024), float32] */;
  %3261 = (%3259, %3260) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3262 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3263 = concatenate(%3261, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3264 = concatenate(%3262, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3265 = nn.dense(%3263, %3264, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3266 = add(%3265, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3267 = add(%3266, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3268 = split(%3267, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3269 = %3268.3 /* ty=Tensor[(1, 1024), float32] */;
  %3270 = %3268.1 /* ty=Tensor[(1, 1024), float32] */;
  %3271 = sigmoid(%3270) /* ty=Tensor[(1, 1024), float32] */;
  %3272 = %3268.0 /* ty=Tensor[(1, 1024), float32] */;
  %3273 = %3268.2 /* ty=Tensor[(1, 1024), float32] */;
  %3274 = sigmoid(%3272) /* ty=Tensor[(1, 1024), float32] */;
  %3275 = tanh(%3273) /* ty=Tensor[(1, 1024), float32] */;
  %3276 = multiply(%3271, %3235) /* ty=Tensor[(1, 1024), float32] */;
  %3277 = multiply(%3274, %3275) /* ty=Tensor[(1, 1024), float32] */;
  %3278 = add(%3276, %3277) /* ty=Tensor[(1, 1024), float32] */;
  %3279 = sigmoid(%3269) /* ty=Tensor[(1, 1024), float32] */;
  %3280 = tanh(%3278) /* ty=Tensor[(1, 1024), float32] */;
  %3281 = %555.63 /* ty=Tensor[(1, 240), float32] */;
  %3282 = (%3281, %3259) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3283 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3284 = concatenate(%3282, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3285 = concatenate(%3283, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3286 = nn.dense(%3284, %3285, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3287 = add(%3286, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3288 = add(%3287, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3289 = split(%3288, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3290 = %3289.3 /* ty=Tensor[(1, 1024), float32] */;
  %3291 = %3289.1 /* ty=Tensor[(1, 1024), float32] */;
  %3292 = sigmoid(%3291) /* ty=Tensor[(1, 1024), float32] */;
  %3293 = %3289.0 /* ty=Tensor[(1, 1024), float32] */;
  %3294 = %3289.2 /* ty=Tensor[(1, 1024), float32] */;
  %3295 = sigmoid(%3293) /* ty=Tensor[(1, 1024), float32] */;
  %3296 = tanh(%3294) /* ty=Tensor[(1, 1024), float32] */;
  %3297 = multiply(%3292, %3256) /* ty=Tensor[(1, 1024), float32] */;
  %3298 = multiply(%3295, %3296) /* ty=Tensor[(1, 1024), float32] */;
  %3299 = add(%3297, %3298) /* ty=Tensor[(1, 1024), float32] */;
  %3300 = sigmoid(%3290) /* ty=Tensor[(1, 1024), float32] */;
  %3301 = tanh(%3299) /* ty=Tensor[(1, 1024), float32] */;
  %3302 = multiply(%3300, %3301) /* ty=Tensor[(1, 1024), float32] */;
  %3303 = multiply(%3279, %3280) /* ty=Tensor[(1, 1024), float32] */;
  %3304 = (%3302, %3303) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3305 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3306 = concatenate(%3304, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3307 = concatenate(%3305, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3308 = nn.dense(%3306, %3307, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3309 = add(%3308, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3310 = add(%3309, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3311 = split(%3310, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3312 = %3311.3 /* ty=Tensor[(1, 1024), float32] */;
  %3313 = %3311.1 /* ty=Tensor[(1, 1024), float32] */;
  %3314 = sigmoid(%3313) /* ty=Tensor[(1, 1024), float32] */;
  %3315 = %3311.0 /* ty=Tensor[(1, 1024), float32] */;
  %3316 = %3311.2 /* ty=Tensor[(1, 1024), float32] */;
  %3317 = sigmoid(%3315) /* ty=Tensor[(1, 1024), float32] */;
  %3318 = tanh(%3316) /* ty=Tensor[(1, 1024), float32] */;
  %3319 = multiply(%3314, %3278) /* ty=Tensor[(1, 1024), float32] */;
  %3320 = multiply(%3317, %3318) /* ty=Tensor[(1, 1024), float32] */;
  %3321 = add(%3319, %3320) /* ty=Tensor[(1, 1024), float32] */;
  %3322 = sigmoid(%3312) /* ty=Tensor[(1, 1024), float32] */;
  %3323 = tanh(%3321) /* ty=Tensor[(1, 1024), float32] */;
  %3324 = %555.64 /* ty=Tensor[(1, 240), float32] */;
  %3325 = (%3324, %3302) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3326 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3327 = concatenate(%3325, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3328 = concatenate(%3326, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3329 = nn.dense(%3327, %3328, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3330 = add(%3329, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3331 = add(%3330, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3332 = split(%3331, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3333 = %3332.3 /* ty=Tensor[(1, 1024), float32] */;
  %3334 = %3332.1 /* ty=Tensor[(1, 1024), float32] */;
  %3335 = sigmoid(%3334) /* ty=Tensor[(1, 1024), float32] */;
  %3336 = %3332.0 /* ty=Tensor[(1, 1024), float32] */;
  %3337 = %3332.2 /* ty=Tensor[(1, 1024), float32] */;
  %3338 = sigmoid(%3336) /* ty=Tensor[(1, 1024), float32] */;
  %3339 = tanh(%3337) /* ty=Tensor[(1, 1024), float32] */;
  %3340 = multiply(%3335, %3299) /* ty=Tensor[(1, 1024), float32] */;
  %3341 = multiply(%3338, %3339) /* ty=Tensor[(1, 1024), float32] */;
  %3342 = add(%3340, %3341) /* ty=Tensor[(1, 1024), float32] */;
  %3343 = sigmoid(%3333) /* ty=Tensor[(1, 1024), float32] */;
  %3344 = tanh(%3342) /* ty=Tensor[(1, 1024), float32] */;
  %3345 = multiply(%3343, %3344) /* ty=Tensor[(1, 1024), float32] */;
  %3346 = multiply(%3322, %3323) /* ty=Tensor[(1, 1024), float32] */;
  %3347 = (%3345, %3346) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3348 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3349 = concatenate(%3347, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3350 = concatenate(%3348, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3351 = nn.dense(%3349, %3350, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3352 = add(%3351, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3353 = add(%3352, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3354 = split(%3353, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3355 = %3354.3 /* ty=Tensor[(1, 1024), float32] */;
  %3356 = %3354.1 /* ty=Tensor[(1, 1024), float32] */;
  %3357 = sigmoid(%3356) /* ty=Tensor[(1, 1024), float32] */;
  %3358 = %3354.0 /* ty=Tensor[(1, 1024), float32] */;
  %3359 = %3354.2 /* ty=Tensor[(1, 1024), float32] */;
  %3360 = sigmoid(%3358) /* ty=Tensor[(1, 1024), float32] */;
  %3361 = tanh(%3359) /* ty=Tensor[(1, 1024), float32] */;
  %3362 = multiply(%3357, %3321) /* ty=Tensor[(1, 1024), float32] */;
  %3363 = multiply(%3360, %3361) /* ty=Tensor[(1, 1024), float32] */;
  %3364 = add(%3362, %3363) /* ty=Tensor[(1, 1024), float32] */;
  %3365 = sigmoid(%3355) /* ty=Tensor[(1, 1024), float32] */;
  %3366 = tanh(%3364) /* ty=Tensor[(1, 1024), float32] */;
  %3367 = %555.65 /* ty=Tensor[(1, 240), float32] */;
  %3368 = (%3367, %3345) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3369 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3370 = concatenate(%3368, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3371 = concatenate(%3369, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3372 = nn.dense(%3370, %3371, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3373 = add(%3372, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3374 = add(%3373, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3375 = split(%3374, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3376 = %3375.3 /* ty=Tensor[(1, 1024), float32] */;
  %3377 = %3375.1 /* ty=Tensor[(1, 1024), float32] */;
  %3378 = sigmoid(%3377) /* ty=Tensor[(1, 1024), float32] */;
  %3379 = %3375.0 /* ty=Tensor[(1, 1024), float32] */;
  %3380 = %3375.2 /* ty=Tensor[(1, 1024), float32] */;
  %3381 = sigmoid(%3379) /* ty=Tensor[(1, 1024), float32] */;
  %3382 = tanh(%3380) /* ty=Tensor[(1, 1024), float32] */;
  %3383 = multiply(%3378, %3342) /* ty=Tensor[(1, 1024), float32] */;
  %3384 = multiply(%3381, %3382) /* ty=Tensor[(1, 1024), float32] */;
  %3385 = add(%3383, %3384) /* ty=Tensor[(1, 1024), float32] */;
  %3386 = sigmoid(%3376) /* ty=Tensor[(1, 1024), float32] */;
  %3387 = tanh(%3385) /* ty=Tensor[(1, 1024), float32] */;
  %3388 = multiply(%3386, %3387) /* ty=Tensor[(1, 1024), float32] */;
  %3389 = multiply(%3365, %3366) /* ty=Tensor[(1, 1024), float32] */;
  %3390 = (%3388, %3389) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3391 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3392 = concatenate(%3390, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3393 = concatenate(%3391, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3394 = nn.dense(%3392, %3393, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3395 = add(%3394, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3396 = add(%3395, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3397 = split(%3396, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3398 = %3397.3 /* ty=Tensor[(1, 1024), float32] */;
  %3399 = %3397.1 /* ty=Tensor[(1, 1024), float32] */;
  %3400 = sigmoid(%3399) /* ty=Tensor[(1, 1024), float32] */;
  %3401 = %3397.0 /* ty=Tensor[(1, 1024), float32] */;
  %3402 = %3397.2 /* ty=Tensor[(1, 1024), float32] */;
  %3403 = sigmoid(%3401) /* ty=Tensor[(1, 1024), float32] */;
  %3404 = tanh(%3402) /* ty=Tensor[(1, 1024), float32] */;
  %3405 = multiply(%3400, %3364) /* ty=Tensor[(1, 1024), float32] */;
  %3406 = multiply(%3403, %3404) /* ty=Tensor[(1, 1024), float32] */;
  %3407 = add(%3405, %3406) /* ty=Tensor[(1, 1024), float32] */;
  %3408 = sigmoid(%3398) /* ty=Tensor[(1, 1024), float32] */;
  %3409 = tanh(%3407) /* ty=Tensor[(1, 1024), float32] */;
  %3410 = %555.66 /* ty=Tensor[(1, 240), float32] */;
  %3411 = (%3410, %3388) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3412 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3413 = concatenate(%3411, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3414 = concatenate(%3412, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3415 = nn.dense(%3413, %3414, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3416 = add(%3415, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3417 = add(%3416, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3418 = split(%3417, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3419 = %3418.3 /* ty=Tensor[(1, 1024), float32] */;
  %3420 = %3418.1 /* ty=Tensor[(1, 1024), float32] */;
  %3421 = sigmoid(%3420) /* ty=Tensor[(1, 1024), float32] */;
  %3422 = %3418.0 /* ty=Tensor[(1, 1024), float32] */;
  %3423 = %3418.2 /* ty=Tensor[(1, 1024), float32] */;
  %3424 = sigmoid(%3422) /* ty=Tensor[(1, 1024), float32] */;
  %3425 = tanh(%3423) /* ty=Tensor[(1, 1024), float32] */;
  %3426 = multiply(%3421, %3385) /* ty=Tensor[(1, 1024), float32] */;
  %3427 = multiply(%3424, %3425) /* ty=Tensor[(1, 1024), float32] */;
  %3428 = add(%3426, %3427) /* ty=Tensor[(1, 1024), float32] */;
  %3429 = sigmoid(%3419) /* ty=Tensor[(1, 1024), float32] */;
  %3430 = tanh(%3428) /* ty=Tensor[(1, 1024), float32] */;
  %3431 = multiply(%3429, %3430) /* ty=Tensor[(1, 1024), float32] */;
  %3432 = multiply(%3408, %3409) /* ty=Tensor[(1, 1024), float32] */;
  %3433 = (%3431, %3432) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3434 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3435 = concatenate(%3433, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3436 = concatenate(%3434, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3437 = nn.dense(%3435, %3436, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3438 = add(%3437, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3439 = add(%3438, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3440 = split(%3439, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3441 = %3440.3 /* ty=Tensor[(1, 1024), float32] */;
  %3442 = %3440.1 /* ty=Tensor[(1, 1024), float32] */;
  %3443 = sigmoid(%3442) /* ty=Tensor[(1, 1024), float32] */;
  %3444 = %3440.0 /* ty=Tensor[(1, 1024), float32] */;
  %3445 = %3440.2 /* ty=Tensor[(1, 1024), float32] */;
  %3446 = sigmoid(%3444) /* ty=Tensor[(1, 1024), float32] */;
  %3447 = tanh(%3445) /* ty=Tensor[(1, 1024), float32] */;
  %3448 = multiply(%3443, %3407) /* ty=Tensor[(1, 1024), float32] */;
  %3449 = multiply(%3446, %3447) /* ty=Tensor[(1, 1024), float32] */;
  %3450 = add(%3448, %3449) /* ty=Tensor[(1, 1024), float32] */;
  %3451 = sigmoid(%3441) /* ty=Tensor[(1, 1024), float32] */;
  %3452 = tanh(%3450) /* ty=Tensor[(1, 1024), float32] */;
  %3453 = %555.67 /* ty=Tensor[(1, 240), float32] */;
  %3454 = (%3453, %3431) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3455 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3456 = concatenate(%3454, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3457 = concatenate(%3455, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3458 = nn.dense(%3456, %3457, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3459 = add(%3458, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3460 = add(%3459, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3461 = split(%3460, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3462 = %3461.3 /* ty=Tensor[(1, 1024), float32] */;
  %3463 = %3461.1 /* ty=Tensor[(1, 1024), float32] */;
  %3464 = sigmoid(%3463) /* ty=Tensor[(1, 1024), float32] */;
  %3465 = %3461.0 /* ty=Tensor[(1, 1024), float32] */;
  %3466 = %3461.2 /* ty=Tensor[(1, 1024), float32] */;
  %3467 = sigmoid(%3465) /* ty=Tensor[(1, 1024), float32] */;
  %3468 = tanh(%3466) /* ty=Tensor[(1, 1024), float32] */;
  %3469 = multiply(%3464, %3428) /* ty=Tensor[(1, 1024), float32] */;
  %3470 = multiply(%3467, %3468) /* ty=Tensor[(1, 1024), float32] */;
  %3471 = add(%3469, %3470) /* ty=Tensor[(1, 1024), float32] */;
  %3472 = sigmoid(%3462) /* ty=Tensor[(1, 1024), float32] */;
  %3473 = tanh(%3471) /* ty=Tensor[(1, 1024), float32] */;
  %3474 = multiply(%3472, %3473) /* ty=Tensor[(1, 1024), float32] */;
  %3475 = multiply(%3451, %3452) /* ty=Tensor[(1, 1024), float32] */;
  %3476 = (%3474, %3475) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3477 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3478 = concatenate(%3476, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3479 = concatenate(%3477, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3480 = nn.dense(%3478, %3479, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3481 = add(%3480, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3482 = add(%3481, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3483 = split(%3482, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3484 = %3483.3 /* ty=Tensor[(1, 1024), float32] */;
  %3485 = %3483.1 /* ty=Tensor[(1, 1024), float32] */;
  %3486 = sigmoid(%3485) /* ty=Tensor[(1, 1024), float32] */;
  %3487 = %3483.0 /* ty=Tensor[(1, 1024), float32] */;
  %3488 = %3483.2 /* ty=Tensor[(1, 1024), float32] */;
  %3489 = sigmoid(%3487) /* ty=Tensor[(1, 1024), float32] */;
  %3490 = tanh(%3488) /* ty=Tensor[(1, 1024), float32] */;
  %3491 = multiply(%3486, %3450) /* ty=Tensor[(1, 1024), float32] */;
  %3492 = multiply(%3489, %3490) /* ty=Tensor[(1, 1024), float32] */;
  %3493 = add(%3491, %3492) /* ty=Tensor[(1, 1024), float32] */;
  %3494 = sigmoid(%3484) /* ty=Tensor[(1, 1024), float32] */;
  %3495 = tanh(%3493) /* ty=Tensor[(1, 1024), float32] */;
  %3496 = %555.68 /* ty=Tensor[(1, 240), float32] */;
  %3497 = (%3496, %3474) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3498 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3499 = concatenate(%3497, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3500 = concatenate(%3498, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3501 = nn.dense(%3499, %3500, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3502 = add(%3501, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3503 = add(%3502, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3504 = split(%3503, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3505 = %3504.3 /* ty=Tensor[(1, 1024), float32] */;
  %3506 = %3504.1 /* ty=Tensor[(1, 1024), float32] */;
  %3507 = sigmoid(%3506) /* ty=Tensor[(1, 1024), float32] */;
  %3508 = %3504.0 /* ty=Tensor[(1, 1024), float32] */;
  %3509 = %3504.2 /* ty=Tensor[(1, 1024), float32] */;
  %3510 = sigmoid(%3508) /* ty=Tensor[(1, 1024), float32] */;
  %3511 = tanh(%3509) /* ty=Tensor[(1, 1024), float32] */;
  %3512 = multiply(%3507, %3471) /* ty=Tensor[(1, 1024), float32] */;
  %3513 = multiply(%3510, %3511) /* ty=Tensor[(1, 1024), float32] */;
  %3514 = add(%3512, %3513) /* ty=Tensor[(1, 1024), float32] */;
  %3515 = sigmoid(%3505) /* ty=Tensor[(1, 1024), float32] */;
  %3516 = tanh(%3514) /* ty=Tensor[(1, 1024), float32] */;
  %3517 = multiply(%3515, %3516) /* ty=Tensor[(1, 1024), float32] */;
  %3518 = multiply(%3494, %3495) /* ty=Tensor[(1, 1024), float32] */;
  %3519 = (%3517, %3518) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3520 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3521 = concatenate(%3519, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3522 = concatenate(%3520, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3523 = nn.dense(%3521, %3522, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3524 = add(%3523, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3525 = add(%3524, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3526 = split(%3525, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3527 = %3526.3 /* ty=Tensor[(1, 1024), float32] */;
  %3528 = %3526.1 /* ty=Tensor[(1, 1024), float32] */;
  %3529 = sigmoid(%3528) /* ty=Tensor[(1, 1024), float32] */;
  %3530 = %3526.0 /* ty=Tensor[(1, 1024), float32] */;
  %3531 = %3526.2 /* ty=Tensor[(1, 1024), float32] */;
  %3532 = sigmoid(%3530) /* ty=Tensor[(1, 1024), float32] */;
  %3533 = tanh(%3531) /* ty=Tensor[(1, 1024), float32] */;
  %3534 = multiply(%3529, %3493) /* ty=Tensor[(1, 1024), float32] */;
  %3535 = multiply(%3532, %3533) /* ty=Tensor[(1, 1024), float32] */;
  %3536 = add(%3534, %3535) /* ty=Tensor[(1, 1024), float32] */;
  %3537 = sigmoid(%3527) /* ty=Tensor[(1, 1024), float32] */;
  %3538 = tanh(%3536) /* ty=Tensor[(1, 1024), float32] */;
  %3539 = %555.69 /* ty=Tensor[(1, 240), float32] */;
  %3540 = (%3539, %3517) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3541 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3542 = concatenate(%3540, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3543 = concatenate(%3541, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3544 = nn.dense(%3542, %3543, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3545 = add(%3544, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3546 = add(%3545, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3547 = split(%3546, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3548 = %3547.3 /* ty=Tensor[(1, 1024), float32] */;
  %3549 = %3547.1 /* ty=Tensor[(1, 1024), float32] */;
  %3550 = sigmoid(%3549) /* ty=Tensor[(1, 1024), float32] */;
  %3551 = %3547.0 /* ty=Tensor[(1, 1024), float32] */;
  %3552 = %3547.2 /* ty=Tensor[(1, 1024), float32] */;
  %3553 = sigmoid(%3551) /* ty=Tensor[(1, 1024), float32] */;
  %3554 = tanh(%3552) /* ty=Tensor[(1, 1024), float32] */;
  %3555 = multiply(%3550, %3514) /* ty=Tensor[(1, 1024), float32] */;
  %3556 = multiply(%3553, %3554) /* ty=Tensor[(1, 1024), float32] */;
  %3557 = add(%3555, %3556) /* ty=Tensor[(1, 1024), float32] */;
  %3558 = sigmoid(%3548) /* ty=Tensor[(1, 1024), float32] */;
  %3559 = tanh(%3557) /* ty=Tensor[(1, 1024), float32] */;
  %3560 = multiply(%3558, %3559) /* ty=Tensor[(1, 1024), float32] */;
  %3561 = multiply(%3537, %3538) /* ty=Tensor[(1, 1024), float32] */;
  %3562 = (%3560, %3561) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3563 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3564 = concatenate(%3562, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3565 = concatenate(%3563, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3566 = nn.dense(%3564, %3565, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3567 = add(%3566, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3568 = add(%3567, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3569 = split(%3568, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3570 = %3569.3 /* ty=Tensor[(1, 1024), float32] */;
  %3571 = %3569.1 /* ty=Tensor[(1, 1024), float32] */;
  %3572 = sigmoid(%3571) /* ty=Tensor[(1, 1024), float32] */;
  %3573 = %3569.0 /* ty=Tensor[(1, 1024), float32] */;
  %3574 = %3569.2 /* ty=Tensor[(1, 1024), float32] */;
  %3575 = sigmoid(%3573) /* ty=Tensor[(1, 1024), float32] */;
  %3576 = tanh(%3574) /* ty=Tensor[(1, 1024), float32] */;
  %3577 = multiply(%3572, %3536) /* ty=Tensor[(1, 1024), float32] */;
  %3578 = multiply(%3575, %3576) /* ty=Tensor[(1, 1024), float32] */;
  %3579 = add(%3577, %3578) /* ty=Tensor[(1, 1024), float32] */;
  %3580 = sigmoid(%3570) /* ty=Tensor[(1, 1024), float32] */;
  %3581 = tanh(%3579) /* ty=Tensor[(1, 1024), float32] */;
  %3582 = %555.70 /* ty=Tensor[(1, 240), float32] */;
  %3583 = (%3582, %3560) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3584 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3585 = concatenate(%3583, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3586 = concatenate(%3584, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3587 = nn.dense(%3585, %3586, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3588 = add(%3587, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3589 = add(%3588, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3590 = split(%3589, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3591 = %3590.3 /* ty=Tensor[(1, 1024), float32] */;
  %3592 = %3590.1 /* ty=Tensor[(1, 1024), float32] */;
  %3593 = sigmoid(%3592) /* ty=Tensor[(1, 1024), float32] */;
  %3594 = %3590.0 /* ty=Tensor[(1, 1024), float32] */;
  %3595 = %3590.2 /* ty=Tensor[(1, 1024), float32] */;
  %3596 = sigmoid(%3594) /* ty=Tensor[(1, 1024), float32] */;
  %3597 = tanh(%3595) /* ty=Tensor[(1, 1024), float32] */;
  %3598 = multiply(%3593, %3557) /* ty=Tensor[(1, 1024), float32] */;
  %3599 = multiply(%3596, %3597) /* ty=Tensor[(1, 1024), float32] */;
  %3600 = add(%3598, %3599) /* ty=Tensor[(1, 1024), float32] */;
  %3601 = sigmoid(%3591) /* ty=Tensor[(1, 1024), float32] */;
  %3602 = tanh(%3600) /* ty=Tensor[(1, 1024), float32] */;
  %3603 = multiply(%3601, %3602) /* ty=Tensor[(1, 1024), float32] */;
  %3604 = multiply(%3580, %3581) /* ty=Tensor[(1, 1024), float32] */;
  %3605 = (%3603, %3604) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3606 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3607 = concatenate(%3605, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3608 = concatenate(%3606, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3609 = nn.dense(%3607, %3608, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3610 = add(%3609, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3611 = add(%3610, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3612 = split(%3611, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3613 = %3612.3 /* ty=Tensor[(1, 1024), float32] */;
  %3614 = %3612.1 /* ty=Tensor[(1, 1024), float32] */;
  %3615 = sigmoid(%3614) /* ty=Tensor[(1, 1024), float32] */;
  %3616 = %3612.0 /* ty=Tensor[(1, 1024), float32] */;
  %3617 = %3612.2 /* ty=Tensor[(1, 1024), float32] */;
  %3618 = sigmoid(%3616) /* ty=Tensor[(1, 1024), float32] */;
  %3619 = tanh(%3617) /* ty=Tensor[(1, 1024), float32] */;
  %3620 = multiply(%3615, %3579) /* ty=Tensor[(1, 1024), float32] */;
  %3621 = multiply(%3618, %3619) /* ty=Tensor[(1, 1024), float32] */;
  %3622 = add(%3620, %3621) /* ty=Tensor[(1, 1024), float32] */;
  %3623 = sigmoid(%3613) /* ty=Tensor[(1, 1024), float32] */;
  %3624 = tanh(%3622) /* ty=Tensor[(1, 1024), float32] */;
  %3625 = %555.71 /* ty=Tensor[(1, 240), float32] */;
  %3626 = (%3625, %3603) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3627 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3628 = concatenate(%3626, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3629 = concatenate(%3627, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3630 = nn.dense(%3628, %3629, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3631 = add(%3630, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3632 = add(%3631, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3633 = split(%3632, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3634 = %3633.3 /* ty=Tensor[(1, 1024), float32] */;
  %3635 = %3633.1 /* ty=Tensor[(1, 1024), float32] */;
  %3636 = sigmoid(%3635) /* ty=Tensor[(1, 1024), float32] */;
  %3637 = %3633.0 /* ty=Tensor[(1, 1024), float32] */;
  %3638 = %3633.2 /* ty=Tensor[(1, 1024), float32] */;
  %3639 = sigmoid(%3637) /* ty=Tensor[(1, 1024), float32] */;
  %3640 = tanh(%3638) /* ty=Tensor[(1, 1024), float32] */;
  %3641 = multiply(%3636, %3600) /* ty=Tensor[(1, 1024), float32] */;
  %3642 = multiply(%3639, %3640) /* ty=Tensor[(1, 1024), float32] */;
  %3643 = add(%3641, %3642) /* ty=Tensor[(1, 1024), float32] */;
  %3644 = sigmoid(%3634) /* ty=Tensor[(1, 1024), float32] */;
  %3645 = tanh(%3643) /* ty=Tensor[(1, 1024), float32] */;
  %3646 = multiply(%3644, %3645) /* ty=Tensor[(1, 1024), float32] */;
  %3647 = multiply(%3623, %3624) /* ty=Tensor[(1, 1024), float32] */;
  %3648 = (%3646, %3647) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3649 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3650 = concatenate(%3648, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3651 = concatenate(%3649, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3652 = nn.dense(%3650, %3651, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3653 = add(%3652, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3654 = add(%3653, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3655 = split(%3654, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3656 = %3655.3 /* ty=Tensor[(1, 1024), float32] */;
  %3657 = %3655.1 /* ty=Tensor[(1, 1024), float32] */;
  %3658 = sigmoid(%3657) /* ty=Tensor[(1, 1024), float32] */;
  %3659 = %3655.0 /* ty=Tensor[(1, 1024), float32] */;
  %3660 = %3655.2 /* ty=Tensor[(1, 1024), float32] */;
  %3661 = sigmoid(%3659) /* ty=Tensor[(1, 1024), float32] */;
  %3662 = tanh(%3660) /* ty=Tensor[(1, 1024), float32] */;
  %3663 = multiply(%3658, %3622) /* ty=Tensor[(1, 1024), float32] */;
  %3664 = multiply(%3661, %3662) /* ty=Tensor[(1, 1024), float32] */;
  %3665 = add(%3663, %3664) /* ty=Tensor[(1, 1024), float32] */;
  %3666 = sigmoid(%3656) /* ty=Tensor[(1, 1024), float32] */;
  %3667 = tanh(%3665) /* ty=Tensor[(1, 1024), float32] */;
  %3668 = %555.72 /* ty=Tensor[(1, 240), float32] */;
  %3669 = (%3668, %3646) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3670 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3671 = concatenate(%3669, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3672 = concatenate(%3670, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3673 = nn.dense(%3671, %3672, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3674 = add(%3673, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3675 = add(%3674, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3676 = split(%3675, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3677 = %3676.3 /* ty=Tensor[(1, 1024), float32] */;
  %3678 = %3676.1 /* ty=Tensor[(1, 1024), float32] */;
  %3679 = sigmoid(%3678) /* ty=Tensor[(1, 1024), float32] */;
  %3680 = %3676.0 /* ty=Tensor[(1, 1024), float32] */;
  %3681 = %3676.2 /* ty=Tensor[(1, 1024), float32] */;
  %3682 = sigmoid(%3680) /* ty=Tensor[(1, 1024), float32] */;
  %3683 = tanh(%3681) /* ty=Tensor[(1, 1024), float32] */;
  %3684 = multiply(%3679, %3643) /* ty=Tensor[(1, 1024), float32] */;
  %3685 = multiply(%3682, %3683) /* ty=Tensor[(1, 1024), float32] */;
  %3686 = add(%3684, %3685) /* ty=Tensor[(1, 1024), float32] */;
  %3687 = sigmoid(%3677) /* ty=Tensor[(1, 1024), float32] */;
  %3688 = tanh(%3686) /* ty=Tensor[(1, 1024), float32] */;
  %3689 = multiply(%3687, %3688) /* ty=Tensor[(1, 1024), float32] */;
  %3690 = multiply(%3666, %3667) /* ty=Tensor[(1, 1024), float32] */;
  %3691 = (%3689, %3690) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3692 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3693 = concatenate(%3691, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3694 = concatenate(%3692, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3695 = nn.dense(%3693, %3694, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3696 = add(%3695, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3697 = add(%3696, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3698 = split(%3697, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3699 = %3698.3 /* ty=Tensor[(1, 1024), float32] */;
  %3700 = %3698.1 /* ty=Tensor[(1, 1024), float32] */;
  %3701 = sigmoid(%3700) /* ty=Tensor[(1, 1024), float32] */;
  %3702 = %3698.0 /* ty=Tensor[(1, 1024), float32] */;
  %3703 = %3698.2 /* ty=Tensor[(1, 1024), float32] */;
  %3704 = sigmoid(%3702) /* ty=Tensor[(1, 1024), float32] */;
  %3705 = tanh(%3703) /* ty=Tensor[(1, 1024), float32] */;
  %3706 = multiply(%3701, %3665) /* ty=Tensor[(1, 1024), float32] */;
  %3707 = multiply(%3704, %3705) /* ty=Tensor[(1, 1024), float32] */;
  %3708 = add(%3706, %3707) /* ty=Tensor[(1, 1024), float32] */;
  %3709 = sigmoid(%3699) /* ty=Tensor[(1, 1024), float32] */;
  %3710 = tanh(%3708) /* ty=Tensor[(1, 1024), float32] */;
  %3711 = %555.73 /* ty=Tensor[(1, 240), float32] */;
  %3712 = (%3711, %3689) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3713 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3714 = concatenate(%3712, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3715 = concatenate(%3713, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3716 = nn.dense(%3714, %3715, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3717 = add(%3716, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3718 = add(%3717, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3719 = split(%3718, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3720 = %3719.3 /* ty=Tensor[(1, 1024), float32] */;
  %3721 = %3719.1 /* ty=Tensor[(1, 1024), float32] */;
  %3722 = sigmoid(%3721) /* ty=Tensor[(1, 1024), float32] */;
  %3723 = %3719.0 /* ty=Tensor[(1, 1024), float32] */;
  %3724 = %3719.2 /* ty=Tensor[(1, 1024), float32] */;
  %3725 = sigmoid(%3723) /* ty=Tensor[(1, 1024), float32] */;
  %3726 = tanh(%3724) /* ty=Tensor[(1, 1024), float32] */;
  %3727 = multiply(%3722, %3686) /* ty=Tensor[(1, 1024), float32] */;
  %3728 = multiply(%3725, %3726) /* ty=Tensor[(1, 1024), float32] */;
  %3729 = add(%3727, %3728) /* ty=Tensor[(1, 1024), float32] */;
  %3730 = sigmoid(%3720) /* ty=Tensor[(1, 1024), float32] */;
  %3731 = tanh(%3729) /* ty=Tensor[(1, 1024), float32] */;
  %3732 = multiply(%3730, %3731) /* ty=Tensor[(1, 1024), float32] */;
  %3733 = multiply(%3709, %3710) /* ty=Tensor[(1, 1024), float32] */;
  %3734 = (%3732, %3733) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3735 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3736 = concatenate(%3734, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3737 = concatenate(%3735, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3738 = nn.dense(%3736, %3737, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3739 = add(%3738, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3740 = add(%3739, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3741 = split(%3740, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3742 = %3741.3 /* ty=Tensor[(1, 1024), float32] */;
  %3743 = %3741.1 /* ty=Tensor[(1, 1024), float32] */;
  %3744 = sigmoid(%3743) /* ty=Tensor[(1, 1024), float32] */;
  %3745 = %3741.0 /* ty=Tensor[(1, 1024), float32] */;
  %3746 = %3741.2 /* ty=Tensor[(1, 1024), float32] */;
  %3747 = sigmoid(%3745) /* ty=Tensor[(1, 1024), float32] */;
  %3748 = tanh(%3746) /* ty=Tensor[(1, 1024), float32] */;
  %3749 = multiply(%3744, %3708) /* ty=Tensor[(1, 1024), float32] */;
  %3750 = multiply(%3747, %3748) /* ty=Tensor[(1, 1024), float32] */;
  %3751 = add(%3749, %3750) /* ty=Tensor[(1, 1024), float32] */;
  %3752 = sigmoid(%3742) /* ty=Tensor[(1, 1024), float32] */;
  %3753 = tanh(%3751) /* ty=Tensor[(1, 1024), float32] */;
  %3754 = %555.74 /* ty=Tensor[(1, 240), float32] */;
  %3755 = (%3754, %3732) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3756 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3757 = concatenate(%3755, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3758 = concatenate(%3756, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3759 = nn.dense(%3757, %3758, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3760 = add(%3759, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3761 = add(%3760, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3762 = split(%3761, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3763 = %3762.3 /* ty=Tensor[(1, 1024), float32] */;
  %3764 = %3762.1 /* ty=Tensor[(1, 1024), float32] */;
  %3765 = sigmoid(%3764) /* ty=Tensor[(1, 1024), float32] */;
  %3766 = %3762.0 /* ty=Tensor[(1, 1024), float32] */;
  %3767 = %3762.2 /* ty=Tensor[(1, 1024), float32] */;
  %3768 = sigmoid(%3766) /* ty=Tensor[(1, 1024), float32] */;
  %3769 = tanh(%3767) /* ty=Tensor[(1, 1024), float32] */;
  %3770 = multiply(%3765, %3729) /* ty=Tensor[(1, 1024), float32] */;
  %3771 = multiply(%3768, %3769) /* ty=Tensor[(1, 1024), float32] */;
  %3772 = add(%3770, %3771) /* ty=Tensor[(1, 1024), float32] */;
  %3773 = sigmoid(%3763) /* ty=Tensor[(1, 1024), float32] */;
  %3774 = tanh(%3772) /* ty=Tensor[(1, 1024), float32] */;
  %3775 = multiply(%3773, %3774) /* ty=Tensor[(1, 1024), float32] */;
  %3776 = multiply(%3752, %3753) /* ty=Tensor[(1, 1024), float32] */;
  %3777 = (%3775, %3776) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3778 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3779 = concatenate(%3777, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3780 = concatenate(%3778, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3781 = nn.dense(%3779, %3780, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3782 = add(%3781, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3783 = add(%3782, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3784 = split(%3783, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3785 = %3784.3 /* ty=Tensor[(1, 1024), float32] */;
  %3786 = %3784.1 /* ty=Tensor[(1, 1024), float32] */;
  %3787 = sigmoid(%3786) /* ty=Tensor[(1, 1024), float32] */;
  %3788 = %3784.0 /* ty=Tensor[(1, 1024), float32] */;
  %3789 = %3784.2 /* ty=Tensor[(1, 1024), float32] */;
  %3790 = sigmoid(%3788) /* ty=Tensor[(1, 1024), float32] */;
  %3791 = tanh(%3789) /* ty=Tensor[(1, 1024), float32] */;
  %3792 = multiply(%3787, %3751) /* ty=Tensor[(1, 1024), float32] */;
  %3793 = multiply(%3790, %3791) /* ty=Tensor[(1, 1024), float32] */;
  %3794 = add(%3792, %3793) /* ty=Tensor[(1, 1024), float32] */;
  %3795 = sigmoid(%3785) /* ty=Tensor[(1, 1024), float32] */;
  %3796 = tanh(%3794) /* ty=Tensor[(1, 1024), float32] */;
  %3797 = %555.75 /* ty=Tensor[(1, 240), float32] */;
  %3798 = (%3797, %3775) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3799 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3800 = concatenate(%3798, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3801 = concatenate(%3799, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3802 = nn.dense(%3800, %3801, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3803 = add(%3802, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3804 = add(%3803, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3805 = split(%3804, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3806 = %3805.3 /* ty=Tensor[(1, 1024), float32] */;
  %3807 = %3805.1 /* ty=Tensor[(1, 1024), float32] */;
  %3808 = sigmoid(%3807) /* ty=Tensor[(1, 1024), float32] */;
  %3809 = %3805.0 /* ty=Tensor[(1, 1024), float32] */;
  %3810 = %3805.2 /* ty=Tensor[(1, 1024), float32] */;
  %3811 = sigmoid(%3809) /* ty=Tensor[(1, 1024), float32] */;
  %3812 = tanh(%3810) /* ty=Tensor[(1, 1024), float32] */;
  %3813 = multiply(%3808, %3772) /* ty=Tensor[(1, 1024), float32] */;
  %3814 = multiply(%3811, %3812) /* ty=Tensor[(1, 1024), float32] */;
  %3815 = add(%3813, %3814) /* ty=Tensor[(1, 1024), float32] */;
  %3816 = sigmoid(%3806) /* ty=Tensor[(1, 1024), float32] */;
  %3817 = tanh(%3815) /* ty=Tensor[(1, 1024), float32] */;
  %3818 = multiply(%3816, %3817) /* ty=Tensor[(1, 1024), float32] */;
  %3819 = multiply(%3795, %3796) /* ty=Tensor[(1, 1024), float32] */;
  %3820 = (%3818, %3819) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3821 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3822 = concatenate(%3820, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3823 = concatenate(%3821, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3824 = nn.dense(%3822, %3823, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3825 = add(%3824, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3826 = add(%3825, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3827 = split(%3826, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3828 = %3827.3 /* ty=Tensor[(1, 1024), float32] */;
  %3829 = %3827.1 /* ty=Tensor[(1, 1024), float32] */;
  %3830 = sigmoid(%3829) /* ty=Tensor[(1, 1024), float32] */;
  %3831 = %3827.0 /* ty=Tensor[(1, 1024), float32] */;
  %3832 = %3827.2 /* ty=Tensor[(1, 1024), float32] */;
  %3833 = sigmoid(%3831) /* ty=Tensor[(1, 1024), float32] */;
  %3834 = tanh(%3832) /* ty=Tensor[(1, 1024), float32] */;
  %3835 = multiply(%3830, %3794) /* ty=Tensor[(1, 1024), float32] */;
  %3836 = multiply(%3833, %3834) /* ty=Tensor[(1, 1024), float32] */;
  %3837 = add(%3835, %3836) /* ty=Tensor[(1, 1024), float32] */;
  %3838 = sigmoid(%3828) /* ty=Tensor[(1, 1024), float32] */;
  %3839 = tanh(%3837) /* ty=Tensor[(1, 1024), float32] */;
  %3840 = %555.76 /* ty=Tensor[(1, 240), float32] */;
  %3841 = (%3840, %3818) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3842 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3843 = concatenate(%3841, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3844 = concatenate(%3842, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3845 = nn.dense(%3843, %3844, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3846 = add(%3845, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3847 = add(%3846, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3848 = split(%3847, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3849 = %3848.3 /* ty=Tensor[(1, 1024), float32] */;
  %3850 = %3848.1 /* ty=Tensor[(1, 1024), float32] */;
  %3851 = sigmoid(%3850) /* ty=Tensor[(1, 1024), float32] */;
  %3852 = %3848.0 /* ty=Tensor[(1, 1024), float32] */;
  %3853 = %3848.2 /* ty=Tensor[(1, 1024), float32] */;
  %3854 = sigmoid(%3852) /* ty=Tensor[(1, 1024), float32] */;
  %3855 = tanh(%3853) /* ty=Tensor[(1, 1024), float32] */;
  %3856 = multiply(%3851, %3815) /* ty=Tensor[(1, 1024), float32] */;
  %3857 = multiply(%3854, %3855) /* ty=Tensor[(1, 1024), float32] */;
  %3858 = add(%3856, %3857) /* ty=Tensor[(1, 1024), float32] */;
  %3859 = sigmoid(%3849) /* ty=Tensor[(1, 1024), float32] */;
  %3860 = tanh(%3858) /* ty=Tensor[(1, 1024), float32] */;
  %3861 = multiply(%3859, %3860) /* ty=Tensor[(1, 1024), float32] */;
  %3862 = multiply(%3838, %3839) /* ty=Tensor[(1, 1024), float32] */;
  %3863 = (%3861, %3862) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3864 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3865 = concatenate(%3863, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3866 = concatenate(%3864, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3867 = nn.dense(%3865, %3866, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3868 = add(%3867, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3869 = add(%3868, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3870 = split(%3869, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3871 = %3870.3 /* ty=Tensor[(1, 1024), float32] */;
  %3872 = %3870.1 /* ty=Tensor[(1, 1024), float32] */;
  %3873 = sigmoid(%3872) /* ty=Tensor[(1, 1024), float32] */;
  %3874 = %3870.0 /* ty=Tensor[(1, 1024), float32] */;
  %3875 = %3870.2 /* ty=Tensor[(1, 1024), float32] */;
  %3876 = sigmoid(%3874) /* ty=Tensor[(1, 1024), float32] */;
  %3877 = tanh(%3875) /* ty=Tensor[(1, 1024), float32] */;
  %3878 = multiply(%3873, %3837) /* ty=Tensor[(1, 1024), float32] */;
  %3879 = multiply(%3876, %3877) /* ty=Tensor[(1, 1024), float32] */;
  %3880 = add(%3878, %3879) /* ty=Tensor[(1, 1024), float32] */;
  %3881 = sigmoid(%3871) /* ty=Tensor[(1, 1024), float32] */;
  %3882 = tanh(%3880) /* ty=Tensor[(1, 1024), float32] */;
  %3883 = %555.77 /* ty=Tensor[(1, 240), float32] */;
  %3884 = (%3883, %3861) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3885 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3886 = concatenate(%3884, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3887 = concatenate(%3885, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3888 = nn.dense(%3886, %3887, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3889 = add(%3888, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3890 = add(%3889, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3891 = split(%3890, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3892 = %3891.3 /* ty=Tensor[(1, 1024), float32] */;
  %3893 = %3891.1 /* ty=Tensor[(1, 1024), float32] */;
  %3894 = sigmoid(%3893) /* ty=Tensor[(1, 1024), float32] */;
  %3895 = %3891.0 /* ty=Tensor[(1, 1024), float32] */;
  %3896 = %3891.2 /* ty=Tensor[(1, 1024), float32] */;
  %3897 = sigmoid(%3895) /* ty=Tensor[(1, 1024), float32] */;
  %3898 = tanh(%3896) /* ty=Tensor[(1, 1024), float32] */;
  %3899 = multiply(%3894, %3858) /* ty=Tensor[(1, 1024), float32] */;
  %3900 = multiply(%3897, %3898) /* ty=Tensor[(1, 1024), float32] */;
  %3901 = add(%3899, %3900) /* ty=Tensor[(1, 1024), float32] */;
  %3902 = sigmoid(%3892) /* ty=Tensor[(1, 1024), float32] */;
  %3903 = tanh(%3901) /* ty=Tensor[(1, 1024), float32] */;
  %3904 = multiply(%3902, %3903) /* ty=Tensor[(1, 1024), float32] */;
  %3905 = multiply(%3881, %3882) /* ty=Tensor[(1, 1024), float32] */;
  %3906 = (%3904, %3905) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3907 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3908 = concatenate(%3906, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3909 = concatenate(%3907, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3910 = nn.dense(%3908, %3909, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3911 = add(%3910, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3912 = add(%3911, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3913 = split(%3912, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3914 = %3913.3 /* ty=Tensor[(1, 1024), float32] */;
  %3915 = %3913.1 /* ty=Tensor[(1, 1024), float32] */;
  %3916 = sigmoid(%3915) /* ty=Tensor[(1, 1024), float32] */;
  %3917 = %3913.0 /* ty=Tensor[(1, 1024), float32] */;
  %3918 = %3913.2 /* ty=Tensor[(1, 1024), float32] */;
  %3919 = sigmoid(%3917) /* ty=Tensor[(1, 1024), float32] */;
  %3920 = tanh(%3918) /* ty=Tensor[(1, 1024), float32] */;
  %3921 = multiply(%3916, %3880) /* ty=Tensor[(1, 1024), float32] */;
  %3922 = multiply(%3919, %3920) /* ty=Tensor[(1, 1024), float32] */;
  %3923 = add(%3921, %3922) /* ty=Tensor[(1, 1024), float32] */;
  %3924 = sigmoid(%3914) /* ty=Tensor[(1, 1024), float32] */;
  %3925 = tanh(%3923) /* ty=Tensor[(1, 1024), float32] */;
  %3926 = %555.78 /* ty=Tensor[(1, 240), float32] */;
  %3927 = (%3926, %3904) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3928 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3929 = concatenate(%3927, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3930 = concatenate(%3928, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3931 = nn.dense(%3929, %3930, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3932 = add(%3931, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3933 = add(%3932, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3934 = split(%3933, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3935 = %3934.3 /* ty=Tensor[(1, 1024), float32] */;
  %3936 = %3934.1 /* ty=Tensor[(1, 1024), float32] */;
  %3937 = sigmoid(%3936) /* ty=Tensor[(1, 1024), float32] */;
  %3938 = %3934.0 /* ty=Tensor[(1, 1024), float32] */;
  %3939 = %3934.2 /* ty=Tensor[(1, 1024), float32] */;
  %3940 = sigmoid(%3938) /* ty=Tensor[(1, 1024), float32] */;
  %3941 = tanh(%3939) /* ty=Tensor[(1, 1024), float32] */;
  %3942 = multiply(%3937, %3901) /* ty=Tensor[(1, 1024), float32] */;
  %3943 = multiply(%3940, %3941) /* ty=Tensor[(1, 1024), float32] */;
  %3944 = add(%3942, %3943) /* ty=Tensor[(1, 1024), float32] */;
  %3945 = sigmoid(%3935) /* ty=Tensor[(1, 1024), float32] */;
  %3946 = tanh(%3944) /* ty=Tensor[(1, 1024), float32] */;
  %3947 = multiply(%3945, %3946) /* ty=Tensor[(1, 1024), float32] */;
  %3948 = multiply(%3924, %3925) /* ty=Tensor[(1, 1024), float32] */;
  %3949 = (%3947, %3948) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3950 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3951 = concatenate(%3949, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3952 = concatenate(%3950, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3953 = nn.dense(%3951, %3952, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3954 = add(%3953, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3955 = add(%3954, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3956 = split(%3955, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3957 = %3956.3 /* ty=Tensor[(1, 1024), float32] */;
  %3958 = %3956.1 /* ty=Tensor[(1, 1024), float32] */;
  %3959 = sigmoid(%3958) /* ty=Tensor[(1, 1024), float32] */;
  %3960 = %3956.0 /* ty=Tensor[(1, 1024), float32] */;
  %3961 = %3956.2 /* ty=Tensor[(1, 1024), float32] */;
  %3962 = sigmoid(%3960) /* ty=Tensor[(1, 1024), float32] */;
  %3963 = tanh(%3961) /* ty=Tensor[(1, 1024), float32] */;
  %3964 = multiply(%3959, %3923) /* ty=Tensor[(1, 1024), float32] */;
  %3965 = multiply(%3962, %3963) /* ty=Tensor[(1, 1024), float32] */;
  %3966 = add(%3964, %3965) /* ty=Tensor[(1, 1024), float32] */;
  %3967 = sigmoid(%3957) /* ty=Tensor[(1, 1024), float32] */;
  %3968 = tanh(%3966) /* ty=Tensor[(1, 1024), float32] */;
  %3969 = %555.79 /* ty=Tensor[(1, 240), float32] */;
  %3970 = (%3969, %3947) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %3971 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %3972 = concatenate(%3970, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %3973 = concatenate(%3971, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %3974 = nn.dense(%3972, %3973, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3975 = add(%3974, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3976 = add(%3975, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %3977 = split(%3976, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3978 = %3977.3 /* ty=Tensor[(1, 1024), float32] */;
  %3979 = %3977.1 /* ty=Tensor[(1, 1024), float32] */;
  %3980 = sigmoid(%3979) /* ty=Tensor[(1, 1024), float32] */;
  %3981 = %3977.0 /* ty=Tensor[(1, 1024), float32] */;
  %3982 = %3977.2 /* ty=Tensor[(1, 1024), float32] */;
  %3983 = sigmoid(%3981) /* ty=Tensor[(1, 1024), float32] */;
  %3984 = tanh(%3982) /* ty=Tensor[(1, 1024), float32] */;
  %3985 = multiply(%3980, %3944) /* ty=Tensor[(1, 1024), float32] */;
  %3986 = multiply(%3983, %3984) /* ty=Tensor[(1, 1024), float32] */;
  %3987 = add(%3985, %3986) /* ty=Tensor[(1, 1024), float32] */;
  %3988 = sigmoid(%3978) /* ty=Tensor[(1, 1024), float32] */;
  %3989 = tanh(%3987) /* ty=Tensor[(1, 1024), float32] */;
  %3990 = multiply(%3988, %3989) /* ty=Tensor[(1, 1024), float32] */;
  %3991 = multiply(%3967, %3968) /* ty=Tensor[(1, 1024), float32] */;
  %3992 = (%3990, %3991) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %3993 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %3994 = concatenate(%3992, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %3995 = concatenate(%3993, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %3996 = nn.dense(%3994, %3995, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %3997 = add(%3996, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3998 = add(%3997, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %3999 = split(%3998, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4000 = %3999.3 /* ty=Tensor[(1, 1024), float32] */;
  %4001 = %3999.1 /* ty=Tensor[(1, 1024), float32] */;
  %4002 = sigmoid(%4001) /* ty=Tensor[(1, 1024), float32] */;
  %4003 = %3999.0 /* ty=Tensor[(1, 1024), float32] */;
  %4004 = %3999.2 /* ty=Tensor[(1, 1024), float32] */;
  %4005 = sigmoid(%4003) /* ty=Tensor[(1, 1024), float32] */;
  %4006 = tanh(%4004) /* ty=Tensor[(1, 1024), float32] */;
  %4007 = multiply(%4002, %3966) /* ty=Tensor[(1, 1024), float32] */;
  %4008 = multiply(%4005, %4006) /* ty=Tensor[(1, 1024), float32] */;
  %4009 = add(%4007, %4008) /* ty=Tensor[(1, 1024), float32] */;
  %4010 = sigmoid(%4000) /* ty=Tensor[(1, 1024), float32] */;
  %4011 = tanh(%4009) /* ty=Tensor[(1, 1024), float32] */;
  %4012 = %555.80 /* ty=Tensor[(1, 240), float32] */;
  %4013 = (%4012, %3990) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4014 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4015 = concatenate(%4013, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4016 = concatenate(%4014, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4017 = nn.dense(%4015, %4016, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4018 = add(%4017, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4019 = add(%4018, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4020 = split(%4019, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4021 = %4020.3 /* ty=Tensor[(1, 1024), float32] */;
  %4022 = %4020.1 /* ty=Tensor[(1, 1024), float32] */;
  %4023 = sigmoid(%4022) /* ty=Tensor[(1, 1024), float32] */;
  %4024 = %4020.0 /* ty=Tensor[(1, 1024), float32] */;
  %4025 = %4020.2 /* ty=Tensor[(1, 1024), float32] */;
  %4026 = sigmoid(%4024) /* ty=Tensor[(1, 1024), float32] */;
  %4027 = tanh(%4025) /* ty=Tensor[(1, 1024), float32] */;
  %4028 = multiply(%4023, %3987) /* ty=Tensor[(1, 1024), float32] */;
  %4029 = multiply(%4026, %4027) /* ty=Tensor[(1, 1024), float32] */;
  %4030 = add(%4028, %4029) /* ty=Tensor[(1, 1024), float32] */;
  %4031 = sigmoid(%4021) /* ty=Tensor[(1, 1024), float32] */;
  %4032 = tanh(%4030) /* ty=Tensor[(1, 1024), float32] */;
  %4033 = multiply(%4031, %4032) /* ty=Tensor[(1, 1024), float32] */;
  %4034 = multiply(%4010, %4011) /* ty=Tensor[(1, 1024), float32] */;
  %4035 = (%4033, %4034) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4036 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4037 = concatenate(%4035, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4038 = concatenate(%4036, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4039 = nn.dense(%4037, %4038, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4040 = add(%4039, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4041 = add(%4040, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4042 = split(%4041, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4043 = %4042.3 /* ty=Tensor[(1, 1024), float32] */;
  %4044 = %4042.1 /* ty=Tensor[(1, 1024), float32] */;
  %4045 = sigmoid(%4044) /* ty=Tensor[(1, 1024), float32] */;
  %4046 = %4042.0 /* ty=Tensor[(1, 1024), float32] */;
  %4047 = %4042.2 /* ty=Tensor[(1, 1024), float32] */;
  %4048 = sigmoid(%4046) /* ty=Tensor[(1, 1024), float32] */;
  %4049 = tanh(%4047) /* ty=Tensor[(1, 1024), float32] */;
  %4050 = multiply(%4045, %4009) /* ty=Tensor[(1, 1024), float32] */;
  %4051 = multiply(%4048, %4049) /* ty=Tensor[(1, 1024), float32] */;
  %4052 = add(%4050, %4051) /* ty=Tensor[(1, 1024), float32] */;
  %4053 = sigmoid(%4043) /* ty=Tensor[(1, 1024), float32] */;
  %4054 = tanh(%4052) /* ty=Tensor[(1, 1024), float32] */;
  %4055 = %555.81 /* ty=Tensor[(1, 240), float32] */;
  %4056 = (%4055, %4033) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4057 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4058 = concatenate(%4056, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4059 = concatenate(%4057, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4060 = nn.dense(%4058, %4059, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4061 = add(%4060, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4062 = add(%4061, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4063 = split(%4062, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4064 = %4063.3 /* ty=Tensor[(1, 1024), float32] */;
  %4065 = %4063.1 /* ty=Tensor[(1, 1024), float32] */;
  %4066 = sigmoid(%4065) /* ty=Tensor[(1, 1024), float32] */;
  %4067 = %4063.0 /* ty=Tensor[(1, 1024), float32] */;
  %4068 = %4063.2 /* ty=Tensor[(1, 1024), float32] */;
  %4069 = sigmoid(%4067) /* ty=Tensor[(1, 1024), float32] */;
  %4070 = tanh(%4068) /* ty=Tensor[(1, 1024), float32] */;
  %4071 = multiply(%4066, %4030) /* ty=Tensor[(1, 1024), float32] */;
  %4072 = multiply(%4069, %4070) /* ty=Tensor[(1, 1024), float32] */;
  %4073 = add(%4071, %4072) /* ty=Tensor[(1, 1024), float32] */;
  %4074 = sigmoid(%4064) /* ty=Tensor[(1, 1024), float32] */;
  %4075 = tanh(%4073) /* ty=Tensor[(1, 1024), float32] */;
  %4076 = multiply(%4074, %4075) /* ty=Tensor[(1, 1024), float32] */;
  %4077 = multiply(%4053, %4054) /* ty=Tensor[(1, 1024), float32] */;
  %4078 = (%4076, %4077) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4079 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4080 = concatenate(%4078, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4081 = concatenate(%4079, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4082 = nn.dense(%4080, %4081, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4083 = add(%4082, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4084 = add(%4083, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4085 = split(%4084, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4086 = %4085.3 /* ty=Tensor[(1, 1024), float32] */;
  %4087 = %4085.1 /* ty=Tensor[(1, 1024), float32] */;
  %4088 = sigmoid(%4087) /* ty=Tensor[(1, 1024), float32] */;
  %4089 = %4085.0 /* ty=Tensor[(1, 1024), float32] */;
  %4090 = %4085.2 /* ty=Tensor[(1, 1024), float32] */;
  %4091 = sigmoid(%4089) /* ty=Tensor[(1, 1024), float32] */;
  %4092 = tanh(%4090) /* ty=Tensor[(1, 1024), float32] */;
  %4093 = multiply(%4088, %4052) /* ty=Tensor[(1, 1024), float32] */;
  %4094 = multiply(%4091, %4092) /* ty=Tensor[(1, 1024), float32] */;
  %4095 = add(%4093, %4094) /* ty=Tensor[(1, 1024), float32] */;
  %4096 = sigmoid(%4086) /* ty=Tensor[(1, 1024), float32] */;
  %4097 = tanh(%4095) /* ty=Tensor[(1, 1024), float32] */;
  %4098 = %555.82 /* ty=Tensor[(1, 240), float32] */;
  %4099 = (%4098, %4076) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4100 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4101 = concatenate(%4099, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4102 = concatenate(%4100, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4103 = nn.dense(%4101, %4102, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4104 = add(%4103, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4105 = add(%4104, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4106 = split(%4105, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4107 = %4106.3 /* ty=Tensor[(1, 1024), float32] */;
  %4108 = %4106.1 /* ty=Tensor[(1, 1024), float32] */;
  %4109 = sigmoid(%4108) /* ty=Tensor[(1, 1024), float32] */;
  %4110 = %4106.0 /* ty=Tensor[(1, 1024), float32] */;
  %4111 = %4106.2 /* ty=Tensor[(1, 1024), float32] */;
  %4112 = sigmoid(%4110) /* ty=Tensor[(1, 1024), float32] */;
  %4113 = tanh(%4111) /* ty=Tensor[(1, 1024), float32] */;
  %4114 = multiply(%4109, %4073) /* ty=Tensor[(1, 1024), float32] */;
  %4115 = multiply(%4112, %4113) /* ty=Tensor[(1, 1024), float32] */;
  %4116 = add(%4114, %4115) /* ty=Tensor[(1, 1024), float32] */;
  %4117 = sigmoid(%4107) /* ty=Tensor[(1, 1024), float32] */;
  %4118 = tanh(%4116) /* ty=Tensor[(1, 1024), float32] */;
  %4119 = multiply(%4117, %4118) /* ty=Tensor[(1, 1024), float32] */;
  %4120 = multiply(%4096, %4097) /* ty=Tensor[(1, 1024), float32] */;
  %4121 = (%4119, %4120) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4122 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4123 = concatenate(%4121, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4124 = concatenate(%4122, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4125 = nn.dense(%4123, %4124, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4126 = add(%4125, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4127 = add(%4126, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4128 = split(%4127, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4129 = %4128.3 /* ty=Tensor[(1, 1024), float32] */;
  %4130 = %4128.1 /* ty=Tensor[(1, 1024), float32] */;
  %4131 = sigmoid(%4130) /* ty=Tensor[(1, 1024), float32] */;
  %4132 = %4128.0 /* ty=Tensor[(1, 1024), float32] */;
  %4133 = %4128.2 /* ty=Tensor[(1, 1024), float32] */;
  %4134 = sigmoid(%4132) /* ty=Tensor[(1, 1024), float32] */;
  %4135 = tanh(%4133) /* ty=Tensor[(1, 1024), float32] */;
  %4136 = multiply(%4131, %4095) /* ty=Tensor[(1, 1024), float32] */;
  %4137 = multiply(%4134, %4135) /* ty=Tensor[(1, 1024), float32] */;
  %4138 = add(%4136, %4137) /* ty=Tensor[(1, 1024), float32] */;
  %4139 = sigmoid(%4129) /* ty=Tensor[(1, 1024), float32] */;
  %4140 = tanh(%4138) /* ty=Tensor[(1, 1024), float32] */;
  %4141 = %555.83 /* ty=Tensor[(1, 240), float32] */;
  %4142 = (%4141, %4119) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4143 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4144 = concatenate(%4142, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4145 = concatenate(%4143, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4146 = nn.dense(%4144, %4145, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4147 = add(%4146, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4148 = add(%4147, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4149 = split(%4148, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4150 = %4149.3 /* ty=Tensor[(1, 1024), float32] */;
  %4151 = %4149.1 /* ty=Tensor[(1, 1024), float32] */;
  %4152 = sigmoid(%4151) /* ty=Tensor[(1, 1024), float32] */;
  %4153 = %4149.0 /* ty=Tensor[(1, 1024), float32] */;
  %4154 = %4149.2 /* ty=Tensor[(1, 1024), float32] */;
  %4155 = sigmoid(%4153) /* ty=Tensor[(1, 1024), float32] */;
  %4156 = tanh(%4154) /* ty=Tensor[(1, 1024), float32] */;
  %4157 = multiply(%4152, %4116) /* ty=Tensor[(1, 1024), float32] */;
  %4158 = multiply(%4155, %4156) /* ty=Tensor[(1, 1024), float32] */;
  %4159 = add(%4157, %4158) /* ty=Tensor[(1, 1024), float32] */;
  %4160 = sigmoid(%4150) /* ty=Tensor[(1, 1024), float32] */;
  %4161 = tanh(%4159) /* ty=Tensor[(1, 1024), float32] */;
  %4162 = multiply(%4160, %4161) /* ty=Tensor[(1, 1024), float32] */;
  %4163 = multiply(%4139, %4140) /* ty=Tensor[(1, 1024), float32] */;
  %4164 = (%4162, %4163) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4165 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4166 = concatenate(%4164, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4167 = concatenate(%4165, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4168 = nn.dense(%4166, %4167, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4169 = add(%4168, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4170 = add(%4169, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4171 = split(%4170, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4172 = %4171.3 /* ty=Tensor[(1, 1024), float32] */;
  %4173 = %4171.1 /* ty=Tensor[(1, 1024), float32] */;
  %4174 = sigmoid(%4173) /* ty=Tensor[(1, 1024), float32] */;
  %4175 = %4171.0 /* ty=Tensor[(1, 1024), float32] */;
  %4176 = %4171.2 /* ty=Tensor[(1, 1024), float32] */;
  %4177 = sigmoid(%4175) /* ty=Tensor[(1, 1024), float32] */;
  %4178 = tanh(%4176) /* ty=Tensor[(1, 1024), float32] */;
  %4179 = multiply(%4174, %4138) /* ty=Tensor[(1, 1024), float32] */;
  %4180 = multiply(%4177, %4178) /* ty=Tensor[(1, 1024), float32] */;
  %4181 = add(%4179, %4180) /* ty=Tensor[(1, 1024), float32] */;
  %4182 = sigmoid(%4172) /* ty=Tensor[(1, 1024), float32] */;
  %4183 = tanh(%4181) /* ty=Tensor[(1, 1024), float32] */;
  %4184 = %555.84 /* ty=Tensor[(1, 240), float32] */;
  %4185 = (%4184, %4162) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4186 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4187 = concatenate(%4185, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4188 = concatenate(%4186, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4189 = nn.dense(%4187, %4188, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4190 = add(%4189, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4191 = add(%4190, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4192 = split(%4191, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4193 = %4192.3 /* ty=Tensor[(1, 1024), float32] */;
  %4194 = %4192.1 /* ty=Tensor[(1, 1024), float32] */;
  %4195 = sigmoid(%4194) /* ty=Tensor[(1, 1024), float32] */;
  %4196 = %4192.0 /* ty=Tensor[(1, 1024), float32] */;
  %4197 = %4192.2 /* ty=Tensor[(1, 1024), float32] */;
  %4198 = sigmoid(%4196) /* ty=Tensor[(1, 1024), float32] */;
  %4199 = tanh(%4197) /* ty=Tensor[(1, 1024), float32] */;
  %4200 = multiply(%4195, %4159) /* ty=Tensor[(1, 1024), float32] */;
  %4201 = multiply(%4198, %4199) /* ty=Tensor[(1, 1024), float32] */;
  %4202 = add(%4200, %4201) /* ty=Tensor[(1, 1024), float32] */;
  %4203 = sigmoid(%4193) /* ty=Tensor[(1, 1024), float32] */;
  %4204 = tanh(%4202) /* ty=Tensor[(1, 1024), float32] */;
  %4205 = multiply(%4203, %4204) /* ty=Tensor[(1, 1024), float32] */;
  %4206 = multiply(%4182, %4183) /* ty=Tensor[(1, 1024), float32] */;
  %4207 = (%4205, %4206) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4208 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4209 = concatenate(%4207, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4210 = concatenate(%4208, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4211 = nn.dense(%4209, %4210, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4212 = add(%4211, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4213 = add(%4212, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4214 = split(%4213, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4215 = %4214.3 /* ty=Tensor[(1, 1024), float32] */;
  %4216 = %4214.1 /* ty=Tensor[(1, 1024), float32] */;
  %4217 = sigmoid(%4216) /* ty=Tensor[(1, 1024), float32] */;
  %4218 = %4214.0 /* ty=Tensor[(1, 1024), float32] */;
  %4219 = %4214.2 /* ty=Tensor[(1, 1024), float32] */;
  %4220 = sigmoid(%4218) /* ty=Tensor[(1, 1024), float32] */;
  %4221 = tanh(%4219) /* ty=Tensor[(1, 1024), float32] */;
  %4222 = multiply(%4217, %4181) /* ty=Tensor[(1, 1024), float32] */;
  %4223 = multiply(%4220, %4221) /* ty=Tensor[(1, 1024), float32] */;
  %4224 = add(%4222, %4223) /* ty=Tensor[(1, 1024), float32] */;
  %4225 = sigmoid(%4215) /* ty=Tensor[(1, 1024), float32] */;
  %4226 = tanh(%4224) /* ty=Tensor[(1, 1024), float32] */;
  %4227 = %555.85 /* ty=Tensor[(1, 240), float32] */;
  %4228 = (%4227, %4205) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4229 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4230 = concatenate(%4228, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4231 = concatenate(%4229, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4232 = nn.dense(%4230, %4231, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4233 = add(%4232, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4234 = add(%4233, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4235 = split(%4234, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4236 = %4235.3 /* ty=Tensor[(1, 1024), float32] */;
  %4237 = %4235.1 /* ty=Tensor[(1, 1024), float32] */;
  %4238 = sigmoid(%4237) /* ty=Tensor[(1, 1024), float32] */;
  %4239 = %4235.0 /* ty=Tensor[(1, 1024), float32] */;
  %4240 = %4235.2 /* ty=Tensor[(1, 1024), float32] */;
  %4241 = sigmoid(%4239) /* ty=Tensor[(1, 1024), float32] */;
  %4242 = tanh(%4240) /* ty=Tensor[(1, 1024), float32] */;
  %4243 = multiply(%4238, %4202) /* ty=Tensor[(1, 1024), float32] */;
  %4244 = multiply(%4241, %4242) /* ty=Tensor[(1, 1024), float32] */;
  %4245 = add(%4243, %4244) /* ty=Tensor[(1, 1024), float32] */;
  %4246 = sigmoid(%4236) /* ty=Tensor[(1, 1024), float32] */;
  %4247 = tanh(%4245) /* ty=Tensor[(1, 1024), float32] */;
  %4248 = multiply(%4246, %4247) /* ty=Tensor[(1, 1024), float32] */;
  %4249 = multiply(%4225, %4226) /* ty=Tensor[(1, 1024), float32] */;
  %4250 = (%4248, %4249) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4251 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4252 = concatenate(%4250, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4253 = concatenate(%4251, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4254 = nn.dense(%4252, %4253, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4255 = add(%4254, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4256 = add(%4255, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4257 = split(%4256, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4258 = %4257.3 /* ty=Tensor[(1, 1024), float32] */;
  %4259 = %4257.1 /* ty=Tensor[(1, 1024), float32] */;
  %4260 = sigmoid(%4259) /* ty=Tensor[(1, 1024), float32] */;
  %4261 = %4257.0 /* ty=Tensor[(1, 1024), float32] */;
  %4262 = %4257.2 /* ty=Tensor[(1, 1024), float32] */;
  %4263 = sigmoid(%4261) /* ty=Tensor[(1, 1024), float32] */;
  %4264 = tanh(%4262) /* ty=Tensor[(1, 1024), float32] */;
  %4265 = multiply(%4260, %4224) /* ty=Tensor[(1, 1024), float32] */;
  %4266 = multiply(%4263, %4264) /* ty=Tensor[(1, 1024), float32] */;
  %4267 = add(%4265, %4266) /* ty=Tensor[(1, 1024), float32] */;
  %4268 = sigmoid(%4258) /* ty=Tensor[(1, 1024), float32] */;
  %4269 = tanh(%4267) /* ty=Tensor[(1, 1024), float32] */;
  %4270 = %555.86 /* ty=Tensor[(1, 240), float32] */;
  %4271 = (%4270, %4248) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4272 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4273 = concatenate(%4271, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4274 = concatenate(%4272, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4275 = nn.dense(%4273, %4274, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4276 = add(%4275, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4277 = add(%4276, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4278 = split(%4277, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4279 = %4278.3 /* ty=Tensor[(1, 1024), float32] */;
  %4280 = %4278.1 /* ty=Tensor[(1, 1024), float32] */;
  %4281 = sigmoid(%4280) /* ty=Tensor[(1, 1024), float32] */;
  %4282 = %4278.0 /* ty=Tensor[(1, 1024), float32] */;
  %4283 = %4278.2 /* ty=Tensor[(1, 1024), float32] */;
  %4284 = sigmoid(%4282) /* ty=Tensor[(1, 1024), float32] */;
  %4285 = tanh(%4283) /* ty=Tensor[(1, 1024), float32] */;
  %4286 = multiply(%4281, %4245) /* ty=Tensor[(1, 1024), float32] */;
  %4287 = multiply(%4284, %4285) /* ty=Tensor[(1, 1024), float32] */;
  %4288 = add(%4286, %4287) /* ty=Tensor[(1, 1024), float32] */;
  %4289 = sigmoid(%4279) /* ty=Tensor[(1, 1024), float32] */;
  %4290 = tanh(%4288) /* ty=Tensor[(1, 1024), float32] */;
  %4291 = multiply(%4289, %4290) /* ty=Tensor[(1, 1024), float32] */;
  %4292 = multiply(%4268, %4269) /* ty=Tensor[(1, 1024), float32] */;
  %4293 = (%4291, %4292) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4294 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4295 = concatenate(%4293, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4296 = concatenate(%4294, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4297 = nn.dense(%4295, %4296, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4298 = add(%4297, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4299 = add(%4298, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4300 = split(%4299, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4301 = %4300.3 /* ty=Tensor[(1, 1024), float32] */;
  %4302 = %4300.1 /* ty=Tensor[(1, 1024), float32] */;
  %4303 = sigmoid(%4302) /* ty=Tensor[(1, 1024), float32] */;
  %4304 = %4300.0 /* ty=Tensor[(1, 1024), float32] */;
  %4305 = %4300.2 /* ty=Tensor[(1, 1024), float32] */;
  %4306 = sigmoid(%4304) /* ty=Tensor[(1, 1024), float32] */;
  %4307 = tanh(%4305) /* ty=Tensor[(1, 1024), float32] */;
  %4308 = multiply(%4303, %4267) /* ty=Tensor[(1, 1024), float32] */;
  %4309 = multiply(%4306, %4307) /* ty=Tensor[(1, 1024), float32] */;
  %4310 = add(%4308, %4309) /* ty=Tensor[(1, 1024), float32] */;
  %4311 = sigmoid(%4301) /* ty=Tensor[(1, 1024), float32] */;
  %4312 = tanh(%4310) /* ty=Tensor[(1, 1024), float32] */;
  %4313 = %555.87 /* ty=Tensor[(1, 240), float32] */;
  %4314 = (%4313, %4291) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4315 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4316 = concatenate(%4314, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4317 = concatenate(%4315, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4318 = nn.dense(%4316, %4317, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4319 = add(%4318, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4320 = add(%4319, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4321 = split(%4320, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4322 = %4321.3 /* ty=Tensor[(1, 1024), float32] */;
  %4323 = %4321.1 /* ty=Tensor[(1, 1024), float32] */;
  %4324 = sigmoid(%4323) /* ty=Tensor[(1, 1024), float32] */;
  %4325 = %4321.0 /* ty=Tensor[(1, 1024), float32] */;
  %4326 = %4321.2 /* ty=Tensor[(1, 1024), float32] */;
  %4327 = sigmoid(%4325) /* ty=Tensor[(1, 1024), float32] */;
  %4328 = tanh(%4326) /* ty=Tensor[(1, 1024), float32] */;
  %4329 = multiply(%4324, %4288) /* ty=Tensor[(1, 1024), float32] */;
  %4330 = multiply(%4327, %4328) /* ty=Tensor[(1, 1024), float32] */;
  %4331 = add(%4329, %4330) /* ty=Tensor[(1, 1024), float32] */;
  %4332 = sigmoid(%4322) /* ty=Tensor[(1, 1024), float32] */;
  %4333 = tanh(%4331) /* ty=Tensor[(1, 1024), float32] */;
  %4334 = multiply(%4332, %4333) /* ty=Tensor[(1, 1024), float32] */;
  %4335 = multiply(%4311, %4312) /* ty=Tensor[(1, 1024), float32] */;
  %4336 = (%4334, %4335) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4337 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4338 = concatenate(%4336, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4339 = concatenate(%4337, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4340 = nn.dense(%4338, %4339, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4341 = add(%4340, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4342 = add(%4341, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4343 = split(%4342, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4344 = %4343.3 /* ty=Tensor[(1, 1024), float32] */;
  %4345 = %4343.1 /* ty=Tensor[(1, 1024), float32] */;
  %4346 = sigmoid(%4345) /* ty=Tensor[(1, 1024), float32] */;
  %4347 = %4343.0 /* ty=Tensor[(1, 1024), float32] */;
  %4348 = %4343.2 /* ty=Tensor[(1, 1024), float32] */;
  %4349 = sigmoid(%4347) /* ty=Tensor[(1, 1024), float32] */;
  %4350 = tanh(%4348) /* ty=Tensor[(1, 1024), float32] */;
  %4351 = multiply(%4346, %4310) /* ty=Tensor[(1, 1024), float32] */;
  %4352 = multiply(%4349, %4350) /* ty=Tensor[(1, 1024), float32] */;
  %4353 = add(%4351, %4352) /* ty=Tensor[(1, 1024), float32] */;
  %4354 = sigmoid(%4344) /* ty=Tensor[(1, 1024), float32] */;
  %4355 = tanh(%4353) /* ty=Tensor[(1, 1024), float32] */;
  %4356 = %555.88 /* ty=Tensor[(1, 240), float32] */;
  %4357 = (%4356, %4334) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4358 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4359 = concatenate(%4357, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4360 = concatenate(%4358, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4361 = nn.dense(%4359, %4360, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4362 = add(%4361, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4363 = add(%4362, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4364 = split(%4363, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4365 = %4364.3 /* ty=Tensor[(1, 1024), float32] */;
  %4366 = %4364.1 /* ty=Tensor[(1, 1024), float32] */;
  %4367 = sigmoid(%4366) /* ty=Tensor[(1, 1024), float32] */;
  %4368 = %4364.0 /* ty=Tensor[(1, 1024), float32] */;
  %4369 = %4364.2 /* ty=Tensor[(1, 1024), float32] */;
  %4370 = sigmoid(%4368) /* ty=Tensor[(1, 1024), float32] */;
  %4371 = tanh(%4369) /* ty=Tensor[(1, 1024), float32] */;
  %4372 = multiply(%4367, %4331) /* ty=Tensor[(1, 1024), float32] */;
  %4373 = multiply(%4370, %4371) /* ty=Tensor[(1, 1024), float32] */;
  %4374 = add(%4372, %4373) /* ty=Tensor[(1, 1024), float32] */;
  %4375 = sigmoid(%4365) /* ty=Tensor[(1, 1024), float32] */;
  %4376 = tanh(%4374) /* ty=Tensor[(1, 1024), float32] */;
  %4377 = multiply(%4375, %4376) /* ty=Tensor[(1, 1024), float32] */;
  %4378 = multiply(%4354, %4355) /* ty=Tensor[(1, 1024), float32] */;
  %4379 = (%4377, %4378) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4380 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4381 = concatenate(%4379, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4382 = concatenate(%4380, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4383 = nn.dense(%4381, %4382, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4384 = add(%4383, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4385 = add(%4384, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4386 = split(%4385, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4387 = %4386.3 /* ty=Tensor[(1, 1024), float32] */;
  %4388 = %4386.1 /* ty=Tensor[(1, 1024), float32] */;
  %4389 = sigmoid(%4388) /* ty=Tensor[(1, 1024), float32] */;
  %4390 = %4386.0 /* ty=Tensor[(1, 1024), float32] */;
  %4391 = %4386.2 /* ty=Tensor[(1, 1024), float32] */;
  %4392 = sigmoid(%4390) /* ty=Tensor[(1, 1024), float32] */;
  %4393 = tanh(%4391) /* ty=Tensor[(1, 1024), float32] */;
  %4394 = multiply(%4389, %4353) /* ty=Tensor[(1, 1024), float32] */;
  %4395 = multiply(%4392, %4393) /* ty=Tensor[(1, 1024), float32] */;
  %4396 = add(%4394, %4395) /* ty=Tensor[(1, 1024), float32] */;
  %4397 = sigmoid(%4387) /* ty=Tensor[(1, 1024), float32] */;
  %4398 = tanh(%4396) /* ty=Tensor[(1, 1024), float32] */;
  %4399 = %555.89 /* ty=Tensor[(1, 240), float32] */;
  %4400 = (%4399, %4377) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4401 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4402 = concatenate(%4400, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4403 = concatenate(%4401, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4404 = nn.dense(%4402, %4403, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4405 = add(%4404, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4406 = add(%4405, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4407 = split(%4406, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4408 = %4407.3 /* ty=Tensor[(1, 1024), float32] */;
  %4409 = %4407.1 /* ty=Tensor[(1, 1024), float32] */;
  %4410 = sigmoid(%4409) /* ty=Tensor[(1, 1024), float32] */;
  %4411 = %4407.0 /* ty=Tensor[(1, 1024), float32] */;
  %4412 = %4407.2 /* ty=Tensor[(1, 1024), float32] */;
  %4413 = sigmoid(%4411) /* ty=Tensor[(1, 1024), float32] */;
  %4414 = tanh(%4412) /* ty=Tensor[(1, 1024), float32] */;
  %4415 = multiply(%4410, %4374) /* ty=Tensor[(1, 1024), float32] */;
  %4416 = multiply(%4413, %4414) /* ty=Tensor[(1, 1024), float32] */;
  %4417 = add(%4415, %4416) /* ty=Tensor[(1, 1024), float32] */;
  %4418 = sigmoid(%4408) /* ty=Tensor[(1, 1024), float32] */;
  %4419 = tanh(%4417) /* ty=Tensor[(1, 1024), float32] */;
  %4420 = multiply(%4418, %4419) /* ty=Tensor[(1, 1024), float32] */;
  %4421 = multiply(%4397, %4398) /* ty=Tensor[(1, 1024), float32] */;
  %4422 = (%4420, %4421) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4423 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4424 = concatenate(%4422, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4425 = concatenate(%4423, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4426 = nn.dense(%4424, %4425, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4427 = add(%4426, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4428 = add(%4427, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4429 = split(%4428, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4430 = %4429.3 /* ty=Tensor[(1, 1024), float32] */;
  %4431 = %4429.1 /* ty=Tensor[(1, 1024), float32] */;
  %4432 = sigmoid(%4431) /* ty=Tensor[(1, 1024), float32] */;
  %4433 = %4429.0 /* ty=Tensor[(1, 1024), float32] */;
  %4434 = %4429.2 /* ty=Tensor[(1, 1024), float32] */;
  %4435 = sigmoid(%4433) /* ty=Tensor[(1, 1024), float32] */;
  %4436 = tanh(%4434) /* ty=Tensor[(1, 1024), float32] */;
  %4437 = multiply(%4432, %4396) /* ty=Tensor[(1, 1024), float32] */;
  %4438 = multiply(%4435, %4436) /* ty=Tensor[(1, 1024), float32] */;
  %4439 = add(%4437, %4438) /* ty=Tensor[(1, 1024), float32] */;
  %4440 = sigmoid(%4430) /* ty=Tensor[(1, 1024), float32] */;
  %4441 = tanh(%4439) /* ty=Tensor[(1, 1024), float32] */;
  %4442 = %555.90 /* ty=Tensor[(1, 240), float32] */;
  %4443 = (%4442, %4420) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4444 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4445 = concatenate(%4443, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4446 = concatenate(%4444, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4447 = nn.dense(%4445, %4446, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4448 = add(%4447, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4449 = add(%4448, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4450 = split(%4449, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4451 = %4450.3 /* ty=Tensor[(1, 1024), float32] */;
  %4452 = %4450.1 /* ty=Tensor[(1, 1024), float32] */;
  %4453 = sigmoid(%4452) /* ty=Tensor[(1, 1024), float32] */;
  %4454 = %4450.0 /* ty=Tensor[(1, 1024), float32] */;
  %4455 = %4450.2 /* ty=Tensor[(1, 1024), float32] */;
  %4456 = sigmoid(%4454) /* ty=Tensor[(1, 1024), float32] */;
  %4457 = tanh(%4455) /* ty=Tensor[(1, 1024), float32] */;
  %4458 = multiply(%4453, %4417) /* ty=Tensor[(1, 1024), float32] */;
  %4459 = multiply(%4456, %4457) /* ty=Tensor[(1, 1024), float32] */;
  %4460 = add(%4458, %4459) /* ty=Tensor[(1, 1024), float32] */;
  %4461 = sigmoid(%4451) /* ty=Tensor[(1, 1024), float32] */;
  %4462 = tanh(%4460) /* ty=Tensor[(1, 1024), float32] */;
  %4463 = multiply(%4461, %4462) /* ty=Tensor[(1, 1024), float32] */;
  %4464 = multiply(%4440, %4441) /* ty=Tensor[(1, 1024), float32] */;
  %4465 = (%4463, %4464) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4466 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4467 = concatenate(%4465, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4468 = concatenate(%4466, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4469 = nn.dense(%4467, %4468, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4470 = add(%4469, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4471 = add(%4470, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4472 = split(%4471, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4473 = %4472.3 /* ty=Tensor[(1, 1024), float32] */;
  %4474 = %4472.1 /* ty=Tensor[(1, 1024), float32] */;
  %4475 = sigmoid(%4474) /* ty=Tensor[(1, 1024), float32] */;
  %4476 = %4472.0 /* ty=Tensor[(1, 1024), float32] */;
  %4477 = %4472.2 /* ty=Tensor[(1, 1024), float32] */;
  %4478 = sigmoid(%4476) /* ty=Tensor[(1, 1024), float32] */;
  %4479 = tanh(%4477) /* ty=Tensor[(1, 1024), float32] */;
  %4480 = multiply(%4475, %4439) /* ty=Tensor[(1, 1024), float32] */;
  %4481 = multiply(%4478, %4479) /* ty=Tensor[(1, 1024), float32] */;
  %4482 = add(%4480, %4481) /* ty=Tensor[(1, 1024), float32] */;
  %4483 = sigmoid(%4473) /* ty=Tensor[(1, 1024), float32] */;
  %4484 = tanh(%4482) /* ty=Tensor[(1, 1024), float32] */;
  %4485 = %555.91 /* ty=Tensor[(1, 240), float32] */;
  %4486 = (%4485, %4463) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4487 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4488 = concatenate(%4486, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4489 = concatenate(%4487, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4490 = nn.dense(%4488, %4489, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4491 = add(%4490, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4492 = add(%4491, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4493 = split(%4492, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4494 = %4493.3 /* ty=Tensor[(1, 1024), float32] */;
  %4495 = %4493.1 /* ty=Tensor[(1, 1024), float32] */;
  %4496 = sigmoid(%4495) /* ty=Tensor[(1, 1024), float32] */;
  %4497 = %4493.0 /* ty=Tensor[(1, 1024), float32] */;
  %4498 = %4493.2 /* ty=Tensor[(1, 1024), float32] */;
  %4499 = sigmoid(%4497) /* ty=Tensor[(1, 1024), float32] */;
  %4500 = tanh(%4498) /* ty=Tensor[(1, 1024), float32] */;
  %4501 = multiply(%4496, %4460) /* ty=Tensor[(1, 1024), float32] */;
  %4502 = multiply(%4499, %4500) /* ty=Tensor[(1, 1024), float32] */;
  %4503 = add(%4501, %4502) /* ty=Tensor[(1, 1024), float32] */;
  %4504 = sigmoid(%4494) /* ty=Tensor[(1, 1024), float32] */;
  %4505 = tanh(%4503) /* ty=Tensor[(1, 1024), float32] */;
  %4506 = multiply(%4504, %4505) /* ty=Tensor[(1, 1024), float32] */;
  %4507 = multiply(%4483, %4484) /* ty=Tensor[(1, 1024), float32] */;
  %4508 = (%4506, %4507) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4509 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4510 = concatenate(%4508, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4511 = concatenate(%4509, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4512 = nn.dense(%4510, %4511, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4513 = add(%4512, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4514 = add(%4513, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4515 = split(%4514, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4516 = %4515.3 /* ty=Tensor[(1, 1024), float32] */;
  %4517 = %4515.1 /* ty=Tensor[(1, 1024), float32] */;
  %4518 = sigmoid(%4517) /* ty=Tensor[(1, 1024), float32] */;
  %4519 = %4515.0 /* ty=Tensor[(1, 1024), float32] */;
  %4520 = %4515.2 /* ty=Tensor[(1, 1024), float32] */;
  %4521 = sigmoid(%4519) /* ty=Tensor[(1, 1024), float32] */;
  %4522 = tanh(%4520) /* ty=Tensor[(1, 1024), float32] */;
  %4523 = multiply(%4518, %4482) /* ty=Tensor[(1, 1024), float32] */;
  %4524 = multiply(%4521, %4522) /* ty=Tensor[(1, 1024), float32] */;
  %4525 = add(%4523, %4524) /* ty=Tensor[(1, 1024), float32] */;
  %4526 = sigmoid(%4516) /* ty=Tensor[(1, 1024), float32] */;
  %4527 = tanh(%4525) /* ty=Tensor[(1, 1024), float32] */;
  %4528 = %555.92 /* ty=Tensor[(1, 240), float32] */;
  %4529 = (%4528, %4506) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4530 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4531 = concatenate(%4529, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4532 = concatenate(%4530, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4533 = nn.dense(%4531, %4532, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4534 = add(%4533, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4535 = add(%4534, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4536 = split(%4535, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4537 = %4536.3 /* ty=Tensor[(1, 1024), float32] */;
  %4538 = %4536.1 /* ty=Tensor[(1, 1024), float32] */;
  %4539 = sigmoid(%4538) /* ty=Tensor[(1, 1024), float32] */;
  %4540 = %4536.0 /* ty=Tensor[(1, 1024), float32] */;
  %4541 = %4536.2 /* ty=Tensor[(1, 1024), float32] */;
  %4542 = sigmoid(%4540) /* ty=Tensor[(1, 1024), float32] */;
  %4543 = tanh(%4541) /* ty=Tensor[(1, 1024), float32] */;
  %4544 = multiply(%4539, %4503) /* ty=Tensor[(1, 1024), float32] */;
  %4545 = multiply(%4542, %4543) /* ty=Tensor[(1, 1024), float32] */;
  %4546 = add(%4544, %4545) /* ty=Tensor[(1, 1024), float32] */;
  %4547 = sigmoid(%4537) /* ty=Tensor[(1, 1024), float32] */;
  %4548 = tanh(%4546) /* ty=Tensor[(1, 1024), float32] */;
  %4549 = multiply(%4547, %4548) /* ty=Tensor[(1, 1024), float32] */;
  %4550 = multiply(%4526, %4527) /* ty=Tensor[(1, 1024), float32] */;
  %4551 = (%4549, %4550) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4552 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4553 = concatenate(%4551, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4554 = concatenate(%4552, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4555 = nn.dense(%4553, %4554, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4556 = add(%4555, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4557 = add(%4556, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4558 = split(%4557, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4559 = %4558.3 /* ty=Tensor[(1, 1024), float32] */;
  %4560 = %4558.1 /* ty=Tensor[(1, 1024), float32] */;
  %4561 = sigmoid(%4560) /* ty=Tensor[(1, 1024), float32] */;
  %4562 = %4558.0 /* ty=Tensor[(1, 1024), float32] */;
  %4563 = %4558.2 /* ty=Tensor[(1, 1024), float32] */;
  %4564 = sigmoid(%4562) /* ty=Tensor[(1, 1024), float32] */;
  %4565 = tanh(%4563) /* ty=Tensor[(1, 1024), float32] */;
  %4566 = multiply(%4561, %4525) /* ty=Tensor[(1, 1024), float32] */;
  %4567 = multiply(%4564, %4565) /* ty=Tensor[(1, 1024), float32] */;
  %4568 = add(%4566, %4567) /* ty=Tensor[(1, 1024), float32] */;
  %4569 = sigmoid(%4559) /* ty=Tensor[(1, 1024), float32] */;
  %4570 = tanh(%4568) /* ty=Tensor[(1, 1024), float32] */;
  %4571 = %555.93 /* ty=Tensor[(1, 240), float32] */;
  %4572 = (%4571, %4549) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4573 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4574 = concatenate(%4572, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4575 = concatenate(%4573, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4576 = nn.dense(%4574, %4575, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4577 = add(%4576, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4578 = add(%4577, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4579 = split(%4578, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4580 = %4579.3 /* ty=Tensor[(1, 1024), float32] */;
  %4581 = %4579.1 /* ty=Tensor[(1, 1024), float32] */;
  %4582 = sigmoid(%4581) /* ty=Tensor[(1, 1024), float32] */;
  %4583 = %4579.0 /* ty=Tensor[(1, 1024), float32] */;
  %4584 = %4579.2 /* ty=Tensor[(1, 1024), float32] */;
  %4585 = sigmoid(%4583) /* ty=Tensor[(1, 1024), float32] */;
  %4586 = tanh(%4584) /* ty=Tensor[(1, 1024), float32] */;
  %4587 = multiply(%4582, %4546) /* ty=Tensor[(1, 1024), float32] */;
  %4588 = multiply(%4585, %4586) /* ty=Tensor[(1, 1024), float32] */;
  %4589 = add(%4587, %4588) /* ty=Tensor[(1, 1024), float32] */;
  %4590 = sigmoid(%4580) /* ty=Tensor[(1, 1024), float32] */;
  %4591 = tanh(%4589) /* ty=Tensor[(1, 1024), float32] */;
  %4592 = multiply(%4590, %4591) /* ty=Tensor[(1, 1024), float32] */;
  %4593 = multiply(%4569, %4570) /* ty=Tensor[(1, 1024), float32] */;
  %4594 = (%4592, %4593) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4595 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4596 = concatenate(%4594, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4597 = concatenate(%4595, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4598 = nn.dense(%4596, %4597, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4599 = add(%4598, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4600 = add(%4599, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4601 = split(%4600, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4602 = %4601.3 /* ty=Tensor[(1, 1024), float32] */;
  %4603 = %4601.1 /* ty=Tensor[(1, 1024), float32] */;
  %4604 = sigmoid(%4603) /* ty=Tensor[(1, 1024), float32] */;
  %4605 = %4601.0 /* ty=Tensor[(1, 1024), float32] */;
  %4606 = %4601.2 /* ty=Tensor[(1, 1024), float32] */;
  %4607 = sigmoid(%4605) /* ty=Tensor[(1, 1024), float32] */;
  %4608 = tanh(%4606) /* ty=Tensor[(1, 1024), float32] */;
  %4609 = multiply(%4604, %4568) /* ty=Tensor[(1, 1024), float32] */;
  %4610 = multiply(%4607, %4608) /* ty=Tensor[(1, 1024), float32] */;
  %4611 = add(%4609, %4610) /* ty=Tensor[(1, 1024), float32] */;
  %4612 = sigmoid(%4602) /* ty=Tensor[(1, 1024), float32] */;
  %4613 = tanh(%4611) /* ty=Tensor[(1, 1024), float32] */;
  %4614 = %555.94 /* ty=Tensor[(1, 240), float32] */;
  %4615 = (%4614, %4592) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4616 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4617 = concatenate(%4615, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4618 = concatenate(%4616, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4619 = nn.dense(%4617, %4618, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4620 = add(%4619, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4621 = add(%4620, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4622 = split(%4621, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4623 = %4622.3 /* ty=Tensor[(1, 1024), float32] */;
  %4624 = %4622.1 /* ty=Tensor[(1, 1024), float32] */;
  %4625 = sigmoid(%4624) /* ty=Tensor[(1, 1024), float32] */;
  %4626 = %4622.0 /* ty=Tensor[(1, 1024), float32] */;
  %4627 = %4622.2 /* ty=Tensor[(1, 1024), float32] */;
  %4628 = sigmoid(%4626) /* ty=Tensor[(1, 1024), float32] */;
  %4629 = tanh(%4627) /* ty=Tensor[(1, 1024), float32] */;
  %4630 = multiply(%4625, %4589) /* ty=Tensor[(1, 1024), float32] */;
  %4631 = multiply(%4628, %4629) /* ty=Tensor[(1, 1024), float32] */;
  %4632 = add(%4630, %4631) /* ty=Tensor[(1, 1024), float32] */;
  %4633 = sigmoid(%4623) /* ty=Tensor[(1, 1024), float32] */;
  %4634 = tanh(%4632) /* ty=Tensor[(1, 1024), float32] */;
  %4635 = multiply(%4633, %4634) /* ty=Tensor[(1, 1024), float32] */;
  %4636 = multiply(%4612, %4613) /* ty=Tensor[(1, 1024), float32] */;
  %4637 = (%4635, %4636) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4638 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4639 = concatenate(%4637, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4640 = concatenate(%4638, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4641 = nn.dense(%4639, %4640, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4642 = add(%4641, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4643 = add(%4642, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4644 = split(%4643, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4645 = %4644.3 /* ty=Tensor[(1, 1024), float32] */;
  %4646 = %4644.1 /* ty=Tensor[(1, 1024), float32] */;
  %4647 = sigmoid(%4646) /* ty=Tensor[(1, 1024), float32] */;
  %4648 = %4644.0 /* ty=Tensor[(1, 1024), float32] */;
  %4649 = %4644.2 /* ty=Tensor[(1, 1024), float32] */;
  %4650 = sigmoid(%4648) /* ty=Tensor[(1, 1024), float32] */;
  %4651 = tanh(%4649) /* ty=Tensor[(1, 1024), float32] */;
  %4652 = multiply(%4647, %4611) /* ty=Tensor[(1, 1024), float32] */;
  %4653 = multiply(%4650, %4651) /* ty=Tensor[(1, 1024), float32] */;
  %4654 = add(%4652, %4653) /* ty=Tensor[(1, 1024), float32] */;
  %4655 = sigmoid(%4645) /* ty=Tensor[(1, 1024), float32] */;
  %4656 = tanh(%4654) /* ty=Tensor[(1, 1024), float32] */;
  %4657 = %555.95 /* ty=Tensor[(1, 240), float32] */;
  %4658 = (%4657, %4635) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4659 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4660 = concatenate(%4658, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4661 = concatenate(%4659, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4662 = nn.dense(%4660, %4661, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4663 = add(%4662, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4664 = add(%4663, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4665 = split(%4664, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4666 = %4665.3 /* ty=Tensor[(1, 1024), float32] */;
  %4667 = %4665.1 /* ty=Tensor[(1, 1024), float32] */;
  %4668 = sigmoid(%4667) /* ty=Tensor[(1, 1024), float32] */;
  %4669 = %4665.0 /* ty=Tensor[(1, 1024), float32] */;
  %4670 = %4665.2 /* ty=Tensor[(1, 1024), float32] */;
  %4671 = sigmoid(%4669) /* ty=Tensor[(1, 1024), float32] */;
  %4672 = tanh(%4670) /* ty=Tensor[(1, 1024), float32] */;
  %4673 = multiply(%4668, %4632) /* ty=Tensor[(1, 1024), float32] */;
  %4674 = multiply(%4671, %4672) /* ty=Tensor[(1, 1024), float32] */;
  %4675 = add(%4673, %4674) /* ty=Tensor[(1, 1024), float32] */;
  %4676 = sigmoid(%4666) /* ty=Tensor[(1, 1024), float32] */;
  %4677 = tanh(%4675) /* ty=Tensor[(1, 1024), float32] */;
  %4678 = multiply(%4676, %4677) /* ty=Tensor[(1, 1024), float32] */;
  %4679 = multiply(%4655, %4656) /* ty=Tensor[(1, 1024), float32] */;
  %4680 = (%4678, %4679) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4681 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4682 = concatenate(%4680, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4683 = concatenate(%4681, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4684 = nn.dense(%4682, %4683, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4685 = add(%4684, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4686 = add(%4685, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4687 = split(%4686, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4688 = %4687.3 /* ty=Tensor[(1, 1024), float32] */;
  %4689 = %4687.1 /* ty=Tensor[(1, 1024), float32] */;
  %4690 = sigmoid(%4689) /* ty=Tensor[(1, 1024), float32] */;
  %4691 = %4687.0 /* ty=Tensor[(1, 1024), float32] */;
  %4692 = %4687.2 /* ty=Tensor[(1, 1024), float32] */;
  %4693 = sigmoid(%4691) /* ty=Tensor[(1, 1024), float32] */;
  %4694 = tanh(%4692) /* ty=Tensor[(1, 1024), float32] */;
  %4695 = multiply(%4690, %4654) /* ty=Tensor[(1, 1024), float32] */;
  %4696 = multiply(%4693, %4694) /* ty=Tensor[(1, 1024), float32] */;
  %4697 = add(%4695, %4696) /* ty=Tensor[(1, 1024), float32] */;
  %4698 = sigmoid(%4688) /* ty=Tensor[(1, 1024), float32] */;
  %4699 = tanh(%4697) /* ty=Tensor[(1, 1024), float32] */;
  %4700 = %555.96 /* ty=Tensor[(1, 240), float32] */;
  %4701 = (%4700, %4678) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4702 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4703 = concatenate(%4701, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4704 = concatenate(%4702, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4705 = nn.dense(%4703, %4704, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4706 = add(%4705, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4707 = add(%4706, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4708 = split(%4707, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4709 = %4708.3 /* ty=Tensor[(1, 1024), float32] */;
  %4710 = %4708.1 /* ty=Tensor[(1, 1024), float32] */;
  %4711 = sigmoid(%4710) /* ty=Tensor[(1, 1024), float32] */;
  %4712 = %4708.0 /* ty=Tensor[(1, 1024), float32] */;
  %4713 = %4708.2 /* ty=Tensor[(1, 1024), float32] */;
  %4714 = sigmoid(%4712) /* ty=Tensor[(1, 1024), float32] */;
  %4715 = tanh(%4713) /* ty=Tensor[(1, 1024), float32] */;
  %4716 = multiply(%4711, %4675) /* ty=Tensor[(1, 1024), float32] */;
  %4717 = multiply(%4714, %4715) /* ty=Tensor[(1, 1024), float32] */;
  %4718 = add(%4716, %4717) /* ty=Tensor[(1, 1024), float32] */;
  %4719 = sigmoid(%4709) /* ty=Tensor[(1, 1024), float32] */;
  %4720 = tanh(%4718) /* ty=Tensor[(1, 1024), float32] */;
  %4721 = multiply(%4719, %4720) /* ty=Tensor[(1, 1024), float32] */;
  %4722 = multiply(%4698, %4699) /* ty=Tensor[(1, 1024), float32] */;
  %4723 = (%4721, %4722) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4724 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4725 = concatenate(%4723, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4726 = concatenate(%4724, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4727 = nn.dense(%4725, %4726, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4728 = add(%4727, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4729 = add(%4728, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4730 = split(%4729, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4731 = %4730.3 /* ty=Tensor[(1, 1024), float32] */;
  %4732 = %4730.1 /* ty=Tensor[(1, 1024), float32] */;
  %4733 = sigmoid(%4732) /* ty=Tensor[(1, 1024), float32] */;
  %4734 = %4730.0 /* ty=Tensor[(1, 1024), float32] */;
  %4735 = %4730.2 /* ty=Tensor[(1, 1024), float32] */;
  %4736 = sigmoid(%4734) /* ty=Tensor[(1, 1024), float32] */;
  %4737 = tanh(%4735) /* ty=Tensor[(1, 1024), float32] */;
  %4738 = multiply(%4733, %4697) /* ty=Tensor[(1, 1024), float32] */;
  %4739 = multiply(%4736, %4737) /* ty=Tensor[(1, 1024), float32] */;
  %4740 = add(%4738, %4739) /* ty=Tensor[(1, 1024), float32] */;
  %4741 = sigmoid(%4731) /* ty=Tensor[(1, 1024), float32] */;
  %4742 = tanh(%4740) /* ty=Tensor[(1, 1024), float32] */;
  %4743 = %555.97 /* ty=Tensor[(1, 240), float32] */;
  %4744 = (%4743, %4721) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4745 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4746 = concatenate(%4744, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4747 = concatenate(%4745, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4748 = nn.dense(%4746, %4747, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4749 = add(%4748, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4750 = add(%4749, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4751 = split(%4750, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4752 = %4751.3 /* ty=Tensor[(1, 1024), float32] */;
  %4753 = %4751.1 /* ty=Tensor[(1, 1024), float32] */;
  %4754 = sigmoid(%4753) /* ty=Tensor[(1, 1024), float32] */;
  %4755 = %4751.0 /* ty=Tensor[(1, 1024), float32] */;
  %4756 = %4751.2 /* ty=Tensor[(1, 1024), float32] */;
  %4757 = sigmoid(%4755) /* ty=Tensor[(1, 1024), float32] */;
  %4758 = tanh(%4756) /* ty=Tensor[(1, 1024), float32] */;
  %4759 = multiply(%4754, %4718) /* ty=Tensor[(1, 1024), float32] */;
  %4760 = multiply(%4757, %4758) /* ty=Tensor[(1, 1024), float32] */;
  %4761 = add(%4759, %4760) /* ty=Tensor[(1, 1024), float32] */;
  %4762 = sigmoid(%4752) /* ty=Tensor[(1, 1024), float32] */;
  %4763 = tanh(%4761) /* ty=Tensor[(1, 1024), float32] */;
  %4764 = multiply(%4762, %4763) /* ty=Tensor[(1, 1024), float32] */;
  %4765 = multiply(%4741, %4742) /* ty=Tensor[(1, 1024), float32] */;
  %4766 = (%4764, %4765) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4767 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4768 = concatenate(%4766, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4769 = concatenate(%4767, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4770 = nn.dense(%4768, %4769, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4771 = add(%4770, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4772 = add(%4771, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4773 = split(%4772, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4774 = %4773.3 /* ty=Tensor[(1, 1024), float32] */;
  %4775 = %4773.1 /* ty=Tensor[(1, 1024), float32] */;
  %4776 = sigmoid(%4775) /* ty=Tensor[(1, 1024), float32] */;
  %4777 = %4773.0 /* ty=Tensor[(1, 1024), float32] */;
  %4778 = %4773.2 /* ty=Tensor[(1, 1024), float32] */;
  %4779 = sigmoid(%4777) /* ty=Tensor[(1, 1024), float32] */;
  %4780 = tanh(%4778) /* ty=Tensor[(1, 1024), float32] */;
  %4781 = multiply(%4776, %4740) /* ty=Tensor[(1, 1024), float32] */;
  %4782 = multiply(%4779, %4780) /* ty=Tensor[(1, 1024), float32] */;
  %4783 = add(%4781, %4782) /* ty=Tensor[(1, 1024), float32] */;
  %4784 = sigmoid(%4774) /* ty=Tensor[(1, 1024), float32] */;
  %4785 = tanh(%4783) /* ty=Tensor[(1, 1024), float32] */;
  %4786 = %555.98 /* ty=Tensor[(1, 240), float32] */;
  %4787 = (%4786, %4764) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4788 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4789 = concatenate(%4787, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4790 = concatenate(%4788, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4791 = nn.dense(%4789, %4790, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4792 = add(%4791, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4793 = add(%4792, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4794 = split(%4793, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4795 = %4794.3 /* ty=Tensor[(1, 1024), float32] */;
  %4796 = %4794.1 /* ty=Tensor[(1, 1024), float32] */;
  %4797 = sigmoid(%4796) /* ty=Tensor[(1, 1024), float32] */;
  %4798 = %4794.0 /* ty=Tensor[(1, 1024), float32] */;
  %4799 = %4794.2 /* ty=Tensor[(1, 1024), float32] */;
  %4800 = sigmoid(%4798) /* ty=Tensor[(1, 1024), float32] */;
  %4801 = tanh(%4799) /* ty=Tensor[(1, 1024), float32] */;
  %4802 = multiply(%4797, %4761) /* ty=Tensor[(1, 1024), float32] */;
  %4803 = multiply(%4800, %4801) /* ty=Tensor[(1, 1024), float32] */;
  %4804 = add(%4802, %4803) /* ty=Tensor[(1, 1024), float32] */;
  %4805 = sigmoid(%4795) /* ty=Tensor[(1, 1024), float32] */;
  %4806 = tanh(%4804) /* ty=Tensor[(1, 1024), float32] */;
  %4807 = multiply(%4805, %4806) /* ty=Tensor[(1, 1024), float32] */;
  %4808 = multiply(%4784, %4785) /* ty=Tensor[(1, 1024), float32] */;
  %4809 = (%4807, %4808) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4810 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4811 = concatenate(%4809, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4812 = concatenate(%4810, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4813 = nn.dense(%4811, %4812, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4814 = add(%4813, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4815 = add(%4814, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4816 = split(%4815, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4817 = %4816.3 /* ty=Tensor[(1, 1024), float32] */;
  %4818 = %4816.1 /* ty=Tensor[(1, 1024), float32] */;
  %4819 = sigmoid(%4818) /* ty=Tensor[(1, 1024), float32] */;
  %4820 = %4816.0 /* ty=Tensor[(1, 1024), float32] */;
  %4821 = %4816.2 /* ty=Tensor[(1, 1024), float32] */;
  %4822 = sigmoid(%4820) /* ty=Tensor[(1, 1024), float32] */;
  %4823 = tanh(%4821) /* ty=Tensor[(1, 1024), float32] */;
  %4824 = multiply(%4819, %4783) /* ty=Tensor[(1, 1024), float32] */;
  %4825 = multiply(%4822, %4823) /* ty=Tensor[(1, 1024), float32] */;
  %4826 = add(%4824, %4825) /* ty=Tensor[(1, 1024), float32] */;
  %4827 = sigmoid(%4817) /* ty=Tensor[(1, 1024), float32] */;
  %4828 = tanh(%4826) /* ty=Tensor[(1, 1024), float32] */;
  %4829 = %555.99 /* ty=Tensor[(1, 240), float32] */;
  %4830 = (%4829, %4807) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4831 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4832 = concatenate(%4830, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4833 = concatenate(%4831, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4834 = nn.dense(%4832, %4833, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4835 = add(%4834, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4836 = add(%4835, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4837 = split(%4836, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4838 = %4837.3 /* ty=Tensor[(1, 1024), float32] */;
  %4839 = %4837.1 /* ty=Tensor[(1, 1024), float32] */;
  %4840 = sigmoid(%4839) /* ty=Tensor[(1, 1024), float32] */;
  %4841 = %4837.0 /* ty=Tensor[(1, 1024), float32] */;
  %4842 = %4837.2 /* ty=Tensor[(1, 1024), float32] */;
  %4843 = sigmoid(%4841) /* ty=Tensor[(1, 1024), float32] */;
  %4844 = tanh(%4842) /* ty=Tensor[(1, 1024), float32] */;
  %4845 = multiply(%4840, %4804) /* ty=Tensor[(1, 1024), float32] */;
  %4846 = multiply(%4843, %4844) /* ty=Tensor[(1, 1024), float32] */;
  %4847 = add(%4845, %4846) /* ty=Tensor[(1, 1024), float32] */;
  %4848 = sigmoid(%4838) /* ty=Tensor[(1, 1024), float32] */;
  %4849 = tanh(%4847) /* ty=Tensor[(1, 1024), float32] */;
  %4850 = multiply(%4848, %4849) /* ty=Tensor[(1, 1024), float32] */;
  %4851 = multiply(%4827, %4828) /* ty=Tensor[(1, 1024), float32] */;
  %4852 = (%4850, %4851) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4853 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4854 = concatenate(%4852, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4855 = concatenate(%4853, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4856 = nn.dense(%4854, %4855, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4857 = add(%4856, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4858 = add(%4857, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4859 = split(%4858, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4860 = %4859.3 /* ty=Tensor[(1, 1024), float32] */;
  %4861 = %4859.1 /* ty=Tensor[(1, 1024), float32] */;
  %4862 = sigmoid(%4861) /* ty=Tensor[(1, 1024), float32] */;
  %4863 = %4859.0 /* ty=Tensor[(1, 1024), float32] */;
  %4864 = %4859.2 /* ty=Tensor[(1, 1024), float32] */;
  %4865 = sigmoid(%4863) /* ty=Tensor[(1, 1024), float32] */;
  %4866 = tanh(%4864) /* ty=Tensor[(1, 1024), float32] */;
  %4867 = multiply(%4862, %4826) /* ty=Tensor[(1, 1024), float32] */;
  %4868 = multiply(%4865, %4866) /* ty=Tensor[(1, 1024), float32] */;
  %4869 = add(%4867, %4868) /* ty=Tensor[(1, 1024), float32] */;
  %4870 = sigmoid(%4860) /* ty=Tensor[(1, 1024), float32] */;
  %4871 = tanh(%4869) /* ty=Tensor[(1, 1024), float32] */;
  %4872 = %555.100 /* ty=Tensor[(1, 240), float32] */;
  %4873 = (%4872, %4850) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4874 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4875 = concatenate(%4873, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4876 = concatenate(%4874, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4877 = nn.dense(%4875, %4876, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4878 = add(%4877, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4879 = add(%4878, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4880 = split(%4879, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4881 = %4880.3 /* ty=Tensor[(1, 1024), float32] */;
  %4882 = %4880.1 /* ty=Tensor[(1, 1024), float32] */;
  %4883 = sigmoid(%4882) /* ty=Tensor[(1, 1024), float32] */;
  %4884 = %4880.0 /* ty=Tensor[(1, 1024), float32] */;
  %4885 = %4880.2 /* ty=Tensor[(1, 1024), float32] */;
  %4886 = sigmoid(%4884) /* ty=Tensor[(1, 1024), float32] */;
  %4887 = tanh(%4885) /* ty=Tensor[(1, 1024), float32] */;
  %4888 = multiply(%4883, %4847) /* ty=Tensor[(1, 1024), float32] */;
  %4889 = multiply(%4886, %4887) /* ty=Tensor[(1, 1024), float32] */;
  %4890 = add(%4888, %4889) /* ty=Tensor[(1, 1024), float32] */;
  %4891 = sigmoid(%4881) /* ty=Tensor[(1, 1024), float32] */;
  %4892 = tanh(%4890) /* ty=Tensor[(1, 1024), float32] */;
  %4893 = multiply(%4891, %4892) /* ty=Tensor[(1, 1024), float32] */;
  %4894 = multiply(%4870, %4871) /* ty=Tensor[(1, 1024), float32] */;
  %4895 = (%4893, %4894) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4896 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4897 = concatenate(%4895, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4898 = concatenate(%4896, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4899 = nn.dense(%4897, %4898, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4900 = add(%4899, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4901 = add(%4900, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4902 = split(%4901, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4903 = %4902.3 /* ty=Tensor[(1, 1024), float32] */;
  %4904 = %4902.1 /* ty=Tensor[(1, 1024), float32] */;
  %4905 = sigmoid(%4904) /* ty=Tensor[(1, 1024), float32] */;
  %4906 = %4902.0 /* ty=Tensor[(1, 1024), float32] */;
  %4907 = %4902.2 /* ty=Tensor[(1, 1024), float32] */;
  %4908 = sigmoid(%4906) /* ty=Tensor[(1, 1024), float32] */;
  %4909 = tanh(%4907) /* ty=Tensor[(1, 1024), float32] */;
  %4910 = multiply(%4905, %4869) /* ty=Tensor[(1, 1024), float32] */;
  %4911 = multiply(%4908, %4909) /* ty=Tensor[(1, 1024), float32] */;
  %4912 = add(%4910, %4911) /* ty=Tensor[(1, 1024), float32] */;
  %4913 = sigmoid(%4903) /* ty=Tensor[(1, 1024), float32] */;
  %4914 = tanh(%4912) /* ty=Tensor[(1, 1024), float32] */;
  %4915 = %555.101 /* ty=Tensor[(1, 240), float32] */;
  %4916 = (%4915, %4893) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4917 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4918 = concatenate(%4916, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4919 = concatenate(%4917, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4920 = nn.dense(%4918, %4919, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4921 = add(%4920, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4922 = add(%4921, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4923 = split(%4922, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4924 = %4923.3 /* ty=Tensor[(1, 1024), float32] */;
  %4925 = %4923.1 /* ty=Tensor[(1, 1024), float32] */;
  %4926 = sigmoid(%4925) /* ty=Tensor[(1, 1024), float32] */;
  %4927 = %4923.0 /* ty=Tensor[(1, 1024), float32] */;
  %4928 = %4923.2 /* ty=Tensor[(1, 1024), float32] */;
  %4929 = sigmoid(%4927) /* ty=Tensor[(1, 1024), float32] */;
  %4930 = tanh(%4928) /* ty=Tensor[(1, 1024), float32] */;
  %4931 = multiply(%4926, %4890) /* ty=Tensor[(1, 1024), float32] */;
  %4932 = multiply(%4929, %4930) /* ty=Tensor[(1, 1024), float32] */;
  %4933 = add(%4931, %4932) /* ty=Tensor[(1, 1024), float32] */;
  %4934 = sigmoid(%4924) /* ty=Tensor[(1, 1024), float32] */;
  %4935 = tanh(%4933) /* ty=Tensor[(1, 1024), float32] */;
  %4936 = multiply(%4934, %4935) /* ty=Tensor[(1, 1024), float32] */;
  %4937 = multiply(%4913, %4914) /* ty=Tensor[(1, 1024), float32] */;
  %4938 = (%4936, %4937) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4939 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4940 = concatenate(%4938, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4941 = concatenate(%4939, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4942 = nn.dense(%4940, %4941, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4943 = add(%4942, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4944 = add(%4943, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4945 = split(%4944, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4946 = %4945.3 /* ty=Tensor[(1, 1024), float32] */;
  %4947 = %4945.1 /* ty=Tensor[(1, 1024), float32] */;
  %4948 = sigmoid(%4947) /* ty=Tensor[(1, 1024), float32] */;
  %4949 = %4945.0 /* ty=Tensor[(1, 1024), float32] */;
  %4950 = %4945.2 /* ty=Tensor[(1, 1024), float32] */;
  %4951 = sigmoid(%4949) /* ty=Tensor[(1, 1024), float32] */;
  %4952 = tanh(%4950) /* ty=Tensor[(1, 1024), float32] */;
  %4953 = multiply(%4948, %4912) /* ty=Tensor[(1, 1024), float32] */;
  %4954 = multiply(%4951, %4952) /* ty=Tensor[(1, 1024), float32] */;
  %4955 = add(%4953, %4954) /* ty=Tensor[(1, 1024), float32] */;
  %4956 = sigmoid(%4946) /* ty=Tensor[(1, 1024), float32] */;
  %4957 = tanh(%4955) /* ty=Tensor[(1, 1024), float32] */;
  %4958 = %555.102 /* ty=Tensor[(1, 240), float32] */;
  %4959 = (%4958, %4936) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %4960 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %4961 = concatenate(%4959, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %4962 = concatenate(%4960, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %4963 = nn.dense(%4961, %4962, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4964 = add(%4963, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4965 = add(%4964, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %4966 = split(%4965, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4967 = %4966.3 /* ty=Tensor[(1, 1024), float32] */;
  %4968 = %4966.1 /* ty=Tensor[(1, 1024), float32] */;
  %4969 = sigmoid(%4968) /* ty=Tensor[(1, 1024), float32] */;
  %4970 = %4966.0 /* ty=Tensor[(1, 1024), float32] */;
  %4971 = %4966.2 /* ty=Tensor[(1, 1024), float32] */;
  %4972 = sigmoid(%4970) /* ty=Tensor[(1, 1024), float32] */;
  %4973 = tanh(%4971) /* ty=Tensor[(1, 1024), float32] */;
  %4974 = multiply(%4969, %4933) /* ty=Tensor[(1, 1024), float32] */;
  %4975 = multiply(%4972, %4973) /* ty=Tensor[(1, 1024), float32] */;
  %4976 = add(%4974, %4975) /* ty=Tensor[(1, 1024), float32] */;
  %4977 = sigmoid(%4967) /* ty=Tensor[(1, 1024), float32] */;
  %4978 = tanh(%4976) /* ty=Tensor[(1, 1024), float32] */;
  %4979 = multiply(%4977, %4978) /* ty=Tensor[(1, 1024), float32] */;
  %4980 = multiply(%4956, %4957) /* ty=Tensor[(1, 1024), float32] */;
  %4981 = (%4979, %4980) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4982 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %4983 = concatenate(%4981, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %4984 = concatenate(%4982, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %4985 = nn.dense(%4983, %4984, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %4986 = add(%4985, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4987 = add(%4986, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %4988 = split(%4987, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %4989 = %4988.3 /* ty=Tensor[(1, 1024), float32] */;
  %4990 = %4988.1 /* ty=Tensor[(1, 1024), float32] */;
  %4991 = sigmoid(%4990) /* ty=Tensor[(1, 1024), float32] */;
  %4992 = %4988.0 /* ty=Tensor[(1, 1024), float32] */;
  %4993 = %4988.2 /* ty=Tensor[(1, 1024), float32] */;
  %4994 = sigmoid(%4992) /* ty=Tensor[(1, 1024), float32] */;
  %4995 = tanh(%4993) /* ty=Tensor[(1, 1024), float32] */;
  %4996 = multiply(%4991, %4955) /* ty=Tensor[(1, 1024), float32] */;
  %4997 = multiply(%4994, %4995) /* ty=Tensor[(1, 1024), float32] */;
  %4998 = add(%4996, %4997) /* ty=Tensor[(1, 1024), float32] */;
  %4999 = sigmoid(%4989) /* ty=Tensor[(1, 1024), float32] */;
  %5000 = tanh(%4998) /* ty=Tensor[(1, 1024), float32] */;
  %5001 = %555.103 /* ty=Tensor[(1, 240), float32] */;
  %5002 = (%5001, %4979) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5003 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5004 = concatenate(%5002, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5005 = concatenate(%5003, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5006 = nn.dense(%5004, %5005, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5007 = add(%5006, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5008 = add(%5007, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5009 = split(%5008, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5010 = %5009.3 /* ty=Tensor[(1, 1024), float32] */;
  %5011 = %5009.1 /* ty=Tensor[(1, 1024), float32] */;
  %5012 = sigmoid(%5011) /* ty=Tensor[(1, 1024), float32] */;
  %5013 = %5009.0 /* ty=Tensor[(1, 1024), float32] */;
  %5014 = %5009.2 /* ty=Tensor[(1, 1024), float32] */;
  %5015 = sigmoid(%5013) /* ty=Tensor[(1, 1024), float32] */;
  %5016 = tanh(%5014) /* ty=Tensor[(1, 1024), float32] */;
  %5017 = multiply(%5012, %4976) /* ty=Tensor[(1, 1024), float32] */;
  %5018 = multiply(%5015, %5016) /* ty=Tensor[(1, 1024), float32] */;
  %5019 = add(%5017, %5018) /* ty=Tensor[(1, 1024), float32] */;
  %5020 = sigmoid(%5010) /* ty=Tensor[(1, 1024), float32] */;
  %5021 = tanh(%5019) /* ty=Tensor[(1, 1024), float32] */;
  %5022 = multiply(%5020, %5021) /* ty=Tensor[(1, 1024), float32] */;
  %5023 = multiply(%4999, %5000) /* ty=Tensor[(1, 1024), float32] */;
  %5024 = (%5022, %5023) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5025 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5026 = concatenate(%5024, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5027 = concatenate(%5025, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5028 = nn.dense(%5026, %5027, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5029 = add(%5028, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5030 = add(%5029, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5031 = split(%5030, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5032 = %5031.3 /* ty=Tensor[(1, 1024), float32] */;
  %5033 = %5031.1 /* ty=Tensor[(1, 1024), float32] */;
  %5034 = sigmoid(%5033) /* ty=Tensor[(1, 1024), float32] */;
  %5035 = %5031.0 /* ty=Tensor[(1, 1024), float32] */;
  %5036 = %5031.2 /* ty=Tensor[(1, 1024), float32] */;
  %5037 = sigmoid(%5035) /* ty=Tensor[(1, 1024), float32] */;
  %5038 = tanh(%5036) /* ty=Tensor[(1, 1024), float32] */;
  %5039 = multiply(%5034, %4998) /* ty=Tensor[(1, 1024), float32] */;
  %5040 = multiply(%5037, %5038) /* ty=Tensor[(1, 1024), float32] */;
  %5041 = add(%5039, %5040) /* ty=Tensor[(1, 1024), float32] */;
  %5042 = sigmoid(%5032) /* ty=Tensor[(1, 1024), float32] */;
  %5043 = tanh(%5041) /* ty=Tensor[(1, 1024), float32] */;
  %5044 = %555.104 /* ty=Tensor[(1, 240), float32] */;
  %5045 = (%5044, %5022) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5046 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5047 = concatenate(%5045, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5048 = concatenate(%5046, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5049 = nn.dense(%5047, %5048, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5050 = add(%5049, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5051 = add(%5050, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5052 = split(%5051, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5053 = %5052.3 /* ty=Tensor[(1, 1024), float32] */;
  %5054 = %5052.1 /* ty=Tensor[(1, 1024), float32] */;
  %5055 = sigmoid(%5054) /* ty=Tensor[(1, 1024), float32] */;
  %5056 = %5052.0 /* ty=Tensor[(1, 1024), float32] */;
  %5057 = %5052.2 /* ty=Tensor[(1, 1024), float32] */;
  %5058 = sigmoid(%5056) /* ty=Tensor[(1, 1024), float32] */;
  %5059 = tanh(%5057) /* ty=Tensor[(1, 1024), float32] */;
  %5060 = multiply(%5055, %5019) /* ty=Tensor[(1, 1024), float32] */;
  %5061 = multiply(%5058, %5059) /* ty=Tensor[(1, 1024), float32] */;
  %5062 = add(%5060, %5061) /* ty=Tensor[(1, 1024), float32] */;
  %5063 = sigmoid(%5053) /* ty=Tensor[(1, 1024), float32] */;
  %5064 = tanh(%5062) /* ty=Tensor[(1, 1024), float32] */;
  %5065 = multiply(%5063, %5064) /* ty=Tensor[(1, 1024), float32] */;
  %5066 = multiply(%5042, %5043) /* ty=Tensor[(1, 1024), float32] */;
  %5067 = (%5065, %5066) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5068 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5069 = concatenate(%5067, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5070 = concatenate(%5068, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5071 = nn.dense(%5069, %5070, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5072 = add(%5071, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5073 = add(%5072, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5074 = split(%5073, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5075 = %5074.3 /* ty=Tensor[(1, 1024), float32] */;
  %5076 = %5074.1 /* ty=Tensor[(1, 1024), float32] */;
  %5077 = sigmoid(%5076) /* ty=Tensor[(1, 1024), float32] */;
  %5078 = %5074.0 /* ty=Tensor[(1, 1024), float32] */;
  %5079 = %5074.2 /* ty=Tensor[(1, 1024), float32] */;
  %5080 = sigmoid(%5078) /* ty=Tensor[(1, 1024), float32] */;
  %5081 = tanh(%5079) /* ty=Tensor[(1, 1024), float32] */;
  %5082 = multiply(%5077, %5041) /* ty=Tensor[(1, 1024), float32] */;
  %5083 = multiply(%5080, %5081) /* ty=Tensor[(1, 1024), float32] */;
  %5084 = add(%5082, %5083) /* ty=Tensor[(1, 1024), float32] */;
  %5085 = sigmoid(%5075) /* ty=Tensor[(1, 1024), float32] */;
  %5086 = tanh(%5084) /* ty=Tensor[(1, 1024), float32] */;
  %5087 = %555.105 /* ty=Tensor[(1, 240), float32] */;
  %5088 = (%5087, %5065) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5089 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5090 = concatenate(%5088, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5091 = concatenate(%5089, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5092 = nn.dense(%5090, %5091, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5093 = add(%5092, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5094 = add(%5093, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5095 = split(%5094, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5096 = %5095.3 /* ty=Tensor[(1, 1024), float32] */;
  %5097 = %5095.1 /* ty=Tensor[(1, 1024), float32] */;
  %5098 = sigmoid(%5097) /* ty=Tensor[(1, 1024), float32] */;
  %5099 = %5095.0 /* ty=Tensor[(1, 1024), float32] */;
  %5100 = %5095.2 /* ty=Tensor[(1, 1024), float32] */;
  %5101 = sigmoid(%5099) /* ty=Tensor[(1, 1024), float32] */;
  %5102 = tanh(%5100) /* ty=Tensor[(1, 1024), float32] */;
  %5103 = multiply(%5098, %5062) /* ty=Tensor[(1, 1024), float32] */;
  %5104 = multiply(%5101, %5102) /* ty=Tensor[(1, 1024), float32] */;
  %5105 = add(%5103, %5104) /* ty=Tensor[(1, 1024), float32] */;
  %5106 = sigmoid(%5096) /* ty=Tensor[(1, 1024), float32] */;
  %5107 = tanh(%5105) /* ty=Tensor[(1, 1024), float32] */;
  %5108 = multiply(%5106, %5107) /* ty=Tensor[(1, 1024), float32] */;
  %5109 = multiply(%5085, %5086) /* ty=Tensor[(1, 1024), float32] */;
  %5110 = (%5108, %5109) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5111 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5112 = concatenate(%5110, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5113 = concatenate(%5111, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5114 = nn.dense(%5112, %5113, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5115 = add(%5114, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5116 = add(%5115, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5117 = split(%5116, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5118 = %5117.3 /* ty=Tensor[(1, 1024), float32] */;
  %5119 = %5117.1 /* ty=Tensor[(1, 1024), float32] */;
  %5120 = sigmoid(%5119) /* ty=Tensor[(1, 1024), float32] */;
  %5121 = %5117.0 /* ty=Tensor[(1, 1024), float32] */;
  %5122 = %5117.2 /* ty=Tensor[(1, 1024), float32] */;
  %5123 = sigmoid(%5121) /* ty=Tensor[(1, 1024), float32] */;
  %5124 = tanh(%5122) /* ty=Tensor[(1, 1024), float32] */;
  %5125 = multiply(%5120, %5084) /* ty=Tensor[(1, 1024), float32] */;
  %5126 = multiply(%5123, %5124) /* ty=Tensor[(1, 1024), float32] */;
  %5127 = add(%5125, %5126) /* ty=Tensor[(1, 1024), float32] */;
  %5128 = sigmoid(%5118) /* ty=Tensor[(1, 1024), float32] */;
  %5129 = tanh(%5127) /* ty=Tensor[(1, 1024), float32] */;
  %5130 = %555.106 /* ty=Tensor[(1, 240), float32] */;
  %5131 = (%5130, %5108) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5132 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5133 = concatenate(%5131, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5134 = concatenate(%5132, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5135 = nn.dense(%5133, %5134, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5136 = add(%5135, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5137 = add(%5136, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5138 = split(%5137, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5139 = %5138.3 /* ty=Tensor[(1, 1024), float32] */;
  %5140 = %5138.1 /* ty=Tensor[(1, 1024), float32] */;
  %5141 = sigmoid(%5140) /* ty=Tensor[(1, 1024), float32] */;
  %5142 = %5138.0 /* ty=Tensor[(1, 1024), float32] */;
  %5143 = %5138.2 /* ty=Tensor[(1, 1024), float32] */;
  %5144 = sigmoid(%5142) /* ty=Tensor[(1, 1024), float32] */;
  %5145 = tanh(%5143) /* ty=Tensor[(1, 1024), float32] */;
  %5146 = multiply(%5141, %5105) /* ty=Tensor[(1, 1024), float32] */;
  %5147 = multiply(%5144, %5145) /* ty=Tensor[(1, 1024), float32] */;
  %5148 = add(%5146, %5147) /* ty=Tensor[(1, 1024), float32] */;
  %5149 = sigmoid(%5139) /* ty=Tensor[(1, 1024), float32] */;
  %5150 = tanh(%5148) /* ty=Tensor[(1, 1024), float32] */;
  %5151 = multiply(%5149, %5150) /* ty=Tensor[(1, 1024), float32] */;
  %5152 = multiply(%5128, %5129) /* ty=Tensor[(1, 1024), float32] */;
  %5153 = (%5151, %5152) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5154 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5155 = concatenate(%5153, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5156 = concatenate(%5154, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5157 = nn.dense(%5155, %5156, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5158 = add(%5157, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5159 = add(%5158, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5160 = split(%5159, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5161 = %5160.3 /* ty=Tensor[(1, 1024), float32] */;
  %5162 = %5160.1 /* ty=Tensor[(1, 1024), float32] */;
  %5163 = sigmoid(%5162) /* ty=Tensor[(1, 1024), float32] */;
  %5164 = %5160.0 /* ty=Tensor[(1, 1024), float32] */;
  %5165 = %5160.2 /* ty=Tensor[(1, 1024), float32] */;
  %5166 = sigmoid(%5164) /* ty=Tensor[(1, 1024), float32] */;
  %5167 = tanh(%5165) /* ty=Tensor[(1, 1024), float32] */;
  %5168 = multiply(%5163, %5127) /* ty=Tensor[(1, 1024), float32] */;
  %5169 = multiply(%5166, %5167) /* ty=Tensor[(1, 1024), float32] */;
  %5170 = add(%5168, %5169) /* ty=Tensor[(1, 1024), float32] */;
  %5171 = sigmoid(%5161) /* ty=Tensor[(1, 1024), float32] */;
  %5172 = tanh(%5170) /* ty=Tensor[(1, 1024), float32] */;
  %5173 = %555.107 /* ty=Tensor[(1, 240), float32] */;
  %5174 = (%5173, %5151) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5175 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5176 = concatenate(%5174, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5177 = concatenate(%5175, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5178 = nn.dense(%5176, %5177, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5179 = add(%5178, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5180 = add(%5179, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5181 = split(%5180, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5182 = %5181.3 /* ty=Tensor[(1, 1024), float32] */;
  %5183 = %5181.1 /* ty=Tensor[(1, 1024), float32] */;
  %5184 = sigmoid(%5183) /* ty=Tensor[(1, 1024), float32] */;
  %5185 = %5181.0 /* ty=Tensor[(1, 1024), float32] */;
  %5186 = %5181.2 /* ty=Tensor[(1, 1024), float32] */;
  %5187 = sigmoid(%5185) /* ty=Tensor[(1, 1024), float32] */;
  %5188 = tanh(%5186) /* ty=Tensor[(1, 1024), float32] */;
  %5189 = multiply(%5184, %5148) /* ty=Tensor[(1, 1024), float32] */;
  %5190 = multiply(%5187, %5188) /* ty=Tensor[(1, 1024), float32] */;
  %5191 = add(%5189, %5190) /* ty=Tensor[(1, 1024), float32] */;
  %5192 = sigmoid(%5182) /* ty=Tensor[(1, 1024), float32] */;
  %5193 = tanh(%5191) /* ty=Tensor[(1, 1024), float32] */;
  %5194 = multiply(%5192, %5193) /* ty=Tensor[(1, 1024), float32] */;
  %5195 = multiply(%5171, %5172) /* ty=Tensor[(1, 1024), float32] */;
  %5196 = (%5194, %5195) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5197 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5198 = concatenate(%5196, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5199 = concatenate(%5197, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5200 = nn.dense(%5198, %5199, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5201 = add(%5200, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5202 = add(%5201, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5203 = split(%5202, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5204 = %5203.3 /* ty=Tensor[(1, 1024), float32] */;
  %5205 = %5203.1 /* ty=Tensor[(1, 1024), float32] */;
  %5206 = sigmoid(%5205) /* ty=Tensor[(1, 1024), float32] */;
  %5207 = %5203.0 /* ty=Tensor[(1, 1024), float32] */;
  %5208 = %5203.2 /* ty=Tensor[(1, 1024), float32] */;
  %5209 = sigmoid(%5207) /* ty=Tensor[(1, 1024), float32] */;
  %5210 = tanh(%5208) /* ty=Tensor[(1, 1024), float32] */;
  %5211 = multiply(%5206, %5170) /* ty=Tensor[(1, 1024), float32] */;
  %5212 = multiply(%5209, %5210) /* ty=Tensor[(1, 1024), float32] */;
  %5213 = add(%5211, %5212) /* ty=Tensor[(1, 1024), float32] */;
  %5214 = sigmoid(%5204) /* ty=Tensor[(1, 1024), float32] */;
  %5215 = tanh(%5213) /* ty=Tensor[(1, 1024), float32] */;
  %5216 = %555.108 /* ty=Tensor[(1, 240), float32] */;
  %5217 = (%5216, %5194) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5218 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5219 = concatenate(%5217, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5220 = concatenate(%5218, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5221 = nn.dense(%5219, %5220, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5222 = add(%5221, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5223 = add(%5222, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5224 = split(%5223, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5225 = %5224.3 /* ty=Tensor[(1, 1024), float32] */;
  %5226 = %5224.1 /* ty=Tensor[(1, 1024), float32] */;
  %5227 = sigmoid(%5226) /* ty=Tensor[(1, 1024), float32] */;
  %5228 = %5224.0 /* ty=Tensor[(1, 1024), float32] */;
  %5229 = %5224.2 /* ty=Tensor[(1, 1024), float32] */;
  %5230 = sigmoid(%5228) /* ty=Tensor[(1, 1024), float32] */;
  %5231 = tanh(%5229) /* ty=Tensor[(1, 1024), float32] */;
  %5232 = multiply(%5227, %5191) /* ty=Tensor[(1, 1024), float32] */;
  %5233 = multiply(%5230, %5231) /* ty=Tensor[(1, 1024), float32] */;
  %5234 = add(%5232, %5233) /* ty=Tensor[(1, 1024), float32] */;
  %5235 = sigmoid(%5225) /* ty=Tensor[(1, 1024), float32] */;
  %5236 = tanh(%5234) /* ty=Tensor[(1, 1024), float32] */;
  %5237 = multiply(%5235, %5236) /* ty=Tensor[(1, 1024), float32] */;
  %5238 = multiply(%5214, %5215) /* ty=Tensor[(1, 1024), float32] */;
  %5239 = (%5237, %5238) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5240 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5241 = concatenate(%5239, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5242 = concatenate(%5240, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5243 = nn.dense(%5241, %5242, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5244 = add(%5243, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5245 = add(%5244, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5246 = split(%5245, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5247 = %5246.3 /* ty=Tensor[(1, 1024), float32] */;
  %5248 = %5246.1 /* ty=Tensor[(1, 1024), float32] */;
  %5249 = sigmoid(%5248) /* ty=Tensor[(1, 1024), float32] */;
  %5250 = %5246.0 /* ty=Tensor[(1, 1024), float32] */;
  %5251 = %5246.2 /* ty=Tensor[(1, 1024), float32] */;
  %5252 = sigmoid(%5250) /* ty=Tensor[(1, 1024), float32] */;
  %5253 = tanh(%5251) /* ty=Tensor[(1, 1024), float32] */;
  %5254 = multiply(%5249, %5213) /* ty=Tensor[(1, 1024), float32] */;
  %5255 = multiply(%5252, %5253) /* ty=Tensor[(1, 1024), float32] */;
  %5256 = add(%5254, %5255) /* ty=Tensor[(1, 1024), float32] */;
  %5257 = sigmoid(%5247) /* ty=Tensor[(1, 1024), float32] */;
  %5258 = tanh(%5256) /* ty=Tensor[(1, 1024), float32] */;
  %5259 = %555.109 /* ty=Tensor[(1, 240), float32] */;
  %5260 = (%5259, %5237) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5261 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5262 = concatenate(%5260, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5263 = concatenate(%5261, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5264 = nn.dense(%5262, %5263, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5265 = add(%5264, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5266 = add(%5265, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5267 = split(%5266, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5268 = %5267.3 /* ty=Tensor[(1, 1024), float32] */;
  %5269 = %5267.1 /* ty=Tensor[(1, 1024), float32] */;
  %5270 = sigmoid(%5269) /* ty=Tensor[(1, 1024), float32] */;
  %5271 = %5267.0 /* ty=Tensor[(1, 1024), float32] */;
  %5272 = %5267.2 /* ty=Tensor[(1, 1024), float32] */;
  %5273 = sigmoid(%5271) /* ty=Tensor[(1, 1024), float32] */;
  %5274 = tanh(%5272) /* ty=Tensor[(1, 1024), float32] */;
  %5275 = multiply(%5270, %5234) /* ty=Tensor[(1, 1024), float32] */;
  %5276 = multiply(%5273, %5274) /* ty=Tensor[(1, 1024), float32] */;
  %5277 = add(%5275, %5276) /* ty=Tensor[(1, 1024), float32] */;
  %5278 = sigmoid(%5268) /* ty=Tensor[(1, 1024), float32] */;
  %5279 = tanh(%5277) /* ty=Tensor[(1, 1024), float32] */;
  %5280 = multiply(%5278, %5279) /* ty=Tensor[(1, 1024), float32] */;
  %5281 = multiply(%5257, %5258) /* ty=Tensor[(1, 1024), float32] */;
  %5282 = (%5280, %5281) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5283 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5284 = concatenate(%5282, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5285 = concatenate(%5283, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5286 = nn.dense(%5284, %5285, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5287 = add(%5286, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5288 = add(%5287, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5289 = split(%5288, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5290 = %5289.3 /* ty=Tensor[(1, 1024), float32] */;
  %5291 = %5289.1 /* ty=Tensor[(1, 1024), float32] */;
  %5292 = sigmoid(%5291) /* ty=Tensor[(1, 1024), float32] */;
  %5293 = %5289.0 /* ty=Tensor[(1, 1024), float32] */;
  %5294 = %5289.2 /* ty=Tensor[(1, 1024), float32] */;
  %5295 = sigmoid(%5293) /* ty=Tensor[(1, 1024), float32] */;
  %5296 = tanh(%5294) /* ty=Tensor[(1, 1024), float32] */;
  %5297 = multiply(%5292, %5256) /* ty=Tensor[(1, 1024), float32] */;
  %5298 = multiply(%5295, %5296) /* ty=Tensor[(1, 1024), float32] */;
  %5299 = add(%5297, %5298) /* ty=Tensor[(1, 1024), float32] */;
  %5300 = sigmoid(%5290) /* ty=Tensor[(1, 1024), float32] */;
  %5301 = tanh(%5299) /* ty=Tensor[(1, 1024), float32] */;
  %5302 = %555.110 /* ty=Tensor[(1, 240), float32] */;
  %5303 = (%5302, %5280) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5304 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5305 = concatenate(%5303, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5306 = concatenate(%5304, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5307 = nn.dense(%5305, %5306, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5308 = add(%5307, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5309 = add(%5308, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5310 = split(%5309, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5311 = %5310.3 /* ty=Tensor[(1, 1024), float32] */;
  %5312 = %5310.1 /* ty=Tensor[(1, 1024), float32] */;
  %5313 = sigmoid(%5312) /* ty=Tensor[(1, 1024), float32] */;
  %5314 = %5310.0 /* ty=Tensor[(1, 1024), float32] */;
  %5315 = %5310.2 /* ty=Tensor[(1, 1024), float32] */;
  %5316 = sigmoid(%5314) /* ty=Tensor[(1, 1024), float32] */;
  %5317 = tanh(%5315) /* ty=Tensor[(1, 1024), float32] */;
  %5318 = multiply(%5313, %5277) /* ty=Tensor[(1, 1024), float32] */;
  %5319 = multiply(%5316, %5317) /* ty=Tensor[(1, 1024), float32] */;
  %5320 = add(%5318, %5319) /* ty=Tensor[(1, 1024), float32] */;
  %5321 = sigmoid(%5311) /* ty=Tensor[(1, 1024), float32] */;
  %5322 = tanh(%5320) /* ty=Tensor[(1, 1024), float32] */;
  %5323 = multiply(%5321, %5322) /* ty=Tensor[(1, 1024), float32] */;
  %5324 = multiply(%5300, %5301) /* ty=Tensor[(1, 1024), float32] */;
  %5325 = (%5323, %5324) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5326 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5327 = concatenate(%5325, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5328 = concatenate(%5326, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5329 = nn.dense(%5327, %5328, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5330 = add(%5329, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5331 = add(%5330, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5332 = split(%5331, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5333 = %5332.3 /* ty=Tensor[(1, 1024), float32] */;
  %5334 = %5332.1 /* ty=Tensor[(1, 1024), float32] */;
  %5335 = sigmoid(%5334) /* ty=Tensor[(1, 1024), float32] */;
  %5336 = %5332.0 /* ty=Tensor[(1, 1024), float32] */;
  %5337 = %5332.2 /* ty=Tensor[(1, 1024), float32] */;
  %5338 = sigmoid(%5336) /* ty=Tensor[(1, 1024), float32] */;
  %5339 = tanh(%5337) /* ty=Tensor[(1, 1024), float32] */;
  %5340 = multiply(%5335, %5299) /* ty=Tensor[(1, 1024), float32] */;
  %5341 = multiply(%5338, %5339) /* ty=Tensor[(1, 1024), float32] */;
  %5342 = add(%5340, %5341) /* ty=Tensor[(1, 1024), float32] */;
  %5343 = sigmoid(%5333) /* ty=Tensor[(1, 1024), float32] */;
  %5344 = tanh(%5342) /* ty=Tensor[(1, 1024), float32] */;
  %5345 = %555.111 /* ty=Tensor[(1, 240), float32] */;
  %5346 = (%5345, %5323) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5347 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5348 = concatenate(%5346, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5349 = concatenate(%5347, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5350 = nn.dense(%5348, %5349, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5351 = add(%5350, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5352 = add(%5351, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5353 = split(%5352, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5354 = %5353.3 /* ty=Tensor[(1, 1024), float32] */;
  %5355 = %5353.1 /* ty=Tensor[(1, 1024), float32] */;
  %5356 = sigmoid(%5355) /* ty=Tensor[(1, 1024), float32] */;
  %5357 = %5353.0 /* ty=Tensor[(1, 1024), float32] */;
  %5358 = %5353.2 /* ty=Tensor[(1, 1024), float32] */;
  %5359 = sigmoid(%5357) /* ty=Tensor[(1, 1024), float32] */;
  %5360 = tanh(%5358) /* ty=Tensor[(1, 1024), float32] */;
  %5361 = multiply(%5356, %5320) /* ty=Tensor[(1, 1024), float32] */;
  %5362 = multiply(%5359, %5360) /* ty=Tensor[(1, 1024), float32] */;
  %5363 = add(%5361, %5362) /* ty=Tensor[(1, 1024), float32] */;
  %5364 = sigmoid(%5354) /* ty=Tensor[(1, 1024), float32] */;
  %5365 = tanh(%5363) /* ty=Tensor[(1, 1024), float32] */;
  %5366 = multiply(%5364, %5365) /* ty=Tensor[(1, 1024), float32] */;
  %5367 = multiply(%5343, %5344) /* ty=Tensor[(1, 1024), float32] */;
  %5368 = (%5366, %5367) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5369 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5370 = concatenate(%5368, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5371 = concatenate(%5369, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5372 = nn.dense(%5370, %5371, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5373 = add(%5372, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5374 = add(%5373, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5375 = split(%5374, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5376 = %5375.3 /* ty=Tensor[(1, 1024), float32] */;
  %5377 = %5375.1 /* ty=Tensor[(1, 1024), float32] */;
  %5378 = sigmoid(%5377) /* ty=Tensor[(1, 1024), float32] */;
  %5379 = %5375.0 /* ty=Tensor[(1, 1024), float32] */;
  %5380 = %5375.2 /* ty=Tensor[(1, 1024), float32] */;
  %5381 = sigmoid(%5379) /* ty=Tensor[(1, 1024), float32] */;
  %5382 = tanh(%5380) /* ty=Tensor[(1, 1024), float32] */;
  %5383 = multiply(%5378, %5342) /* ty=Tensor[(1, 1024), float32] */;
  %5384 = multiply(%5381, %5382) /* ty=Tensor[(1, 1024), float32] */;
  %5385 = add(%5383, %5384) /* ty=Tensor[(1, 1024), float32] */;
  %5386 = sigmoid(%5376) /* ty=Tensor[(1, 1024), float32] */;
  %5387 = tanh(%5385) /* ty=Tensor[(1, 1024), float32] */;
  %5388 = %555.112 /* ty=Tensor[(1, 240), float32] */;
  %5389 = (%5388, %5366) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5390 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5391 = concatenate(%5389, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5392 = concatenate(%5390, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5393 = nn.dense(%5391, %5392, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5394 = add(%5393, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5395 = add(%5394, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5396 = split(%5395, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5397 = %5396.3 /* ty=Tensor[(1, 1024), float32] */;
  %5398 = %5396.1 /* ty=Tensor[(1, 1024), float32] */;
  %5399 = sigmoid(%5398) /* ty=Tensor[(1, 1024), float32] */;
  %5400 = %5396.0 /* ty=Tensor[(1, 1024), float32] */;
  %5401 = %5396.2 /* ty=Tensor[(1, 1024), float32] */;
  %5402 = sigmoid(%5400) /* ty=Tensor[(1, 1024), float32] */;
  %5403 = tanh(%5401) /* ty=Tensor[(1, 1024), float32] */;
  %5404 = multiply(%5399, %5363) /* ty=Tensor[(1, 1024), float32] */;
  %5405 = multiply(%5402, %5403) /* ty=Tensor[(1, 1024), float32] */;
  %5406 = add(%5404, %5405) /* ty=Tensor[(1, 1024), float32] */;
  %5407 = sigmoid(%5397) /* ty=Tensor[(1, 1024), float32] */;
  %5408 = tanh(%5406) /* ty=Tensor[(1, 1024), float32] */;
  %5409 = multiply(%5407, %5408) /* ty=Tensor[(1, 1024), float32] */;
  %5410 = multiply(%5386, %5387) /* ty=Tensor[(1, 1024), float32] */;
  %5411 = (%5409, %5410) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5412 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5413 = concatenate(%5411, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5414 = concatenate(%5412, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5415 = nn.dense(%5413, %5414, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5416 = add(%5415, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5417 = add(%5416, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5418 = split(%5417, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5419 = %5418.3 /* ty=Tensor[(1, 1024), float32] */;
  %5420 = %5418.1 /* ty=Tensor[(1, 1024), float32] */;
  %5421 = sigmoid(%5420) /* ty=Tensor[(1, 1024), float32] */;
  %5422 = %5418.0 /* ty=Tensor[(1, 1024), float32] */;
  %5423 = %5418.2 /* ty=Tensor[(1, 1024), float32] */;
  %5424 = sigmoid(%5422) /* ty=Tensor[(1, 1024), float32] */;
  %5425 = tanh(%5423) /* ty=Tensor[(1, 1024), float32] */;
  %5426 = multiply(%5421, %5385) /* ty=Tensor[(1, 1024), float32] */;
  %5427 = multiply(%5424, %5425) /* ty=Tensor[(1, 1024), float32] */;
  %5428 = add(%5426, %5427) /* ty=Tensor[(1, 1024), float32] */;
  %5429 = sigmoid(%5419) /* ty=Tensor[(1, 1024), float32] */;
  %5430 = tanh(%5428) /* ty=Tensor[(1, 1024), float32] */;
  %5431 = %555.113 /* ty=Tensor[(1, 240), float32] */;
  %5432 = (%5431, %5409) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5433 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5434 = concatenate(%5432, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5435 = concatenate(%5433, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5436 = nn.dense(%5434, %5435, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5437 = add(%5436, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5438 = add(%5437, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5439 = split(%5438, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5440 = %5439.3 /* ty=Tensor[(1, 1024), float32] */;
  %5441 = %5439.1 /* ty=Tensor[(1, 1024), float32] */;
  %5442 = sigmoid(%5441) /* ty=Tensor[(1, 1024), float32] */;
  %5443 = %5439.0 /* ty=Tensor[(1, 1024), float32] */;
  %5444 = %5439.2 /* ty=Tensor[(1, 1024), float32] */;
  %5445 = sigmoid(%5443) /* ty=Tensor[(1, 1024), float32] */;
  %5446 = tanh(%5444) /* ty=Tensor[(1, 1024), float32] */;
  %5447 = multiply(%5442, %5406) /* ty=Tensor[(1, 1024), float32] */;
  %5448 = multiply(%5445, %5446) /* ty=Tensor[(1, 1024), float32] */;
  %5449 = add(%5447, %5448) /* ty=Tensor[(1, 1024), float32] */;
  %5450 = sigmoid(%5440) /* ty=Tensor[(1, 1024), float32] */;
  %5451 = tanh(%5449) /* ty=Tensor[(1, 1024), float32] */;
  %5452 = multiply(%5450, %5451) /* ty=Tensor[(1, 1024), float32] */;
  %5453 = multiply(%5429, %5430) /* ty=Tensor[(1, 1024), float32] */;
  %5454 = (%5452, %5453) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5455 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5456 = concatenate(%5454, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5457 = concatenate(%5455, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5458 = nn.dense(%5456, %5457, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5459 = add(%5458, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5460 = add(%5459, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5461 = split(%5460, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5462 = %5461.3 /* ty=Tensor[(1, 1024), float32] */;
  %5463 = %5461.1 /* ty=Tensor[(1, 1024), float32] */;
  %5464 = sigmoid(%5463) /* ty=Tensor[(1, 1024), float32] */;
  %5465 = %5461.0 /* ty=Tensor[(1, 1024), float32] */;
  %5466 = %5461.2 /* ty=Tensor[(1, 1024), float32] */;
  %5467 = sigmoid(%5465) /* ty=Tensor[(1, 1024), float32] */;
  %5468 = tanh(%5466) /* ty=Tensor[(1, 1024), float32] */;
  %5469 = multiply(%5464, %5428) /* ty=Tensor[(1, 1024), float32] */;
  %5470 = multiply(%5467, %5468) /* ty=Tensor[(1, 1024), float32] */;
  %5471 = add(%5469, %5470) /* ty=Tensor[(1, 1024), float32] */;
  %5472 = sigmoid(%5462) /* ty=Tensor[(1, 1024), float32] */;
  %5473 = tanh(%5471) /* ty=Tensor[(1, 1024), float32] */;
  %5474 = %555.114 /* ty=Tensor[(1, 240), float32] */;
  %5475 = (%5474, %5452) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5476 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5477 = concatenate(%5475, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5478 = concatenate(%5476, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5479 = nn.dense(%5477, %5478, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5480 = add(%5479, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5481 = add(%5480, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5482 = split(%5481, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5483 = %5482.3 /* ty=Tensor[(1, 1024), float32] */;
  %5484 = %5482.1 /* ty=Tensor[(1, 1024), float32] */;
  %5485 = sigmoid(%5484) /* ty=Tensor[(1, 1024), float32] */;
  %5486 = %5482.0 /* ty=Tensor[(1, 1024), float32] */;
  %5487 = %5482.2 /* ty=Tensor[(1, 1024), float32] */;
  %5488 = sigmoid(%5486) /* ty=Tensor[(1, 1024), float32] */;
  %5489 = tanh(%5487) /* ty=Tensor[(1, 1024), float32] */;
  %5490 = multiply(%5485, %5449) /* ty=Tensor[(1, 1024), float32] */;
  %5491 = multiply(%5488, %5489) /* ty=Tensor[(1, 1024), float32] */;
  %5492 = add(%5490, %5491) /* ty=Tensor[(1, 1024), float32] */;
  %5493 = sigmoid(%5483) /* ty=Tensor[(1, 1024), float32] */;
  %5494 = tanh(%5492) /* ty=Tensor[(1, 1024), float32] */;
  %5495 = multiply(%5493, %5494) /* ty=Tensor[(1, 1024), float32] */;
  %5496 = multiply(%5472, %5473) /* ty=Tensor[(1, 1024), float32] */;
  %5497 = (%5495, %5496) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5498 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5499 = concatenate(%5497, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5500 = concatenate(%5498, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5501 = nn.dense(%5499, %5500, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5502 = add(%5501, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5503 = add(%5502, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5504 = split(%5503, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5505 = %5504.3 /* ty=Tensor[(1, 1024), float32] */;
  %5506 = %5504.1 /* ty=Tensor[(1, 1024), float32] */;
  %5507 = sigmoid(%5506) /* ty=Tensor[(1, 1024), float32] */;
  %5508 = %5504.0 /* ty=Tensor[(1, 1024), float32] */;
  %5509 = %5504.2 /* ty=Tensor[(1, 1024), float32] */;
  %5510 = sigmoid(%5508) /* ty=Tensor[(1, 1024), float32] */;
  %5511 = tanh(%5509) /* ty=Tensor[(1, 1024), float32] */;
  %5512 = multiply(%5507, %5471) /* ty=Tensor[(1, 1024), float32] */;
  %5513 = multiply(%5510, %5511) /* ty=Tensor[(1, 1024), float32] */;
  %5514 = add(%5512, %5513) /* ty=Tensor[(1, 1024), float32] */;
  %5515 = sigmoid(%5505) /* ty=Tensor[(1, 1024), float32] */;
  %5516 = tanh(%5514) /* ty=Tensor[(1, 1024), float32] */;
  %5517 = %555.115 /* ty=Tensor[(1, 240), float32] */;
  %5518 = (%5517, %5495) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5519 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5520 = concatenate(%5518, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5521 = concatenate(%5519, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5522 = nn.dense(%5520, %5521, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5523 = add(%5522, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5524 = add(%5523, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5525 = split(%5524, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5526 = %5525.3 /* ty=Tensor[(1, 1024), float32] */;
  %5527 = %5525.1 /* ty=Tensor[(1, 1024), float32] */;
  %5528 = sigmoid(%5527) /* ty=Tensor[(1, 1024), float32] */;
  %5529 = %5525.0 /* ty=Tensor[(1, 1024), float32] */;
  %5530 = %5525.2 /* ty=Tensor[(1, 1024), float32] */;
  %5531 = sigmoid(%5529) /* ty=Tensor[(1, 1024), float32] */;
  %5532 = tanh(%5530) /* ty=Tensor[(1, 1024), float32] */;
  %5533 = multiply(%5528, %5492) /* ty=Tensor[(1, 1024), float32] */;
  %5534 = multiply(%5531, %5532) /* ty=Tensor[(1, 1024), float32] */;
  %5535 = add(%5533, %5534) /* ty=Tensor[(1, 1024), float32] */;
  %5536 = sigmoid(%5526) /* ty=Tensor[(1, 1024), float32] */;
  %5537 = tanh(%5535) /* ty=Tensor[(1, 1024), float32] */;
  %5538 = multiply(%5536, %5537) /* ty=Tensor[(1, 1024), float32] */;
  %5539 = multiply(%5515, %5516) /* ty=Tensor[(1, 1024), float32] */;
  %5540 = (%5538, %5539) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5541 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5542 = concatenate(%5540, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5543 = concatenate(%5541, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5544 = nn.dense(%5542, %5543, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5545 = add(%5544, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5546 = add(%5545, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5547 = split(%5546, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5548 = %5547.3 /* ty=Tensor[(1, 1024), float32] */;
  %5549 = %5547.1 /* ty=Tensor[(1, 1024), float32] */;
  %5550 = sigmoid(%5549) /* ty=Tensor[(1, 1024), float32] */;
  %5551 = %5547.0 /* ty=Tensor[(1, 1024), float32] */;
  %5552 = %5547.2 /* ty=Tensor[(1, 1024), float32] */;
  %5553 = sigmoid(%5551) /* ty=Tensor[(1, 1024), float32] */;
  %5554 = tanh(%5552) /* ty=Tensor[(1, 1024), float32] */;
  %5555 = multiply(%5550, %5514) /* ty=Tensor[(1, 1024), float32] */;
  %5556 = multiply(%5553, %5554) /* ty=Tensor[(1, 1024), float32] */;
  %5557 = add(%5555, %5556) /* ty=Tensor[(1, 1024), float32] */;
  %5558 = sigmoid(%5548) /* ty=Tensor[(1, 1024), float32] */;
  %5559 = tanh(%5557) /* ty=Tensor[(1, 1024), float32] */;
  %5560 = %555.116 /* ty=Tensor[(1, 240), float32] */;
  %5561 = (%5560, %5538) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5562 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5563 = concatenate(%5561, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5564 = concatenate(%5562, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5565 = nn.dense(%5563, %5564, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5566 = add(%5565, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5567 = add(%5566, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5568 = split(%5567, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5569 = %5568.3 /* ty=Tensor[(1, 1024), float32] */;
  %5570 = %5568.1 /* ty=Tensor[(1, 1024), float32] */;
  %5571 = sigmoid(%5570) /* ty=Tensor[(1, 1024), float32] */;
  %5572 = %5568.0 /* ty=Tensor[(1, 1024), float32] */;
  %5573 = %5568.2 /* ty=Tensor[(1, 1024), float32] */;
  %5574 = sigmoid(%5572) /* ty=Tensor[(1, 1024), float32] */;
  %5575 = tanh(%5573) /* ty=Tensor[(1, 1024), float32] */;
  %5576 = multiply(%5571, %5535) /* ty=Tensor[(1, 1024), float32] */;
  %5577 = multiply(%5574, %5575) /* ty=Tensor[(1, 1024), float32] */;
  %5578 = add(%5576, %5577) /* ty=Tensor[(1, 1024), float32] */;
  %5579 = sigmoid(%5569) /* ty=Tensor[(1, 1024), float32] */;
  %5580 = tanh(%5578) /* ty=Tensor[(1, 1024), float32] */;
  %5581 = multiply(%5579, %5580) /* ty=Tensor[(1, 1024), float32] */;
  %5582 = multiply(%5558, %5559) /* ty=Tensor[(1, 1024), float32] */;
  %5583 = (%5581, %5582) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5584 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5585 = concatenate(%5583, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5586 = concatenate(%5584, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5587 = nn.dense(%5585, %5586, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5588 = add(%5587, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5589 = add(%5588, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5590 = split(%5589, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5591 = %5590.3 /* ty=Tensor[(1, 1024), float32] */;
  %5592 = %5590.1 /* ty=Tensor[(1, 1024), float32] */;
  %5593 = sigmoid(%5592) /* ty=Tensor[(1, 1024), float32] */;
  %5594 = %5590.0 /* ty=Tensor[(1, 1024), float32] */;
  %5595 = %5590.2 /* ty=Tensor[(1, 1024), float32] */;
  %5596 = sigmoid(%5594) /* ty=Tensor[(1, 1024), float32] */;
  %5597 = tanh(%5595) /* ty=Tensor[(1, 1024), float32] */;
  %5598 = multiply(%5593, %5557) /* ty=Tensor[(1, 1024), float32] */;
  %5599 = multiply(%5596, %5597) /* ty=Tensor[(1, 1024), float32] */;
  %5600 = add(%5598, %5599) /* ty=Tensor[(1, 1024), float32] */;
  %5601 = sigmoid(%5591) /* ty=Tensor[(1, 1024), float32] */;
  %5602 = tanh(%5600) /* ty=Tensor[(1, 1024), float32] */;
  %5603 = %555.117 /* ty=Tensor[(1, 240), float32] */;
  %5604 = (%5603, %5581) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5605 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5606 = concatenate(%5604, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5607 = concatenate(%5605, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5608 = nn.dense(%5606, %5607, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5609 = add(%5608, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5610 = add(%5609, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5611 = split(%5610, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5612 = %5611.3 /* ty=Tensor[(1, 1024), float32] */;
  %5613 = %5611.1 /* ty=Tensor[(1, 1024), float32] */;
  %5614 = sigmoid(%5613) /* ty=Tensor[(1, 1024), float32] */;
  %5615 = %5611.0 /* ty=Tensor[(1, 1024), float32] */;
  %5616 = %5611.2 /* ty=Tensor[(1, 1024), float32] */;
  %5617 = sigmoid(%5615) /* ty=Tensor[(1, 1024), float32] */;
  %5618 = tanh(%5616) /* ty=Tensor[(1, 1024), float32] */;
  %5619 = multiply(%5614, %5578) /* ty=Tensor[(1, 1024), float32] */;
  %5620 = multiply(%5617, %5618) /* ty=Tensor[(1, 1024), float32] */;
  %5621 = add(%5619, %5620) /* ty=Tensor[(1, 1024), float32] */;
  %5622 = sigmoid(%5612) /* ty=Tensor[(1, 1024), float32] */;
  %5623 = tanh(%5621) /* ty=Tensor[(1, 1024), float32] */;
  %5624 = multiply(%5622, %5623) /* ty=Tensor[(1, 1024), float32] */;
  %5625 = multiply(%5601, %5602) /* ty=Tensor[(1, 1024), float32] */;
  %5626 = (%5624, %5625) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5627 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5628 = concatenate(%5626, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5629 = concatenate(%5627, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5630 = nn.dense(%5628, %5629, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5631 = add(%5630, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5632 = add(%5631, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5633 = split(%5632, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5634 = %5633.3 /* ty=Tensor[(1, 1024), float32] */;
  %5635 = %5633.1 /* ty=Tensor[(1, 1024), float32] */;
  %5636 = sigmoid(%5635) /* ty=Tensor[(1, 1024), float32] */;
  %5637 = %5633.0 /* ty=Tensor[(1, 1024), float32] */;
  %5638 = %5633.2 /* ty=Tensor[(1, 1024), float32] */;
  %5639 = sigmoid(%5637) /* ty=Tensor[(1, 1024), float32] */;
  %5640 = tanh(%5638) /* ty=Tensor[(1, 1024), float32] */;
  %5641 = multiply(%5636, %5600) /* ty=Tensor[(1, 1024), float32] */;
  %5642 = multiply(%5639, %5640) /* ty=Tensor[(1, 1024), float32] */;
  %5643 = add(%5641, %5642) /* ty=Tensor[(1, 1024), float32] */;
  %5644 = sigmoid(%5634) /* ty=Tensor[(1, 1024), float32] */;
  %5645 = tanh(%5643) /* ty=Tensor[(1, 1024), float32] */;
  %5646 = %555.118 /* ty=Tensor[(1, 240), float32] */;
  %5647 = (%5646, %5624) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5648 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5649 = concatenate(%5647, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5650 = concatenate(%5648, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5651 = nn.dense(%5649, %5650, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5652 = add(%5651, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5653 = add(%5652, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5654 = split(%5653, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5655 = %5654.3 /* ty=Tensor[(1, 1024), float32] */;
  %5656 = %5654.1 /* ty=Tensor[(1, 1024), float32] */;
  %5657 = sigmoid(%5656) /* ty=Tensor[(1, 1024), float32] */;
  %5658 = %5654.0 /* ty=Tensor[(1, 1024), float32] */;
  %5659 = %5654.2 /* ty=Tensor[(1, 1024), float32] */;
  %5660 = sigmoid(%5658) /* ty=Tensor[(1, 1024), float32] */;
  %5661 = tanh(%5659) /* ty=Tensor[(1, 1024), float32] */;
  %5662 = multiply(%5657, %5621) /* ty=Tensor[(1, 1024), float32] */;
  %5663 = multiply(%5660, %5661) /* ty=Tensor[(1, 1024), float32] */;
  %5664 = add(%5662, %5663) /* ty=Tensor[(1, 1024), float32] */;
  %5665 = sigmoid(%5655) /* ty=Tensor[(1, 1024), float32] */;
  %5666 = tanh(%5664) /* ty=Tensor[(1, 1024), float32] */;
  %5667 = multiply(%5665, %5666) /* ty=Tensor[(1, 1024), float32] */;
  %5668 = multiply(%5644, %5645) /* ty=Tensor[(1, 1024), float32] */;
  %5669 = (%5667, %5668) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5670 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5671 = concatenate(%5669, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5672 = concatenate(%5670, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5673 = nn.dense(%5671, %5672, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5674 = add(%5673, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5675 = add(%5674, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5676 = split(%5675, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5677 = %5676.3 /* ty=Tensor[(1, 1024), float32] */;
  %5678 = %5676.1 /* ty=Tensor[(1, 1024), float32] */;
  %5679 = sigmoid(%5678) /* ty=Tensor[(1, 1024), float32] */;
  %5680 = %5676.0 /* ty=Tensor[(1, 1024), float32] */;
  %5681 = %5676.2 /* ty=Tensor[(1, 1024), float32] */;
  %5682 = sigmoid(%5680) /* ty=Tensor[(1, 1024), float32] */;
  %5683 = tanh(%5681) /* ty=Tensor[(1, 1024), float32] */;
  %5684 = multiply(%5679, %5643) /* ty=Tensor[(1, 1024), float32] */;
  %5685 = multiply(%5682, %5683) /* ty=Tensor[(1, 1024), float32] */;
  %5686 = add(%5684, %5685) /* ty=Tensor[(1, 1024), float32] */;
  %5687 = sigmoid(%5677) /* ty=Tensor[(1, 1024), float32] */;
  %5688 = tanh(%5686) /* ty=Tensor[(1, 1024), float32] */;
  %5689 = %555.119 /* ty=Tensor[(1, 240), float32] */;
  %5690 = (%5689, %5667) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5691 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5692 = concatenate(%5690, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5693 = concatenate(%5691, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5694 = nn.dense(%5692, %5693, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5695 = add(%5694, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5696 = add(%5695, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5697 = split(%5696, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5698 = %5697.3 /* ty=Tensor[(1, 1024), float32] */;
  %5699 = %5697.1 /* ty=Tensor[(1, 1024), float32] */;
  %5700 = sigmoid(%5699) /* ty=Tensor[(1, 1024), float32] */;
  %5701 = %5697.0 /* ty=Tensor[(1, 1024), float32] */;
  %5702 = %5697.2 /* ty=Tensor[(1, 1024), float32] */;
  %5703 = sigmoid(%5701) /* ty=Tensor[(1, 1024), float32] */;
  %5704 = tanh(%5702) /* ty=Tensor[(1, 1024), float32] */;
  %5705 = multiply(%5700, %5664) /* ty=Tensor[(1, 1024), float32] */;
  %5706 = multiply(%5703, %5704) /* ty=Tensor[(1, 1024), float32] */;
  %5707 = add(%5705, %5706) /* ty=Tensor[(1, 1024), float32] */;
  %5708 = sigmoid(%5698) /* ty=Tensor[(1, 1024), float32] */;
  %5709 = tanh(%5707) /* ty=Tensor[(1, 1024), float32] */;
  %5710 = multiply(%5708, %5709) /* ty=Tensor[(1, 1024), float32] */;
  %5711 = multiply(%5687, %5688) /* ty=Tensor[(1, 1024), float32] */;
  %5712 = (%5710, %5711) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5713 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5714 = concatenate(%5712, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5715 = concatenate(%5713, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5716 = nn.dense(%5714, %5715, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5717 = add(%5716, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5718 = add(%5717, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5719 = split(%5718, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5720 = %5719.3 /* ty=Tensor[(1, 1024), float32] */;
  %5721 = %5719.1 /* ty=Tensor[(1, 1024), float32] */;
  %5722 = sigmoid(%5721) /* ty=Tensor[(1, 1024), float32] */;
  %5723 = %5719.0 /* ty=Tensor[(1, 1024), float32] */;
  %5724 = %5719.2 /* ty=Tensor[(1, 1024), float32] */;
  %5725 = sigmoid(%5723) /* ty=Tensor[(1, 1024), float32] */;
  %5726 = tanh(%5724) /* ty=Tensor[(1, 1024), float32] */;
  %5727 = multiply(%5722, %5686) /* ty=Tensor[(1, 1024), float32] */;
  %5728 = multiply(%5725, %5726) /* ty=Tensor[(1, 1024), float32] */;
  %5729 = add(%5727, %5728) /* ty=Tensor[(1, 1024), float32] */;
  %5730 = sigmoid(%5720) /* ty=Tensor[(1, 1024), float32] */;
  %5731 = tanh(%5729) /* ty=Tensor[(1, 1024), float32] */;
  %5732 = %555.120 /* ty=Tensor[(1, 240), float32] */;
  %5733 = (%5732, %5710) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5734 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5735 = concatenate(%5733, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5736 = concatenate(%5734, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5737 = nn.dense(%5735, %5736, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5738 = add(%5737, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5739 = add(%5738, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5740 = split(%5739, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5741 = %5740.3 /* ty=Tensor[(1, 1024), float32] */;
  %5742 = %5740.1 /* ty=Tensor[(1, 1024), float32] */;
  %5743 = sigmoid(%5742) /* ty=Tensor[(1, 1024), float32] */;
  %5744 = %5740.0 /* ty=Tensor[(1, 1024), float32] */;
  %5745 = %5740.2 /* ty=Tensor[(1, 1024), float32] */;
  %5746 = sigmoid(%5744) /* ty=Tensor[(1, 1024), float32] */;
  %5747 = tanh(%5745) /* ty=Tensor[(1, 1024), float32] */;
  %5748 = multiply(%5743, %5707) /* ty=Tensor[(1, 1024), float32] */;
  %5749 = multiply(%5746, %5747) /* ty=Tensor[(1, 1024), float32] */;
  %5750 = add(%5748, %5749) /* ty=Tensor[(1, 1024), float32] */;
  %5751 = sigmoid(%5741) /* ty=Tensor[(1, 1024), float32] */;
  %5752 = tanh(%5750) /* ty=Tensor[(1, 1024), float32] */;
  %5753 = multiply(%5751, %5752) /* ty=Tensor[(1, 1024), float32] */;
  %5754 = multiply(%5730, %5731) /* ty=Tensor[(1, 1024), float32] */;
  %5755 = (%5753, %5754) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5756 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5757 = concatenate(%5755, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5758 = concatenate(%5756, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5759 = nn.dense(%5757, %5758, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5760 = add(%5759, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5761 = add(%5760, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5762 = split(%5761, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5763 = %5762.3 /* ty=Tensor[(1, 1024), float32] */;
  %5764 = %5762.1 /* ty=Tensor[(1, 1024), float32] */;
  %5765 = sigmoid(%5764) /* ty=Tensor[(1, 1024), float32] */;
  %5766 = %5762.0 /* ty=Tensor[(1, 1024), float32] */;
  %5767 = %5762.2 /* ty=Tensor[(1, 1024), float32] */;
  %5768 = sigmoid(%5766) /* ty=Tensor[(1, 1024), float32] */;
  %5769 = tanh(%5767) /* ty=Tensor[(1, 1024), float32] */;
  %5770 = multiply(%5765, %5729) /* ty=Tensor[(1, 1024), float32] */;
  %5771 = multiply(%5768, %5769) /* ty=Tensor[(1, 1024), float32] */;
  %5772 = add(%5770, %5771) /* ty=Tensor[(1, 1024), float32] */;
  %5773 = sigmoid(%5763) /* ty=Tensor[(1, 1024), float32] */;
  %5774 = tanh(%5772) /* ty=Tensor[(1, 1024), float32] */;
  %5775 = %555.121 /* ty=Tensor[(1, 240), float32] */;
  %5776 = (%5775, %5753) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5777 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5778 = concatenate(%5776, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5779 = concatenate(%5777, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5780 = nn.dense(%5778, %5779, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5781 = add(%5780, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5782 = add(%5781, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5783 = split(%5782, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5784 = %5783.3 /* ty=Tensor[(1, 1024), float32] */;
  %5785 = %5783.1 /* ty=Tensor[(1, 1024), float32] */;
  %5786 = sigmoid(%5785) /* ty=Tensor[(1, 1024), float32] */;
  %5787 = %5783.0 /* ty=Tensor[(1, 1024), float32] */;
  %5788 = %5783.2 /* ty=Tensor[(1, 1024), float32] */;
  %5789 = sigmoid(%5787) /* ty=Tensor[(1, 1024), float32] */;
  %5790 = tanh(%5788) /* ty=Tensor[(1, 1024), float32] */;
  %5791 = multiply(%5786, %5750) /* ty=Tensor[(1, 1024), float32] */;
  %5792 = multiply(%5789, %5790) /* ty=Tensor[(1, 1024), float32] */;
  %5793 = add(%5791, %5792) /* ty=Tensor[(1, 1024), float32] */;
  %5794 = sigmoid(%5784) /* ty=Tensor[(1, 1024), float32] */;
  %5795 = tanh(%5793) /* ty=Tensor[(1, 1024), float32] */;
  %5796 = multiply(%5794, %5795) /* ty=Tensor[(1, 1024), float32] */;
  %5797 = multiply(%5773, %5774) /* ty=Tensor[(1, 1024), float32] */;
  %5798 = (%5796, %5797) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5799 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5800 = concatenate(%5798, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5801 = concatenate(%5799, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5802 = nn.dense(%5800, %5801, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5803 = add(%5802, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5804 = add(%5803, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5805 = split(%5804, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5806 = %5805.3 /* ty=Tensor[(1, 1024), float32] */;
  %5807 = %5805.1 /* ty=Tensor[(1, 1024), float32] */;
  %5808 = sigmoid(%5807) /* ty=Tensor[(1, 1024), float32] */;
  %5809 = %5805.0 /* ty=Tensor[(1, 1024), float32] */;
  %5810 = %5805.2 /* ty=Tensor[(1, 1024), float32] */;
  %5811 = sigmoid(%5809) /* ty=Tensor[(1, 1024), float32] */;
  %5812 = tanh(%5810) /* ty=Tensor[(1, 1024), float32] */;
  %5813 = multiply(%5808, %5772) /* ty=Tensor[(1, 1024), float32] */;
  %5814 = multiply(%5811, %5812) /* ty=Tensor[(1, 1024), float32] */;
  %5815 = add(%5813, %5814) /* ty=Tensor[(1, 1024), float32] */;
  %5816 = sigmoid(%5806) /* ty=Tensor[(1, 1024), float32] */;
  %5817 = tanh(%5815) /* ty=Tensor[(1, 1024), float32] */;
  %5818 = %555.122 /* ty=Tensor[(1, 240), float32] */;
  %5819 = (%5818, %5796) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5820 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5821 = concatenate(%5819, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5822 = concatenate(%5820, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5823 = nn.dense(%5821, %5822, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5824 = add(%5823, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5825 = add(%5824, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5826 = split(%5825, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5827 = %5826.3 /* ty=Tensor[(1, 1024), float32] */;
  %5828 = %5826.1 /* ty=Tensor[(1, 1024), float32] */;
  %5829 = sigmoid(%5828) /* ty=Tensor[(1, 1024), float32] */;
  %5830 = %5826.0 /* ty=Tensor[(1, 1024), float32] */;
  %5831 = %5826.2 /* ty=Tensor[(1, 1024), float32] */;
  %5832 = sigmoid(%5830) /* ty=Tensor[(1, 1024), float32] */;
  %5833 = tanh(%5831) /* ty=Tensor[(1, 1024), float32] */;
  %5834 = multiply(%5829, %5793) /* ty=Tensor[(1, 1024), float32] */;
  %5835 = multiply(%5832, %5833) /* ty=Tensor[(1, 1024), float32] */;
  %5836 = add(%5834, %5835) /* ty=Tensor[(1, 1024), float32] */;
  %5837 = sigmoid(%5827) /* ty=Tensor[(1, 1024), float32] */;
  %5838 = tanh(%5836) /* ty=Tensor[(1, 1024), float32] */;
  %5839 = multiply(%5837, %5838) /* ty=Tensor[(1, 1024), float32] */;
  %5840 = multiply(%5816, %5817) /* ty=Tensor[(1, 1024), float32] */;
  %5841 = (%5839, %5840) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5842 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5843 = concatenate(%5841, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5844 = concatenate(%5842, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5845 = nn.dense(%5843, %5844, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5846 = add(%5845, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5847 = add(%5846, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5848 = split(%5847, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5849 = %5848.3 /* ty=Tensor[(1, 1024), float32] */;
  %5850 = %5848.1 /* ty=Tensor[(1, 1024), float32] */;
  %5851 = sigmoid(%5850) /* ty=Tensor[(1, 1024), float32] */;
  %5852 = %5848.0 /* ty=Tensor[(1, 1024), float32] */;
  %5853 = %5848.2 /* ty=Tensor[(1, 1024), float32] */;
  %5854 = sigmoid(%5852) /* ty=Tensor[(1, 1024), float32] */;
  %5855 = tanh(%5853) /* ty=Tensor[(1, 1024), float32] */;
  %5856 = multiply(%5851, %5815) /* ty=Tensor[(1, 1024), float32] */;
  %5857 = multiply(%5854, %5855) /* ty=Tensor[(1, 1024), float32] */;
  %5858 = add(%5856, %5857) /* ty=Tensor[(1, 1024), float32] */;
  %5859 = sigmoid(%5849) /* ty=Tensor[(1, 1024), float32] */;
  %5860 = tanh(%5858) /* ty=Tensor[(1, 1024), float32] */;
  %5861 = %555.123 /* ty=Tensor[(1, 240), float32] */;
  %5862 = (%5861, %5839) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5863 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5864 = concatenate(%5862, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5865 = concatenate(%5863, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5866 = nn.dense(%5864, %5865, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5867 = add(%5866, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5868 = add(%5867, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5869 = split(%5868, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5870 = %5869.3 /* ty=Tensor[(1, 1024), float32] */;
  %5871 = %5869.1 /* ty=Tensor[(1, 1024), float32] */;
  %5872 = sigmoid(%5871) /* ty=Tensor[(1, 1024), float32] */;
  %5873 = %5869.0 /* ty=Tensor[(1, 1024), float32] */;
  %5874 = %5869.2 /* ty=Tensor[(1, 1024), float32] */;
  %5875 = sigmoid(%5873) /* ty=Tensor[(1, 1024), float32] */;
  %5876 = tanh(%5874) /* ty=Tensor[(1, 1024), float32] */;
  %5877 = multiply(%5872, %5836) /* ty=Tensor[(1, 1024), float32] */;
  %5878 = multiply(%5875, %5876) /* ty=Tensor[(1, 1024), float32] */;
  %5879 = add(%5877, %5878) /* ty=Tensor[(1, 1024), float32] */;
  %5880 = sigmoid(%5870) /* ty=Tensor[(1, 1024), float32] */;
  %5881 = tanh(%5879) /* ty=Tensor[(1, 1024), float32] */;
  %5882 = multiply(%5880, %5881) /* ty=Tensor[(1, 1024), float32] */;
  %5883 = multiply(%5859, %5860) /* ty=Tensor[(1, 1024), float32] */;
  %5884 = (%5882, %5883) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5885 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5886 = concatenate(%5884, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5887 = concatenate(%5885, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5888 = nn.dense(%5886, %5887, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5889 = add(%5888, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5890 = add(%5889, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5891 = split(%5890, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5892 = %5891.3 /* ty=Tensor[(1, 1024), float32] */;
  %5893 = %5891.1 /* ty=Tensor[(1, 1024), float32] */;
  %5894 = sigmoid(%5893) /* ty=Tensor[(1, 1024), float32] */;
  %5895 = %5891.0 /* ty=Tensor[(1, 1024), float32] */;
  %5896 = %5891.2 /* ty=Tensor[(1, 1024), float32] */;
  %5897 = sigmoid(%5895) /* ty=Tensor[(1, 1024), float32] */;
  %5898 = tanh(%5896) /* ty=Tensor[(1, 1024), float32] */;
  %5899 = multiply(%5894, %5858) /* ty=Tensor[(1, 1024), float32] */;
  %5900 = multiply(%5897, %5898) /* ty=Tensor[(1, 1024), float32] */;
  %5901 = add(%5899, %5900) /* ty=Tensor[(1, 1024), float32] */;
  %5902 = sigmoid(%5892) /* ty=Tensor[(1, 1024), float32] */;
  %5903 = tanh(%5901) /* ty=Tensor[(1, 1024), float32] */;
  %5904 = %555.124 /* ty=Tensor[(1, 240), float32] */;
  %5905 = (%5904, %5882) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5906 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5907 = concatenate(%5905, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5908 = concatenate(%5906, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5909 = nn.dense(%5907, %5908, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5910 = add(%5909, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5911 = add(%5910, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5912 = split(%5911, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5913 = %5912.3 /* ty=Tensor[(1, 1024), float32] */;
  %5914 = %5912.1 /* ty=Tensor[(1, 1024), float32] */;
  %5915 = sigmoid(%5914) /* ty=Tensor[(1, 1024), float32] */;
  %5916 = %5912.0 /* ty=Tensor[(1, 1024), float32] */;
  %5917 = %5912.2 /* ty=Tensor[(1, 1024), float32] */;
  %5918 = sigmoid(%5916) /* ty=Tensor[(1, 1024), float32] */;
  %5919 = tanh(%5917) /* ty=Tensor[(1, 1024), float32] */;
  %5920 = multiply(%5915, %5879) /* ty=Tensor[(1, 1024), float32] */;
  %5921 = multiply(%5918, %5919) /* ty=Tensor[(1, 1024), float32] */;
  %5922 = add(%5920, %5921) /* ty=Tensor[(1, 1024), float32] */;
  %5923 = sigmoid(%5913) /* ty=Tensor[(1, 1024), float32] */;
  %5924 = tanh(%5922) /* ty=Tensor[(1, 1024), float32] */;
  %5925 = multiply(%5923, %5924) /* ty=Tensor[(1, 1024), float32] */;
  %5926 = multiply(%5902, %5903) /* ty=Tensor[(1, 1024), float32] */;
  %5927 = (%5925, %5926) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5928 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5929 = concatenate(%5927, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5930 = concatenate(%5928, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5931 = nn.dense(%5929, %5930, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5932 = add(%5931, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5933 = add(%5932, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5934 = split(%5933, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5935 = %5934.3 /* ty=Tensor[(1, 1024), float32] */;
  %5936 = %5934.1 /* ty=Tensor[(1, 1024), float32] */;
  %5937 = sigmoid(%5936) /* ty=Tensor[(1, 1024), float32] */;
  %5938 = %5934.0 /* ty=Tensor[(1, 1024), float32] */;
  %5939 = %5934.2 /* ty=Tensor[(1, 1024), float32] */;
  %5940 = sigmoid(%5938) /* ty=Tensor[(1, 1024), float32] */;
  %5941 = tanh(%5939) /* ty=Tensor[(1, 1024), float32] */;
  %5942 = multiply(%5937, %5901) /* ty=Tensor[(1, 1024), float32] */;
  %5943 = multiply(%5940, %5941) /* ty=Tensor[(1, 1024), float32] */;
  %5944 = add(%5942, %5943) /* ty=Tensor[(1, 1024), float32] */;
  %5945 = sigmoid(%5935) /* ty=Tensor[(1, 1024), float32] */;
  %5946 = tanh(%5944) /* ty=Tensor[(1, 1024), float32] */;
  %5947 = %555.125 /* ty=Tensor[(1, 240), float32] */;
  %5948 = (%5947, %5925) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5949 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5950 = concatenate(%5948, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5951 = concatenate(%5949, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5952 = nn.dense(%5950, %5951, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5953 = add(%5952, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5954 = add(%5953, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5955 = split(%5954, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5956 = %5955.3 /* ty=Tensor[(1, 1024), float32] */;
  %5957 = %5955.1 /* ty=Tensor[(1, 1024), float32] */;
  %5958 = sigmoid(%5957) /* ty=Tensor[(1, 1024), float32] */;
  %5959 = %5955.0 /* ty=Tensor[(1, 1024), float32] */;
  %5960 = %5955.2 /* ty=Tensor[(1, 1024), float32] */;
  %5961 = sigmoid(%5959) /* ty=Tensor[(1, 1024), float32] */;
  %5962 = tanh(%5960) /* ty=Tensor[(1, 1024), float32] */;
  %5963 = multiply(%5958, %5922) /* ty=Tensor[(1, 1024), float32] */;
  %5964 = multiply(%5961, %5962) /* ty=Tensor[(1, 1024), float32] */;
  %5965 = add(%5963, %5964) /* ty=Tensor[(1, 1024), float32] */;
  %5966 = sigmoid(%5956) /* ty=Tensor[(1, 1024), float32] */;
  %5967 = tanh(%5965) /* ty=Tensor[(1, 1024), float32] */;
  %5968 = multiply(%5966, %5967) /* ty=Tensor[(1, 1024), float32] */;
  %5969 = multiply(%5945, %5946) /* ty=Tensor[(1, 1024), float32] */;
  %5970 = (%5968, %5969) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5971 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %5972 = concatenate(%5970, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %5973 = concatenate(%5971, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %5974 = nn.dense(%5972, %5973, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5975 = add(%5974, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5976 = add(%5975, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %5977 = split(%5976, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5978 = %5977.3 /* ty=Tensor[(1, 1024), float32] */;
  %5979 = %5977.1 /* ty=Tensor[(1, 1024), float32] */;
  %5980 = sigmoid(%5979) /* ty=Tensor[(1, 1024), float32] */;
  %5981 = %5977.0 /* ty=Tensor[(1, 1024), float32] */;
  %5982 = %5977.2 /* ty=Tensor[(1, 1024), float32] */;
  %5983 = sigmoid(%5981) /* ty=Tensor[(1, 1024), float32] */;
  %5984 = tanh(%5982) /* ty=Tensor[(1, 1024), float32] */;
  %5985 = multiply(%5980, %5944) /* ty=Tensor[(1, 1024), float32] */;
  %5986 = multiply(%5983, %5984) /* ty=Tensor[(1, 1024), float32] */;
  %5987 = add(%5985, %5986) /* ty=Tensor[(1, 1024), float32] */;
  %5988 = sigmoid(%5978) /* ty=Tensor[(1, 1024), float32] */;
  %5989 = tanh(%5987) /* ty=Tensor[(1, 1024), float32] */;
  %5990 = %555.126 /* ty=Tensor[(1, 240), float32] */;
  %5991 = (%5990, %5968) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %5992 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %5993 = concatenate(%5991, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %5994 = concatenate(%5992, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %5995 = nn.dense(%5993, %5994, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %5996 = add(%5995, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5997 = add(%5996, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %5998 = split(%5997, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %5999 = %5998.3 /* ty=Tensor[(1, 1024), float32] */;
  %6000 = %5998.1 /* ty=Tensor[(1, 1024), float32] */;
  %6001 = sigmoid(%6000) /* ty=Tensor[(1, 1024), float32] */;
  %6002 = %5998.0 /* ty=Tensor[(1, 1024), float32] */;
  %6003 = %5998.2 /* ty=Tensor[(1, 1024), float32] */;
  %6004 = sigmoid(%6002) /* ty=Tensor[(1, 1024), float32] */;
  %6005 = tanh(%6003) /* ty=Tensor[(1, 1024), float32] */;
  %6006 = multiply(%6001, %5965) /* ty=Tensor[(1, 1024), float32] */;
  %6007 = multiply(%6004, %6005) /* ty=Tensor[(1, 1024), float32] */;
  %6008 = add(%6006, %6007) /* ty=Tensor[(1, 1024), float32] */;
  %6009 = sigmoid(%5999) /* ty=Tensor[(1, 1024), float32] */;
  %6010 = tanh(%6008) /* ty=Tensor[(1, 1024), float32] */;
  %6011 = multiply(%6009, %6010) /* ty=Tensor[(1, 1024), float32] */;
  %6012 = multiply(%5988, %5989) /* ty=Tensor[(1, 1024), float32] */;
  %6013 = (%6011, %6012) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6014 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6015 = concatenate(%6013, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6016 = concatenate(%6014, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6017 = nn.dense(%6015, %6016, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6018 = add(%6017, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6019 = add(%6018, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6020 = split(%6019, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6021 = %6020.3 /* ty=Tensor[(1, 1024), float32] */;
  %6022 = %6020.1 /* ty=Tensor[(1, 1024), float32] */;
  %6023 = sigmoid(%6022) /* ty=Tensor[(1, 1024), float32] */;
  %6024 = %6020.0 /* ty=Tensor[(1, 1024), float32] */;
  %6025 = %6020.2 /* ty=Tensor[(1, 1024), float32] */;
  %6026 = sigmoid(%6024) /* ty=Tensor[(1, 1024), float32] */;
  %6027 = tanh(%6025) /* ty=Tensor[(1, 1024), float32] */;
  %6028 = multiply(%6023, %5987) /* ty=Tensor[(1, 1024), float32] */;
  %6029 = multiply(%6026, %6027) /* ty=Tensor[(1, 1024), float32] */;
  %6030 = add(%6028, %6029) /* ty=Tensor[(1, 1024), float32] */;
  %6031 = sigmoid(%6021) /* ty=Tensor[(1, 1024), float32] */;
  %6032 = tanh(%6030) /* ty=Tensor[(1, 1024), float32] */;
  %6033 = %555.127 /* ty=Tensor[(1, 240), float32] */;
  %6034 = (%6033, %6011) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6035 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6036 = concatenate(%6034, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6037 = concatenate(%6035, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6038 = nn.dense(%6036, %6037, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6039 = add(%6038, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6040 = add(%6039, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6041 = split(%6040, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6042 = %6041.3 /* ty=Tensor[(1, 1024), float32] */;
  %6043 = %6041.1 /* ty=Tensor[(1, 1024), float32] */;
  %6044 = sigmoid(%6043) /* ty=Tensor[(1, 1024), float32] */;
  %6045 = %6041.0 /* ty=Tensor[(1, 1024), float32] */;
  %6046 = %6041.2 /* ty=Tensor[(1, 1024), float32] */;
  %6047 = sigmoid(%6045) /* ty=Tensor[(1, 1024), float32] */;
  %6048 = tanh(%6046) /* ty=Tensor[(1, 1024), float32] */;
  %6049 = multiply(%6044, %6008) /* ty=Tensor[(1, 1024), float32] */;
  %6050 = multiply(%6047, %6048) /* ty=Tensor[(1, 1024), float32] */;
  %6051 = add(%6049, %6050) /* ty=Tensor[(1, 1024), float32] */;
  %6052 = sigmoid(%6042) /* ty=Tensor[(1, 1024), float32] */;
  %6053 = tanh(%6051) /* ty=Tensor[(1, 1024), float32] */;
  %6054 = multiply(%6052, %6053) /* ty=Tensor[(1, 1024), float32] */;
  %6055 = multiply(%6031, %6032) /* ty=Tensor[(1, 1024), float32] */;
  %6056 = (%6054, %6055) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6057 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6058 = concatenate(%6056, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6059 = concatenate(%6057, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6060 = nn.dense(%6058, %6059, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6061 = add(%6060, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6062 = add(%6061, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6063 = split(%6062, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6064 = %6063.3 /* ty=Tensor[(1, 1024), float32] */;
  %6065 = %6063.1 /* ty=Tensor[(1, 1024), float32] */;
  %6066 = sigmoid(%6065) /* ty=Tensor[(1, 1024), float32] */;
  %6067 = %6063.0 /* ty=Tensor[(1, 1024), float32] */;
  %6068 = %6063.2 /* ty=Tensor[(1, 1024), float32] */;
  %6069 = sigmoid(%6067) /* ty=Tensor[(1, 1024), float32] */;
  %6070 = tanh(%6068) /* ty=Tensor[(1, 1024), float32] */;
  %6071 = multiply(%6066, %6030) /* ty=Tensor[(1, 1024), float32] */;
  %6072 = multiply(%6069, %6070) /* ty=Tensor[(1, 1024), float32] */;
  %6073 = add(%6071, %6072) /* ty=Tensor[(1, 1024), float32] */;
  %6074 = sigmoid(%6064) /* ty=Tensor[(1, 1024), float32] */;
  %6075 = tanh(%6073) /* ty=Tensor[(1, 1024), float32] */;
  %6076 = %555.128 /* ty=Tensor[(1, 240), float32] */;
  %6077 = (%6076, %6054) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6078 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6079 = concatenate(%6077, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6080 = concatenate(%6078, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6081 = nn.dense(%6079, %6080, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6082 = add(%6081, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6083 = add(%6082, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6084 = split(%6083, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6085 = %6084.3 /* ty=Tensor[(1, 1024), float32] */;
  %6086 = %6084.1 /* ty=Tensor[(1, 1024), float32] */;
  %6087 = sigmoid(%6086) /* ty=Tensor[(1, 1024), float32] */;
  %6088 = %6084.0 /* ty=Tensor[(1, 1024), float32] */;
  %6089 = %6084.2 /* ty=Tensor[(1, 1024), float32] */;
  %6090 = sigmoid(%6088) /* ty=Tensor[(1, 1024), float32] */;
  %6091 = tanh(%6089) /* ty=Tensor[(1, 1024), float32] */;
  %6092 = multiply(%6087, %6051) /* ty=Tensor[(1, 1024), float32] */;
  %6093 = multiply(%6090, %6091) /* ty=Tensor[(1, 1024), float32] */;
  %6094 = add(%6092, %6093) /* ty=Tensor[(1, 1024), float32] */;
  %6095 = sigmoid(%6085) /* ty=Tensor[(1, 1024), float32] */;
  %6096 = tanh(%6094) /* ty=Tensor[(1, 1024), float32] */;
  %6097 = multiply(%6095, %6096) /* ty=Tensor[(1, 1024), float32] */;
  %6098 = multiply(%6074, %6075) /* ty=Tensor[(1, 1024), float32] */;
  %6099 = (%6097, %6098) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6100 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6101 = concatenate(%6099, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6102 = concatenate(%6100, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6103 = nn.dense(%6101, %6102, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6104 = add(%6103, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6105 = add(%6104, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6106 = split(%6105, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6107 = %6106.3 /* ty=Tensor[(1, 1024), float32] */;
  %6108 = %6106.1 /* ty=Tensor[(1, 1024), float32] */;
  %6109 = sigmoid(%6108) /* ty=Tensor[(1, 1024), float32] */;
  %6110 = %6106.0 /* ty=Tensor[(1, 1024), float32] */;
  %6111 = %6106.2 /* ty=Tensor[(1, 1024), float32] */;
  %6112 = sigmoid(%6110) /* ty=Tensor[(1, 1024), float32] */;
  %6113 = tanh(%6111) /* ty=Tensor[(1, 1024), float32] */;
  %6114 = multiply(%6109, %6073) /* ty=Tensor[(1, 1024), float32] */;
  %6115 = multiply(%6112, %6113) /* ty=Tensor[(1, 1024), float32] */;
  %6116 = add(%6114, %6115) /* ty=Tensor[(1, 1024), float32] */;
  %6117 = sigmoid(%6107) /* ty=Tensor[(1, 1024), float32] */;
  %6118 = tanh(%6116) /* ty=Tensor[(1, 1024), float32] */;
  %6119 = %555.129 /* ty=Tensor[(1, 240), float32] */;
  %6120 = (%6119, %6097) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6121 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6122 = concatenate(%6120, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6123 = concatenate(%6121, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6124 = nn.dense(%6122, %6123, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6125 = add(%6124, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6126 = add(%6125, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6127 = split(%6126, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6128 = %6127.3 /* ty=Tensor[(1, 1024), float32] */;
  %6129 = %6127.1 /* ty=Tensor[(1, 1024), float32] */;
  %6130 = sigmoid(%6129) /* ty=Tensor[(1, 1024), float32] */;
  %6131 = %6127.0 /* ty=Tensor[(1, 1024), float32] */;
  %6132 = %6127.2 /* ty=Tensor[(1, 1024), float32] */;
  %6133 = sigmoid(%6131) /* ty=Tensor[(1, 1024), float32] */;
  %6134 = tanh(%6132) /* ty=Tensor[(1, 1024), float32] */;
  %6135 = multiply(%6130, %6094) /* ty=Tensor[(1, 1024), float32] */;
  %6136 = multiply(%6133, %6134) /* ty=Tensor[(1, 1024), float32] */;
  %6137 = add(%6135, %6136) /* ty=Tensor[(1, 1024), float32] */;
  %6138 = sigmoid(%6128) /* ty=Tensor[(1, 1024), float32] */;
  %6139 = tanh(%6137) /* ty=Tensor[(1, 1024), float32] */;
  %6140 = multiply(%6138, %6139) /* ty=Tensor[(1, 1024), float32] */;
  %6141 = multiply(%6117, %6118) /* ty=Tensor[(1, 1024), float32] */;
  %6142 = (%6140, %6141) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6143 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6144 = concatenate(%6142, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6145 = concatenate(%6143, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6146 = nn.dense(%6144, %6145, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6147 = add(%6146, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6148 = add(%6147, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6149 = split(%6148, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6150 = %6149.3 /* ty=Tensor[(1, 1024), float32] */;
  %6151 = %6149.1 /* ty=Tensor[(1, 1024), float32] */;
  %6152 = sigmoid(%6151) /* ty=Tensor[(1, 1024), float32] */;
  %6153 = %6149.0 /* ty=Tensor[(1, 1024), float32] */;
  %6154 = %6149.2 /* ty=Tensor[(1, 1024), float32] */;
  %6155 = sigmoid(%6153) /* ty=Tensor[(1, 1024), float32] */;
  %6156 = tanh(%6154) /* ty=Tensor[(1, 1024), float32] */;
  %6157 = multiply(%6152, %6116) /* ty=Tensor[(1, 1024), float32] */;
  %6158 = multiply(%6155, %6156) /* ty=Tensor[(1, 1024), float32] */;
  %6159 = add(%6157, %6158) /* ty=Tensor[(1, 1024), float32] */;
  %6160 = sigmoid(%6150) /* ty=Tensor[(1, 1024), float32] */;
  %6161 = tanh(%6159) /* ty=Tensor[(1, 1024), float32] */;
  %6162 = %555.130 /* ty=Tensor[(1, 240), float32] */;
  %6163 = (%6162, %6140) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6164 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6165 = concatenate(%6163, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6166 = concatenate(%6164, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6167 = nn.dense(%6165, %6166, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6168 = add(%6167, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6169 = add(%6168, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6170 = split(%6169, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6171 = %6170.3 /* ty=Tensor[(1, 1024), float32] */;
  %6172 = %6170.1 /* ty=Tensor[(1, 1024), float32] */;
  %6173 = sigmoid(%6172) /* ty=Tensor[(1, 1024), float32] */;
  %6174 = %6170.0 /* ty=Tensor[(1, 1024), float32] */;
  %6175 = %6170.2 /* ty=Tensor[(1, 1024), float32] */;
  %6176 = sigmoid(%6174) /* ty=Tensor[(1, 1024), float32] */;
  %6177 = tanh(%6175) /* ty=Tensor[(1, 1024), float32] */;
  %6178 = multiply(%6173, %6137) /* ty=Tensor[(1, 1024), float32] */;
  %6179 = multiply(%6176, %6177) /* ty=Tensor[(1, 1024), float32] */;
  %6180 = add(%6178, %6179) /* ty=Tensor[(1, 1024), float32] */;
  %6181 = sigmoid(%6171) /* ty=Tensor[(1, 1024), float32] */;
  %6182 = tanh(%6180) /* ty=Tensor[(1, 1024), float32] */;
  %6183 = multiply(%6181, %6182) /* ty=Tensor[(1, 1024), float32] */;
  %6184 = multiply(%6160, %6161) /* ty=Tensor[(1, 1024), float32] */;
  %6185 = (%6183, %6184) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6186 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6187 = concatenate(%6185, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6188 = concatenate(%6186, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6189 = nn.dense(%6187, %6188, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6190 = add(%6189, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6191 = add(%6190, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6192 = split(%6191, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6193 = %6192.3 /* ty=Tensor[(1, 1024), float32] */;
  %6194 = %6192.1 /* ty=Tensor[(1, 1024), float32] */;
  %6195 = sigmoid(%6194) /* ty=Tensor[(1, 1024), float32] */;
  %6196 = %6192.0 /* ty=Tensor[(1, 1024), float32] */;
  %6197 = %6192.2 /* ty=Tensor[(1, 1024), float32] */;
  %6198 = sigmoid(%6196) /* ty=Tensor[(1, 1024), float32] */;
  %6199 = tanh(%6197) /* ty=Tensor[(1, 1024), float32] */;
  %6200 = multiply(%6195, %6159) /* ty=Tensor[(1, 1024), float32] */;
  %6201 = multiply(%6198, %6199) /* ty=Tensor[(1, 1024), float32] */;
  %6202 = add(%6200, %6201) /* ty=Tensor[(1, 1024), float32] */;
  %6203 = sigmoid(%6193) /* ty=Tensor[(1, 1024), float32] */;
  %6204 = tanh(%6202) /* ty=Tensor[(1, 1024), float32] */;
  %6205 = %555.131 /* ty=Tensor[(1, 240), float32] */;
  %6206 = (%6205, %6183) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6207 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6208 = concatenate(%6206, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6209 = concatenate(%6207, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6210 = nn.dense(%6208, %6209, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6211 = add(%6210, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6212 = add(%6211, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6213 = split(%6212, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6214 = %6213.3 /* ty=Tensor[(1, 1024), float32] */;
  %6215 = %6213.1 /* ty=Tensor[(1, 1024), float32] */;
  %6216 = sigmoid(%6215) /* ty=Tensor[(1, 1024), float32] */;
  %6217 = %6213.0 /* ty=Tensor[(1, 1024), float32] */;
  %6218 = %6213.2 /* ty=Tensor[(1, 1024), float32] */;
  %6219 = sigmoid(%6217) /* ty=Tensor[(1, 1024), float32] */;
  %6220 = tanh(%6218) /* ty=Tensor[(1, 1024), float32] */;
  %6221 = multiply(%6216, %6180) /* ty=Tensor[(1, 1024), float32] */;
  %6222 = multiply(%6219, %6220) /* ty=Tensor[(1, 1024), float32] */;
  %6223 = add(%6221, %6222) /* ty=Tensor[(1, 1024), float32] */;
  %6224 = sigmoid(%6214) /* ty=Tensor[(1, 1024), float32] */;
  %6225 = tanh(%6223) /* ty=Tensor[(1, 1024), float32] */;
  %6226 = multiply(%6224, %6225) /* ty=Tensor[(1, 1024), float32] */;
  %6227 = multiply(%6203, %6204) /* ty=Tensor[(1, 1024), float32] */;
  %6228 = (%6226, %6227) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6229 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6230 = concatenate(%6228, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6231 = concatenate(%6229, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6232 = nn.dense(%6230, %6231, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6233 = add(%6232, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6234 = add(%6233, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6235 = split(%6234, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6236 = %6235.3 /* ty=Tensor[(1, 1024), float32] */;
  %6237 = %6235.1 /* ty=Tensor[(1, 1024), float32] */;
  %6238 = sigmoid(%6237) /* ty=Tensor[(1, 1024), float32] */;
  %6239 = %6235.0 /* ty=Tensor[(1, 1024), float32] */;
  %6240 = %6235.2 /* ty=Tensor[(1, 1024), float32] */;
  %6241 = sigmoid(%6239) /* ty=Tensor[(1, 1024), float32] */;
  %6242 = tanh(%6240) /* ty=Tensor[(1, 1024), float32] */;
  %6243 = multiply(%6238, %6202) /* ty=Tensor[(1, 1024), float32] */;
  %6244 = multiply(%6241, %6242) /* ty=Tensor[(1, 1024), float32] */;
  %6245 = add(%6243, %6244) /* ty=Tensor[(1, 1024), float32] */;
  %6246 = sigmoid(%6236) /* ty=Tensor[(1, 1024), float32] */;
  %6247 = tanh(%6245) /* ty=Tensor[(1, 1024), float32] */;
  %6248 = %555.132 /* ty=Tensor[(1, 240), float32] */;
  %6249 = (%6248, %6226) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6250 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6251 = concatenate(%6249, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6252 = concatenate(%6250, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6253 = nn.dense(%6251, %6252, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6254 = add(%6253, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6255 = add(%6254, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6256 = split(%6255, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6257 = %6256.3 /* ty=Tensor[(1, 1024), float32] */;
  %6258 = %6256.1 /* ty=Tensor[(1, 1024), float32] */;
  %6259 = sigmoid(%6258) /* ty=Tensor[(1, 1024), float32] */;
  %6260 = %6256.0 /* ty=Tensor[(1, 1024), float32] */;
  %6261 = %6256.2 /* ty=Tensor[(1, 1024), float32] */;
  %6262 = sigmoid(%6260) /* ty=Tensor[(1, 1024), float32] */;
  %6263 = tanh(%6261) /* ty=Tensor[(1, 1024), float32] */;
  %6264 = multiply(%6259, %6223) /* ty=Tensor[(1, 1024), float32] */;
  %6265 = multiply(%6262, %6263) /* ty=Tensor[(1, 1024), float32] */;
  %6266 = add(%6264, %6265) /* ty=Tensor[(1, 1024), float32] */;
  %6267 = sigmoid(%6257) /* ty=Tensor[(1, 1024), float32] */;
  %6268 = tanh(%6266) /* ty=Tensor[(1, 1024), float32] */;
  %6269 = multiply(%6267, %6268) /* ty=Tensor[(1, 1024), float32] */;
  %6270 = multiply(%6246, %6247) /* ty=Tensor[(1, 1024), float32] */;
  %6271 = (%6269, %6270) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6272 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6273 = concatenate(%6271, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6274 = concatenate(%6272, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6275 = nn.dense(%6273, %6274, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6276 = add(%6275, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6277 = add(%6276, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6278 = split(%6277, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6279 = %6278.3 /* ty=Tensor[(1, 1024), float32] */;
  %6280 = %6278.1 /* ty=Tensor[(1, 1024), float32] */;
  %6281 = sigmoid(%6280) /* ty=Tensor[(1, 1024), float32] */;
  %6282 = %6278.0 /* ty=Tensor[(1, 1024), float32] */;
  %6283 = %6278.2 /* ty=Tensor[(1, 1024), float32] */;
  %6284 = sigmoid(%6282) /* ty=Tensor[(1, 1024), float32] */;
  %6285 = tanh(%6283) /* ty=Tensor[(1, 1024), float32] */;
  %6286 = multiply(%6281, %6245) /* ty=Tensor[(1, 1024), float32] */;
  %6287 = multiply(%6284, %6285) /* ty=Tensor[(1, 1024), float32] */;
  %6288 = add(%6286, %6287) /* ty=Tensor[(1, 1024), float32] */;
  %6289 = sigmoid(%6279) /* ty=Tensor[(1, 1024), float32] */;
  %6290 = tanh(%6288) /* ty=Tensor[(1, 1024), float32] */;
  %6291 = %555.133 /* ty=Tensor[(1, 240), float32] */;
  %6292 = (%6291, %6269) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6293 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6294 = concatenate(%6292, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6295 = concatenate(%6293, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6296 = nn.dense(%6294, %6295, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6297 = add(%6296, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6298 = add(%6297, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6299 = split(%6298, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6300 = %6299.3 /* ty=Tensor[(1, 1024), float32] */;
  %6301 = %6299.1 /* ty=Tensor[(1, 1024), float32] */;
  %6302 = sigmoid(%6301) /* ty=Tensor[(1, 1024), float32] */;
  %6303 = %6299.0 /* ty=Tensor[(1, 1024), float32] */;
  %6304 = %6299.2 /* ty=Tensor[(1, 1024), float32] */;
  %6305 = sigmoid(%6303) /* ty=Tensor[(1, 1024), float32] */;
  %6306 = tanh(%6304) /* ty=Tensor[(1, 1024), float32] */;
  %6307 = multiply(%6302, %6266) /* ty=Tensor[(1, 1024), float32] */;
  %6308 = multiply(%6305, %6306) /* ty=Tensor[(1, 1024), float32] */;
  %6309 = add(%6307, %6308) /* ty=Tensor[(1, 1024), float32] */;
  %6310 = sigmoid(%6300) /* ty=Tensor[(1, 1024), float32] */;
  %6311 = tanh(%6309) /* ty=Tensor[(1, 1024), float32] */;
  %6312 = multiply(%6310, %6311) /* ty=Tensor[(1, 1024), float32] */;
  %6313 = multiply(%6289, %6290) /* ty=Tensor[(1, 1024), float32] */;
  %6314 = (%6312, %6313) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6315 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6316 = concatenate(%6314, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6317 = concatenate(%6315, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6318 = nn.dense(%6316, %6317, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6319 = add(%6318, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6320 = add(%6319, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6321 = split(%6320, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6322 = %6321.3 /* ty=Tensor[(1, 1024), float32] */;
  %6323 = %6321.1 /* ty=Tensor[(1, 1024), float32] */;
  %6324 = sigmoid(%6323) /* ty=Tensor[(1, 1024), float32] */;
  %6325 = %6321.0 /* ty=Tensor[(1, 1024), float32] */;
  %6326 = %6321.2 /* ty=Tensor[(1, 1024), float32] */;
  %6327 = sigmoid(%6325) /* ty=Tensor[(1, 1024), float32] */;
  %6328 = tanh(%6326) /* ty=Tensor[(1, 1024), float32] */;
  %6329 = multiply(%6324, %6288) /* ty=Tensor[(1, 1024), float32] */;
  %6330 = multiply(%6327, %6328) /* ty=Tensor[(1, 1024), float32] */;
  %6331 = add(%6329, %6330) /* ty=Tensor[(1, 1024), float32] */;
  %6332 = sigmoid(%6322) /* ty=Tensor[(1, 1024), float32] */;
  %6333 = tanh(%6331) /* ty=Tensor[(1, 1024), float32] */;
  %6334 = %555.134 /* ty=Tensor[(1, 240), float32] */;
  %6335 = (%6334, %6312) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6336 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6337 = concatenate(%6335, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6338 = concatenate(%6336, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6339 = nn.dense(%6337, %6338, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6340 = add(%6339, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6341 = add(%6340, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6342 = split(%6341, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6343 = %6342.3 /* ty=Tensor[(1, 1024), float32] */;
  %6344 = %6342.1 /* ty=Tensor[(1, 1024), float32] */;
  %6345 = sigmoid(%6344) /* ty=Tensor[(1, 1024), float32] */;
  %6346 = %6342.0 /* ty=Tensor[(1, 1024), float32] */;
  %6347 = %6342.2 /* ty=Tensor[(1, 1024), float32] */;
  %6348 = sigmoid(%6346) /* ty=Tensor[(1, 1024), float32] */;
  %6349 = tanh(%6347) /* ty=Tensor[(1, 1024), float32] */;
  %6350 = multiply(%6345, %6309) /* ty=Tensor[(1, 1024), float32] */;
  %6351 = multiply(%6348, %6349) /* ty=Tensor[(1, 1024), float32] */;
  %6352 = add(%6350, %6351) /* ty=Tensor[(1, 1024), float32] */;
  %6353 = sigmoid(%6343) /* ty=Tensor[(1, 1024), float32] */;
  %6354 = tanh(%6352) /* ty=Tensor[(1, 1024), float32] */;
  %6355 = multiply(%6353, %6354) /* ty=Tensor[(1, 1024), float32] */;
  %6356 = multiply(%6332, %6333) /* ty=Tensor[(1, 1024), float32] */;
  %6357 = (%6355, %6356) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6358 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6359 = concatenate(%6357, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6360 = concatenate(%6358, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6361 = nn.dense(%6359, %6360, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6362 = add(%6361, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6363 = add(%6362, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6364 = split(%6363, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6365 = %6364.3 /* ty=Tensor[(1, 1024), float32] */;
  %6366 = %6364.1 /* ty=Tensor[(1, 1024), float32] */;
  %6367 = sigmoid(%6366) /* ty=Tensor[(1, 1024), float32] */;
  %6368 = %6364.0 /* ty=Tensor[(1, 1024), float32] */;
  %6369 = %6364.2 /* ty=Tensor[(1, 1024), float32] */;
  %6370 = sigmoid(%6368) /* ty=Tensor[(1, 1024), float32] */;
  %6371 = tanh(%6369) /* ty=Tensor[(1, 1024), float32] */;
  %6372 = multiply(%6367, %6331) /* ty=Tensor[(1, 1024), float32] */;
  %6373 = multiply(%6370, %6371) /* ty=Tensor[(1, 1024), float32] */;
  %6374 = add(%6372, %6373) /* ty=Tensor[(1, 1024), float32] */;
  %6375 = sigmoid(%6365) /* ty=Tensor[(1, 1024), float32] */;
  %6376 = tanh(%6374) /* ty=Tensor[(1, 1024), float32] */;
  %6377 = %555.135 /* ty=Tensor[(1, 240), float32] */;
  %6378 = (%6377, %6355) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6379 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6380 = concatenate(%6378, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6381 = concatenate(%6379, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6382 = nn.dense(%6380, %6381, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6383 = add(%6382, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6384 = add(%6383, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6385 = split(%6384, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6386 = %6385.3 /* ty=Tensor[(1, 1024), float32] */;
  %6387 = %6385.1 /* ty=Tensor[(1, 1024), float32] */;
  %6388 = sigmoid(%6387) /* ty=Tensor[(1, 1024), float32] */;
  %6389 = %6385.0 /* ty=Tensor[(1, 1024), float32] */;
  %6390 = %6385.2 /* ty=Tensor[(1, 1024), float32] */;
  %6391 = sigmoid(%6389) /* ty=Tensor[(1, 1024), float32] */;
  %6392 = tanh(%6390) /* ty=Tensor[(1, 1024), float32] */;
  %6393 = multiply(%6388, %6352) /* ty=Tensor[(1, 1024), float32] */;
  %6394 = multiply(%6391, %6392) /* ty=Tensor[(1, 1024), float32] */;
  %6395 = add(%6393, %6394) /* ty=Tensor[(1, 1024), float32] */;
  %6396 = sigmoid(%6386) /* ty=Tensor[(1, 1024), float32] */;
  %6397 = tanh(%6395) /* ty=Tensor[(1, 1024), float32] */;
  %6398 = multiply(%6396, %6397) /* ty=Tensor[(1, 1024), float32] */;
  %6399 = multiply(%6375, %6376) /* ty=Tensor[(1, 1024), float32] */;
  %6400 = (%6398, %6399) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6401 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6402 = concatenate(%6400, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6403 = concatenate(%6401, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6404 = nn.dense(%6402, %6403, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6405 = add(%6404, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6406 = add(%6405, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6407 = split(%6406, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6408 = %6407.3 /* ty=Tensor[(1, 1024), float32] */;
  %6409 = %6407.1 /* ty=Tensor[(1, 1024), float32] */;
  %6410 = sigmoid(%6409) /* ty=Tensor[(1, 1024), float32] */;
  %6411 = %6407.0 /* ty=Tensor[(1, 1024), float32] */;
  %6412 = %6407.2 /* ty=Tensor[(1, 1024), float32] */;
  %6413 = sigmoid(%6411) /* ty=Tensor[(1, 1024), float32] */;
  %6414 = tanh(%6412) /* ty=Tensor[(1, 1024), float32] */;
  %6415 = multiply(%6410, %6374) /* ty=Tensor[(1, 1024), float32] */;
  %6416 = multiply(%6413, %6414) /* ty=Tensor[(1, 1024), float32] */;
  %6417 = add(%6415, %6416) /* ty=Tensor[(1, 1024), float32] */;
  %6418 = sigmoid(%6408) /* ty=Tensor[(1, 1024), float32] */;
  %6419 = tanh(%6417) /* ty=Tensor[(1, 1024), float32] */;
  %6420 = %555.136 /* ty=Tensor[(1, 240), float32] */;
  %6421 = (%6420, %6398) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6422 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6423 = concatenate(%6421, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6424 = concatenate(%6422, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6425 = nn.dense(%6423, %6424, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6426 = add(%6425, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6427 = add(%6426, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6428 = split(%6427, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6429 = %6428.3 /* ty=Tensor[(1, 1024), float32] */;
  %6430 = %6428.1 /* ty=Tensor[(1, 1024), float32] */;
  %6431 = sigmoid(%6430) /* ty=Tensor[(1, 1024), float32] */;
  %6432 = %6428.0 /* ty=Tensor[(1, 1024), float32] */;
  %6433 = %6428.2 /* ty=Tensor[(1, 1024), float32] */;
  %6434 = sigmoid(%6432) /* ty=Tensor[(1, 1024), float32] */;
  %6435 = tanh(%6433) /* ty=Tensor[(1, 1024), float32] */;
  %6436 = multiply(%6431, %6395) /* ty=Tensor[(1, 1024), float32] */;
  %6437 = multiply(%6434, %6435) /* ty=Tensor[(1, 1024), float32] */;
  %6438 = add(%6436, %6437) /* ty=Tensor[(1, 1024), float32] */;
  %6439 = sigmoid(%6429) /* ty=Tensor[(1, 1024), float32] */;
  %6440 = tanh(%6438) /* ty=Tensor[(1, 1024), float32] */;
  %6441 = multiply(%6439, %6440) /* ty=Tensor[(1, 1024), float32] */;
  %6442 = multiply(%6418, %6419) /* ty=Tensor[(1, 1024), float32] */;
  %6443 = (%6441, %6442) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6444 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6445 = concatenate(%6443, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6446 = concatenate(%6444, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6447 = nn.dense(%6445, %6446, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6448 = add(%6447, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6449 = add(%6448, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6450 = split(%6449, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6451 = %6450.3 /* ty=Tensor[(1, 1024), float32] */;
  %6452 = %6450.1 /* ty=Tensor[(1, 1024), float32] */;
  %6453 = sigmoid(%6452) /* ty=Tensor[(1, 1024), float32] */;
  %6454 = %6450.0 /* ty=Tensor[(1, 1024), float32] */;
  %6455 = %6450.2 /* ty=Tensor[(1, 1024), float32] */;
  %6456 = sigmoid(%6454) /* ty=Tensor[(1, 1024), float32] */;
  %6457 = tanh(%6455) /* ty=Tensor[(1, 1024), float32] */;
  %6458 = multiply(%6453, %6417) /* ty=Tensor[(1, 1024), float32] */;
  %6459 = multiply(%6456, %6457) /* ty=Tensor[(1, 1024), float32] */;
  %6460 = add(%6458, %6459) /* ty=Tensor[(1, 1024), float32] */;
  %6461 = sigmoid(%6451) /* ty=Tensor[(1, 1024), float32] */;
  %6462 = tanh(%6460) /* ty=Tensor[(1, 1024), float32] */;
  %6463 = %555.137 /* ty=Tensor[(1, 240), float32] */;
  %6464 = (%6463, %6441) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6465 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6466 = concatenate(%6464, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6467 = concatenate(%6465, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6468 = nn.dense(%6466, %6467, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6469 = add(%6468, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6470 = add(%6469, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6471 = split(%6470, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6472 = %6471.3 /* ty=Tensor[(1, 1024), float32] */;
  %6473 = %6471.1 /* ty=Tensor[(1, 1024), float32] */;
  %6474 = sigmoid(%6473) /* ty=Tensor[(1, 1024), float32] */;
  %6475 = %6471.0 /* ty=Tensor[(1, 1024), float32] */;
  %6476 = %6471.2 /* ty=Tensor[(1, 1024), float32] */;
  %6477 = sigmoid(%6475) /* ty=Tensor[(1, 1024), float32] */;
  %6478 = tanh(%6476) /* ty=Tensor[(1, 1024), float32] */;
  %6479 = multiply(%6474, %6438) /* ty=Tensor[(1, 1024), float32] */;
  %6480 = multiply(%6477, %6478) /* ty=Tensor[(1, 1024), float32] */;
  %6481 = add(%6479, %6480) /* ty=Tensor[(1, 1024), float32] */;
  %6482 = sigmoid(%6472) /* ty=Tensor[(1, 1024), float32] */;
  %6483 = tanh(%6481) /* ty=Tensor[(1, 1024), float32] */;
  %6484 = multiply(%6482, %6483) /* ty=Tensor[(1, 1024), float32] */;
  %6485 = multiply(%6461, %6462) /* ty=Tensor[(1, 1024), float32] */;
  %6486 = (%6484, %6485) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6487 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6488 = concatenate(%6486, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6489 = concatenate(%6487, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6490 = nn.dense(%6488, %6489, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6491 = add(%6490, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6492 = add(%6491, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6493 = split(%6492, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6494 = %6493.3 /* ty=Tensor[(1, 1024), float32] */;
  %6495 = %6493.1 /* ty=Tensor[(1, 1024), float32] */;
  %6496 = sigmoid(%6495) /* ty=Tensor[(1, 1024), float32] */;
  %6497 = %6493.0 /* ty=Tensor[(1, 1024), float32] */;
  %6498 = %6493.2 /* ty=Tensor[(1, 1024), float32] */;
  %6499 = sigmoid(%6497) /* ty=Tensor[(1, 1024), float32] */;
  %6500 = tanh(%6498) /* ty=Tensor[(1, 1024), float32] */;
  %6501 = multiply(%6496, %6460) /* ty=Tensor[(1, 1024), float32] */;
  %6502 = multiply(%6499, %6500) /* ty=Tensor[(1, 1024), float32] */;
  %6503 = add(%6501, %6502) /* ty=Tensor[(1, 1024), float32] */;
  %6504 = sigmoid(%6494) /* ty=Tensor[(1, 1024), float32] */;
  %6505 = tanh(%6503) /* ty=Tensor[(1, 1024), float32] */;
  %6506 = %555.138 /* ty=Tensor[(1, 240), float32] */;
  %6507 = (%6506, %6484) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6508 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6509 = concatenate(%6507, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6510 = concatenate(%6508, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6511 = nn.dense(%6509, %6510, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6512 = add(%6511, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6513 = add(%6512, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6514 = split(%6513, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6515 = %6514.3 /* ty=Tensor[(1, 1024), float32] */;
  %6516 = %6514.1 /* ty=Tensor[(1, 1024), float32] */;
  %6517 = sigmoid(%6516) /* ty=Tensor[(1, 1024), float32] */;
  %6518 = %6514.0 /* ty=Tensor[(1, 1024), float32] */;
  %6519 = %6514.2 /* ty=Tensor[(1, 1024), float32] */;
  %6520 = sigmoid(%6518) /* ty=Tensor[(1, 1024), float32] */;
  %6521 = tanh(%6519) /* ty=Tensor[(1, 1024), float32] */;
  %6522 = multiply(%6517, %6481) /* ty=Tensor[(1, 1024), float32] */;
  %6523 = multiply(%6520, %6521) /* ty=Tensor[(1, 1024), float32] */;
  %6524 = add(%6522, %6523) /* ty=Tensor[(1, 1024), float32] */;
  %6525 = sigmoid(%6515) /* ty=Tensor[(1, 1024), float32] */;
  %6526 = tanh(%6524) /* ty=Tensor[(1, 1024), float32] */;
  %6527 = multiply(%6525, %6526) /* ty=Tensor[(1, 1024), float32] */;
  %6528 = multiply(%6504, %6505) /* ty=Tensor[(1, 1024), float32] */;
  %6529 = (%6527, %6528) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6530 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6531 = concatenate(%6529, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6532 = concatenate(%6530, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6533 = nn.dense(%6531, %6532, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6534 = add(%6533, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6535 = add(%6534, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6536 = split(%6535, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6537 = %6536.3 /* ty=Tensor[(1, 1024), float32] */;
  %6538 = %6536.1 /* ty=Tensor[(1, 1024), float32] */;
  %6539 = sigmoid(%6538) /* ty=Tensor[(1, 1024), float32] */;
  %6540 = %6536.0 /* ty=Tensor[(1, 1024), float32] */;
  %6541 = %6536.2 /* ty=Tensor[(1, 1024), float32] */;
  %6542 = sigmoid(%6540) /* ty=Tensor[(1, 1024), float32] */;
  %6543 = tanh(%6541) /* ty=Tensor[(1, 1024), float32] */;
  %6544 = multiply(%6539, %6503) /* ty=Tensor[(1, 1024), float32] */;
  %6545 = multiply(%6542, %6543) /* ty=Tensor[(1, 1024), float32] */;
  %6546 = add(%6544, %6545) /* ty=Tensor[(1, 1024), float32] */;
  %6547 = sigmoid(%6537) /* ty=Tensor[(1, 1024), float32] */;
  %6548 = tanh(%6546) /* ty=Tensor[(1, 1024), float32] */;
  %6549 = %555.139 /* ty=Tensor[(1, 240), float32] */;
  %6550 = (%6549, %6527) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6551 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6552 = concatenate(%6550, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6553 = concatenate(%6551, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6554 = nn.dense(%6552, %6553, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6555 = add(%6554, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6556 = add(%6555, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6557 = split(%6556, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6558 = %6557.3 /* ty=Tensor[(1, 1024), float32] */;
  %6559 = %6557.1 /* ty=Tensor[(1, 1024), float32] */;
  %6560 = sigmoid(%6559) /* ty=Tensor[(1, 1024), float32] */;
  %6561 = %6557.0 /* ty=Tensor[(1, 1024), float32] */;
  %6562 = %6557.2 /* ty=Tensor[(1, 1024), float32] */;
  %6563 = sigmoid(%6561) /* ty=Tensor[(1, 1024), float32] */;
  %6564 = tanh(%6562) /* ty=Tensor[(1, 1024), float32] */;
  %6565 = multiply(%6560, %6524) /* ty=Tensor[(1, 1024), float32] */;
  %6566 = multiply(%6563, %6564) /* ty=Tensor[(1, 1024), float32] */;
  %6567 = add(%6565, %6566) /* ty=Tensor[(1, 1024), float32] */;
  %6568 = sigmoid(%6558) /* ty=Tensor[(1, 1024), float32] */;
  %6569 = tanh(%6567) /* ty=Tensor[(1, 1024), float32] */;
  %6570 = multiply(%6568, %6569) /* ty=Tensor[(1, 1024), float32] */;
  %6571 = multiply(%6547, %6548) /* ty=Tensor[(1, 1024), float32] */;
  %6572 = (%6570, %6571) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6573 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6574 = concatenate(%6572, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6575 = concatenate(%6573, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6576 = nn.dense(%6574, %6575, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6577 = add(%6576, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6578 = add(%6577, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6579 = split(%6578, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6580 = %6579.3 /* ty=Tensor[(1, 1024), float32] */;
  %6581 = %6579.1 /* ty=Tensor[(1, 1024), float32] */;
  %6582 = sigmoid(%6581) /* ty=Tensor[(1, 1024), float32] */;
  %6583 = %6579.0 /* ty=Tensor[(1, 1024), float32] */;
  %6584 = %6579.2 /* ty=Tensor[(1, 1024), float32] */;
  %6585 = sigmoid(%6583) /* ty=Tensor[(1, 1024), float32] */;
  %6586 = tanh(%6584) /* ty=Tensor[(1, 1024), float32] */;
  %6587 = multiply(%6582, %6546) /* ty=Tensor[(1, 1024), float32] */;
  %6588 = multiply(%6585, %6586) /* ty=Tensor[(1, 1024), float32] */;
  %6589 = add(%6587, %6588) /* ty=Tensor[(1, 1024), float32] */;
  %6590 = sigmoid(%6580) /* ty=Tensor[(1, 1024), float32] */;
  %6591 = tanh(%6589) /* ty=Tensor[(1, 1024), float32] */;
  %6592 = %555.140 /* ty=Tensor[(1, 240), float32] */;
  %6593 = (%6592, %6570) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6594 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6595 = concatenate(%6593, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6596 = concatenate(%6594, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6597 = nn.dense(%6595, %6596, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6598 = add(%6597, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6599 = add(%6598, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6600 = split(%6599, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6601 = %6600.3 /* ty=Tensor[(1, 1024), float32] */;
  %6602 = %6600.1 /* ty=Tensor[(1, 1024), float32] */;
  %6603 = sigmoid(%6602) /* ty=Tensor[(1, 1024), float32] */;
  %6604 = %6600.0 /* ty=Tensor[(1, 1024), float32] */;
  %6605 = %6600.2 /* ty=Tensor[(1, 1024), float32] */;
  %6606 = sigmoid(%6604) /* ty=Tensor[(1, 1024), float32] */;
  %6607 = tanh(%6605) /* ty=Tensor[(1, 1024), float32] */;
  %6608 = multiply(%6603, %6567) /* ty=Tensor[(1, 1024), float32] */;
  %6609 = multiply(%6606, %6607) /* ty=Tensor[(1, 1024), float32] */;
  %6610 = add(%6608, %6609) /* ty=Tensor[(1, 1024), float32] */;
  %6611 = sigmoid(%6601) /* ty=Tensor[(1, 1024), float32] */;
  %6612 = tanh(%6610) /* ty=Tensor[(1, 1024), float32] */;
  %6613 = multiply(%6611, %6612) /* ty=Tensor[(1, 1024), float32] */;
  %6614 = multiply(%6590, %6591) /* ty=Tensor[(1, 1024), float32] */;
  %6615 = (%6613, %6614) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6616 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6617 = concatenate(%6615, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6618 = concatenate(%6616, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6619 = nn.dense(%6617, %6618, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6620 = add(%6619, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6621 = add(%6620, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6622 = split(%6621, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6623 = %6622.3 /* ty=Tensor[(1, 1024), float32] */;
  %6624 = %6622.1 /* ty=Tensor[(1, 1024), float32] */;
  %6625 = sigmoid(%6624) /* ty=Tensor[(1, 1024), float32] */;
  %6626 = %6622.0 /* ty=Tensor[(1, 1024), float32] */;
  %6627 = %6622.2 /* ty=Tensor[(1, 1024), float32] */;
  %6628 = sigmoid(%6626) /* ty=Tensor[(1, 1024), float32] */;
  %6629 = tanh(%6627) /* ty=Tensor[(1, 1024), float32] */;
  %6630 = multiply(%6625, %6589) /* ty=Tensor[(1, 1024), float32] */;
  %6631 = multiply(%6628, %6629) /* ty=Tensor[(1, 1024), float32] */;
  %6632 = add(%6630, %6631) /* ty=Tensor[(1, 1024), float32] */;
  %6633 = sigmoid(%6623) /* ty=Tensor[(1, 1024), float32] */;
  %6634 = tanh(%6632) /* ty=Tensor[(1, 1024), float32] */;
  %6635 = %555.141 /* ty=Tensor[(1, 240), float32] */;
  %6636 = (%6635, %6613) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6637 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6638 = concatenate(%6636, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6639 = concatenate(%6637, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6640 = nn.dense(%6638, %6639, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6641 = add(%6640, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6642 = add(%6641, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6643 = split(%6642, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6644 = %6643.3 /* ty=Tensor[(1, 1024), float32] */;
  %6645 = %6643.1 /* ty=Tensor[(1, 1024), float32] */;
  %6646 = sigmoid(%6645) /* ty=Tensor[(1, 1024), float32] */;
  %6647 = %6643.0 /* ty=Tensor[(1, 1024), float32] */;
  %6648 = %6643.2 /* ty=Tensor[(1, 1024), float32] */;
  %6649 = sigmoid(%6647) /* ty=Tensor[(1, 1024), float32] */;
  %6650 = tanh(%6648) /* ty=Tensor[(1, 1024), float32] */;
  %6651 = multiply(%6646, %6610) /* ty=Tensor[(1, 1024), float32] */;
  %6652 = multiply(%6649, %6650) /* ty=Tensor[(1, 1024), float32] */;
  %6653 = add(%6651, %6652) /* ty=Tensor[(1, 1024), float32] */;
  %6654 = sigmoid(%6644) /* ty=Tensor[(1, 1024), float32] */;
  %6655 = tanh(%6653) /* ty=Tensor[(1, 1024), float32] */;
  %6656 = multiply(%6654, %6655) /* ty=Tensor[(1, 1024), float32] */;
  %6657 = multiply(%6633, %6634) /* ty=Tensor[(1, 1024), float32] */;
  %6658 = (%6656, %6657) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6659 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6660 = concatenate(%6658, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6661 = concatenate(%6659, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6662 = nn.dense(%6660, %6661, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6663 = add(%6662, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6664 = add(%6663, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6665 = split(%6664, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6666 = %6665.3 /* ty=Tensor[(1, 1024), float32] */;
  %6667 = %6665.1 /* ty=Tensor[(1, 1024), float32] */;
  %6668 = sigmoid(%6667) /* ty=Tensor[(1, 1024), float32] */;
  %6669 = %6665.0 /* ty=Tensor[(1, 1024), float32] */;
  %6670 = %6665.2 /* ty=Tensor[(1, 1024), float32] */;
  %6671 = sigmoid(%6669) /* ty=Tensor[(1, 1024), float32] */;
  %6672 = tanh(%6670) /* ty=Tensor[(1, 1024), float32] */;
  %6673 = multiply(%6668, %6632) /* ty=Tensor[(1, 1024), float32] */;
  %6674 = multiply(%6671, %6672) /* ty=Tensor[(1, 1024), float32] */;
  %6675 = add(%6673, %6674) /* ty=Tensor[(1, 1024), float32] */;
  %6676 = sigmoid(%6666) /* ty=Tensor[(1, 1024), float32] */;
  %6677 = tanh(%6675) /* ty=Tensor[(1, 1024), float32] */;
  %6678 = %555.142 /* ty=Tensor[(1, 240), float32] */;
  %6679 = (%6678, %6656) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6680 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6681 = concatenate(%6679, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6682 = concatenate(%6680, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6683 = nn.dense(%6681, %6682, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6684 = add(%6683, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6685 = add(%6684, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6686 = split(%6685, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6687 = %6686.3 /* ty=Tensor[(1, 1024), float32] */;
  %6688 = %6686.1 /* ty=Tensor[(1, 1024), float32] */;
  %6689 = sigmoid(%6688) /* ty=Tensor[(1, 1024), float32] */;
  %6690 = %6686.0 /* ty=Tensor[(1, 1024), float32] */;
  %6691 = %6686.2 /* ty=Tensor[(1, 1024), float32] */;
  %6692 = sigmoid(%6690) /* ty=Tensor[(1, 1024), float32] */;
  %6693 = tanh(%6691) /* ty=Tensor[(1, 1024), float32] */;
  %6694 = multiply(%6689, %6653) /* ty=Tensor[(1, 1024), float32] */;
  %6695 = multiply(%6692, %6693) /* ty=Tensor[(1, 1024), float32] */;
  %6696 = add(%6694, %6695) /* ty=Tensor[(1, 1024), float32] */;
  %6697 = sigmoid(%6687) /* ty=Tensor[(1, 1024), float32] */;
  %6698 = tanh(%6696) /* ty=Tensor[(1, 1024), float32] */;
  %6699 = multiply(%6697, %6698) /* ty=Tensor[(1, 1024), float32] */;
  %6700 = multiply(%6676, %6677) /* ty=Tensor[(1, 1024), float32] */;
  %6701 = (%6699, %6700) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6702 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6703 = concatenate(%6701, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6704 = concatenate(%6702, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6705 = nn.dense(%6703, %6704, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6706 = add(%6705, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6707 = add(%6706, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6708 = split(%6707, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6709 = %6708.3 /* ty=Tensor[(1, 1024), float32] */;
  %6710 = %6708.1 /* ty=Tensor[(1, 1024), float32] */;
  %6711 = sigmoid(%6710) /* ty=Tensor[(1, 1024), float32] */;
  %6712 = %6708.0 /* ty=Tensor[(1, 1024), float32] */;
  %6713 = %6708.2 /* ty=Tensor[(1, 1024), float32] */;
  %6714 = sigmoid(%6712) /* ty=Tensor[(1, 1024), float32] */;
  %6715 = tanh(%6713) /* ty=Tensor[(1, 1024), float32] */;
  %6716 = multiply(%6711, %6675) /* ty=Tensor[(1, 1024), float32] */;
  %6717 = multiply(%6714, %6715) /* ty=Tensor[(1, 1024), float32] */;
  %6718 = add(%6716, %6717) /* ty=Tensor[(1, 1024), float32] */;
  %6719 = sigmoid(%6709) /* ty=Tensor[(1, 1024), float32] */;
  %6720 = tanh(%6718) /* ty=Tensor[(1, 1024), float32] */;
  %6721 = %555.143 /* ty=Tensor[(1, 240), float32] */;
  %6722 = (%6721, %6699) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6723 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6724 = concatenate(%6722, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6725 = concatenate(%6723, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6726 = nn.dense(%6724, %6725, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6727 = add(%6726, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6728 = add(%6727, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6729 = split(%6728, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6730 = %6729.3 /* ty=Tensor[(1, 1024), float32] */;
  %6731 = %6729.1 /* ty=Tensor[(1, 1024), float32] */;
  %6732 = sigmoid(%6731) /* ty=Tensor[(1, 1024), float32] */;
  %6733 = %6729.0 /* ty=Tensor[(1, 1024), float32] */;
  %6734 = %6729.2 /* ty=Tensor[(1, 1024), float32] */;
  %6735 = sigmoid(%6733) /* ty=Tensor[(1, 1024), float32] */;
  %6736 = tanh(%6734) /* ty=Tensor[(1, 1024), float32] */;
  %6737 = multiply(%6732, %6696) /* ty=Tensor[(1, 1024), float32] */;
  %6738 = multiply(%6735, %6736) /* ty=Tensor[(1, 1024), float32] */;
  %6739 = add(%6737, %6738) /* ty=Tensor[(1, 1024), float32] */;
  %6740 = sigmoid(%6730) /* ty=Tensor[(1, 1024), float32] */;
  %6741 = tanh(%6739) /* ty=Tensor[(1, 1024), float32] */;
  %6742 = multiply(%6740, %6741) /* ty=Tensor[(1, 1024), float32] */;
  %6743 = multiply(%6719, %6720) /* ty=Tensor[(1, 1024), float32] */;
  %6744 = (%6742, %6743) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6745 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6746 = concatenate(%6744, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6747 = concatenate(%6745, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6748 = nn.dense(%6746, %6747, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6749 = add(%6748, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6750 = add(%6749, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6751 = split(%6750, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6752 = %6751.3 /* ty=Tensor[(1, 1024), float32] */;
  %6753 = %6751.1 /* ty=Tensor[(1, 1024), float32] */;
  %6754 = sigmoid(%6753) /* ty=Tensor[(1, 1024), float32] */;
  %6755 = %6751.0 /* ty=Tensor[(1, 1024), float32] */;
  %6756 = %6751.2 /* ty=Tensor[(1, 1024), float32] */;
  %6757 = sigmoid(%6755) /* ty=Tensor[(1, 1024), float32] */;
  %6758 = tanh(%6756) /* ty=Tensor[(1, 1024), float32] */;
  %6759 = multiply(%6754, %6718) /* ty=Tensor[(1, 1024), float32] */;
  %6760 = multiply(%6757, %6758) /* ty=Tensor[(1, 1024), float32] */;
  %6761 = add(%6759, %6760) /* ty=Tensor[(1, 1024), float32] */;
  %6762 = sigmoid(%6752) /* ty=Tensor[(1, 1024), float32] */;
  %6763 = tanh(%6761) /* ty=Tensor[(1, 1024), float32] */;
  %6764 = %555.144 /* ty=Tensor[(1, 240), float32] */;
  %6765 = (%6764, %6742) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6766 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6767 = concatenate(%6765, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6768 = concatenate(%6766, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6769 = nn.dense(%6767, %6768, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6770 = add(%6769, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6771 = add(%6770, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6772 = split(%6771, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6773 = %6772.3 /* ty=Tensor[(1, 1024), float32] */;
  %6774 = %6772.1 /* ty=Tensor[(1, 1024), float32] */;
  %6775 = sigmoid(%6774) /* ty=Tensor[(1, 1024), float32] */;
  %6776 = %6772.0 /* ty=Tensor[(1, 1024), float32] */;
  %6777 = %6772.2 /* ty=Tensor[(1, 1024), float32] */;
  %6778 = sigmoid(%6776) /* ty=Tensor[(1, 1024), float32] */;
  %6779 = tanh(%6777) /* ty=Tensor[(1, 1024), float32] */;
  %6780 = multiply(%6775, %6739) /* ty=Tensor[(1, 1024), float32] */;
  %6781 = multiply(%6778, %6779) /* ty=Tensor[(1, 1024), float32] */;
  %6782 = add(%6780, %6781) /* ty=Tensor[(1, 1024), float32] */;
  %6783 = sigmoid(%6773) /* ty=Tensor[(1, 1024), float32] */;
  %6784 = tanh(%6782) /* ty=Tensor[(1, 1024), float32] */;
  %6785 = multiply(%6783, %6784) /* ty=Tensor[(1, 1024), float32] */;
  %6786 = multiply(%6762, %6763) /* ty=Tensor[(1, 1024), float32] */;
  %6787 = (%6785, %6786) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6788 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6789 = concatenate(%6787, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6790 = concatenate(%6788, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6791 = nn.dense(%6789, %6790, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6792 = add(%6791, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6793 = add(%6792, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6794 = split(%6793, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6795 = %6794.3 /* ty=Tensor[(1, 1024), float32] */;
  %6796 = %6794.1 /* ty=Tensor[(1, 1024), float32] */;
  %6797 = sigmoid(%6796) /* ty=Tensor[(1, 1024), float32] */;
  %6798 = %6794.0 /* ty=Tensor[(1, 1024), float32] */;
  %6799 = %6794.2 /* ty=Tensor[(1, 1024), float32] */;
  %6800 = sigmoid(%6798) /* ty=Tensor[(1, 1024), float32] */;
  %6801 = tanh(%6799) /* ty=Tensor[(1, 1024), float32] */;
  %6802 = multiply(%6797, %6761) /* ty=Tensor[(1, 1024), float32] */;
  %6803 = multiply(%6800, %6801) /* ty=Tensor[(1, 1024), float32] */;
  %6804 = add(%6802, %6803) /* ty=Tensor[(1, 1024), float32] */;
  %6805 = sigmoid(%6795) /* ty=Tensor[(1, 1024), float32] */;
  %6806 = tanh(%6804) /* ty=Tensor[(1, 1024), float32] */;
  %6807 = %555.145 /* ty=Tensor[(1, 240), float32] */;
  %6808 = (%6807, %6785) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6809 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6810 = concatenate(%6808, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6811 = concatenate(%6809, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6812 = nn.dense(%6810, %6811, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6813 = add(%6812, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6814 = add(%6813, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6815 = split(%6814, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6816 = %6815.3 /* ty=Tensor[(1, 1024), float32] */;
  %6817 = %6815.1 /* ty=Tensor[(1, 1024), float32] */;
  %6818 = sigmoid(%6817) /* ty=Tensor[(1, 1024), float32] */;
  %6819 = %6815.0 /* ty=Tensor[(1, 1024), float32] */;
  %6820 = %6815.2 /* ty=Tensor[(1, 1024), float32] */;
  %6821 = sigmoid(%6819) /* ty=Tensor[(1, 1024), float32] */;
  %6822 = tanh(%6820) /* ty=Tensor[(1, 1024), float32] */;
  %6823 = multiply(%6818, %6782) /* ty=Tensor[(1, 1024), float32] */;
  %6824 = multiply(%6821, %6822) /* ty=Tensor[(1, 1024), float32] */;
  %6825 = add(%6823, %6824) /* ty=Tensor[(1, 1024), float32] */;
  %6826 = sigmoid(%6816) /* ty=Tensor[(1, 1024), float32] */;
  %6827 = tanh(%6825) /* ty=Tensor[(1, 1024), float32] */;
  %6828 = multiply(%6826, %6827) /* ty=Tensor[(1, 1024), float32] */;
  %6829 = multiply(%6805, %6806) /* ty=Tensor[(1, 1024), float32] */;
  %6830 = (%6828, %6829) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6831 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6832 = concatenate(%6830, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6833 = concatenate(%6831, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6834 = nn.dense(%6832, %6833, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6835 = add(%6834, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6836 = add(%6835, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6837 = split(%6836, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6838 = %6837.3 /* ty=Tensor[(1, 1024), float32] */;
  %6839 = %6837.1 /* ty=Tensor[(1, 1024), float32] */;
  %6840 = sigmoid(%6839) /* ty=Tensor[(1, 1024), float32] */;
  %6841 = %6837.0 /* ty=Tensor[(1, 1024), float32] */;
  %6842 = %6837.2 /* ty=Tensor[(1, 1024), float32] */;
  %6843 = sigmoid(%6841) /* ty=Tensor[(1, 1024), float32] */;
  %6844 = tanh(%6842) /* ty=Tensor[(1, 1024), float32] */;
  %6845 = multiply(%6840, %6804) /* ty=Tensor[(1, 1024), float32] */;
  %6846 = multiply(%6843, %6844) /* ty=Tensor[(1, 1024), float32] */;
  %6847 = add(%6845, %6846) /* ty=Tensor[(1, 1024), float32] */;
  %6848 = sigmoid(%6838) /* ty=Tensor[(1, 1024), float32] */;
  %6849 = tanh(%6847) /* ty=Tensor[(1, 1024), float32] */;
  %6850 = %555.146 /* ty=Tensor[(1, 240), float32] */;
  %6851 = (%6850, %6828) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6852 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6853 = concatenate(%6851, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6854 = concatenate(%6852, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6855 = nn.dense(%6853, %6854, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6856 = add(%6855, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6857 = add(%6856, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6858 = split(%6857, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6859 = %6858.3 /* ty=Tensor[(1, 1024), float32] */;
  %6860 = %6858.1 /* ty=Tensor[(1, 1024), float32] */;
  %6861 = sigmoid(%6860) /* ty=Tensor[(1, 1024), float32] */;
  %6862 = %6858.0 /* ty=Tensor[(1, 1024), float32] */;
  %6863 = %6858.2 /* ty=Tensor[(1, 1024), float32] */;
  %6864 = sigmoid(%6862) /* ty=Tensor[(1, 1024), float32] */;
  %6865 = tanh(%6863) /* ty=Tensor[(1, 1024), float32] */;
  %6866 = multiply(%6861, %6825) /* ty=Tensor[(1, 1024), float32] */;
  %6867 = multiply(%6864, %6865) /* ty=Tensor[(1, 1024), float32] */;
  %6868 = add(%6866, %6867) /* ty=Tensor[(1, 1024), float32] */;
  %6869 = sigmoid(%6859) /* ty=Tensor[(1, 1024), float32] */;
  %6870 = tanh(%6868) /* ty=Tensor[(1, 1024), float32] */;
  %6871 = multiply(%6869, %6870) /* ty=Tensor[(1, 1024), float32] */;
  %6872 = multiply(%6848, %6849) /* ty=Tensor[(1, 1024), float32] */;
  %6873 = (%6871, %6872) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6874 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6875 = concatenate(%6873, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6876 = concatenate(%6874, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6877 = nn.dense(%6875, %6876, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6878 = add(%6877, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6879 = add(%6878, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6880 = split(%6879, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6881 = %6880.3 /* ty=Tensor[(1, 1024), float32] */;
  %6882 = %6880.1 /* ty=Tensor[(1, 1024), float32] */;
  %6883 = sigmoid(%6882) /* ty=Tensor[(1, 1024), float32] */;
  %6884 = %6880.0 /* ty=Tensor[(1, 1024), float32] */;
  %6885 = %6880.2 /* ty=Tensor[(1, 1024), float32] */;
  %6886 = sigmoid(%6884) /* ty=Tensor[(1, 1024), float32] */;
  %6887 = tanh(%6885) /* ty=Tensor[(1, 1024), float32] */;
  %6888 = multiply(%6883, %6847) /* ty=Tensor[(1, 1024), float32] */;
  %6889 = multiply(%6886, %6887) /* ty=Tensor[(1, 1024), float32] */;
  %6890 = add(%6888, %6889) /* ty=Tensor[(1, 1024), float32] */;
  %6891 = sigmoid(%6881) /* ty=Tensor[(1, 1024), float32] */;
  %6892 = tanh(%6890) /* ty=Tensor[(1, 1024), float32] */;
  %6893 = %555.147 /* ty=Tensor[(1, 240), float32] */;
  %6894 = (%6893, %6871) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6895 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6896 = concatenate(%6894, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6897 = concatenate(%6895, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6898 = nn.dense(%6896, %6897, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6899 = add(%6898, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6900 = add(%6899, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6901 = split(%6900, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6902 = %6901.3 /* ty=Tensor[(1, 1024), float32] */;
  %6903 = %6901.1 /* ty=Tensor[(1, 1024), float32] */;
  %6904 = sigmoid(%6903) /* ty=Tensor[(1, 1024), float32] */;
  %6905 = %6901.0 /* ty=Tensor[(1, 1024), float32] */;
  %6906 = %6901.2 /* ty=Tensor[(1, 1024), float32] */;
  %6907 = sigmoid(%6905) /* ty=Tensor[(1, 1024), float32] */;
  %6908 = tanh(%6906) /* ty=Tensor[(1, 1024), float32] */;
  %6909 = multiply(%6904, %6868) /* ty=Tensor[(1, 1024), float32] */;
  %6910 = multiply(%6907, %6908) /* ty=Tensor[(1, 1024), float32] */;
  %6911 = add(%6909, %6910) /* ty=Tensor[(1, 1024), float32] */;
  %6912 = sigmoid(%6902) /* ty=Tensor[(1, 1024), float32] */;
  %6913 = tanh(%6911) /* ty=Tensor[(1, 1024), float32] */;
  %6914 = multiply(%6912, %6913) /* ty=Tensor[(1, 1024), float32] */;
  %6915 = multiply(%6891, %6892) /* ty=Tensor[(1, 1024), float32] */;
  %6916 = (%6914, %6915) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6917 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6918 = concatenate(%6916, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6919 = concatenate(%6917, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6920 = nn.dense(%6918, %6919, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6921 = add(%6920, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6922 = add(%6921, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6923 = split(%6922, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6924 = %6923.3 /* ty=Tensor[(1, 1024), float32] */;
  %6925 = %6923.1 /* ty=Tensor[(1, 1024), float32] */;
  %6926 = sigmoid(%6925) /* ty=Tensor[(1, 1024), float32] */;
  %6927 = %6923.0 /* ty=Tensor[(1, 1024), float32] */;
  %6928 = %6923.2 /* ty=Tensor[(1, 1024), float32] */;
  %6929 = sigmoid(%6927) /* ty=Tensor[(1, 1024), float32] */;
  %6930 = tanh(%6928) /* ty=Tensor[(1, 1024), float32] */;
  %6931 = multiply(%6926, %6890) /* ty=Tensor[(1, 1024), float32] */;
  %6932 = multiply(%6929, %6930) /* ty=Tensor[(1, 1024), float32] */;
  %6933 = add(%6931, %6932) /* ty=Tensor[(1, 1024), float32] */;
  %6934 = sigmoid(%6924) /* ty=Tensor[(1, 1024), float32] */;
  %6935 = tanh(%6933) /* ty=Tensor[(1, 1024), float32] */;
  %6936 = %555.148 /* ty=Tensor[(1, 240), float32] */;
  %6937 = (%6936, %6914) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6938 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6939 = concatenate(%6937, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6940 = concatenate(%6938, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6941 = nn.dense(%6939, %6940, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6942 = add(%6941, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6943 = add(%6942, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6944 = split(%6943, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6945 = %6944.3 /* ty=Tensor[(1, 1024), float32] */;
  %6946 = %6944.1 /* ty=Tensor[(1, 1024), float32] */;
  %6947 = sigmoid(%6946) /* ty=Tensor[(1, 1024), float32] */;
  %6948 = %6944.0 /* ty=Tensor[(1, 1024), float32] */;
  %6949 = %6944.2 /* ty=Tensor[(1, 1024), float32] */;
  %6950 = sigmoid(%6948) /* ty=Tensor[(1, 1024), float32] */;
  %6951 = tanh(%6949) /* ty=Tensor[(1, 1024), float32] */;
  %6952 = multiply(%6947, %6911) /* ty=Tensor[(1, 1024), float32] */;
  %6953 = multiply(%6950, %6951) /* ty=Tensor[(1, 1024), float32] */;
  %6954 = add(%6952, %6953) /* ty=Tensor[(1, 1024), float32] */;
  %6955 = sigmoid(%6945) /* ty=Tensor[(1, 1024), float32] */;
  %6956 = tanh(%6954) /* ty=Tensor[(1, 1024), float32] */;
  %6957 = multiply(%6955, %6956) /* ty=Tensor[(1, 1024), float32] */;
  %6958 = multiply(%6934, %6935) /* ty=Tensor[(1, 1024), float32] */;
  %6959 = (%6957, %6958) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6960 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %6961 = concatenate(%6959, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %6962 = concatenate(%6960, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %6963 = nn.dense(%6961, %6962, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6964 = add(%6963, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6965 = add(%6964, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %6966 = split(%6965, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6967 = %6966.3 /* ty=Tensor[(1, 1024), float32] */;
  %6968 = %6966.1 /* ty=Tensor[(1, 1024), float32] */;
  %6969 = sigmoid(%6968) /* ty=Tensor[(1, 1024), float32] */;
  %6970 = %6966.0 /* ty=Tensor[(1, 1024), float32] */;
  %6971 = %6966.2 /* ty=Tensor[(1, 1024), float32] */;
  %6972 = sigmoid(%6970) /* ty=Tensor[(1, 1024), float32] */;
  %6973 = tanh(%6971) /* ty=Tensor[(1, 1024), float32] */;
  %6974 = multiply(%6969, %6933) /* ty=Tensor[(1, 1024), float32] */;
  %6975 = multiply(%6972, %6973) /* ty=Tensor[(1, 1024), float32] */;
  %6976 = add(%6974, %6975) /* ty=Tensor[(1, 1024), float32] */;
  %6977 = sigmoid(%6967) /* ty=Tensor[(1, 1024), float32] */;
  %6978 = tanh(%6976) /* ty=Tensor[(1, 1024), float32] */;
  %6979 = %555.149 /* ty=Tensor[(1, 240), float32] */;
  %6980 = (%6979, %6957) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %6981 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %6982 = concatenate(%6980, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %6983 = concatenate(%6981, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %6984 = nn.dense(%6982, %6983, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %6985 = add(%6984, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6986 = add(%6985, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %6987 = split(%6986, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %6988 = %6987.3 /* ty=Tensor[(1, 1024), float32] */;
  %6989 = %6987.1 /* ty=Tensor[(1, 1024), float32] */;
  %6990 = sigmoid(%6989) /* ty=Tensor[(1, 1024), float32] */;
  %6991 = %6987.0 /* ty=Tensor[(1, 1024), float32] */;
  %6992 = %6987.2 /* ty=Tensor[(1, 1024), float32] */;
  %6993 = sigmoid(%6991) /* ty=Tensor[(1, 1024), float32] */;
  %6994 = tanh(%6992) /* ty=Tensor[(1, 1024), float32] */;
  %6995 = multiply(%6990, %6954) /* ty=Tensor[(1, 1024), float32] */;
  %6996 = multiply(%6993, %6994) /* ty=Tensor[(1, 1024), float32] */;
  %6997 = add(%6995, %6996) /* ty=Tensor[(1, 1024), float32] */;
  %6998 = sigmoid(%6988) /* ty=Tensor[(1, 1024), float32] */;
  %6999 = tanh(%6997) /* ty=Tensor[(1, 1024), float32] */;
  %7000 = multiply(%6998, %6999) /* ty=Tensor[(1, 1024), float32] */;
  %7001 = multiply(%6977, %6978) /* ty=Tensor[(1, 1024), float32] */;
  %7002 = (%7000, %7001) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7003 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7004 = concatenate(%7002, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7005 = concatenate(%7003, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7006 = nn.dense(%7004, %7005, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7007 = add(%7006, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7008 = add(%7007, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7009 = split(%7008, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7010 = %7009.3 /* ty=Tensor[(1, 1024), float32] */;
  %7011 = %7009.1 /* ty=Tensor[(1, 1024), float32] */;
  %7012 = sigmoid(%7011) /* ty=Tensor[(1, 1024), float32] */;
  %7013 = %7009.0 /* ty=Tensor[(1, 1024), float32] */;
  %7014 = %7009.2 /* ty=Tensor[(1, 1024), float32] */;
  %7015 = sigmoid(%7013) /* ty=Tensor[(1, 1024), float32] */;
  %7016 = tanh(%7014) /* ty=Tensor[(1, 1024), float32] */;
  %7017 = multiply(%7012, %6976) /* ty=Tensor[(1, 1024), float32] */;
  %7018 = multiply(%7015, %7016) /* ty=Tensor[(1, 1024), float32] */;
  %7019 = add(%7017, %7018) /* ty=Tensor[(1, 1024), float32] */;
  %7020 = sigmoid(%7010) /* ty=Tensor[(1, 1024), float32] */;
  %7021 = tanh(%7019) /* ty=Tensor[(1, 1024), float32] */;
  %7022 = %555.150 /* ty=Tensor[(1, 240), float32] */;
  %7023 = (%7022, %7000) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7024 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7025 = concatenate(%7023, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7026 = concatenate(%7024, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7027 = nn.dense(%7025, %7026, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7028 = add(%7027, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7029 = add(%7028, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7030 = split(%7029, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7031 = %7030.3 /* ty=Tensor[(1, 1024), float32] */;
  %7032 = %7030.1 /* ty=Tensor[(1, 1024), float32] */;
  %7033 = sigmoid(%7032) /* ty=Tensor[(1, 1024), float32] */;
  %7034 = %7030.0 /* ty=Tensor[(1, 1024), float32] */;
  %7035 = %7030.2 /* ty=Tensor[(1, 1024), float32] */;
  %7036 = sigmoid(%7034) /* ty=Tensor[(1, 1024), float32] */;
  %7037 = tanh(%7035) /* ty=Tensor[(1, 1024), float32] */;
  %7038 = multiply(%7033, %6997) /* ty=Tensor[(1, 1024), float32] */;
  %7039 = multiply(%7036, %7037) /* ty=Tensor[(1, 1024), float32] */;
  %7040 = add(%7038, %7039) /* ty=Tensor[(1, 1024), float32] */;
  %7041 = sigmoid(%7031) /* ty=Tensor[(1, 1024), float32] */;
  %7042 = tanh(%7040) /* ty=Tensor[(1, 1024), float32] */;
  %7043 = multiply(%7041, %7042) /* ty=Tensor[(1, 1024), float32] */;
  %7044 = multiply(%7020, %7021) /* ty=Tensor[(1, 1024), float32] */;
  %7045 = (%7043, %7044) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7046 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7047 = concatenate(%7045, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7048 = concatenate(%7046, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7049 = nn.dense(%7047, %7048, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7050 = add(%7049, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7051 = add(%7050, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7052 = split(%7051, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7053 = %7052.3 /* ty=Tensor[(1, 1024), float32] */;
  %7054 = %7052.1 /* ty=Tensor[(1, 1024), float32] */;
  %7055 = sigmoid(%7054) /* ty=Tensor[(1, 1024), float32] */;
  %7056 = %7052.0 /* ty=Tensor[(1, 1024), float32] */;
  %7057 = %7052.2 /* ty=Tensor[(1, 1024), float32] */;
  %7058 = sigmoid(%7056) /* ty=Tensor[(1, 1024), float32] */;
  %7059 = tanh(%7057) /* ty=Tensor[(1, 1024), float32] */;
  %7060 = multiply(%7055, %7019) /* ty=Tensor[(1, 1024), float32] */;
  %7061 = multiply(%7058, %7059) /* ty=Tensor[(1, 1024), float32] */;
  %7062 = add(%7060, %7061) /* ty=Tensor[(1, 1024), float32] */;
  %7063 = sigmoid(%7053) /* ty=Tensor[(1, 1024), float32] */;
  %7064 = tanh(%7062) /* ty=Tensor[(1, 1024), float32] */;
  %7065 = %555.151 /* ty=Tensor[(1, 240), float32] */;
  %7066 = (%7065, %7043) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7067 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7068 = concatenate(%7066, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7069 = concatenate(%7067, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7070 = nn.dense(%7068, %7069, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7071 = add(%7070, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7072 = add(%7071, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7073 = split(%7072, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7074 = %7073.3 /* ty=Tensor[(1, 1024), float32] */;
  %7075 = %7073.1 /* ty=Tensor[(1, 1024), float32] */;
  %7076 = sigmoid(%7075) /* ty=Tensor[(1, 1024), float32] */;
  %7077 = %7073.0 /* ty=Tensor[(1, 1024), float32] */;
  %7078 = %7073.2 /* ty=Tensor[(1, 1024), float32] */;
  %7079 = sigmoid(%7077) /* ty=Tensor[(1, 1024), float32] */;
  %7080 = tanh(%7078) /* ty=Tensor[(1, 1024), float32] */;
  %7081 = multiply(%7076, %7040) /* ty=Tensor[(1, 1024), float32] */;
  %7082 = multiply(%7079, %7080) /* ty=Tensor[(1, 1024), float32] */;
  %7083 = add(%7081, %7082) /* ty=Tensor[(1, 1024), float32] */;
  %7084 = sigmoid(%7074) /* ty=Tensor[(1, 1024), float32] */;
  %7085 = tanh(%7083) /* ty=Tensor[(1, 1024), float32] */;
  %7086 = multiply(%7084, %7085) /* ty=Tensor[(1, 1024), float32] */;
  %7087 = multiply(%7063, %7064) /* ty=Tensor[(1, 1024), float32] */;
  %7088 = (%7086, %7087) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7089 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7090 = concatenate(%7088, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7091 = concatenate(%7089, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7092 = nn.dense(%7090, %7091, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7093 = add(%7092, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7094 = add(%7093, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7095 = split(%7094, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7096 = %7095.3 /* ty=Tensor[(1, 1024), float32] */;
  %7097 = %7095.1 /* ty=Tensor[(1, 1024), float32] */;
  %7098 = sigmoid(%7097) /* ty=Tensor[(1, 1024), float32] */;
  %7099 = %7095.0 /* ty=Tensor[(1, 1024), float32] */;
  %7100 = %7095.2 /* ty=Tensor[(1, 1024), float32] */;
  %7101 = sigmoid(%7099) /* ty=Tensor[(1, 1024), float32] */;
  %7102 = tanh(%7100) /* ty=Tensor[(1, 1024), float32] */;
  %7103 = multiply(%7098, %7062) /* ty=Tensor[(1, 1024), float32] */;
  %7104 = multiply(%7101, %7102) /* ty=Tensor[(1, 1024), float32] */;
  %7105 = add(%7103, %7104) /* ty=Tensor[(1, 1024), float32] */;
  %7106 = sigmoid(%7096) /* ty=Tensor[(1, 1024), float32] */;
  %7107 = tanh(%7105) /* ty=Tensor[(1, 1024), float32] */;
  %7108 = %555.152 /* ty=Tensor[(1, 240), float32] */;
  %7109 = (%7108, %7086) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7110 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7111 = concatenate(%7109, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7112 = concatenate(%7110, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7113 = nn.dense(%7111, %7112, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7114 = add(%7113, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7115 = add(%7114, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7116 = split(%7115, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7117 = %7116.3 /* ty=Tensor[(1, 1024), float32] */;
  %7118 = %7116.1 /* ty=Tensor[(1, 1024), float32] */;
  %7119 = sigmoid(%7118) /* ty=Tensor[(1, 1024), float32] */;
  %7120 = %7116.0 /* ty=Tensor[(1, 1024), float32] */;
  %7121 = %7116.2 /* ty=Tensor[(1, 1024), float32] */;
  %7122 = sigmoid(%7120) /* ty=Tensor[(1, 1024), float32] */;
  %7123 = tanh(%7121) /* ty=Tensor[(1, 1024), float32] */;
  %7124 = multiply(%7119, %7083) /* ty=Tensor[(1, 1024), float32] */;
  %7125 = multiply(%7122, %7123) /* ty=Tensor[(1, 1024), float32] */;
  %7126 = add(%7124, %7125) /* ty=Tensor[(1, 1024), float32] */;
  %7127 = sigmoid(%7117) /* ty=Tensor[(1, 1024), float32] */;
  %7128 = tanh(%7126) /* ty=Tensor[(1, 1024), float32] */;
  %7129 = multiply(%7127, %7128) /* ty=Tensor[(1, 1024), float32] */;
  %7130 = multiply(%7106, %7107) /* ty=Tensor[(1, 1024), float32] */;
  %7131 = (%7129, %7130) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7132 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7133 = concatenate(%7131, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7134 = concatenate(%7132, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7135 = nn.dense(%7133, %7134, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7136 = add(%7135, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7137 = add(%7136, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7138 = split(%7137, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7139 = %7138.3 /* ty=Tensor[(1, 1024), float32] */;
  %7140 = %7138.1 /* ty=Tensor[(1, 1024), float32] */;
  %7141 = sigmoid(%7140) /* ty=Tensor[(1, 1024), float32] */;
  %7142 = %7138.0 /* ty=Tensor[(1, 1024), float32] */;
  %7143 = %7138.2 /* ty=Tensor[(1, 1024), float32] */;
  %7144 = sigmoid(%7142) /* ty=Tensor[(1, 1024), float32] */;
  %7145 = tanh(%7143) /* ty=Tensor[(1, 1024), float32] */;
  %7146 = multiply(%7141, %7105) /* ty=Tensor[(1, 1024), float32] */;
  %7147 = multiply(%7144, %7145) /* ty=Tensor[(1, 1024), float32] */;
  %7148 = add(%7146, %7147) /* ty=Tensor[(1, 1024), float32] */;
  %7149 = sigmoid(%7139) /* ty=Tensor[(1, 1024), float32] */;
  %7150 = tanh(%7148) /* ty=Tensor[(1, 1024), float32] */;
  %7151 = %555.153 /* ty=Tensor[(1, 240), float32] */;
  %7152 = (%7151, %7129) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7153 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7154 = concatenate(%7152, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7155 = concatenate(%7153, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7156 = nn.dense(%7154, %7155, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7157 = add(%7156, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7158 = add(%7157, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7159 = split(%7158, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7160 = %7159.3 /* ty=Tensor[(1, 1024), float32] */;
  %7161 = %7159.1 /* ty=Tensor[(1, 1024), float32] */;
  %7162 = sigmoid(%7161) /* ty=Tensor[(1, 1024), float32] */;
  %7163 = %7159.0 /* ty=Tensor[(1, 1024), float32] */;
  %7164 = %7159.2 /* ty=Tensor[(1, 1024), float32] */;
  %7165 = sigmoid(%7163) /* ty=Tensor[(1, 1024), float32] */;
  %7166 = tanh(%7164) /* ty=Tensor[(1, 1024), float32] */;
  %7167 = multiply(%7162, %7126) /* ty=Tensor[(1, 1024), float32] */;
  %7168 = multiply(%7165, %7166) /* ty=Tensor[(1, 1024), float32] */;
  %7169 = add(%7167, %7168) /* ty=Tensor[(1, 1024), float32] */;
  %7170 = sigmoid(%7160) /* ty=Tensor[(1, 1024), float32] */;
  %7171 = tanh(%7169) /* ty=Tensor[(1, 1024), float32] */;
  %7172 = multiply(%7170, %7171) /* ty=Tensor[(1, 1024), float32] */;
  %7173 = multiply(%7149, %7150) /* ty=Tensor[(1, 1024), float32] */;
  %7174 = (%7172, %7173) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7175 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7176 = concatenate(%7174, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7177 = concatenate(%7175, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7178 = nn.dense(%7176, %7177, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7179 = add(%7178, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7180 = add(%7179, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7181 = split(%7180, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7182 = %7181.3 /* ty=Tensor[(1, 1024), float32] */;
  %7183 = %7181.1 /* ty=Tensor[(1, 1024), float32] */;
  %7184 = sigmoid(%7183) /* ty=Tensor[(1, 1024), float32] */;
  %7185 = %7181.0 /* ty=Tensor[(1, 1024), float32] */;
  %7186 = %7181.2 /* ty=Tensor[(1, 1024), float32] */;
  %7187 = sigmoid(%7185) /* ty=Tensor[(1, 1024), float32] */;
  %7188 = tanh(%7186) /* ty=Tensor[(1, 1024), float32] */;
  %7189 = multiply(%7184, %7148) /* ty=Tensor[(1, 1024), float32] */;
  %7190 = multiply(%7187, %7188) /* ty=Tensor[(1, 1024), float32] */;
  %7191 = add(%7189, %7190) /* ty=Tensor[(1, 1024), float32] */;
  %7192 = sigmoid(%7182) /* ty=Tensor[(1, 1024), float32] */;
  %7193 = tanh(%7191) /* ty=Tensor[(1, 1024), float32] */;
  %7194 = %555.154 /* ty=Tensor[(1, 240), float32] */;
  %7195 = (%7194, %7172) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7196 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7197 = concatenate(%7195, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7198 = concatenate(%7196, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7199 = nn.dense(%7197, %7198, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7200 = add(%7199, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7201 = add(%7200, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7202 = split(%7201, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7203 = %7202.3 /* ty=Tensor[(1, 1024), float32] */;
  %7204 = %7202.1 /* ty=Tensor[(1, 1024), float32] */;
  %7205 = sigmoid(%7204) /* ty=Tensor[(1, 1024), float32] */;
  %7206 = %7202.0 /* ty=Tensor[(1, 1024), float32] */;
  %7207 = %7202.2 /* ty=Tensor[(1, 1024), float32] */;
  %7208 = sigmoid(%7206) /* ty=Tensor[(1, 1024), float32] */;
  %7209 = tanh(%7207) /* ty=Tensor[(1, 1024), float32] */;
  %7210 = multiply(%7205, %7169) /* ty=Tensor[(1, 1024), float32] */;
  %7211 = multiply(%7208, %7209) /* ty=Tensor[(1, 1024), float32] */;
  %7212 = add(%7210, %7211) /* ty=Tensor[(1, 1024), float32] */;
  %7213 = sigmoid(%7203) /* ty=Tensor[(1, 1024), float32] */;
  %7214 = tanh(%7212) /* ty=Tensor[(1, 1024), float32] */;
  %7215 = multiply(%7213, %7214) /* ty=Tensor[(1, 1024), float32] */;
  %7216 = multiply(%7192, %7193) /* ty=Tensor[(1, 1024), float32] */;
  %7217 = (%7215, %7216) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7218 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7219 = concatenate(%7217, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7220 = concatenate(%7218, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7221 = nn.dense(%7219, %7220, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7222 = add(%7221, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7223 = add(%7222, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7224 = split(%7223, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7225 = %7224.3 /* ty=Tensor[(1, 1024), float32] */;
  %7226 = %7224.1 /* ty=Tensor[(1, 1024), float32] */;
  %7227 = sigmoid(%7226) /* ty=Tensor[(1, 1024), float32] */;
  %7228 = %7224.0 /* ty=Tensor[(1, 1024), float32] */;
  %7229 = %7224.2 /* ty=Tensor[(1, 1024), float32] */;
  %7230 = sigmoid(%7228) /* ty=Tensor[(1, 1024), float32] */;
  %7231 = tanh(%7229) /* ty=Tensor[(1, 1024), float32] */;
  %7232 = multiply(%7227, %7191) /* ty=Tensor[(1, 1024), float32] */;
  %7233 = multiply(%7230, %7231) /* ty=Tensor[(1, 1024), float32] */;
  %7234 = add(%7232, %7233) /* ty=Tensor[(1, 1024), float32] */;
  %7235 = sigmoid(%7225) /* ty=Tensor[(1, 1024), float32] */;
  %7236 = tanh(%7234) /* ty=Tensor[(1, 1024), float32] */;
  %7237 = %555.155 /* ty=Tensor[(1, 240), float32] */;
  %7238 = (%7237, %7215) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7239 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7240 = concatenate(%7238, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7241 = concatenate(%7239, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7242 = nn.dense(%7240, %7241, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7243 = add(%7242, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7244 = add(%7243, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7245 = split(%7244, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7246 = %7245.3 /* ty=Tensor[(1, 1024), float32] */;
  %7247 = %7245.1 /* ty=Tensor[(1, 1024), float32] */;
  %7248 = sigmoid(%7247) /* ty=Tensor[(1, 1024), float32] */;
  %7249 = %7245.0 /* ty=Tensor[(1, 1024), float32] */;
  %7250 = %7245.2 /* ty=Tensor[(1, 1024), float32] */;
  %7251 = sigmoid(%7249) /* ty=Tensor[(1, 1024), float32] */;
  %7252 = tanh(%7250) /* ty=Tensor[(1, 1024), float32] */;
  %7253 = multiply(%7248, %7212) /* ty=Tensor[(1, 1024), float32] */;
  %7254 = multiply(%7251, %7252) /* ty=Tensor[(1, 1024), float32] */;
  %7255 = add(%7253, %7254) /* ty=Tensor[(1, 1024), float32] */;
  %7256 = sigmoid(%7246) /* ty=Tensor[(1, 1024), float32] */;
  %7257 = tanh(%7255) /* ty=Tensor[(1, 1024), float32] */;
  %7258 = multiply(%7256, %7257) /* ty=Tensor[(1, 1024), float32] */;
  %7259 = multiply(%7235, %7236) /* ty=Tensor[(1, 1024), float32] */;
  %7260 = (%7258, %7259) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7261 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7262 = concatenate(%7260, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7263 = concatenate(%7261, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7264 = nn.dense(%7262, %7263, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7265 = add(%7264, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7266 = add(%7265, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7267 = split(%7266, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7268 = %7267.3 /* ty=Tensor[(1, 1024), float32] */;
  %7269 = %7267.1 /* ty=Tensor[(1, 1024), float32] */;
  %7270 = sigmoid(%7269) /* ty=Tensor[(1, 1024), float32] */;
  %7271 = %7267.0 /* ty=Tensor[(1, 1024), float32] */;
  %7272 = %7267.2 /* ty=Tensor[(1, 1024), float32] */;
  %7273 = sigmoid(%7271) /* ty=Tensor[(1, 1024), float32] */;
  %7274 = tanh(%7272) /* ty=Tensor[(1, 1024), float32] */;
  %7275 = multiply(%7270, %7234) /* ty=Tensor[(1, 1024), float32] */;
  %7276 = multiply(%7273, %7274) /* ty=Tensor[(1, 1024), float32] */;
  %7277 = add(%7275, %7276) /* ty=Tensor[(1, 1024), float32] */;
  %7278 = sigmoid(%7268) /* ty=Tensor[(1, 1024), float32] */;
  %7279 = tanh(%7277) /* ty=Tensor[(1, 1024), float32] */;
  %7280 = %555.156 /* ty=Tensor[(1, 240), float32] */;
  %7281 = (%7280, %7258) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7282 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7283 = concatenate(%7281, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7284 = concatenate(%7282, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7285 = nn.dense(%7283, %7284, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7286 = add(%7285, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7287 = add(%7286, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7288 = split(%7287, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7289 = %7288.3 /* ty=Tensor[(1, 1024), float32] */;
  %7290 = %7288.1 /* ty=Tensor[(1, 1024), float32] */;
  %7291 = sigmoid(%7290) /* ty=Tensor[(1, 1024), float32] */;
  %7292 = %7288.0 /* ty=Tensor[(1, 1024), float32] */;
  %7293 = %7288.2 /* ty=Tensor[(1, 1024), float32] */;
  %7294 = sigmoid(%7292) /* ty=Tensor[(1, 1024), float32] */;
  %7295 = tanh(%7293) /* ty=Tensor[(1, 1024), float32] */;
  %7296 = multiply(%7291, %7255) /* ty=Tensor[(1, 1024), float32] */;
  %7297 = multiply(%7294, %7295) /* ty=Tensor[(1, 1024), float32] */;
  %7298 = add(%7296, %7297) /* ty=Tensor[(1, 1024), float32] */;
  %7299 = sigmoid(%7289) /* ty=Tensor[(1, 1024), float32] */;
  %7300 = tanh(%7298) /* ty=Tensor[(1, 1024), float32] */;
  %7301 = multiply(%7299, %7300) /* ty=Tensor[(1, 1024), float32] */;
  %7302 = multiply(%7278, %7279) /* ty=Tensor[(1, 1024), float32] */;
  %7303 = (%7301, %7302) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7304 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7305 = concatenate(%7303, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7306 = concatenate(%7304, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7307 = nn.dense(%7305, %7306, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7308 = add(%7307, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7309 = add(%7308, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7310 = split(%7309, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7311 = %7310.3 /* ty=Tensor[(1, 1024), float32] */;
  %7312 = %7310.1 /* ty=Tensor[(1, 1024), float32] */;
  %7313 = sigmoid(%7312) /* ty=Tensor[(1, 1024), float32] */;
  %7314 = %7310.0 /* ty=Tensor[(1, 1024), float32] */;
  %7315 = %7310.2 /* ty=Tensor[(1, 1024), float32] */;
  %7316 = sigmoid(%7314) /* ty=Tensor[(1, 1024), float32] */;
  %7317 = tanh(%7315) /* ty=Tensor[(1, 1024), float32] */;
  %7318 = multiply(%7313, %7277) /* ty=Tensor[(1, 1024), float32] */;
  %7319 = multiply(%7316, %7317) /* ty=Tensor[(1, 1024), float32] */;
  %7320 = add(%7318, %7319) /* ty=Tensor[(1, 1024), float32] */;
  %7321 = sigmoid(%7311) /* ty=Tensor[(1, 1024), float32] */;
  %7322 = tanh(%7320) /* ty=Tensor[(1, 1024), float32] */;
  %7323 = %555.157 /* ty=Tensor[(1, 240), float32] */;
  %7324 = (%7323, %7301) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7325 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7326 = concatenate(%7324, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7327 = concatenate(%7325, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7328 = nn.dense(%7326, %7327, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7329 = add(%7328, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7330 = add(%7329, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7331 = split(%7330, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7332 = %7331.3 /* ty=Tensor[(1, 1024), float32] */;
  %7333 = %7331.1 /* ty=Tensor[(1, 1024), float32] */;
  %7334 = sigmoid(%7333) /* ty=Tensor[(1, 1024), float32] */;
  %7335 = %7331.0 /* ty=Tensor[(1, 1024), float32] */;
  %7336 = %7331.2 /* ty=Tensor[(1, 1024), float32] */;
  %7337 = sigmoid(%7335) /* ty=Tensor[(1, 1024), float32] */;
  %7338 = tanh(%7336) /* ty=Tensor[(1, 1024), float32] */;
  %7339 = multiply(%7334, %7298) /* ty=Tensor[(1, 1024), float32] */;
  %7340 = multiply(%7337, %7338) /* ty=Tensor[(1, 1024), float32] */;
  %7341 = add(%7339, %7340) /* ty=Tensor[(1, 1024), float32] */;
  %7342 = sigmoid(%7332) /* ty=Tensor[(1, 1024), float32] */;
  %7343 = tanh(%7341) /* ty=Tensor[(1, 1024), float32] */;
  %7344 = multiply(%7342, %7343) /* ty=Tensor[(1, 1024), float32] */;
  %7345 = multiply(%7321, %7322) /* ty=Tensor[(1, 1024), float32] */;
  %7346 = (%7344, %7345) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7347 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7348 = concatenate(%7346, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7349 = concatenate(%7347, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7350 = nn.dense(%7348, %7349, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7351 = add(%7350, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7352 = add(%7351, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7353 = split(%7352, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7354 = %7353.3 /* ty=Tensor[(1, 1024), float32] */;
  %7355 = %7353.1 /* ty=Tensor[(1, 1024), float32] */;
  %7356 = sigmoid(%7355) /* ty=Tensor[(1, 1024), float32] */;
  %7357 = %7353.0 /* ty=Tensor[(1, 1024), float32] */;
  %7358 = %7353.2 /* ty=Tensor[(1, 1024), float32] */;
  %7359 = sigmoid(%7357) /* ty=Tensor[(1, 1024), float32] */;
  %7360 = tanh(%7358) /* ty=Tensor[(1, 1024), float32] */;
  %7361 = multiply(%7356, %7320) /* ty=Tensor[(1, 1024), float32] */;
  %7362 = multiply(%7359, %7360) /* ty=Tensor[(1, 1024), float32] */;
  %7363 = add(%7361, %7362) /* ty=Tensor[(1, 1024), float32] */;
  %7364 = sigmoid(%7354) /* ty=Tensor[(1, 1024), float32] */;
  %7365 = tanh(%7363) /* ty=Tensor[(1, 1024), float32] */;
  %7366 = %555.158 /* ty=Tensor[(1, 240), float32] */;
  %7367 = (%7366, %7344) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7368 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7369 = concatenate(%7367, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7370 = concatenate(%7368, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7371 = nn.dense(%7369, %7370, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7372 = add(%7371, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7373 = add(%7372, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7374 = split(%7373, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7375 = %7374.3 /* ty=Tensor[(1, 1024), float32] */;
  %7376 = %7374.1 /* ty=Tensor[(1, 1024), float32] */;
  %7377 = sigmoid(%7376) /* ty=Tensor[(1, 1024), float32] */;
  %7378 = %7374.0 /* ty=Tensor[(1, 1024), float32] */;
  %7379 = %7374.2 /* ty=Tensor[(1, 1024), float32] */;
  %7380 = sigmoid(%7378) /* ty=Tensor[(1, 1024), float32] */;
  %7381 = tanh(%7379) /* ty=Tensor[(1, 1024), float32] */;
  %7382 = multiply(%7377, %7341) /* ty=Tensor[(1, 1024), float32] */;
  %7383 = multiply(%7380, %7381) /* ty=Tensor[(1, 1024), float32] */;
  %7384 = add(%7382, %7383) /* ty=Tensor[(1, 1024), float32] */;
  %7385 = sigmoid(%7375) /* ty=Tensor[(1, 1024), float32] */;
  %7386 = tanh(%7384) /* ty=Tensor[(1, 1024), float32] */;
  %7387 = multiply(%7385, %7386) /* ty=Tensor[(1, 1024), float32] */;
  %7388 = multiply(%7364, %7365) /* ty=Tensor[(1, 1024), float32] */;
  %7389 = (%7387, %7388) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7390 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7391 = concatenate(%7389, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7392 = concatenate(%7390, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7393 = nn.dense(%7391, %7392, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7394 = add(%7393, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7395 = add(%7394, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7396 = split(%7395, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7397 = %7396.3 /* ty=Tensor[(1, 1024), float32] */;
  %7398 = %7396.1 /* ty=Tensor[(1, 1024), float32] */;
  %7399 = sigmoid(%7398) /* ty=Tensor[(1, 1024), float32] */;
  %7400 = %7396.0 /* ty=Tensor[(1, 1024), float32] */;
  %7401 = %7396.2 /* ty=Tensor[(1, 1024), float32] */;
  %7402 = sigmoid(%7400) /* ty=Tensor[(1, 1024), float32] */;
  %7403 = tanh(%7401) /* ty=Tensor[(1, 1024), float32] */;
  %7404 = multiply(%7399, %7363) /* ty=Tensor[(1, 1024), float32] */;
  %7405 = multiply(%7402, %7403) /* ty=Tensor[(1, 1024), float32] */;
  %7406 = add(%7404, %7405) /* ty=Tensor[(1, 1024), float32] */;
  %7407 = sigmoid(%7397) /* ty=Tensor[(1, 1024), float32] */;
  %7408 = tanh(%7406) /* ty=Tensor[(1, 1024), float32] */;
  %7409 = %555.159 /* ty=Tensor[(1, 240), float32] */;
  %7410 = (%7409, %7387) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7411 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7412 = concatenate(%7410, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7413 = concatenate(%7411, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7414 = nn.dense(%7412, %7413, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7415 = add(%7414, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7416 = add(%7415, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7417 = split(%7416, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7418 = %7417.3 /* ty=Tensor[(1, 1024), float32] */;
  %7419 = %7417.1 /* ty=Tensor[(1, 1024), float32] */;
  %7420 = sigmoid(%7419) /* ty=Tensor[(1, 1024), float32] */;
  %7421 = %7417.0 /* ty=Tensor[(1, 1024), float32] */;
  %7422 = %7417.2 /* ty=Tensor[(1, 1024), float32] */;
  %7423 = sigmoid(%7421) /* ty=Tensor[(1, 1024), float32] */;
  %7424 = tanh(%7422) /* ty=Tensor[(1, 1024), float32] */;
  %7425 = multiply(%7420, %7384) /* ty=Tensor[(1, 1024), float32] */;
  %7426 = multiply(%7423, %7424) /* ty=Tensor[(1, 1024), float32] */;
  %7427 = add(%7425, %7426) /* ty=Tensor[(1, 1024), float32] */;
  %7428 = sigmoid(%7418) /* ty=Tensor[(1, 1024), float32] */;
  %7429 = tanh(%7427) /* ty=Tensor[(1, 1024), float32] */;
  %7430 = multiply(%7428, %7429) /* ty=Tensor[(1, 1024), float32] */;
  %7431 = multiply(%7407, %7408) /* ty=Tensor[(1, 1024), float32] */;
  %7432 = (%7430, %7431) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7433 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7434 = concatenate(%7432, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7435 = concatenate(%7433, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7436 = nn.dense(%7434, %7435, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7437 = add(%7436, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7438 = add(%7437, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7439 = split(%7438, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7440 = %7439.3 /* ty=Tensor[(1, 1024), float32] */;
  %7441 = %7439.1 /* ty=Tensor[(1, 1024), float32] */;
  %7442 = sigmoid(%7441) /* ty=Tensor[(1, 1024), float32] */;
  %7443 = %7439.0 /* ty=Tensor[(1, 1024), float32] */;
  %7444 = %7439.2 /* ty=Tensor[(1, 1024), float32] */;
  %7445 = sigmoid(%7443) /* ty=Tensor[(1, 1024), float32] */;
  %7446 = tanh(%7444) /* ty=Tensor[(1, 1024), float32] */;
  %7447 = multiply(%7442, %7406) /* ty=Tensor[(1, 1024), float32] */;
  %7448 = multiply(%7445, %7446) /* ty=Tensor[(1, 1024), float32] */;
  %7449 = add(%7447, %7448) /* ty=Tensor[(1, 1024), float32] */;
  %7450 = sigmoid(%7440) /* ty=Tensor[(1, 1024), float32] */;
  %7451 = tanh(%7449) /* ty=Tensor[(1, 1024), float32] */;
  %7452 = %555.160 /* ty=Tensor[(1, 240), float32] */;
  %7453 = (%7452, %7430) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7454 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7455 = concatenate(%7453, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7456 = concatenate(%7454, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7457 = nn.dense(%7455, %7456, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7458 = add(%7457, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7459 = add(%7458, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7460 = split(%7459, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7461 = %7460.3 /* ty=Tensor[(1, 1024), float32] */;
  %7462 = %7460.1 /* ty=Tensor[(1, 1024), float32] */;
  %7463 = sigmoid(%7462) /* ty=Tensor[(1, 1024), float32] */;
  %7464 = %7460.0 /* ty=Tensor[(1, 1024), float32] */;
  %7465 = %7460.2 /* ty=Tensor[(1, 1024), float32] */;
  %7466 = sigmoid(%7464) /* ty=Tensor[(1, 1024), float32] */;
  %7467 = tanh(%7465) /* ty=Tensor[(1, 1024), float32] */;
  %7468 = multiply(%7463, %7427) /* ty=Tensor[(1, 1024), float32] */;
  %7469 = multiply(%7466, %7467) /* ty=Tensor[(1, 1024), float32] */;
  %7470 = add(%7468, %7469) /* ty=Tensor[(1, 1024), float32] */;
  %7471 = sigmoid(%7461) /* ty=Tensor[(1, 1024), float32] */;
  %7472 = tanh(%7470) /* ty=Tensor[(1, 1024), float32] */;
  %7473 = multiply(%7471, %7472) /* ty=Tensor[(1, 1024), float32] */;
  %7474 = multiply(%7450, %7451) /* ty=Tensor[(1, 1024), float32] */;
  %7475 = (%7473, %7474) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7476 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7477 = concatenate(%7475, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7478 = concatenate(%7476, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7479 = nn.dense(%7477, %7478, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7480 = add(%7479, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7481 = add(%7480, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7482 = split(%7481, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7483 = %7482.3 /* ty=Tensor[(1, 1024), float32] */;
  %7484 = %7482.1 /* ty=Tensor[(1, 1024), float32] */;
  %7485 = sigmoid(%7484) /* ty=Tensor[(1, 1024), float32] */;
  %7486 = %7482.0 /* ty=Tensor[(1, 1024), float32] */;
  %7487 = %7482.2 /* ty=Tensor[(1, 1024), float32] */;
  %7488 = sigmoid(%7486) /* ty=Tensor[(1, 1024), float32] */;
  %7489 = tanh(%7487) /* ty=Tensor[(1, 1024), float32] */;
  %7490 = multiply(%7485, %7449) /* ty=Tensor[(1, 1024), float32] */;
  %7491 = multiply(%7488, %7489) /* ty=Tensor[(1, 1024), float32] */;
  %7492 = add(%7490, %7491) /* ty=Tensor[(1, 1024), float32] */;
  %7493 = sigmoid(%7483) /* ty=Tensor[(1, 1024), float32] */;
  %7494 = tanh(%7492) /* ty=Tensor[(1, 1024), float32] */;
  %7495 = %555.161 /* ty=Tensor[(1, 240), float32] */;
  %7496 = (%7495, %7473) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7497 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7498 = concatenate(%7496, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7499 = concatenate(%7497, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7500 = nn.dense(%7498, %7499, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7501 = add(%7500, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7502 = add(%7501, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7503 = split(%7502, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7504 = %7503.3 /* ty=Tensor[(1, 1024), float32] */;
  %7505 = %7503.1 /* ty=Tensor[(1, 1024), float32] */;
  %7506 = sigmoid(%7505) /* ty=Tensor[(1, 1024), float32] */;
  %7507 = %7503.0 /* ty=Tensor[(1, 1024), float32] */;
  %7508 = %7503.2 /* ty=Tensor[(1, 1024), float32] */;
  %7509 = sigmoid(%7507) /* ty=Tensor[(1, 1024), float32] */;
  %7510 = tanh(%7508) /* ty=Tensor[(1, 1024), float32] */;
  %7511 = multiply(%7506, %7470) /* ty=Tensor[(1, 1024), float32] */;
  %7512 = multiply(%7509, %7510) /* ty=Tensor[(1, 1024), float32] */;
  %7513 = add(%7511, %7512) /* ty=Tensor[(1, 1024), float32] */;
  %7514 = sigmoid(%7504) /* ty=Tensor[(1, 1024), float32] */;
  %7515 = tanh(%7513) /* ty=Tensor[(1, 1024), float32] */;
  %7516 = multiply(%7514, %7515) /* ty=Tensor[(1, 1024), float32] */;
  %7517 = multiply(%7493, %7494) /* ty=Tensor[(1, 1024), float32] */;
  %7518 = (%7516, %7517) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7519 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7520 = concatenate(%7518, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7521 = concatenate(%7519, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7522 = nn.dense(%7520, %7521, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7523 = add(%7522, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7524 = add(%7523, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7525 = split(%7524, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7526 = %7525.3 /* ty=Tensor[(1, 1024), float32] */;
  %7527 = %7525.1 /* ty=Tensor[(1, 1024), float32] */;
  %7528 = sigmoid(%7527) /* ty=Tensor[(1, 1024), float32] */;
  %7529 = %7525.0 /* ty=Tensor[(1, 1024), float32] */;
  %7530 = %7525.2 /* ty=Tensor[(1, 1024), float32] */;
  %7531 = sigmoid(%7529) /* ty=Tensor[(1, 1024), float32] */;
  %7532 = tanh(%7530) /* ty=Tensor[(1, 1024), float32] */;
  %7533 = multiply(%7528, %7492) /* ty=Tensor[(1, 1024), float32] */;
  %7534 = multiply(%7531, %7532) /* ty=Tensor[(1, 1024), float32] */;
  %7535 = add(%7533, %7534) /* ty=Tensor[(1, 1024), float32] */;
  %7536 = sigmoid(%7526) /* ty=Tensor[(1, 1024), float32] */;
  %7537 = tanh(%7535) /* ty=Tensor[(1, 1024), float32] */;
  %7538 = %555.162 /* ty=Tensor[(1, 240), float32] */;
  %7539 = (%7538, %7516) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7540 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7541 = concatenate(%7539, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7542 = concatenate(%7540, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7543 = nn.dense(%7541, %7542, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7544 = add(%7543, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7545 = add(%7544, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7546 = split(%7545, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7547 = %7546.3 /* ty=Tensor[(1, 1024), float32] */;
  %7548 = %7546.1 /* ty=Tensor[(1, 1024), float32] */;
  %7549 = sigmoid(%7548) /* ty=Tensor[(1, 1024), float32] */;
  %7550 = %7546.0 /* ty=Tensor[(1, 1024), float32] */;
  %7551 = %7546.2 /* ty=Tensor[(1, 1024), float32] */;
  %7552 = sigmoid(%7550) /* ty=Tensor[(1, 1024), float32] */;
  %7553 = tanh(%7551) /* ty=Tensor[(1, 1024), float32] */;
  %7554 = multiply(%7549, %7513) /* ty=Tensor[(1, 1024), float32] */;
  %7555 = multiply(%7552, %7553) /* ty=Tensor[(1, 1024), float32] */;
  %7556 = add(%7554, %7555) /* ty=Tensor[(1, 1024), float32] */;
  %7557 = sigmoid(%7547) /* ty=Tensor[(1, 1024), float32] */;
  %7558 = tanh(%7556) /* ty=Tensor[(1, 1024), float32] */;
  %7559 = multiply(%7557, %7558) /* ty=Tensor[(1, 1024), float32] */;
  %7560 = multiply(%7536, %7537) /* ty=Tensor[(1, 1024), float32] */;
  %7561 = (%7559, %7560) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7562 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7563 = concatenate(%7561, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7564 = concatenate(%7562, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7565 = nn.dense(%7563, %7564, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7566 = add(%7565, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7567 = add(%7566, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7568 = split(%7567, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7569 = %7568.3 /* ty=Tensor[(1, 1024), float32] */;
  %7570 = %7568.1 /* ty=Tensor[(1, 1024), float32] */;
  %7571 = sigmoid(%7570) /* ty=Tensor[(1, 1024), float32] */;
  %7572 = %7568.0 /* ty=Tensor[(1, 1024), float32] */;
  %7573 = %7568.2 /* ty=Tensor[(1, 1024), float32] */;
  %7574 = sigmoid(%7572) /* ty=Tensor[(1, 1024), float32] */;
  %7575 = tanh(%7573) /* ty=Tensor[(1, 1024), float32] */;
  %7576 = multiply(%7571, %7535) /* ty=Tensor[(1, 1024), float32] */;
  %7577 = multiply(%7574, %7575) /* ty=Tensor[(1, 1024), float32] */;
  %7578 = add(%7576, %7577) /* ty=Tensor[(1, 1024), float32] */;
  %7579 = sigmoid(%7569) /* ty=Tensor[(1, 1024), float32] */;
  %7580 = tanh(%7578) /* ty=Tensor[(1, 1024), float32] */;
  %7581 = %555.163 /* ty=Tensor[(1, 240), float32] */;
  %7582 = (%7581, %7559) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7583 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7584 = concatenate(%7582, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7585 = concatenate(%7583, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7586 = nn.dense(%7584, %7585, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7587 = add(%7586, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7588 = add(%7587, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7589 = split(%7588, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7590 = %7589.3 /* ty=Tensor[(1, 1024), float32] */;
  %7591 = %7589.1 /* ty=Tensor[(1, 1024), float32] */;
  %7592 = sigmoid(%7591) /* ty=Tensor[(1, 1024), float32] */;
  %7593 = %7589.0 /* ty=Tensor[(1, 1024), float32] */;
  %7594 = %7589.2 /* ty=Tensor[(1, 1024), float32] */;
  %7595 = sigmoid(%7593) /* ty=Tensor[(1, 1024), float32] */;
  %7596 = tanh(%7594) /* ty=Tensor[(1, 1024), float32] */;
  %7597 = multiply(%7592, %7556) /* ty=Tensor[(1, 1024), float32] */;
  %7598 = multiply(%7595, %7596) /* ty=Tensor[(1, 1024), float32] */;
  %7599 = add(%7597, %7598) /* ty=Tensor[(1, 1024), float32] */;
  %7600 = sigmoid(%7590) /* ty=Tensor[(1, 1024), float32] */;
  %7601 = tanh(%7599) /* ty=Tensor[(1, 1024), float32] */;
  %7602 = multiply(%7600, %7601) /* ty=Tensor[(1, 1024), float32] */;
  %7603 = multiply(%7579, %7580) /* ty=Tensor[(1, 1024), float32] */;
  %7604 = (%7602, %7603) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7605 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7606 = concatenate(%7604, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7607 = concatenate(%7605, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7608 = nn.dense(%7606, %7607, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7609 = add(%7608, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7610 = add(%7609, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7611 = split(%7610, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7612 = %7611.3 /* ty=Tensor[(1, 1024), float32] */;
  %7613 = %7611.1 /* ty=Tensor[(1, 1024), float32] */;
  %7614 = sigmoid(%7613) /* ty=Tensor[(1, 1024), float32] */;
  %7615 = %7611.0 /* ty=Tensor[(1, 1024), float32] */;
  %7616 = %7611.2 /* ty=Tensor[(1, 1024), float32] */;
  %7617 = sigmoid(%7615) /* ty=Tensor[(1, 1024), float32] */;
  %7618 = tanh(%7616) /* ty=Tensor[(1, 1024), float32] */;
  %7619 = multiply(%7614, %7578) /* ty=Tensor[(1, 1024), float32] */;
  %7620 = multiply(%7617, %7618) /* ty=Tensor[(1, 1024), float32] */;
  %7621 = add(%7619, %7620) /* ty=Tensor[(1, 1024), float32] */;
  %7622 = sigmoid(%7612) /* ty=Tensor[(1, 1024), float32] */;
  %7623 = tanh(%7621) /* ty=Tensor[(1, 1024), float32] */;
  %7624 = %555.164 /* ty=Tensor[(1, 240), float32] */;
  %7625 = (%7624, %7602) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7626 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7627 = concatenate(%7625, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7628 = concatenate(%7626, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7629 = nn.dense(%7627, %7628, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7630 = add(%7629, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7631 = add(%7630, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7632 = split(%7631, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7633 = %7632.3 /* ty=Tensor[(1, 1024), float32] */;
  %7634 = %7632.1 /* ty=Tensor[(1, 1024), float32] */;
  %7635 = sigmoid(%7634) /* ty=Tensor[(1, 1024), float32] */;
  %7636 = %7632.0 /* ty=Tensor[(1, 1024), float32] */;
  %7637 = %7632.2 /* ty=Tensor[(1, 1024), float32] */;
  %7638 = sigmoid(%7636) /* ty=Tensor[(1, 1024), float32] */;
  %7639 = tanh(%7637) /* ty=Tensor[(1, 1024), float32] */;
  %7640 = multiply(%7635, %7599) /* ty=Tensor[(1, 1024), float32] */;
  %7641 = multiply(%7638, %7639) /* ty=Tensor[(1, 1024), float32] */;
  %7642 = add(%7640, %7641) /* ty=Tensor[(1, 1024), float32] */;
  %7643 = sigmoid(%7633) /* ty=Tensor[(1, 1024), float32] */;
  %7644 = tanh(%7642) /* ty=Tensor[(1, 1024), float32] */;
  %7645 = multiply(%7643, %7644) /* ty=Tensor[(1, 1024), float32] */;
  %7646 = multiply(%7622, %7623) /* ty=Tensor[(1, 1024), float32] */;
  %7647 = (%7645, %7646) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7648 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7649 = concatenate(%7647, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7650 = concatenate(%7648, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7651 = nn.dense(%7649, %7650, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7652 = add(%7651, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7653 = add(%7652, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7654 = split(%7653, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7655 = %7654.3 /* ty=Tensor[(1, 1024), float32] */;
  %7656 = %7654.1 /* ty=Tensor[(1, 1024), float32] */;
  %7657 = sigmoid(%7656) /* ty=Tensor[(1, 1024), float32] */;
  %7658 = %7654.0 /* ty=Tensor[(1, 1024), float32] */;
  %7659 = %7654.2 /* ty=Tensor[(1, 1024), float32] */;
  %7660 = sigmoid(%7658) /* ty=Tensor[(1, 1024), float32] */;
  %7661 = tanh(%7659) /* ty=Tensor[(1, 1024), float32] */;
  %7662 = multiply(%7657, %7621) /* ty=Tensor[(1, 1024), float32] */;
  %7663 = multiply(%7660, %7661) /* ty=Tensor[(1, 1024), float32] */;
  %7664 = add(%7662, %7663) /* ty=Tensor[(1, 1024), float32] */;
  %7665 = sigmoid(%7655) /* ty=Tensor[(1, 1024), float32] */;
  %7666 = tanh(%7664) /* ty=Tensor[(1, 1024), float32] */;
  %7667 = %555.165 /* ty=Tensor[(1, 240), float32] */;
  %7668 = (%7667, %7645) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7669 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7670 = concatenate(%7668, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7671 = concatenate(%7669, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7672 = nn.dense(%7670, %7671, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7673 = add(%7672, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7674 = add(%7673, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7675 = split(%7674, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7676 = %7675.3 /* ty=Tensor[(1, 1024), float32] */;
  %7677 = %7675.1 /* ty=Tensor[(1, 1024), float32] */;
  %7678 = sigmoid(%7677) /* ty=Tensor[(1, 1024), float32] */;
  %7679 = %7675.0 /* ty=Tensor[(1, 1024), float32] */;
  %7680 = %7675.2 /* ty=Tensor[(1, 1024), float32] */;
  %7681 = sigmoid(%7679) /* ty=Tensor[(1, 1024), float32] */;
  %7682 = tanh(%7680) /* ty=Tensor[(1, 1024), float32] */;
  %7683 = multiply(%7678, %7642) /* ty=Tensor[(1, 1024), float32] */;
  %7684 = multiply(%7681, %7682) /* ty=Tensor[(1, 1024), float32] */;
  %7685 = add(%7683, %7684) /* ty=Tensor[(1, 1024), float32] */;
  %7686 = sigmoid(%7676) /* ty=Tensor[(1, 1024), float32] */;
  %7687 = tanh(%7685) /* ty=Tensor[(1, 1024), float32] */;
  %7688 = multiply(%7686, %7687) /* ty=Tensor[(1, 1024), float32] */;
  %7689 = multiply(%7665, %7666) /* ty=Tensor[(1, 1024), float32] */;
  %7690 = (%7688, %7689) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7691 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7692 = concatenate(%7690, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7693 = concatenate(%7691, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7694 = nn.dense(%7692, %7693, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7695 = add(%7694, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7696 = add(%7695, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7697 = split(%7696, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7698 = %7697.3 /* ty=Tensor[(1, 1024), float32] */;
  %7699 = %7697.1 /* ty=Tensor[(1, 1024), float32] */;
  %7700 = sigmoid(%7699) /* ty=Tensor[(1, 1024), float32] */;
  %7701 = %7697.0 /* ty=Tensor[(1, 1024), float32] */;
  %7702 = %7697.2 /* ty=Tensor[(1, 1024), float32] */;
  %7703 = sigmoid(%7701) /* ty=Tensor[(1, 1024), float32] */;
  %7704 = tanh(%7702) /* ty=Tensor[(1, 1024), float32] */;
  %7705 = multiply(%7700, %7664) /* ty=Tensor[(1, 1024), float32] */;
  %7706 = multiply(%7703, %7704) /* ty=Tensor[(1, 1024), float32] */;
  %7707 = add(%7705, %7706) /* ty=Tensor[(1, 1024), float32] */;
  %7708 = sigmoid(%7698) /* ty=Tensor[(1, 1024), float32] */;
  %7709 = tanh(%7707) /* ty=Tensor[(1, 1024), float32] */;
  %7710 = %555.166 /* ty=Tensor[(1, 240), float32] */;
  %7711 = (%7710, %7688) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7712 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7713 = concatenate(%7711, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7714 = concatenate(%7712, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7715 = nn.dense(%7713, %7714, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7716 = add(%7715, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7717 = add(%7716, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7718 = split(%7717, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7719 = %7718.3 /* ty=Tensor[(1, 1024), float32] */;
  %7720 = %7718.1 /* ty=Tensor[(1, 1024), float32] */;
  %7721 = sigmoid(%7720) /* ty=Tensor[(1, 1024), float32] */;
  %7722 = %7718.0 /* ty=Tensor[(1, 1024), float32] */;
  %7723 = %7718.2 /* ty=Tensor[(1, 1024), float32] */;
  %7724 = sigmoid(%7722) /* ty=Tensor[(1, 1024), float32] */;
  %7725 = tanh(%7723) /* ty=Tensor[(1, 1024), float32] */;
  %7726 = multiply(%7721, %7685) /* ty=Tensor[(1, 1024), float32] */;
  %7727 = multiply(%7724, %7725) /* ty=Tensor[(1, 1024), float32] */;
  %7728 = add(%7726, %7727) /* ty=Tensor[(1, 1024), float32] */;
  %7729 = sigmoid(%7719) /* ty=Tensor[(1, 1024), float32] */;
  %7730 = tanh(%7728) /* ty=Tensor[(1, 1024), float32] */;
  %7731 = multiply(%7729, %7730) /* ty=Tensor[(1, 1024), float32] */;
  %7732 = multiply(%7708, %7709) /* ty=Tensor[(1, 1024), float32] */;
  %7733 = (%7731, %7732) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7734 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7735 = concatenate(%7733, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7736 = concatenate(%7734, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7737 = nn.dense(%7735, %7736, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7738 = add(%7737, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7739 = add(%7738, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7740 = split(%7739, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7741 = %7740.3 /* ty=Tensor[(1, 1024), float32] */;
  %7742 = %7740.1 /* ty=Tensor[(1, 1024), float32] */;
  %7743 = sigmoid(%7742) /* ty=Tensor[(1, 1024), float32] */;
  %7744 = %7740.0 /* ty=Tensor[(1, 1024), float32] */;
  %7745 = %7740.2 /* ty=Tensor[(1, 1024), float32] */;
  %7746 = sigmoid(%7744) /* ty=Tensor[(1, 1024), float32] */;
  %7747 = tanh(%7745) /* ty=Tensor[(1, 1024), float32] */;
  %7748 = multiply(%7743, %7707) /* ty=Tensor[(1, 1024), float32] */;
  %7749 = multiply(%7746, %7747) /* ty=Tensor[(1, 1024), float32] */;
  %7750 = add(%7748, %7749) /* ty=Tensor[(1, 1024), float32] */;
  %7751 = sigmoid(%7741) /* ty=Tensor[(1, 1024), float32] */;
  %7752 = tanh(%7750) /* ty=Tensor[(1, 1024), float32] */;
  %7753 = %555.167 /* ty=Tensor[(1, 240), float32] */;
  %7754 = (%7753, %7731) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7755 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7756 = concatenate(%7754, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7757 = concatenate(%7755, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7758 = nn.dense(%7756, %7757, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7759 = add(%7758, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7760 = add(%7759, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7761 = split(%7760, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7762 = %7761.3 /* ty=Tensor[(1, 1024), float32] */;
  %7763 = %7761.1 /* ty=Tensor[(1, 1024), float32] */;
  %7764 = sigmoid(%7763) /* ty=Tensor[(1, 1024), float32] */;
  %7765 = %7761.0 /* ty=Tensor[(1, 1024), float32] */;
  %7766 = %7761.2 /* ty=Tensor[(1, 1024), float32] */;
  %7767 = sigmoid(%7765) /* ty=Tensor[(1, 1024), float32] */;
  %7768 = tanh(%7766) /* ty=Tensor[(1, 1024), float32] */;
  %7769 = multiply(%7764, %7728) /* ty=Tensor[(1, 1024), float32] */;
  %7770 = multiply(%7767, %7768) /* ty=Tensor[(1, 1024), float32] */;
  %7771 = add(%7769, %7770) /* ty=Tensor[(1, 1024), float32] */;
  %7772 = sigmoid(%7762) /* ty=Tensor[(1, 1024), float32] */;
  %7773 = tanh(%7771) /* ty=Tensor[(1, 1024), float32] */;
  %7774 = multiply(%7772, %7773) /* ty=Tensor[(1, 1024), float32] */;
  %7775 = multiply(%7751, %7752) /* ty=Tensor[(1, 1024), float32] */;
  %7776 = (%7774, %7775) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7777 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7778 = concatenate(%7776, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7779 = concatenate(%7777, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7780 = nn.dense(%7778, %7779, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7781 = add(%7780, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7782 = add(%7781, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7783 = split(%7782, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7784 = %7783.3 /* ty=Tensor[(1, 1024), float32] */;
  %7785 = %7783.1 /* ty=Tensor[(1, 1024), float32] */;
  %7786 = sigmoid(%7785) /* ty=Tensor[(1, 1024), float32] */;
  %7787 = %7783.0 /* ty=Tensor[(1, 1024), float32] */;
  %7788 = %7783.2 /* ty=Tensor[(1, 1024), float32] */;
  %7789 = sigmoid(%7787) /* ty=Tensor[(1, 1024), float32] */;
  %7790 = tanh(%7788) /* ty=Tensor[(1, 1024), float32] */;
  %7791 = multiply(%7786, %7750) /* ty=Tensor[(1, 1024), float32] */;
  %7792 = multiply(%7789, %7790) /* ty=Tensor[(1, 1024), float32] */;
  %7793 = add(%7791, %7792) /* ty=Tensor[(1, 1024), float32] */;
  %7794 = sigmoid(%7784) /* ty=Tensor[(1, 1024), float32] */;
  %7795 = tanh(%7793) /* ty=Tensor[(1, 1024), float32] */;
  %7796 = %555.168 /* ty=Tensor[(1, 240), float32] */;
  %7797 = (%7796, %7774) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7798 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7799 = concatenate(%7797, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7800 = concatenate(%7798, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7801 = nn.dense(%7799, %7800, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7802 = add(%7801, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7803 = add(%7802, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7804 = split(%7803, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7805 = %7804.3 /* ty=Tensor[(1, 1024), float32] */;
  %7806 = %7804.1 /* ty=Tensor[(1, 1024), float32] */;
  %7807 = sigmoid(%7806) /* ty=Tensor[(1, 1024), float32] */;
  %7808 = %7804.0 /* ty=Tensor[(1, 1024), float32] */;
  %7809 = %7804.2 /* ty=Tensor[(1, 1024), float32] */;
  %7810 = sigmoid(%7808) /* ty=Tensor[(1, 1024), float32] */;
  %7811 = tanh(%7809) /* ty=Tensor[(1, 1024), float32] */;
  %7812 = multiply(%7807, %7771) /* ty=Tensor[(1, 1024), float32] */;
  %7813 = multiply(%7810, %7811) /* ty=Tensor[(1, 1024), float32] */;
  %7814 = add(%7812, %7813) /* ty=Tensor[(1, 1024), float32] */;
  %7815 = sigmoid(%7805) /* ty=Tensor[(1, 1024), float32] */;
  %7816 = tanh(%7814) /* ty=Tensor[(1, 1024), float32] */;
  %7817 = multiply(%7815, %7816) /* ty=Tensor[(1, 1024), float32] */;
  %7818 = multiply(%7794, %7795) /* ty=Tensor[(1, 1024), float32] */;
  %7819 = (%7817, %7818) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7820 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7821 = concatenate(%7819, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7822 = concatenate(%7820, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7823 = nn.dense(%7821, %7822, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7824 = add(%7823, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7825 = add(%7824, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7826 = split(%7825, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7827 = %7826.3 /* ty=Tensor[(1, 1024), float32] */;
  %7828 = %7826.1 /* ty=Tensor[(1, 1024), float32] */;
  %7829 = sigmoid(%7828) /* ty=Tensor[(1, 1024), float32] */;
  %7830 = %7826.0 /* ty=Tensor[(1, 1024), float32] */;
  %7831 = %7826.2 /* ty=Tensor[(1, 1024), float32] */;
  %7832 = sigmoid(%7830) /* ty=Tensor[(1, 1024), float32] */;
  %7833 = tanh(%7831) /* ty=Tensor[(1, 1024), float32] */;
  %7834 = multiply(%7829, %7793) /* ty=Tensor[(1, 1024), float32] */;
  %7835 = multiply(%7832, %7833) /* ty=Tensor[(1, 1024), float32] */;
  %7836 = add(%7834, %7835) /* ty=Tensor[(1, 1024), float32] */;
  %7837 = sigmoid(%7827) /* ty=Tensor[(1, 1024), float32] */;
  %7838 = tanh(%7836) /* ty=Tensor[(1, 1024), float32] */;
  %7839 = %555.169 /* ty=Tensor[(1, 240), float32] */;
  %7840 = (%7839, %7817) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7841 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7842 = concatenate(%7840, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7843 = concatenate(%7841, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7844 = nn.dense(%7842, %7843, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7845 = add(%7844, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7846 = add(%7845, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7847 = split(%7846, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7848 = %7847.3 /* ty=Tensor[(1, 1024), float32] */;
  %7849 = %7847.1 /* ty=Tensor[(1, 1024), float32] */;
  %7850 = sigmoid(%7849) /* ty=Tensor[(1, 1024), float32] */;
  %7851 = %7847.0 /* ty=Tensor[(1, 1024), float32] */;
  %7852 = %7847.2 /* ty=Tensor[(1, 1024), float32] */;
  %7853 = sigmoid(%7851) /* ty=Tensor[(1, 1024), float32] */;
  %7854 = tanh(%7852) /* ty=Tensor[(1, 1024), float32] */;
  %7855 = multiply(%7850, %7814) /* ty=Tensor[(1, 1024), float32] */;
  %7856 = multiply(%7853, %7854) /* ty=Tensor[(1, 1024), float32] */;
  %7857 = add(%7855, %7856) /* ty=Tensor[(1, 1024), float32] */;
  %7858 = sigmoid(%7848) /* ty=Tensor[(1, 1024), float32] */;
  %7859 = tanh(%7857) /* ty=Tensor[(1, 1024), float32] */;
  %7860 = multiply(%7858, %7859) /* ty=Tensor[(1, 1024), float32] */;
  %7861 = multiply(%7837, %7838) /* ty=Tensor[(1, 1024), float32] */;
  %7862 = (%7860, %7861) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7863 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7864 = concatenate(%7862, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7865 = concatenate(%7863, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7866 = nn.dense(%7864, %7865, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7867 = add(%7866, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7868 = add(%7867, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7869 = split(%7868, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7870 = %7869.3 /* ty=Tensor[(1, 1024), float32] */;
  %7871 = %7869.1 /* ty=Tensor[(1, 1024), float32] */;
  %7872 = sigmoid(%7871) /* ty=Tensor[(1, 1024), float32] */;
  %7873 = %7869.0 /* ty=Tensor[(1, 1024), float32] */;
  %7874 = %7869.2 /* ty=Tensor[(1, 1024), float32] */;
  %7875 = sigmoid(%7873) /* ty=Tensor[(1, 1024), float32] */;
  %7876 = tanh(%7874) /* ty=Tensor[(1, 1024), float32] */;
  %7877 = multiply(%7872, %7836) /* ty=Tensor[(1, 1024), float32] */;
  %7878 = multiply(%7875, %7876) /* ty=Tensor[(1, 1024), float32] */;
  %7879 = add(%7877, %7878) /* ty=Tensor[(1, 1024), float32] */;
  %7880 = sigmoid(%7870) /* ty=Tensor[(1, 1024), float32] */;
  %7881 = tanh(%7879) /* ty=Tensor[(1, 1024), float32] */;
  %7882 = %555.170 /* ty=Tensor[(1, 240), float32] */;
  %7883 = (%7882, %7860) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7884 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7885 = concatenate(%7883, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7886 = concatenate(%7884, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7887 = nn.dense(%7885, %7886, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7888 = add(%7887, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7889 = add(%7888, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7890 = split(%7889, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7891 = %7890.3 /* ty=Tensor[(1, 1024), float32] */;
  %7892 = %7890.1 /* ty=Tensor[(1, 1024), float32] */;
  %7893 = sigmoid(%7892) /* ty=Tensor[(1, 1024), float32] */;
  %7894 = %7890.0 /* ty=Tensor[(1, 1024), float32] */;
  %7895 = %7890.2 /* ty=Tensor[(1, 1024), float32] */;
  %7896 = sigmoid(%7894) /* ty=Tensor[(1, 1024), float32] */;
  %7897 = tanh(%7895) /* ty=Tensor[(1, 1024), float32] */;
  %7898 = multiply(%7893, %7857) /* ty=Tensor[(1, 1024), float32] */;
  %7899 = multiply(%7896, %7897) /* ty=Tensor[(1, 1024), float32] */;
  %7900 = add(%7898, %7899) /* ty=Tensor[(1, 1024), float32] */;
  %7901 = sigmoid(%7891) /* ty=Tensor[(1, 1024), float32] */;
  %7902 = tanh(%7900) /* ty=Tensor[(1, 1024), float32] */;
  %7903 = multiply(%7901, %7902) /* ty=Tensor[(1, 1024), float32] */;
  %7904 = multiply(%7880, %7881) /* ty=Tensor[(1, 1024), float32] */;
  %7905 = (%7903, %7904) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7906 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7907 = concatenate(%7905, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7908 = concatenate(%7906, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7909 = nn.dense(%7907, %7908, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7910 = add(%7909, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7911 = add(%7910, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7912 = split(%7911, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7913 = %7912.3 /* ty=Tensor[(1, 1024), float32] */;
  %7914 = %7912.1 /* ty=Tensor[(1, 1024), float32] */;
  %7915 = sigmoid(%7914) /* ty=Tensor[(1, 1024), float32] */;
  %7916 = %7912.0 /* ty=Tensor[(1, 1024), float32] */;
  %7917 = %7912.2 /* ty=Tensor[(1, 1024), float32] */;
  %7918 = sigmoid(%7916) /* ty=Tensor[(1, 1024), float32] */;
  %7919 = tanh(%7917) /* ty=Tensor[(1, 1024), float32] */;
  %7920 = multiply(%7915, %7879) /* ty=Tensor[(1, 1024), float32] */;
  %7921 = multiply(%7918, %7919) /* ty=Tensor[(1, 1024), float32] */;
  %7922 = add(%7920, %7921) /* ty=Tensor[(1, 1024), float32] */;
  %7923 = sigmoid(%7913) /* ty=Tensor[(1, 1024), float32] */;
  %7924 = tanh(%7922) /* ty=Tensor[(1, 1024), float32] */;
  %7925 = %555.171 /* ty=Tensor[(1, 240), float32] */;
  %7926 = (%7925, %7903) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7927 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7928 = concatenate(%7926, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7929 = concatenate(%7927, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7930 = nn.dense(%7928, %7929, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7931 = add(%7930, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7932 = add(%7931, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7933 = split(%7932, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7934 = %7933.3 /* ty=Tensor[(1, 1024), float32] */;
  %7935 = %7933.1 /* ty=Tensor[(1, 1024), float32] */;
  %7936 = sigmoid(%7935) /* ty=Tensor[(1, 1024), float32] */;
  %7937 = %7933.0 /* ty=Tensor[(1, 1024), float32] */;
  %7938 = %7933.2 /* ty=Tensor[(1, 1024), float32] */;
  %7939 = sigmoid(%7937) /* ty=Tensor[(1, 1024), float32] */;
  %7940 = tanh(%7938) /* ty=Tensor[(1, 1024), float32] */;
  %7941 = multiply(%7936, %7900) /* ty=Tensor[(1, 1024), float32] */;
  %7942 = multiply(%7939, %7940) /* ty=Tensor[(1, 1024), float32] */;
  %7943 = add(%7941, %7942) /* ty=Tensor[(1, 1024), float32] */;
  %7944 = sigmoid(%7934) /* ty=Tensor[(1, 1024), float32] */;
  %7945 = tanh(%7943) /* ty=Tensor[(1, 1024), float32] */;
  %7946 = multiply(%7944, %7945) /* ty=Tensor[(1, 1024), float32] */;
  %7947 = multiply(%7923, %7924) /* ty=Tensor[(1, 1024), float32] */;
  %7948 = (%7946, %7947) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7949 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7950 = concatenate(%7948, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7951 = concatenate(%7949, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7952 = nn.dense(%7950, %7951, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7953 = add(%7952, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7954 = add(%7953, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7955 = split(%7954, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7956 = %7955.3 /* ty=Tensor[(1, 1024), float32] */;
  %7957 = %7955.1 /* ty=Tensor[(1, 1024), float32] */;
  %7958 = sigmoid(%7957) /* ty=Tensor[(1, 1024), float32] */;
  %7959 = %7955.0 /* ty=Tensor[(1, 1024), float32] */;
  %7960 = %7955.2 /* ty=Tensor[(1, 1024), float32] */;
  %7961 = sigmoid(%7959) /* ty=Tensor[(1, 1024), float32] */;
  %7962 = tanh(%7960) /* ty=Tensor[(1, 1024), float32] */;
  %7963 = multiply(%7958, %7922) /* ty=Tensor[(1, 1024), float32] */;
  %7964 = multiply(%7961, %7962) /* ty=Tensor[(1, 1024), float32] */;
  %7965 = add(%7963, %7964) /* ty=Tensor[(1, 1024), float32] */;
  %7966 = sigmoid(%7956) /* ty=Tensor[(1, 1024), float32] */;
  %7967 = tanh(%7965) /* ty=Tensor[(1, 1024), float32] */;
  %7968 = %555.172 /* ty=Tensor[(1, 240), float32] */;
  %7969 = (%7968, %7946) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %7970 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %7971 = concatenate(%7969, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %7972 = concatenate(%7970, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %7973 = nn.dense(%7971, %7972, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7974 = add(%7973, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7975 = add(%7974, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %7976 = split(%7975, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7977 = %7976.3 /* ty=Tensor[(1, 1024), float32] */;
  %7978 = %7976.1 /* ty=Tensor[(1, 1024), float32] */;
  %7979 = sigmoid(%7978) /* ty=Tensor[(1, 1024), float32] */;
  %7980 = %7976.0 /* ty=Tensor[(1, 1024), float32] */;
  %7981 = %7976.2 /* ty=Tensor[(1, 1024), float32] */;
  %7982 = sigmoid(%7980) /* ty=Tensor[(1, 1024), float32] */;
  %7983 = tanh(%7981) /* ty=Tensor[(1, 1024), float32] */;
  %7984 = multiply(%7979, %7943) /* ty=Tensor[(1, 1024), float32] */;
  %7985 = multiply(%7982, %7983) /* ty=Tensor[(1, 1024), float32] */;
  %7986 = add(%7984, %7985) /* ty=Tensor[(1, 1024), float32] */;
  %7987 = sigmoid(%7977) /* ty=Tensor[(1, 1024), float32] */;
  %7988 = tanh(%7986) /* ty=Tensor[(1, 1024), float32] */;
  %7989 = multiply(%7987, %7988) /* ty=Tensor[(1, 1024), float32] */;
  %7990 = multiply(%7966, %7967) /* ty=Tensor[(1, 1024), float32] */;
  %7991 = (%7989, %7990) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7992 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %7993 = concatenate(%7991, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %7994 = concatenate(%7992, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %7995 = nn.dense(%7993, %7994, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %7996 = add(%7995, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7997 = add(%7996, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %7998 = split(%7997, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %7999 = %7998.3 /* ty=Tensor[(1, 1024), float32] */;
  %8000 = %7998.1 /* ty=Tensor[(1, 1024), float32] */;
  %8001 = sigmoid(%8000) /* ty=Tensor[(1, 1024), float32] */;
  %8002 = %7998.0 /* ty=Tensor[(1, 1024), float32] */;
  %8003 = %7998.2 /* ty=Tensor[(1, 1024), float32] */;
  %8004 = sigmoid(%8002) /* ty=Tensor[(1, 1024), float32] */;
  %8005 = tanh(%8003) /* ty=Tensor[(1, 1024), float32] */;
  %8006 = multiply(%8001, %7965) /* ty=Tensor[(1, 1024), float32] */;
  %8007 = multiply(%8004, %8005) /* ty=Tensor[(1, 1024), float32] */;
  %8008 = add(%8006, %8007) /* ty=Tensor[(1, 1024), float32] */;
  %8009 = sigmoid(%7999) /* ty=Tensor[(1, 1024), float32] */;
  %8010 = tanh(%8008) /* ty=Tensor[(1, 1024), float32] */;
  %8011 = %555.173 /* ty=Tensor[(1, 240), float32] */;
  %8012 = (%8011, %7989) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8013 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8014 = concatenate(%8012, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8015 = concatenate(%8013, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8016 = nn.dense(%8014, %8015, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8017 = add(%8016, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8018 = add(%8017, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8019 = split(%8018, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8020 = %8019.3 /* ty=Tensor[(1, 1024), float32] */;
  %8021 = %8019.1 /* ty=Tensor[(1, 1024), float32] */;
  %8022 = sigmoid(%8021) /* ty=Tensor[(1, 1024), float32] */;
  %8023 = %8019.0 /* ty=Tensor[(1, 1024), float32] */;
  %8024 = %8019.2 /* ty=Tensor[(1, 1024), float32] */;
  %8025 = sigmoid(%8023) /* ty=Tensor[(1, 1024), float32] */;
  %8026 = tanh(%8024) /* ty=Tensor[(1, 1024), float32] */;
  %8027 = multiply(%8022, %7986) /* ty=Tensor[(1, 1024), float32] */;
  %8028 = multiply(%8025, %8026) /* ty=Tensor[(1, 1024), float32] */;
  %8029 = add(%8027, %8028) /* ty=Tensor[(1, 1024), float32] */;
  %8030 = sigmoid(%8020) /* ty=Tensor[(1, 1024), float32] */;
  %8031 = tanh(%8029) /* ty=Tensor[(1, 1024), float32] */;
  %8032 = multiply(%8030, %8031) /* ty=Tensor[(1, 1024), float32] */;
  %8033 = multiply(%8009, %8010) /* ty=Tensor[(1, 1024), float32] */;
  %8034 = (%8032, %8033) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8035 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8036 = concatenate(%8034, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8037 = concatenate(%8035, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8038 = nn.dense(%8036, %8037, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8039 = add(%8038, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8040 = add(%8039, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8041 = split(%8040, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8042 = %8041.3 /* ty=Tensor[(1, 1024), float32] */;
  %8043 = %8041.1 /* ty=Tensor[(1, 1024), float32] */;
  %8044 = sigmoid(%8043) /* ty=Tensor[(1, 1024), float32] */;
  %8045 = %8041.0 /* ty=Tensor[(1, 1024), float32] */;
  %8046 = %8041.2 /* ty=Tensor[(1, 1024), float32] */;
  %8047 = sigmoid(%8045) /* ty=Tensor[(1, 1024), float32] */;
  %8048 = tanh(%8046) /* ty=Tensor[(1, 1024), float32] */;
  %8049 = multiply(%8044, %8008) /* ty=Tensor[(1, 1024), float32] */;
  %8050 = multiply(%8047, %8048) /* ty=Tensor[(1, 1024), float32] */;
  %8051 = add(%8049, %8050) /* ty=Tensor[(1, 1024), float32] */;
  %8052 = sigmoid(%8042) /* ty=Tensor[(1, 1024), float32] */;
  %8053 = tanh(%8051) /* ty=Tensor[(1, 1024), float32] */;
  %8054 = %555.174 /* ty=Tensor[(1, 240), float32] */;
  %8055 = (%8054, %8032) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8056 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8057 = concatenate(%8055, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8058 = concatenate(%8056, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8059 = nn.dense(%8057, %8058, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8060 = add(%8059, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8061 = add(%8060, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8062 = split(%8061, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8063 = %8062.3 /* ty=Tensor[(1, 1024), float32] */;
  %8064 = %8062.1 /* ty=Tensor[(1, 1024), float32] */;
  %8065 = sigmoid(%8064) /* ty=Tensor[(1, 1024), float32] */;
  %8066 = %8062.0 /* ty=Tensor[(1, 1024), float32] */;
  %8067 = %8062.2 /* ty=Tensor[(1, 1024), float32] */;
  %8068 = sigmoid(%8066) /* ty=Tensor[(1, 1024), float32] */;
  %8069 = tanh(%8067) /* ty=Tensor[(1, 1024), float32] */;
  %8070 = multiply(%8065, %8029) /* ty=Tensor[(1, 1024), float32] */;
  %8071 = multiply(%8068, %8069) /* ty=Tensor[(1, 1024), float32] */;
  %8072 = add(%8070, %8071) /* ty=Tensor[(1, 1024), float32] */;
  %8073 = sigmoid(%8063) /* ty=Tensor[(1, 1024), float32] */;
  %8074 = tanh(%8072) /* ty=Tensor[(1, 1024), float32] */;
  %8075 = multiply(%8073, %8074) /* ty=Tensor[(1, 1024), float32] */;
  %8076 = multiply(%8052, %8053) /* ty=Tensor[(1, 1024), float32] */;
  %8077 = (%8075, %8076) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8078 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8079 = concatenate(%8077, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8080 = concatenate(%8078, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8081 = nn.dense(%8079, %8080, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8082 = add(%8081, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8083 = add(%8082, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8084 = split(%8083, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8085 = %8084.3 /* ty=Tensor[(1, 1024), float32] */;
  %8086 = %8084.1 /* ty=Tensor[(1, 1024), float32] */;
  %8087 = sigmoid(%8086) /* ty=Tensor[(1, 1024), float32] */;
  %8088 = %8084.0 /* ty=Tensor[(1, 1024), float32] */;
  %8089 = %8084.2 /* ty=Tensor[(1, 1024), float32] */;
  %8090 = sigmoid(%8088) /* ty=Tensor[(1, 1024), float32] */;
  %8091 = tanh(%8089) /* ty=Tensor[(1, 1024), float32] */;
  %8092 = multiply(%8087, %8051) /* ty=Tensor[(1, 1024), float32] */;
  %8093 = multiply(%8090, %8091) /* ty=Tensor[(1, 1024), float32] */;
  %8094 = add(%8092, %8093) /* ty=Tensor[(1, 1024), float32] */;
  %8095 = sigmoid(%8085) /* ty=Tensor[(1, 1024), float32] */;
  %8096 = tanh(%8094) /* ty=Tensor[(1, 1024), float32] */;
  %8097 = %555.175 /* ty=Tensor[(1, 240), float32] */;
  %8098 = (%8097, %8075) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8099 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8100 = concatenate(%8098, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8101 = concatenate(%8099, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8102 = nn.dense(%8100, %8101, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8103 = add(%8102, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8104 = add(%8103, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8105 = split(%8104, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8106 = %8105.3 /* ty=Tensor[(1, 1024), float32] */;
  %8107 = %8105.1 /* ty=Tensor[(1, 1024), float32] */;
  %8108 = sigmoid(%8107) /* ty=Tensor[(1, 1024), float32] */;
  %8109 = %8105.0 /* ty=Tensor[(1, 1024), float32] */;
  %8110 = %8105.2 /* ty=Tensor[(1, 1024), float32] */;
  %8111 = sigmoid(%8109) /* ty=Tensor[(1, 1024), float32] */;
  %8112 = tanh(%8110) /* ty=Tensor[(1, 1024), float32] */;
  %8113 = multiply(%8108, %8072) /* ty=Tensor[(1, 1024), float32] */;
  %8114 = multiply(%8111, %8112) /* ty=Tensor[(1, 1024), float32] */;
  %8115 = add(%8113, %8114) /* ty=Tensor[(1, 1024), float32] */;
  %8116 = sigmoid(%8106) /* ty=Tensor[(1, 1024), float32] */;
  %8117 = tanh(%8115) /* ty=Tensor[(1, 1024), float32] */;
  %8118 = multiply(%8116, %8117) /* ty=Tensor[(1, 1024), float32] */;
  %8119 = multiply(%8095, %8096) /* ty=Tensor[(1, 1024), float32] */;
  %8120 = (%8118, %8119) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8121 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8122 = concatenate(%8120, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8123 = concatenate(%8121, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8124 = nn.dense(%8122, %8123, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8125 = add(%8124, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8126 = add(%8125, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8127 = split(%8126, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8128 = %8127.3 /* ty=Tensor[(1, 1024), float32] */;
  %8129 = %8127.1 /* ty=Tensor[(1, 1024), float32] */;
  %8130 = sigmoid(%8129) /* ty=Tensor[(1, 1024), float32] */;
  %8131 = %8127.0 /* ty=Tensor[(1, 1024), float32] */;
  %8132 = %8127.2 /* ty=Tensor[(1, 1024), float32] */;
  %8133 = sigmoid(%8131) /* ty=Tensor[(1, 1024), float32] */;
  %8134 = tanh(%8132) /* ty=Tensor[(1, 1024), float32] */;
  %8135 = multiply(%8130, %8094) /* ty=Tensor[(1, 1024), float32] */;
  %8136 = multiply(%8133, %8134) /* ty=Tensor[(1, 1024), float32] */;
  %8137 = add(%8135, %8136) /* ty=Tensor[(1, 1024), float32] */;
  %8138 = sigmoid(%8128) /* ty=Tensor[(1, 1024), float32] */;
  %8139 = tanh(%8137) /* ty=Tensor[(1, 1024), float32] */;
  %8140 = %555.176 /* ty=Tensor[(1, 240), float32] */;
  %8141 = (%8140, %8118) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8142 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8143 = concatenate(%8141, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8144 = concatenate(%8142, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8145 = nn.dense(%8143, %8144, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8146 = add(%8145, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8147 = add(%8146, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8148 = split(%8147, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8149 = %8148.3 /* ty=Tensor[(1, 1024), float32] */;
  %8150 = %8148.1 /* ty=Tensor[(1, 1024), float32] */;
  %8151 = sigmoid(%8150) /* ty=Tensor[(1, 1024), float32] */;
  %8152 = %8148.0 /* ty=Tensor[(1, 1024), float32] */;
  %8153 = %8148.2 /* ty=Tensor[(1, 1024), float32] */;
  %8154 = sigmoid(%8152) /* ty=Tensor[(1, 1024), float32] */;
  %8155 = tanh(%8153) /* ty=Tensor[(1, 1024), float32] */;
  %8156 = multiply(%8151, %8115) /* ty=Tensor[(1, 1024), float32] */;
  %8157 = multiply(%8154, %8155) /* ty=Tensor[(1, 1024), float32] */;
  %8158 = add(%8156, %8157) /* ty=Tensor[(1, 1024), float32] */;
  %8159 = sigmoid(%8149) /* ty=Tensor[(1, 1024), float32] */;
  %8160 = tanh(%8158) /* ty=Tensor[(1, 1024), float32] */;
  %8161 = multiply(%8159, %8160) /* ty=Tensor[(1, 1024), float32] */;
  %8162 = multiply(%8138, %8139) /* ty=Tensor[(1, 1024), float32] */;
  %8163 = (%8161, %8162) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8164 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8165 = concatenate(%8163, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8166 = concatenate(%8164, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8167 = nn.dense(%8165, %8166, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8168 = add(%8167, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8169 = add(%8168, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8170 = split(%8169, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8171 = %8170.3 /* ty=Tensor[(1, 1024), float32] */;
  %8172 = %8170.1 /* ty=Tensor[(1, 1024), float32] */;
  %8173 = sigmoid(%8172) /* ty=Tensor[(1, 1024), float32] */;
  %8174 = %8170.0 /* ty=Tensor[(1, 1024), float32] */;
  %8175 = %8170.2 /* ty=Tensor[(1, 1024), float32] */;
  %8176 = sigmoid(%8174) /* ty=Tensor[(1, 1024), float32] */;
  %8177 = tanh(%8175) /* ty=Tensor[(1, 1024), float32] */;
  %8178 = multiply(%8173, %8137) /* ty=Tensor[(1, 1024), float32] */;
  %8179 = multiply(%8176, %8177) /* ty=Tensor[(1, 1024), float32] */;
  %8180 = add(%8178, %8179) /* ty=Tensor[(1, 1024), float32] */;
  %8181 = sigmoid(%8171) /* ty=Tensor[(1, 1024), float32] */;
  %8182 = tanh(%8180) /* ty=Tensor[(1, 1024), float32] */;
  %8183 = %555.177 /* ty=Tensor[(1, 240), float32] */;
  %8184 = (%8183, %8161) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8185 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8186 = concatenate(%8184, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8187 = concatenate(%8185, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8188 = nn.dense(%8186, %8187, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8189 = add(%8188, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8190 = add(%8189, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8191 = split(%8190, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8192 = %8191.3 /* ty=Tensor[(1, 1024), float32] */;
  %8193 = %8191.1 /* ty=Tensor[(1, 1024), float32] */;
  %8194 = sigmoid(%8193) /* ty=Tensor[(1, 1024), float32] */;
  %8195 = %8191.0 /* ty=Tensor[(1, 1024), float32] */;
  %8196 = %8191.2 /* ty=Tensor[(1, 1024), float32] */;
  %8197 = sigmoid(%8195) /* ty=Tensor[(1, 1024), float32] */;
  %8198 = tanh(%8196) /* ty=Tensor[(1, 1024), float32] */;
  %8199 = multiply(%8194, %8158) /* ty=Tensor[(1, 1024), float32] */;
  %8200 = multiply(%8197, %8198) /* ty=Tensor[(1, 1024), float32] */;
  %8201 = add(%8199, %8200) /* ty=Tensor[(1, 1024), float32] */;
  %8202 = sigmoid(%8192) /* ty=Tensor[(1, 1024), float32] */;
  %8203 = tanh(%8201) /* ty=Tensor[(1, 1024), float32] */;
  %8204 = multiply(%8202, %8203) /* ty=Tensor[(1, 1024), float32] */;
  %8205 = multiply(%8181, %8182) /* ty=Tensor[(1, 1024), float32] */;
  %8206 = (%8204, %8205) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8207 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8208 = concatenate(%8206, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8209 = concatenate(%8207, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8210 = nn.dense(%8208, %8209, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8211 = add(%8210, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8212 = add(%8211, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8213 = split(%8212, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8214 = %8213.3 /* ty=Tensor[(1, 1024), float32] */;
  %8215 = %8213.1 /* ty=Tensor[(1, 1024), float32] */;
  %8216 = sigmoid(%8215) /* ty=Tensor[(1, 1024), float32] */;
  %8217 = %8213.0 /* ty=Tensor[(1, 1024), float32] */;
  %8218 = %8213.2 /* ty=Tensor[(1, 1024), float32] */;
  %8219 = sigmoid(%8217) /* ty=Tensor[(1, 1024), float32] */;
  %8220 = tanh(%8218) /* ty=Tensor[(1, 1024), float32] */;
  %8221 = multiply(%8216, %8180) /* ty=Tensor[(1, 1024), float32] */;
  %8222 = multiply(%8219, %8220) /* ty=Tensor[(1, 1024), float32] */;
  %8223 = add(%8221, %8222) /* ty=Tensor[(1, 1024), float32] */;
  %8224 = sigmoid(%8214) /* ty=Tensor[(1, 1024), float32] */;
  %8225 = tanh(%8223) /* ty=Tensor[(1, 1024), float32] */;
  %8226 = %555.178 /* ty=Tensor[(1, 240), float32] */;
  %8227 = (%8226, %8204) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8228 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8229 = concatenate(%8227, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8230 = concatenate(%8228, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8231 = nn.dense(%8229, %8230, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8232 = add(%8231, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8233 = add(%8232, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8234 = split(%8233, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8235 = %8234.3 /* ty=Tensor[(1, 1024), float32] */;
  %8236 = %8234.1 /* ty=Tensor[(1, 1024), float32] */;
  %8237 = sigmoid(%8236) /* ty=Tensor[(1, 1024), float32] */;
  %8238 = %8234.0 /* ty=Tensor[(1, 1024), float32] */;
  %8239 = %8234.2 /* ty=Tensor[(1, 1024), float32] */;
  %8240 = sigmoid(%8238) /* ty=Tensor[(1, 1024), float32] */;
  %8241 = tanh(%8239) /* ty=Tensor[(1, 1024), float32] */;
  %8242 = multiply(%8237, %8201) /* ty=Tensor[(1, 1024), float32] */;
  %8243 = multiply(%8240, %8241) /* ty=Tensor[(1, 1024), float32] */;
  %8244 = add(%8242, %8243) /* ty=Tensor[(1, 1024), float32] */;
  %8245 = sigmoid(%8235) /* ty=Tensor[(1, 1024), float32] */;
  %8246 = tanh(%8244) /* ty=Tensor[(1, 1024), float32] */;
  %8247 = multiply(%8245, %8246) /* ty=Tensor[(1, 1024), float32] */;
  %8248 = multiply(%8224, %8225) /* ty=Tensor[(1, 1024), float32] */;
  %8249 = (%8247, %8248) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8250 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8251 = concatenate(%8249, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8252 = concatenate(%8250, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8253 = nn.dense(%8251, %8252, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8254 = add(%8253, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8255 = add(%8254, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8256 = split(%8255, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8257 = %8256.3 /* ty=Tensor[(1, 1024), float32] */;
  %8258 = %8256.1 /* ty=Tensor[(1, 1024), float32] */;
  %8259 = sigmoid(%8258) /* ty=Tensor[(1, 1024), float32] */;
  %8260 = %8256.0 /* ty=Tensor[(1, 1024), float32] */;
  %8261 = %8256.2 /* ty=Tensor[(1, 1024), float32] */;
  %8262 = sigmoid(%8260) /* ty=Tensor[(1, 1024), float32] */;
  %8263 = tanh(%8261) /* ty=Tensor[(1, 1024), float32] */;
  %8264 = multiply(%8259, %8223) /* ty=Tensor[(1, 1024), float32] */;
  %8265 = multiply(%8262, %8263) /* ty=Tensor[(1, 1024), float32] */;
  %8266 = add(%8264, %8265) /* ty=Tensor[(1, 1024), float32] */;
  %8267 = sigmoid(%8257) /* ty=Tensor[(1, 1024), float32] */;
  %8268 = tanh(%8266) /* ty=Tensor[(1, 1024), float32] */;
  %8269 = %555.179 /* ty=Tensor[(1, 240), float32] */;
  %8270 = (%8269, %8247) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8271 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8272 = concatenate(%8270, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8273 = concatenate(%8271, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8274 = nn.dense(%8272, %8273, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8275 = add(%8274, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8276 = add(%8275, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8277 = split(%8276, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8278 = %8277.3 /* ty=Tensor[(1, 1024), float32] */;
  %8279 = %8277.1 /* ty=Tensor[(1, 1024), float32] */;
  %8280 = sigmoid(%8279) /* ty=Tensor[(1, 1024), float32] */;
  %8281 = %8277.0 /* ty=Tensor[(1, 1024), float32] */;
  %8282 = %8277.2 /* ty=Tensor[(1, 1024), float32] */;
  %8283 = sigmoid(%8281) /* ty=Tensor[(1, 1024), float32] */;
  %8284 = tanh(%8282) /* ty=Tensor[(1, 1024), float32] */;
  %8285 = multiply(%8280, %8244) /* ty=Tensor[(1, 1024), float32] */;
  %8286 = multiply(%8283, %8284) /* ty=Tensor[(1, 1024), float32] */;
  %8287 = add(%8285, %8286) /* ty=Tensor[(1, 1024), float32] */;
  %8288 = sigmoid(%8278) /* ty=Tensor[(1, 1024), float32] */;
  %8289 = tanh(%8287) /* ty=Tensor[(1, 1024), float32] */;
  %8290 = multiply(%8288, %8289) /* ty=Tensor[(1, 1024), float32] */;
  %8291 = multiply(%8267, %8268) /* ty=Tensor[(1, 1024), float32] */;
  %8292 = (%8290, %8291) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8293 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8294 = concatenate(%8292, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8295 = concatenate(%8293, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8296 = nn.dense(%8294, %8295, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8297 = add(%8296, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8298 = add(%8297, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8299 = split(%8298, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8300 = %8299.3 /* ty=Tensor[(1, 1024), float32] */;
  %8301 = %8299.1 /* ty=Tensor[(1, 1024), float32] */;
  %8302 = sigmoid(%8301) /* ty=Tensor[(1, 1024), float32] */;
  %8303 = %8299.0 /* ty=Tensor[(1, 1024), float32] */;
  %8304 = %8299.2 /* ty=Tensor[(1, 1024), float32] */;
  %8305 = sigmoid(%8303) /* ty=Tensor[(1, 1024), float32] */;
  %8306 = tanh(%8304) /* ty=Tensor[(1, 1024), float32] */;
  %8307 = multiply(%8302, %8266) /* ty=Tensor[(1, 1024), float32] */;
  %8308 = multiply(%8305, %8306) /* ty=Tensor[(1, 1024), float32] */;
  %8309 = add(%8307, %8308) /* ty=Tensor[(1, 1024), float32] */;
  %8310 = sigmoid(%8300) /* ty=Tensor[(1, 1024), float32] */;
  %8311 = tanh(%8309) /* ty=Tensor[(1, 1024), float32] */;
  %8312 = %555.180 /* ty=Tensor[(1, 240), float32] */;
  %8313 = (%8312, %8290) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8314 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8315 = concatenate(%8313, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8316 = concatenate(%8314, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8317 = nn.dense(%8315, %8316, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8318 = add(%8317, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8319 = add(%8318, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8320 = split(%8319, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8321 = %8320.3 /* ty=Tensor[(1, 1024), float32] */;
  %8322 = %8320.1 /* ty=Tensor[(1, 1024), float32] */;
  %8323 = sigmoid(%8322) /* ty=Tensor[(1, 1024), float32] */;
  %8324 = %8320.0 /* ty=Tensor[(1, 1024), float32] */;
  %8325 = %8320.2 /* ty=Tensor[(1, 1024), float32] */;
  %8326 = sigmoid(%8324) /* ty=Tensor[(1, 1024), float32] */;
  %8327 = tanh(%8325) /* ty=Tensor[(1, 1024), float32] */;
  %8328 = multiply(%8323, %8287) /* ty=Tensor[(1, 1024), float32] */;
  %8329 = multiply(%8326, %8327) /* ty=Tensor[(1, 1024), float32] */;
  %8330 = add(%8328, %8329) /* ty=Tensor[(1, 1024), float32] */;
  %8331 = sigmoid(%8321) /* ty=Tensor[(1, 1024), float32] */;
  %8332 = tanh(%8330) /* ty=Tensor[(1, 1024), float32] */;
  %8333 = multiply(%8331, %8332) /* ty=Tensor[(1, 1024), float32] */;
  %8334 = multiply(%8310, %8311) /* ty=Tensor[(1, 1024), float32] */;
  %8335 = (%8333, %8334) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8336 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8337 = concatenate(%8335, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8338 = concatenate(%8336, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8339 = nn.dense(%8337, %8338, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8340 = add(%8339, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8341 = add(%8340, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8342 = split(%8341, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8343 = %8342.3 /* ty=Tensor[(1, 1024), float32] */;
  %8344 = %8342.1 /* ty=Tensor[(1, 1024), float32] */;
  %8345 = sigmoid(%8344) /* ty=Tensor[(1, 1024), float32] */;
  %8346 = %8342.0 /* ty=Tensor[(1, 1024), float32] */;
  %8347 = %8342.2 /* ty=Tensor[(1, 1024), float32] */;
  %8348 = sigmoid(%8346) /* ty=Tensor[(1, 1024), float32] */;
  %8349 = tanh(%8347) /* ty=Tensor[(1, 1024), float32] */;
  %8350 = multiply(%8345, %8309) /* ty=Tensor[(1, 1024), float32] */;
  %8351 = multiply(%8348, %8349) /* ty=Tensor[(1, 1024), float32] */;
  %8352 = add(%8350, %8351) /* ty=Tensor[(1, 1024), float32] */;
  %8353 = sigmoid(%8343) /* ty=Tensor[(1, 1024), float32] */;
  %8354 = tanh(%8352) /* ty=Tensor[(1, 1024), float32] */;
  %8355 = %555.181 /* ty=Tensor[(1, 240), float32] */;
  %8356 = (%8355, %8333) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8357 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8358 = concatenate(%8356, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8359 = concatenate(%8357, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8360 = nn.dense(%8358, %8359, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8361 = add(%8360, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8362 = add(%8361, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8363 = split(%8362, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8364 = %8363.3 /* ty=Tensor[(1, 1024), float32] */;
  %8365 = %8363.1 /* ty=Tensor[(1, 1024), float32] */;
  %8366 = sigmoid(%8365) /* ty=Tensor[(1, 1024), float32] */;
  %8367 = %8363.0 /* ty=Tensor[(1, 1024), float32] */;
  %8368 = %8363.2 /* ty=Tensor[(1, 1024), float32] */;
  %8369 = sigmoid(%8367) /* ty=Tensor[(1, 1024), float32] */;
  %8370 = tanh(%8368) /* ty=Tensor[(1, 1024), float32] */;
  %8371 = multiply(%8366, %8330) /* ty=Tensor[(1, 1024), float32] */;
  %8372 = multiply(%8369, %8370) /* ty=Tensor[(1, 1024), float32] */;
  %8373 = add(%8371, %8372) /* ty=Tensor[(1, 1024), float32] */;
  %8374 = sigmoid(%8364) /* ty=Tensor[(1, 1024), float32] */;
  %8375 = tanh(%8373) /* ty=Tensor[(1, 1024), float32] */;
  %8376 = multiply(%8374, %8375) /* ty=Tensor[(1, 1024), float32] */;
  %8377 = multiply(%8353, %8354) /* ty=Tensor[(1, 1024), float32] */;
  %8378 = (%8376, %8377) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8379 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8380 = concatenate(%8378, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8381 = concatenate(%8379, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8382 = nn.dense(%8380, %8381, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8383 = add(%8382, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8384 = add(%8383, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8385 = split(%8384, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8386 = %8385.3 /* ty=Tensor[(1, 1024), float32] */;
  %8387 = %8385.1 /* ty=Tensor[(1, 1024), float32] */;
  %8388 = sigmoid(%8387) /* ty=Tensor[(1, 1024), float32] */;
  %8389 = %8385.0 /* ty=Tensor[(1, 1024), float32] */;
  %8390 = %8385.2 /* ty=Tensor[(1, 1024), float32] */;
  %8391 = sigmoid(%8389) /* ty=Tensor[(1, 1024), float32] */;
  %8392 = tanh(%8390) /* ty=Tensor[(1, 1024), float32] */;
  %8393 = multiply(%8388, %8352) /* ty=Tensor[(1, 1024), float32] */;
  %8394 = multiply(%8391, %8392) /* ty=Tensor[(1, 1024), float32] */;
  %8395 = add(%8393, %8394) /* ty=Tensor[(1, 1024), float32] */;
  %8396 = sigmoid(%8386) /* ty=Tensor[(1, 1024), float32] */;
  %8397 = tanh(%8395) /* ty=Tensor[(1, 1024), float32] */;
  %8398 = %555.182 /* ty=Tensor[(1, 240), float32] */;
  %8399 = (%8398, %8376) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8400 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8401 = concatenate(%8399, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8402 = concatenate(%8400, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8403 = nn.dense(%8401, %8402, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8404 = add(%8403, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8405 = add(%8404, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8406 = split(%8405, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8407 = %8406.3 /* ty=Tensor[(1, 1024), float32] */;
  %8408 = %8406.1 /* ty=Tensor[(1, 1024), float32] */;
  %8409 = sigmoid(%8408) /* ty=Tensor[(1, 1024), float32] */;
  %8410 = %8406.0 /* ty=Tensor[(1, 1024), float32] */;
  %8411 = %8406.2 /* ty=Tensor[(1, 1024), float32] */;
  %8412 = sigmoid(%8410) /* ty=Tensor[(1, 1024), float32] */;
  %8413 = tanh(%8411) /* ty=Tensor[(1, 1024), float32] */;
  %8414 = multiply(%8409, %8373) /* ty=Tensor[(1, 1024), float32] */;
  %8415 = multiply(%8412, %8413) /* ty=Tensor[(1, 1024), float32] */;
  %8416 = add(%8414, %8415) /* ty=Tensor[(1, 1024), float32] */;
  %8417 = sigmoid(%8407) /* ty=Tensor[(1, 1024), float32] */;
  %8418 = tanh(%8416) /* ty=Tensor[(1, 1024), float32] */;
  %8419 = multiply(%8417, %8418) /* ty=Tensor[(1, 1024), float32] */;
  %8420 = multiply(%8396, %8397) /* ty=Tensor[(1, 1024), float32] */;
  %8421 = (%8419, %8420) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8422 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8423 = concatenate(%8421, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8424 = concatenate(%8422, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8425 = nn.dense(%8423, %8424, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8426 = add(%8425, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8427 = add(%8426, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8428 = split(%8427, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8429 = %8428.3 /* ty=Tensor[(1, 1024), float32] */;
  %8430 = %8428.1 /* ty=Tensor[(1, 1024), float32] */;
  %8431 = sigmoid(%8430) /* ty=Tensor[(1, 1024), float32] */;
  %8432 = %8428.0 /* ty=Tensor[(1, 1024), float32] */;
  %8433 = %8428.2 /* ty=Tensor[(1, 1024), float32] */;
  %8434 = sigmoid(%8432) /* ty=Tensor[(1, 1024), float32] */;
  %8435 = tanh(%8433) /* ty=Tensor[(1, 1024), float32] */;
  %8436 = multiply(%8431, %8395) /* ty=Tensor[(1, 1024), float32] */;
  %8437 = multiply(%8434, %8435) /* ty=Tensor[(1, 1024), float32] */;
  %8438 = add(%8436, %8437) /* ty=Tensor[(1, 1024), float32] */;
  %8439 = sigmoid(%8429) /* ty=Tensor[(1, 1024), float32] */;
  %8440 = tanh(%8438) /* ty=Tensor[(1, 1024), float32] */;
  %8441 = %555.183 /* ty=Tensor[(1, 240), float32] */;
  %8442 = (%8441, %8419) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8443 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8444 = concatenate(%8442, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8445 = concatenate(%8443, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8446 = nn.dense(%8444, %8445, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8447 = add(%8446, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8448 = add(%8447, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8449 = split(%8448, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8450 = %8449.3 /* ty=Tensor[(1, 1024), float32] */;
  %8451 = %8449.1 /* ty=Tensor[(1, 1024), float32] */;
  %8452 = sigmoid(%8451) /* ty=Tensor[(1, 1024), float32] */;
  %8453 = %8449.0 /* ty=Tensor[(1, 1024), float32] */;
  %8454 = %8449.2 /* ty=Tensor[(1, 1024), float32] */;
  %8455 = sigmoid(%8453) /* ty=Tensor[(1, 1024), float32] */;
  %8456 = tanh(%8454) /* ty=Tensor[(1, 1024), float32] */;
  %8457 = multiply(%8452, %8416) /* ty=Tensor[(1, 1024), float32] */;
  %8458 = multiply(%8455, %8456) /* ty=Tensor[(1, 1024), float32] */;
  %8459 = add(%8457, %8458) /* ty=Tensor[(1, 1024), float32] */;
  %8460 = sigmoid(%8450) /* ty=Tensor[(1, 1024), float32] */;
  %8461 = tanh(%8459) /* ty=Tensor[(1, 1024), float32] */;
  %8462 = multiply(%8460, %8461) /* ty=Tensor[(1, 1024), float32] */;
  %8463 = multiply(%8439, %8440) /* ty=Tensor[(1, 1024), float32] */;
  %8464 = (%8462, %8463) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8465 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8466 = concatenate(%8464, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8467 = concatenate(%8465, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8468 = nn.dense(%8466, %8467, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8469 = add(%8468, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8470 = add(%8469, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8471 = split(%8470, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8472 = %8471.3 /* ty=Tensor[(1, 1024), float32] */;
  %8473 = %8471.1 /* ty=Tensor[(1, 1024), float32] */;
  %8474 = sigmoid(%8473) /* ty=Tensor[(1, 1024), float32] */;
  %8475 = %8471.0 /* ty=Tensor[(1, 1024), float32] */;
  %8476 = %8471.2 /* ty=Tensor[(1, 1024), float32] */;
  %8477 = sigmoid(%8475) /* ty=Tensor[(1, 1024), float32] */;
  %8478 = tanh(%8476) /* ty=Tensor[(1, 1024), float32] */;
  %8479 = multiply(%8474, %8438) /* ty=Tensor[(1, 1024), float32] */;
  %8480 = multiply(%8477, %8478) /* ty=Tensor[(1, 1024), float32] */;
  %8481 = add(%8479, %8480) /* ty=Tensor[(1, 1024), float32] */;
  %8482 = sigmoid(%8472) /* ty=Tensor[(1, 1024), float32] */;
  %8483 = tanh(%8481) /* ty=Tensor[(1, 1024), float32] */;
  %8484 = %555.184 /* ty=Tensor[(1, 240), float32] */;
  %8485 = (%8484, %8462) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8486 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8487 = concatenate(%8485, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8488 = concatenate(%8486, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8489 = nn.dense(%8487, %8488, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8490 = add(%8489, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8491 = add(%8490, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8492 = split(%8491, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8493 = %8492.3 /* ty=Tensor[(1, 1024), float32] */;
  %8494 = %8492.1 /* ty=Tensor[(1, 1024), float32] */;
  %8495 = sigmoid(%8494) /* ty=Tensor[(1, 1024), float32] */;
  %8496 = %8492.0 /* ty=Tensor[(1, 1024), float32] */;
  %8497 = %8492.2 /* ty=Tensor[(1, 1024), float32] */;
  %8498 = sigmoid(%8496) /* ty=Tensor[(1, 1024), float32] */;
  %8499 = tanh(%8497) /* ty=Tensor[(1, 1024), float32] */;
  %8500 = multiply(%8495, %8459) /* ty=Tensor[(1, 1024), float32] */;
  %8501 = multiply(%8498, %8499) /* ty=Tensor[(1, 1024), float32] */;
  %8502 = add(%8500, %8501) /* ty=Tensor[(1, 1024), float32] */;
  %8503 = sigmoid(%8493) /* ty=Tensor[(1, 1024), float32] */;
  %8504 = tanh(%8502) /* ty=Tensor[(1, 1024), float32] */;
  %8505 = multiply(%8503, %8504) /* ty=Tensor[(1, 1024), float32] */;
  %8506 = multiply(%8482, %8483) /* ty=Tensor[(1, 1024), float32] */;
  %8507 = (%8505, %8506) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8508 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8509 = concatenate(%8507, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8510 = concatenate(%8508, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8511 = nn.dense(%8509, %8510, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8512 = add(%8511, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8513 = add(%8512, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8514 = split(%8513, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8515 = %8514.3 /* ty=Tensor[(1, 1024), float32] */;
  %8516 = %8514.1 /* ty=Tensor[(1, 1024), float32] */;
  %8517 = sigmoid(%8516) /* ty=Tensor[(1, 1024), float32] */;
  %8518 = %8514.0 /* ty=Tensor[(1, 1024), float32] */;
  %8519 = %8514.2 /* ty=Tensor[(1, 1024), float32] */;
  %8520 = sigmoid(%8518) /* ty=Tensor[(1, 1024), float32] */;
  %8521 = tanh(%8519) /* ty=Tensor[(1, 1024), float32] */;
  %8522 = multiply(%8517, %8481) /* ty=Tensor[(1, 1024), float32] */;
  %8523 = multiply(%8520, %8521) /* ty=Tensor[(1, 1024), float32] */;
  %8524 = add(%8522, %8523) /* ty=Tensor[(1, 1024), float32] */;
  %8525 = sigmoid(%8515) /* ty=Tensor[(1, 1024), float32] */;
  %8526 = tanh(%8524) /* ty=Tensor[(1, 1024), float32] */;
  %8527 = %555.185 /* ty=Tensor[(1, 240), float32] */;
  %8528 = (%8527, %8505) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8529 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8530 = concatenate(%8528, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8531 = concatenate(%8529, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8532 = nn.dense(%8530, %8531, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8533 = add(%8532, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8534 = add(%8533, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8535 = split(%8534, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8536 = %8535.3 /* ty=Tensor[(1, 1024), float32] */;
  %8537 = %8535.1 /* ty=Tensor[(1, 1024), float32] */;
  %8538 = sigmoid(%8537) /* ty=Tensor[(1, 1024), float32] */;
  %8539 = %8535.0 /* ty=Tensor[(1, 1024), float32] */;
  %8540 = %8535.2 /* ty=Tensor[(1, 1024), float32] */;
  %8541 = sigmoid(%8539) /* ty=Tensor[(1, 1024), float32] */;
  %8542 = tanh(%8540) /* ty=Tensor[(1, 1024), float32] */;
  %8543 = multiply(%8538, %8502) /* ty=Tensor[(1, 1024), float32] */;
  %8544 = multiply(%8541, %8542) /* ty=Tensor[(1, 1024), float32] */;
  %8545 = add(%8543, %8544) /* ty=Tensor[(1, 1024), float32] */;
  %8546 = sigmoid(%8536) /* ty=Tensor[(1, 1024), float32] */;
  %8547 = tanh(%8545) /* ty=Tensor[(1, 1024), float32] */;
  %8548 = multiply(%8546, %8547) /* ty=Tensor[(1, 1024), float32] */;
  %8549 = multiply(%8525, %8526) /* ty=Tensor[(1, 1024), float32] */;
  %8550 = (%8548, %8549) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8551 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8552 = concatenate(%8550, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8553 = concatenate(%8551, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8554 = nn.dense(%8552, %8553, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8555 = add(%8554, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8556 = add(%8555, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8557 = split(%8556, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8558 = %8557.3 /* ty=Tensor[(1, 1024), float32] */;
  %8559 = %8557.1 /* ty=Tensor[(1, 1024), float32] */;
  %8560 = sigmoid(%8559) /* ty=Tensor[(1, 1024), float32] */;
  %8561 = %8557.0 /* ty=Tensor[(1, 1024), float32] */;
  %8562 = %8557.2 /* ty=Tensor[(1, 1024), float32] */;
  %8563 = sigmoid(%8561) /* ty=Tensor[(1, 1024), float32] */;
  %8564 = tanh(%8562) /* ty=Tensor[(1, 1024), float32] */;
  %8565 = multiply(%8560, %8524) /* ty=Tensor[(1, 1024), float32] */;
  %8566 = multiply(%8563, %8564) /* ty=Tensor[(1, 1024), float32] */;
  %8567 = add(%8565, %8566) /* ty=Tensor[(1, 1024), float32] */;
  %8568 = sigmoid(%8558) /* ty=Tensor[(1, 1024), float32] */;
  %8569 = tanh(%8567) /* ty=Tensor[(1, 1024), float32] */;
  %8570 = %555.186 /* ty=Tensor[(1, 240), float32] */;
  %8571 = (%8570, %8548) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8572 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8573 = concatenate(%8571, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8574 = concatenate(%8572, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8575 = nn.dense(%8573, %8574, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8576 = add(%8575, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8577 = add(%8576, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8578 = split(%8577, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8579 = %8578.3 /* ty=Tensor[(1, 1024), float32] */;
  %8580 = %8578.1 /* ty=Tensor[(1, 1024), float32] */;
  %8581 = sigmoid(%8580) /* ty=Tensor[(1, 1024), float32] */;
  %8582 = %8578.0 /* ty=Tensor[(1, 1024), float32] */;
  %8583 = %8578.2 /* ty=Tensor[(1, 1024), float32] */;
  %8584 = sigmoid(%8582) /* ty=Tensor[(1, 1024), float32] */;
  %8585 = tanh(%8583) /* ty=Tensor[(1, 1024), float32] */;
  %8586 = multiply(%8581, %8545) /* ty=Tensor[(1, 1024), float32] */;
  %8587 = multiply(%8584, %8585) /* ty=Tensor[(1, 1024), float32] */;
  %8588 = add(%8586, %8587) /* ty=Tensor[(1, 1024), float32] */;
  %8589 = sigmoid(%8579) /* ty=Tensor[(1, 1024), float32] */;
  %8590 = tanh(%8588) /* ty=Tensor[(1, 1024), float32] */;
  %8591 = multiply(%8589, %8590) /* ty=Tensor[(1, 1024), float32] */;
  %8592 = multiply(%8568, %8569) /* ty=Tensor[(1, 1024), float32] */;
  %8593 = (%8591, %8592) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8594 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8595 = concatenate(%8593, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8596 = concatenate(%8594, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8597 = nn.dense(%8595, %8596, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8598 = add(%8597, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8599 = add(%8598, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8600 = split(%8599, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8601 = %8600.3 /* ty=Tensor[(1, 1024), float32] */;
  %8602 = %8600.1 /* ty=Tensor[(1, 1024), float32] */;
  %8603 = sigmoid(%8602) /* ty=Tensor[(1, 1024), float32] */;
  %8604 = %8600.0 /* ty=Tensor[(1, 1024), float32] */;
  %8605 = %8600.2 /* ty=Tensor[(1, 1024), float32] */;
  %8606 = sigmoid(%8604) /* ty=Tensor[(1, 1024), float32] */;
  %8607 = tanh(%8605) /* ty=Tensor[(1, 1024), float32] */;
  %8608 = multiply(%8603, %8567) /* ty=Tensor[(1, 1024), float32] */;
  %8609 = multiply(%8606, %8607) /* ty=Tensor[(1, 1024), float32] */;
  %8610 = add(%8608, %8609) /* ty=Tensor[(1, 1024), float32] */;
  %8611 = sigmoid(%8601) /* ty=Tensor[(1, 1024), float32] */;
  %8612 = tanh(%8610) /* ty=Tensor[(1, 1024), float32] */;
  %8613 = %555.187 /* ty=Tensor[(1, 240), float32] */;
  %8614 = (%8613, %8591) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8615 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8616 = concatenate(%8614, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8617 = concatenate(%8615, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8618 = nn.dense(%8616, %8617, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8619 = add(%8618, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8620 = add(%8619, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8621 = split(%8620, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8622 = %8621.3 /* ty=Tensor[(1, 1024), float32] */;
  %8623 = %8621.1 /* ty=Tensor[(1, 1024), float32] */;
  %8624 = sigmoid(%8623) /* ty=Tensor[(1, 1024), float32] */;
  %8625 = %8621.0 /* ty=Tensor[(1, 1024), float32] */;
  %8626 = %8621.2 /* ty=Tensor[(1, 1024), float32] */;
  %8627 = sigmoid(%8625) /* ty=Tensor[(1, 1024), float32] */;
  %8628 = tanh(%8626) /* ty=Tensor[(1, 1024), float32] */;
  %8629 = multiply(%8624, %8588) /* ty=Tensor[(1, 1024), float32] */;
  %8630 = multiply(%8627, %8628) /* ty=Tensor[(1, 1024), float32] */;
  %8631 = add(%8629, %8630) /* ty=Tensor[(1, 1024), float32] */;
  %8632 = sigmoid(%8622) /* ty=Tensor[(1, 1024), float32] */;
  %8633 = tanh(%8631) /* ty=Tensor[(1, 1024), float32] */;
  %8634 = multiply(%8632, %8633) /* ty=Tensor[(1, 1024), float32] */;
  %8635 = multiply(%8611, %8612) /* ty=Tensor[(1, 1024), float32] */;
  %8636 = (%8634, %8635) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8637 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8638 = concatenate(%8636, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8639 = concatenate(%8637, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8640 = nn.dense(%8638, %8639, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8641 = add(%8640, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8642 = add(%8641, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8643 = split(%8642, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8644 = %8643.3 /* ty=Tensor[(1, 1024), float32] */;
  %8645 = %8643.1 /* ty=Tensor[(1, 1024), float32] */;
  %8646 = sigmoid(%8645) /* ty=Tensor[(1, 1024), float32] */;
  %8647 = %8643.0 /* ty=Tensor[(1, 1024), float32] */;
  %8648 = %8643.2 /* ty=Tensor[(1, 1024), float32] */;
  %8649 = sigmoid(%8647) /* ty=Tensor[(1, 1024), float32] */;
  %8650 = tanh(%8648) /* ty=Tensor[(1, 1024), float32] */;
  %8651 = multiply(%8646, %8610) /* ty=Tensor[(1, 1024), float32] */;
  %8652 = multiply(%8649, %8650) /* ty=Tensor[(1, 1024), float32] */;
  %8653 = add(%8651, %8652) /* ty=Tensor[(1, 1024), float32] */;
  %8654 = sigmoid(%8644) /* ty=Tensor[(1, 1024), float32] */;
  %8655 = tanh(%8653) /* ty=Tensor[(1, 1024), float32] */;
  %8656 = %555.188 /* ty=Tensor[(1, 240), float32] */;
  %8657 = (%8656, %8634) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8658 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8659 = concatenate(%8657, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8660 = concatenate(%8658, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8661 = nn.dense(%8659, %8660, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8662 = add(%8661, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8663 = add(%8662, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8664 = split(%8663, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8665 = %8664.3 /* ty=Tensor[(1, 1024), float32] */;
  %8666 = %8664.1 /* ty=Tensor[(1, 1024), float32] */;
  %8667 = sigmoid(%8666) /* ty=Tensor[(1, 1024), float32] */;
  %8668 = %8664.0 /* ty=Tensor[(1, 1024), float32] */;
  %8669 = %8664.2 /* ty=Tensor[(1, 1024), float32] */;
  %8670 = sigmoid(%8668) /* ty=Tensor[(1, 1024), float32] */;
  %8671 = tanh(%8669) /* ty=Tensor[(1, 1024), float32] */;
  %8672 = multiply(%8667, %8631) /* ty=Tensor[(1, 1024), float32] */;
  %8673 = multiply(%8670, %8671) /* ty=Tensor[(1, 1024), float32] */;
  %8674 = add(%8672, %8673) /* ty=Tensor[(1, 1024), float32] */;
  %8675 = sigmoid(%8665) /* ty=Tensor[(1, 1024), float32] */;
  %8676 = tanh(%8674) /* ty=Tensor[(1, 1024), float32] */;
  %8677 = multiply(%8675, %8676) /* ty=Tensor[(1, 1024), float32] */;
  %8678 = multiply(%8654, %8655) /* ty=Tensor[(1, 1024), float32] */;
  %8679 = (%8677, %8678) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8680 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8681 = concatenate(%8679, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8682 = concatenate(%8680, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8683 = nn.dense(%8681, %8682, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8684 = add(%8683, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8685 = add(%8684, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8686 = split(%8685, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8687 = %8686.3 /* ty=Tensor[(1, 1024), float32] */;
  %8688 = %8686.1 /* ty=Tensor[(1, 1024), float32] */;
  %8689 = sigmoid(%8688) /* ty=Tensor[(1, 1024), float32] */;
  %8690 = %8686.0 /* ty=Tensor[(1, 1024), float32] */;
  %8691 = %8686.2 /* ty=Tensor[(1, 1024), float32] */;
  %8692 = sigmoid(%8690) /* ty=Tensor[(1, 1024), float32] */;
  %8693 = tanh(%8691) /* ty=Tensor[(1, 1024), float32] */;
  %8694 = multiply(%8689, %8653) /* ty=Tensor[(1, 1024), float32] */;
  %8695 = multiply(%8692, %8693) /* ty=Tensor[(1, 1024), float32] */;
  %8696 = add(%8694, %8695) /* ty=Tensor[(1, 1024), float32] */;
  %8697 = sigmoid(%8687) /* ty=Tensor[(1, 1024), float32] */;
  %8698 = tanh(%8696) /* ty=Tensor[(1, 1024), float32] */;
  %8699 = %555.189 /* ty=Tensor[(1, 240), float32] */;
  %8700 = (%8699, %8677) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8701 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8702 = concatenate(%8700, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8703 = concatenate(%8701, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8704 = nn.dense(%8702, %8703, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8705 = add(%8704, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8706 = add(%8705, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8707 = split(%8706, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8708 = %8707.3 /* ty=Tensor[(1, 1024), float32] */;
  %8709 = %8707.1 /* ty=Tensor[(1, 1024), float32] */;
  %8710 = sigmoid(%8709) /* ty=Tensor[(1, 1024), float32] */;
  %8711 = %8707.0 /* ty=Tensor[(1, 1024), float32] */;
  %8712 = %8707.2 /* ty=Tensor[(1, 1024), float32] */;
  %8713 = sigmoid(%8711) /* ty=Tensor[(1, 1024), float32] */;
  %8714 = tanh(%8712) /* ty=Tensor[(1, 1024), float32] */;
  %8715 = multiply(%8710, %8674) /* ty=Tensor[(1, 1024), float32] */;
  %8716 = multiply(%8713, %8714) /* ty=Tensor[(1, 1024), float32] */;
  %8717 = add(%8715, %8716) /* ty=Tensor[(1, 1024), float32] */;
  %8718 = sigmoid(%8708) /* ty=Tensor[(1, 1024), float32] */;
  %8719 = tanh(%8717) /* ty=Tensor[(1, 1024), float32] */;
  %8720 = multiply(%8718, %8719) /* ty=Tensor[(1, 1024), float32] */;
  %8721 = multiply(%8697, %8698) /* ty=Tensor[(1, 1024), float32] */;
  %8722 = (%8720, %8721) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8723 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8724 = concatenate(%8722, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8725 = concatenate(%8723, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8726 = nn.dense(%8724, %8725, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8727 = add(%8726, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8728 = add(%8727, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8729 = split(%8728, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8730 = %8729.3 /* ty=Tensor[(1, 1024), float32] */;
  %8731 = %8729.1 /* ty=Tensor[(1, 1024), float32] */;
  %8732 = sigmoid(%8731) /* ty=Tensor[(1, 1024), float32] */;
  %8733 = %8729.0 /* ty=Tensor[(1, 1024), float32] */;
  %8734 = %8729.2 /* ty=Tensor[(1, 1024), float32] */;
  %8735 = sigmoid(%8733) /* ty=Tensor[(1, 1024), float32] */;
  %8736 = tanh(%8734) /* ty=Tensor[(1, 1024), float32] */;
  %8737 = multiply(%8732, %8696) /* ty=Tensor[(1, 1024), float32] */;
  %8738 = multiply(%8735, %8736) /* ty=Tensor[(1, 1024), float32] */;
  %8739 = add(%8737, %8738) /* ty=Tensor[(1, 1024), float32] */;
  %8740 = sigmoid(%8730) /* ty=Tensor[(1, 1024), float32] */;
  %8741 = tanh(%8739) /* ty=Tensor[(1, 1024), float32] */;
  %8742 = %555.190 /* ty=Tensor[(1, 240), float32] */;
  %8743 = (%8742, %8720) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8744 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8745 = concatenate(%8743, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8746 = concatenate(%8744, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8747 = nn.dense(%8745, %8746, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8748 = add(%8747, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8749 = add(%8748, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8750 = split(%8749, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8751 = %8750.3 /* ty=Tensor[(1, 1024), float32] */;
  %8752 = %8750.1 /* ty=Tensor[(1, 1024), float32] */;
  %8753 = sigmoid(%8752) /* ty=Tensor[(1, 1024), float32] */;
  %8754 = %8750.0 /* ty=Tensor[(1, 1024), float32] */;
  %8755 = %8750.2 /* ty=Tensor[(1, 1024), float32] */;
  %8756 = sigmoid(%8754) /* ty=Tensor[(1, 1024), float32] */;
  %8757 = tanh(%8755) /* ty=Tensor[(1, 1024), float32] */;
  %8758 = multiply(%8753, %8717) /* ty=Tensor[(1, 1024), float32] */;
  %8759 = multiply(%8756, %8757) /* ty=Tensor[(1, 1024), float32] */;
  %8760 = add(%8758, %8759) /* ty=Tensor[(1, 1024), float32] */;
  %8761 = sigmoid(%8751) /* ty=Tensor[(1, 1024), float32] */;
  %8762 = tanh(%8760) /* ty=Tensor[(1, 1024), float32] */;
  %8763 = multiply(%8761, %8762) /* ty=Tensor[(1, 1024), float32] */;
  %8764 = multiply(%8740, %8741) /* ty=Tensor[(1, 1024), float32] */;
  %8765 = (%8763, %8764) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8766 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8767 = concatenate(%8765, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8768 = concatenate(%8766, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8769 = nn.dense(%8767, %8768, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8770 = add(%8769, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8771 = add(%8770, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8772 = split(%8771, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8773 = %8772.3 /* ty=Tensor[(1, 1024), float32] */;
  %8774 = %8772.1 /* ty=Tensor[(1, 1024), float32] */;
  %8775 = sigmoid(%8774) /* ty=Tensor[(1, 1024), float32] */;
  %8776 = %8772.0 /* ty=Tensor[(1, 1024), float32] */;
  %8777 = %8772.2 /* ty=Tensor[(1, 1024), float32] */;
  %8778 = sigmoid(%8776) /* ty=Tensor[(1, 1024), float32] */;
  %8779 = tanh(%8777) /* ty=Tensor[(1, 1024), float32] */;
  %8780 = multiply(%8775, %8739) /* ty=Tensor[(1, 1024), float32] */;
  %8781 = multiply(%8778, %8779) /* ty=Tensor[(1, 1024), float32] */;
  %8782 = add(%8780, %8781) /* ty=Tensor[(1, 1024), float32] */;
  %8783 = sigmoid(%8773) /* ty=Tensor[(1, 1024), float32] */;
  %8784 = tanh(%8782) /* ty=Tensor[(1, 1024), float32] */;
  %8785 = %555.191 /* ty=Tensor[(1, 240), float32] */;
  %8786 = (%8785, %8763) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8787 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8788 = concatenate(%8786, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8789 = concatenate(%8787, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8790 = nn.dense(%8788, %8789, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8791 = add(%8790, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8792 = add(%8791, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8793 = split(%8792, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8794 = %8793.3 /* ty=Tensor[(1, 1024), float32] */;
  %8795 = %8793.1 /* ty=Tensor[(1, 1024), float32] */;
  %8796 = sigmoid(%8795) /* ty=Tensor[(1, 1024), float32] */;
  %8797 = %8793.0 /* ty=Tensor[(1, 1024), float32] */;
  %8798 = %8793.2 /* ty=Tensor[(1, 1024), float32] */;
  %8799 = sigmoid(%8797) /* ty=Tensor[(1, 1024), float32] */;
  %8800 = tanh(%8798) /* ty=Tensor[(1, 1024), float32] */;
  %8801 = multiply(%8796, %8760) /* ty=Tensor[(1, 1024), float32] */;
  %8802 = multiply(%8799, %8800) /* ty=Tensor[(1, 1024), float32] */;
  %8803 = add(%8801, %8802) /* ty=Tensor[(1, 1024), float32] */;
  %8804 = sigmoid(%8794) /* ty=Tensor[(1, 1024), float32] */;
  %8805 = tanh(%8803) /* ty=Tensor[(1, 1024), float32] */;
  %8806 = multiply(%8804, %8805) /* ty=Tensor[(1, 1024), float32] */;
  %8807 = multiply(%8783, %8784) /* ty=Tensor[(1, 1024), float32] */;
  %8808 = (%8806, %8807) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8809 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8810 = concatenate(%8808, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8811 = concatenate(%8809, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8812 = nn.dense(%8810, %8811, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8813 = add(%8812, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8814 = add(%8813, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8815 = split(%8814, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8816 = %8815.3 /* ty=Tensor[(1, 1024), float32] */;
  %8817 = %8815.1 /* ty=Tensor[(1, 1024), float32] */;
  %8818 = sigmoid(%8817) /* ty=Tensor[(1, 1024), float32] */;
  %8819 = %8815.0 /* ty=Tensor[(1, 1024), float32] */;
  %8820 = %8815.2 /* ty=Tensor[(1, 1024), float32] */;
  %8821 = sigmoid(%8819) /* ty=Tensor[(1, 1024), float32] */;
  %8822 = tanh(%8820) /* ty=Tensor[(1, 1024), float32] */;
  %8823 = multiply(%8818, %8782) /* ty=Tensor[(1, 1024), float32] */;
  %8824 = multiply(%8821, %8822) /* ty=Tensor[(1, 1024), float32] */;
  %8825 = add(%8823, %8824) /* ty=Tensor[(1, 1024), float32] */;
  %8826 = sigmoid(%8816) /* ty=Tensor[(1, 1024), float32] */;
  %8827 = tanh(%8825) /* ty=Tensor[(1, 1024), float32] */;
  %8828 = %555.192 /* ty=Tensor[(1, 240), float32] */;
  %8829 = (%8828, %8806) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8830 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8831 = concatenate(%8829, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8832 = concatenate(%8830, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8833 = nn.dense(%8831, %8832, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8834 = add(%8833, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8835 = add(%8834, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8836 = split(%8835, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8837 = %8836.3 /* ty=Tensor[(1, 1024), float32] */;
  %8838 = %8836.1 /* ty=Tensor[(1, 1024), float32] */;
  %8839 = sigmoid(%8838) /* ty=Tensor[(1, 1024), float32] */;
  %8840 = %8836.0 /* ty=Tensor[(1, 1024), float32] */;
  %8841 = %8836.2 /* ty=Tensor[(1, 1024), float32] */;
  %8842 = sigmoid(%8840) /* ty=Tensor[(1, 1024), float32] */;
  %8843 = tanh(%8841) /* ty=Tensor[(1, 1024), float32] */;
  %8844 = multiply(%8839, %8803) /* ty=Tensor[(1, 1024), float32] */;
  %8845 = multiply(%8842, %8843) /* ty=Tensor[(1, 1024), float32] */;
  %8846 = add(%8844, %8845) /* ty=Tensor[(1, 1024), float32] */;
  %8847 = sigmoid(%8837) /* ty=Tensor[(1, 1024), float32] */;
  %8848 = tanh(%8846) /* ty=Tensor[(1, 1024), float32] */;
  %8849 = multiply(%8847, %8848) /* ty=Tensor[(1, 1024), float32] */;
  %8850 = multiply(%8826, %8827) /* ty=Tensor[(1, 1024), float32] */;
  %8851 = (%8849, %8850) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8852 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8853 = concatenate(%8851, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8854 = concatenate(%8852, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8855 = nn.dense(%8853, %8854, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8856 = add(%8855, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8857 = add(%8856, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8858 = split(%8857, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8859 = %8858.3 /* ty=Tensor[(1, 1024), float32] */;
  %8860 = %8858.1 /* ty=Tensor[(1, 1024), float32] */;
  %8861 = sigmoid(%8860) /* ty=Tensor[(1, 1024), float32] */;
  %8862 = %8858.0 /* ty=Tensor[(1, 1024), float32] */;
  %8863 = %8858.2 /* ty=Tensor[(1, 1024), float32] */;
  %8864 = sigmoid(%8862) /* ty=Tensor[(1, 1024), float32] */;
  %8865 = tanh(%8863) /* ty=Tensor[(1, 1024), float32] */;
  %8866 = multiply(%8861, %8825) /* ty=Tensor[(1, 1024), float32] */;
  %8867 = multiply(%8864, %8865) /* ty=Tensor[(1, 1024), float32] */;
  %8868 = add(%8866, %8867) /* ty=Tensor[(1, 1024), float32] */;
  %8869 = sigmoid(%8859) /* ty=Tensor[(1, 1024), float32] */;
  %8870 = tanh(%8868) /* ty=Tensor[(1, 1024), float32] */;
  %8871 = %555.193 /* ty=Tensor[(1, 240), float32] */;
  %8872 = (%8871, %8849) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8873 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8874 = concatenate(%8872, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8875 = concatenate(%8873, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8876 = nn.dense(%8874, %8875, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8877 = add(%8876, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8878 = add(%8877, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8879 = split(%8878, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8880 = %8879.3 /* ty=Tensor[(1, 1024), float32] */;
  %8881 = %8879.1 /* ty=Tensor[(1, 1024), float32] */;
  %8882 = sigmoid(%8881) /* ty=Tensor[(1, 1024), float32] */;
  %8883 = %8879.0 /* ty=Tensor[(1, 1024), float32] */;
  %8884 = %8879.2 /* ty=Tensor[(1, 1024), float32] */;
  %8885 = sigmoid(%8883) /* ty=Tensor[(1, 1024), float32] */;
  %8886 = tanh(%8884) /* ty=Tensor[(1, 1024), float32] */;
  %8887 = multiply(%8882, %8846) /* ty=Tensor[(1, 1024), float32] */;
  %8888 = multiply(%8885, %8886) /* ty=Tensor[(1, 1024), float32] */;
  %8889 = add(%8887, %8888) /* ty=Tensor[(1, 1024), float32] */;
  %8890 = sigmoid(%8880) /* ty=Tensor[(1, 1024), float32] */;
  %8891 = tanh(%8889) /* ty=Tensor[(1, 1024), float32] */;
  %8892 = multiply(%8890, %8891) /* ty=Tensor[(1, 1024), float32] */;
  %8893 = multiply(%8869, %8870) /* ty=Tensor[(1, 1024), float32] */;
  %8894 = (%8892, %8893) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8895 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8896 = concatenate(%8894, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8897 = concatenate(%8895, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8898 = nn.dense(%8896, %8897, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8899 = add(%8898, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8900 = add(%8899, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8901 = split(%8900, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8902 = %8901.3 /* ty=Tensor[(1, 1024), float32] */;
  %8903 = %8901.1 /* ty=Tensor[(1, 1024), float32] */;
  %8904 = sigmoid(%8903) /* ty=Tensor[(1, 1024), float32] */;
  %8905 = %8901.0 /* ty=Tensor[(1, 1024), float32] */;
  %8906 = %8901.2 /* ty=Tensor[(1, 1024), float32] */;
  %8907 = sigmoid(%8905) /* ty=Tensor[(1, 1024), float32] */;
  %8908 = tanh(%8906) /* ty=Tensor[(1, 1024), float32] */;
  %8909 = multiply(%8904, %8868) /* ty=Tensor[(1, 1024), float32] */;
  %8910 = multiply(%8907, %8908) /* ty=Tensor[(1, 1024), float32] */;
  %8911 = add(%8909, %8910) /* ty=Tensor[(1, 1024), float32] */;
  %8912 = sigmoid(%8902) /* ty=Tensor[(1, 1024), float32] */;
  %8913 = tanh(%8911) /* ty=Tensor[(1, 1024), float32] */;
  %8914 = %555.194 /* ty=Tensor[(1, 240), float32] */;
  %8915 = (%8914, %8892) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8916 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8917 = concatenate(%8915, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8918 = concatenate(%8916, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8919 = nn.dense(%8917, %8918, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8920 = add(%8919, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8921 = add(%8920, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8922 = split(%8921, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8923 = %8922.3 /* ty=Tensor[(1, 1024), float32] */;
  %8924 = %8922.1 /* ty=Tensor[(1, 1024), float32] */;
  %8925 = sigmoid(%8924) /* ty=Tensor[(1, 1024), float32] */;
  %8926 = %8922.0 /* ty=Tensor[(1, 1024), float32] */;
  %8927 = %8922.2 /* ty=Tensor[(1, 1024), float32] */;
  %8928 = sigmoid(%8926) /* ty=Tensor[(1, 1024), float32] */;
  %8929 = tanh(%8927) /* ty=Tensor[(1, 1024), float32] */;
  %8930 = multiply(%8925, %8889) /* ty=Tensor[(1, 1024), float32] */;
  %8931 = multiply(%8928, %8929) /* ty=Tensor[(1, 1024), float32] */;
  %8932 = add(%8930, %8931) /* ty=Tensor[(1, 1024), float32] */;
  %8933 = sigmoid(%8923) /* ty=Tensor[(1, 1024), float32] */;
  %8934 = tanh(%8932) /* ty=Tensor[(1, 1024), float32] */;
  %8935 = multiply(%8933, %8934) /* ty=Tensor[(1, 1024), float32] */;
  %8936 = multiply(%8912, %8913) /* ty=Tensor[(1, 1024), float32] */;
  %8937 = (%8935, %8936) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8938 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8939 = concatenate(%8937, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8940 = concatenate(%8938, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8941 = nn.dense(%8939, %8940, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8942 = add(%8941, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8943 = add(%8942, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8944 = split(%8943, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8945 = %8944.3 /* ty=Tensor[(1, 1024), float32] */;
  %8946 = %8944.1 /* ty=Tensor[(1, 1024), float32] */;
  %8947 = sigmoid(%8946) /* ty=Tensor[(1, 1024), float32] */;
  %8948 = %8944.0 /* ty=Tensor[(1, 1024), float32] */;
  %8949 = %8944.2 /* ty=Tensor[(1, 1024), float32] */;
  %8950 = sigmoid(%8948) /* ty=Tensor[(1, 1024), float32] */;
  %8951 = tanh(%8949) /* ty=Tensor[(1, 1024), float32] */;
  %8952 = multiply(%8947, %8911) /* ty=Tensor[(1, 1024), float32] */;
  %8953 = multiply(%8950, %8951) /* ty=Tensor[(1, 1024), float32] */;
  %8954 = add(%8952, %8953) /* ty=Tensor[(1, 1024), float32] */;
  %8955 = sigmoid(%8945) /* ty=Tensor[(1, 1024), float32] */;
  %8956 = tanh(%8954) /* ty=Tensor[(1, 1024), float32] */;
  %8957 = %555.195 /* ty=Tensor[(1, 240), float32] */;
  %8958 = (%8957, %8935) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %8959 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %8960 = concatenate(%8958, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %8961 = concatenate(%8959, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %8962 = nn.dense(%8960, %8961, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8963 = add(%8962, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8964 = add(%8963, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %8965 = split(%8964, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8966 = %8965.3 /* ty=Tensor[(1, 1024), float32] */;
  %8967 = %8965.1 /* ty=Tensor[(1, 1024), float32] */;
  %8968 = sigmoid(%8967) /* ty=Tensor[(1, 1024), float32] */;
  %8969 = %8965.0 /* ty=Tensor[(1, 1024), float32] */;
  %8970 = %8965.2 /* ty=Tensor[(1, 1024), float32] */;
  %8971 = sigmoid(%8969) /* ty=Tensor[(1, 1024), float32] */;
  %8972 = tanh(%8970) /* ty=Tensor[(1, 1024), float32] */;
  %8973 = multiply(%8968, %8932) /* ty=Tensor[(1, 1024), float32] */;
  %8974 = multiply(%8971, %8972) /* ty=Tensor[(1, 1024), float32] */;
  %8975 = add(%8973, %8974) /* ty=Tensor[(1, 1024), float32] */;
  %8976 = sigmoid(%8966) /* ty=Tensor[(1, 1024), float32] */;
  %8977 = tanh(%8975) /* ty=Tensor[(1, 1024), float32] */;
  %8978 = multiply(%8976, %8977) /* ty=Tensor[(1, 1024), float32] */;
  %8979 = multiply(%8955, %8956) /* ty=Tensor[(1, 1024), float32] */;
  %8980 = (%8978, %8979) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8981 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %8982 = concatenate(%8980, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %8983 = concatenate(%8981, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %8984 = nn.dense(%8982, %8983, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %8985 = add(%8984, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8986 = add(%8985, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %8987 = split(%8986, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %8988 = %8987.3 /* ty=Tensor[(1, 1024), float32] */;
  %8989 = %8987.1 /* ty=Tensor[(1, 1024), float32] */;
  %8990 = sigmoid(%8989) /* ty=Tensor[(1, 1024), float32] */;
  %8991 = %8987.0 /* ty=Tensor[(1, 1024), float32] */;
  %8992 = %8987.2 /* ty=Tensor[(1, 1024), float32] */;
  %8993 = sigmoid(%8991) /* ty=Tensor[(1, 1024), float32] */;
  %8994 = tanh(%8992) /* ty=Tensor[(1, 1024), float32] */;
  %8995 = multiply(%8990, %8954) /* ty=Tensor[(1, 1024), float32] */;
  %8996 = multiply(%8993, %8994) /* ty=Tensor[(1, 1024), float32] */;
  %8997 = add(%8995, %8996) /* ty=Tensor[(1, 1024), float32] */;
  %8998 = sigmoid(%8988) /* ty=Tensor[(1, 1024), float32] */;
  %8999 = tanh(%8997) /* ty=Tensor[(1, 1024), float32] */;
  %9000 = %555.196 /* ty=Tensor[(1, 240), float32] */;
  %9001 = (%9000, %8978) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9002 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9003 = concatenate(%9001, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9004 = concatenate(%9002, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9005 = nn.dense(%9003, %9004, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9006 = add(%9005, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9007 = add(%9006, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9008 = split(%9007, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9009 = %9008.3 /* ty=Tensor[(1, 1024), float32] */;
  %9010 = %9008.1 /* ty=Tensor[(1, 1024), float32] */;
  %9011 = sigmoid(%9010) /* ty=Tensor[(1, 1024), float32] */;
  %9012 = %9008.0 /* ty=Tensor[(1, 1024), float32] */;
  %9013 = %9008.2 /* ty=Tensor[(1, 1024), float32] */;
  %9014 = sigmoid(%9012) /* ty=Tensor[(1, 1024), float32] */;
  %9015 = tanh(%9013) /* ty=Tensor[(1, 1024), float32] */;
  %9016 = multiply(%9011, %8975) /* ty=Tensor[(1, 1024), float32] */;
  %9017 = multiply(%9014, %9015) /* ty=Tensor[(1, 1024), float32] */;
  %9018 = add(%9016, %9017) /* ty=Tensor[(1, 1024), float32] */;
  %9019 = sigmoid(%9009) /* ty=Tensor[(1, 1024), float32] */;
  %9020 = tanh(%9018) /* ty=Tensor[(1, 1024), float32] */;
  %9021 = multiply(%9019, %9020) /* ty=Tensor[(1, 1024), float32] */;
  %9022 = multiply(%8998, %8999) /* ty=Tensor[(1, 1024), float32] */;
  %9023 = (%9021, %9022) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9024 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9025 = concatenate(%9023, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9026 = concatenate(%9024, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9027 = nn.dense(%9025, %9026, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9028 = add(%9027, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9029 = add(%9028, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9030 = split(%9029, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9031 = %9030.3 /* ty=Tensor[(1, 1024), float32] */;
  %9032 = %9030.1 /* ty=Tensor[(1, 1024), float32] */;
  %9033 = sigmoid(%9032) /* ty=Tensor[(1, 1024), float32] */;
  %9034 = %9030.0 /* ty=Tensor[(1, 1024), float32] */;
  %9035 = %9030.2 /* ty=Tensor[(1, 1024), float32] */;
  %9036 = sigmoid(%9034) /* ty=Tensor[(1, 1024), float32] */;
  %9037 = tanh(%9035) /* ty=Tensor[(1, 1024), float32] */;
  %9038 = multiply(%9033, %8997) /* ty=Tensor[(1, 1024), float32] */;
  %9039 = multiply(%9036, %9037) /* ty=Tensor[(1, 1024), float32] */;
  %9040 = add(%9038, %9039) /* ty=Tensor[(1, 1024), float32] */;
  %9041 = sigmoid(%9031) /* ty=Tensor[(1, 1024), float32] */;
  %9042 = tanh(%9040) /* ty=Tensor[(1, 1024), float32] */;
  %9043 = %555.197 /* ty=Tensor[(1, 240), float32] */;
  %9044 = (%9043, %9021) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9045 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9046 = concatenate(%9044, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9047 = concatenate(%9045, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9048 = nn.dense(%9046, %9047, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9049 = add(%9048, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9050 = add(%9049, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9051 = split(%9050, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9052 = %9051.3 /* ty=Tensor[(1, 1024), float32] */;
  %9053 = %9051.1 /* ty=Tensor[(1, 1024), float32] */;
  %9054 = sigmoid(%9053) /* ty=Tensor[(1, 1024), float32] */;
  %9055 = %9051.0 /* ty=Tensor[(1, 1024), float32] */;
  %9056 = %9051.2 /* ty=Tensor[(1, 1024), float32] */;
  %9057 = sigmoid(%9055) /* ty=Tensor[(1, 1024), float32] */;
  %9058 = tanh(%9056) /* ty=Tensor[(1, 1024), float32] */;
  %9059 = multiply(%9054, %9018) /* ty=Tensor[(1, 1024), float32] */;
  %9060 = multiply(%9057, %9058) /* ty=Tensor[(1, 1024), float32] */;
  %9061 = add(%9059, %9060) /* ty=Tensor[(1, 1024), float32] */;
  %9062 = sigmoid(%9052) /* ty=Tensor[(1, 1024), float32] */;
  %9063 = tanh(%9061) /* ty=Tensor[(1, 1024), float32] */;
  %9064 = multiply(%9062, %9063) /* ty=Tensor[(1, 1024), float32] */;
  %9065 = multiply(%9041, %9042) /* ty=Tensor[(1, 1024), float32] */;
  %9066 = (%9064, %9065) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9067 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9068 = concatenate(%9066, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9069 = concatenate(%9067, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9070 = nn.dense(%9068, %9069, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9071 = add(%9070, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9072 = add(%9071, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9073 = split(%9072, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9074 = %9073.3 /* ty=Tensor[(1, 1024), float32] */;
  %9075 = %9073.1 /* ty=Tensor[(1, 1024), float32] */;
  %9076 = sigmoid(%9075) /* ty=Tensor[(1, 1024), float32] */;
  %9077 = %9073.0 /* ty=Tensor[(1, 1024), float32] */;
  %9078 = %9073.2 /* ty=Tensor[(1, 1024), float32] */;
  %9079 = sigmoid(%9077) /* ty=Tensor[(1, 1024), float32] */;
  %9080 = tanh(%9078) /* ty=Tensor[(1, 1024), float32] */;
  %9081 = multiply(%9076, %9040) /* ty=Tensor[(1, 1024), float32] */;
  %9082 = multiply(%9079, %9080) /* ty=Tensor[(1, 1024), float32] */;
  %9083 = add(%9081, %9082) /* ty=Tensor[(1, 1024), float32] */;
  %9084 = sigmoid(%9074) /* ty=Tensor[(1, 1024), float32] */;
  %9085 = tanh(%9083) /* ty=Tensor[(1, 1024), float32] */;
  %9086 = %555.198 /* ty=Tensor[(1, 240), float32] */;
  %9087 = (%9086, %9064) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9088 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9089 = concatenate(%9087, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9090 = concatenate(%9088, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9091 = nn.dense(%9089, %9090, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9092 = add(%9091, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9093 = add(%9092, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9094 = split(%9093, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9095 = %9094.3 /* ty=Tensor[(1, 1024), float32] */;
  %9096 = %9094.1 /* ty=Tensor[(1, 1024), float32] */;
  %9097 = sigmoid(%9096) /* ty=Tensor[(1, 1024), float32] */;
  %9098 = %9094.0 /* ty=Tensor[(1, 1024), float32] */;
  %9099 = %9094.2 /* ty=Tensor[(1, 1024), float32] */;
  %9100 = sigmoid(%9098) /* ty=Tensor[(1, 1024), float32] */;
  %9101 = tanh(%9099) /* ty=Tensor[(1, 1024), float32] */;
  %9102 = multiply(%9097, %9061) /* ty=Tensor[(1, 1024), float32] */;
  %9103 = multiply(%9100, %9101) /* ty=Tensor[(1, 1024), float32] */;
  %9104 = add(%9102, %9103) /* ty=Tensor[(1, 1024), float32] */;
  %9105 = sigmoid(%9095) /* ty=Tensor[(1, 1024), float32] */;
  %9106 = tanh(%9104) /* ty=Tensor[(1, 1024), float32] */;
  %9107 = multiply(%9105, %9106) /* ty=Tensor[(1, 1024), float32] */;
  %9108 = multiply(%9084, %9085) /* ty=Tensor[(1, 1024), float32] */;
  %9109 = (%9107, %9108) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9110 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9111 = concatenate(%9109, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9112 = concatenate(%9110, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9113 = nn.dense(%9111, %9112, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9114 = add(%9113, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9115 = add(%9114, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9116 = split(%9115, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9117 = %9116.3 /* ty=Tensor[(1, 1024), float32] */;
  %9118 = %9116.1 /* ty=Tensor[(1, 1024), float32] */;
  %9119 = sigmoid(%9118) /* ty=Tensor[(1, 1024), float32] */;
  %9120 = %9116.0 /* ty=Tensor[(1, 1024), float32] */;
  %9121 = %9116.2 /* ty=Tensor[(1, 1024), float32] */;
  %9122 = sigmoid(%9120) /* ty=Tensor[(1, 1024), float32] */;
  %9123 = tanh(%9121) /* ty=Tensor[(1, 1024), float32] */;
  %9124 = multiply(%9119, %9083) /* ty=Tensor[(1, 1024), float32] */;
  %9125 = multiply(%9122, %9123) /* ty=Tensor[(1, 1024), float32] */;
  %9126 = add(%9124, %9125) /* ty=Tensor[(1, 1024), float32] */;
  %9127 = sigmoid(%9117) /* ty=Tensor[(1, 1024), float32] */;
  %9128 = tanh(%9126) /* ty=Tensor[(1, 1024), float32] */;
  %9129 = %555.199 /* ty=Tensor[(1, 240), float32] */;
  %9130 = (%9129, %9107) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9131 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9132 = concatenate(%9130, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9133 = concatenate(%9131, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9134 = nn.dense(%9132, %9133, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9135 = add(%9134, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9136 = add(%9135, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9137 = split(%9136, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9138 = %9137.3 /* ty=Tensor[(1, 1024), float32] */;
  %9139 = %9137.1 /* ty=Tensor[(1, 1024), float32] */;
  %9140 = sigmoid(%9139) /* ty=Tensor[(1, 1024), float32] */;
  %9141 = %9137.0 /* ty=Tensor[(1, 1024), float32] */;
  %9142 = %9137.2 /* ty=Tensor[(1, 1024), float32] */;
  %9143 = sigmoid(%9141) /* ty=Tensor[(1, 1024), float32] */;
  %9144 = tanh(%9142) /* ty=Tensor[(1, 1024), float32] */;
  %9145 = multiply(%9140, %9104) /* ty=Tensor[(1, 1024), float32] */;
  %9146 = multiply(%9143, %9144) /* ty=Tensor[(1, 1024), float32] */;
  %9147 = add(%9145, %9146) /* ty=Tensor[(1, 1024), float32] */;
  %9148 = sigmoid(%9138) /* ty=Tensor[(1, 1024), float32] */;
  %9149 = tanh(%9147) /* ty=Tensor[(1, 1024), float32] */;
  %9150 = multiply(%9148, %9149) /* ty=Tensor[(1, 1024), float32] */;
  %9151 = multiply(%9127, %9128) /* ty=Tensor[(1, 1024), float32] */;
  %9152 = (%9150, %9151) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9153 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9154 = concatenate(%9152, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9155 = concatenate(%9153, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9156 = nn.dense(%9154, %9155, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9157 = add(%9156, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9158 = add(%9157, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9159 = split(%9158, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9160 = %9159.3 /* ty=Tensor[(1, 1024), float32] */;
  %9161 = %9159.1 /* ty=Tensor[(1, 1024), float32] */;
  %9162 = sigmoid(%9161) /* ty=Tensor[(1, 1024), float32] */;
  %9163 = %9159.0 /* ty=Tensor[(1, 1024), float32] */;
  %9164 = %9159.2 /* ty=Tensor[(1, 1024), float32] */;
  %9165 = sigmoid(%9163) /* ty=Tensor[(1, 1024), float32] */;
  %9166 = tanh(%9164) /* ty=Tensor[(1, 1024), float32] */;
  %9167 = multiply(%9162, %9126) /* ty=Tensor[(1, 1024), float32] */;
  %9168 = multiply(%9165, %9166) /* ty=Tensor[(1, 1024), float32] */;
  %9169 = add(%9167, %9168) /* ty=Tensor[(1, 1024), float32] */;
  %9170 = sigmoid(%9160) /* ty=Tensor[(1, 1024), float32] */;
  %9171 = tanh(%9169) /* ty=Tensor[(1, 1024), float32] */;
  %9172 = %555.200 /* ty=Tensor[(1, 240), float32] */;
  %9173 = (%9172, %9150) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9174 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9175 = concatenate(%9173, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9176 = concatenate(%9174, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9177 = nn.dense(%9175, %9176, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9178 = add(%9177, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9179 = add(%9178, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9180 = split(%9179, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9181 = %9180.3 /* ty=Tensor[(1, 1024), float32] */;
  %9182 = %9180.1 /* ty=Tensor[(1, 1024), float32] */;
  %9183 = sigmoid(%9182) /* ty=Tensor[(1, 1024), float32] */;
  %9184 = %9180.0 /* ty=Tensor[(1, 1024), float32] */;
  %9185 = %9180.2 /* ty=Tensor[(1, 1024), float32] */;
  %9186 = sigmoid(%9184) /* ty=Tensor[(1, 1024), float32] */;
  %9187 = tanh(%9185) /* ty=Tensor[(1, 1024), float32] */;
  %9188 = multiply(%9183, %9147) /* ty=Tensor[(1, 1024), float32] */;
  %9189 = multiply(%9186, %9187) /* ty=Tensor[(1, 1024), float32] */;
  %9190 = add(%9188, %9189) /* ty=Tensor[(1, 1024), float32] */;
  %9191 = sigmoid(%9181) /* ty=Tensor[(1, 1024), float32] */;
  %9192 = tanh(%9190) /* ty=Tensor[(1, 1024), float32] */;
  %9193 = multiply(%9191, %9192) /* ty=Tensor[(1, 1024), float32] */;
  %9194 = multiply(%9170, %9171) /* ty=Tensor[(1, 1024), float32] */;
  %9195 = (%9193, %9194) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9196 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9197 = concatenate(%9195, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9198 = concatenate(%9196, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9199 = nn.dense(%9197, %9198, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9200 = add(%9199, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9201 = add(%9200, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9202 = split(%9201, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9203 = %9202.3 /* ty=Tensor[(1, 1024), float32] */;
  %9204 = %9202.1 /* ty=Tensor[(1, 1024), float32] */;
  %9205 = sigmoid(%9204) /* ty=Tensor[(1, 1024), float32] */;
  %9206 = %9202.0 /* ty=Tensor[(1, 1024), float32] */;
  %9207 = %9202.2 /* ty=Tensor[(1, 1024), float32] */;
  %9208 = sigmoid(%9206) /* ty=Tensor[(1, 1024), float32] */;
  %9209 = tanh(%9207) /* ty=Tensor[(1, 1024), float32] */;
  %9210 = multiply(%9205, %9169) /* ty=Tensor[(1, 1024), float32] */;
  %9211 = multiply(%9208, %9209) /* ty=Tensor[(1, 1024), float32] */;
  %9212 = add(%9210, %9211) /* ty=Tensor[(1, 1024), float32] */;
  %9213 = sigmoid(%9203) /* ty=Tensor[(1, 1024), float32] */;
  %9214 = tanh(%9212) /* ty=Tensor[(1, 1024), float32] */;
  %9215 = %555.201 /* ty=Tensor[(1, 240), float32] */;
  %9216 = (%9215, %9193) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9217 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9218 = concatenate(%9216, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9219 = concatenate(%9217, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9220 = nn.dense(%9218, %9219, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9221 = add(%9220, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9222 = add(%9221, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9223 = split(%9222, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9224 = %9223.3 /* ty=Tensor[(1, 1024), float32] */;
  %9225 = %9223.1 /* ty=Tensor[(1, 1024), float32] */;
  %9226 = sigmoid(%9225) /* ty=Tensor[(1, 1024), float32] */;
  %9227 = %9223.0 /* ty=Tensor[(1, 1024), float32] */;
  %9228 = %9223.2 /* ty=Tensor[(1, 1024), float32] */;
  %9229 = sigmoid(%9227) /* ty=Tensor[(1, 1024), float32] */;
  %9230 = tanh(%9228) /* ty=Tensor[(1, 1024), float32] */;
  %9231 = multiply(%9226, %9190) /* ty=Tensor[(1, 1024), float32] */;
  %9232 = multiply(%9229, %9230) /* ty=Tensor[(1, 1024), float32] */;
  %9233 = add(%9231, %9232) /* ty=Tensor[(1, 1024), float32] */;
  %9234 = sigmoid(%9224) /* ty=Tensor[(1, 1024), float32] */;
  %9235 = tanh(%9233) /* ty=Tensor[(1, 1024), float32] */;
  %9236 = multiply(%9234, %9235) /* ty=Tensor[(1, 1024), float32] */;
  %9237 = multiply(%9213, %9214) /* ty=Tensor[(1, 1024), float32] */;
  %9238 = (%9236, %9237) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9239 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9240 = concatenate(%9238, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9241 = concatenate(%9239, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9242 = nn.dense(%9240, %9241, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9243 = add(%9242, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9244 = add(%9243, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9245 = split(%9244, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9246 = %9245.3 /* ty=Tensor[(1, 1024), float32] */;
  %9247 = %9245.1 /* ty=Tensor[(1, 1024), float32] */;
  %9248 = sigmoid(%9247) /* ty=Tensor[(1, 1024), float32] */;
  %9249 = %9245.0 /* ty=Tensor[(1, 1024), float32] */;
  %9250 = %9245.2 /* ty=Tensor[(1, 1024), float32] */;
  %9251 = sigmoid(%9249) /* ty=Tensor[(1, 1024), float32] */;
  %9252 = tanh(%9250) /* ty=Tensor[(1, 1024), float32] */;
  %9253 = multiply(%9248, %9212) /* ty=Tensor[(1, 1024), float32] */;
  %9254 = multiply(%9251, %9252) /* ty=Tensor[(1, 1024), float32] */;
  %9255 = add(%9253, %9254) /* ty=Tensor[(1, 1024), float32] */;
  %9256 = sigmoid(%9246) /* ty=Tensor[(1, 1024), float32] */;
  %9257 = tanh(%9255) /* ty=Tensor[(1, 1024), float32] */;
  %9258 = %555.202 /* ty=Tensor[(1, 240), float32] */;
  %9259 = (%9258, %9236) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9260 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9261 = concatenate(%9259, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9262 = concatenate(%9260, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9263 = nn.dense(%9261, %9262, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9264 = add(%9263, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9265 = add(%9264, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9266 = split(%9265, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9267 = %9266.3 /* ty=Tensor[(1, 1024), float32] */;
  %9268 = %9266.1 /* ty=Tensor[(1, 1024), float32] */;
  %9269 = sigmoid(%9268) /* ty=Tensor[(1, 1024), float32] */;
  %9270 = %9266.0 /* ty=Tensor[(1, 1024), float32] */;
  %9271 = %9266.2 /* ty=Tensor[(1, 1024), float32] */;
  %9272 = sigmoid(%9270) /* ty=Tensor[(1, 1024), float32] */;
  %9273 = tanh(%9271) /* ty=Tensor[(1, 1024), float32] */;
  %9274 = multiply(%9269, %9233) /* ty=Tensor[(1, 1024), float32] */;
  %9275 = multiply(%9272, %9273) /* ty=Tensor[(1, 1024), float32] */;
  %9276 = add(%9274, %9275) /* ty=Tensor[(1, 1024), float32] */;
  %9277 = sigmoid(%9267) /* ty=Tensor[(1, 1024), float32] */;
  %9278 = tanh(%9276) /* ty=Tensor[(1, 1024), float32] */;
  %9279 = multiply(%9277, %9278) /* ty=Tensor[(1, 1024), float32] */;
  %9280 = multiply(%9256, %9257) /* ty=Tensor[(1, 1024), float32] */;
  %9281 = (%9279, %9280) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9282 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9283 = concatenate(%9281, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9284 = concatenate(%9282, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9285 = nn.dense(%9283, %9284, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9286 = add(%9285, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9287 = add(%9286, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9288 = split(%9287, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9289 = %9288.3 /* ty=Tensor[(1, 1024), float32] */;
  %9290 = %9288.1 /* ty=Tensor[(1, 1024), float32] */;
  %9291 = sigmoid(%9290) /* ty=Tensor[(1, 1024), float32] */;
  %9292 = %9288.0 /* ty=Tensor[(1, 1024), float32] */;
  %9293 = %9288.2 /* ty=Tensor[(1, 1024), float32] */;
  %9294 = sigmoid(%9292) /* ty=Tensor[(1, 1024), float32] */;
  %9295 = tanh(%9293) /* ty=Tensor[(1, 1024), float32] */;
  %9296 = multiply(%9291, %9255) /* ty=Tensor[(1, 1024), float32] */;
  %9297 = multiply(%9294, %9295) /* ty=Tensor[(1, 1024), float32] */;
  %9298 = add(%9296, %9297) /* ty=Tensor[(1, 1024), float32] */;
  %9299 = sigmoid(%9289) /* ty=Tensor[(1, 1024), float32] */;
  %9300 = tanh(%9298) /* ty=Tensor[(1, 1024), float32] */;
  %9301 = %555.203 /* ty=Tensor[(1, 240), float32] */;
  %9302 = (%9301, %9279) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9303 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9304 = concatenate(%9302, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9305 = concatenate(%9303, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9306 = nn.dense(%9304, %9305, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9307 = add(%9306, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9308 = add(%9307, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9309 = split(%9308, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9310 = %9309.3 /* ty=Tensor[(1, 1024), float32] */;
  %9311 = %9309.1 /* ty=Tensor[(1, 1024), float32] */;
  %9312 = sigmoid(%9311) /* ty=Tensor[(1, 1024), float32] */;
  %9313 = %9309.0 /* ty=Tensor[(1, 1024), float32] */;
  %9314 = %9309.2 /* ty=Tensor[(1, 1024), float32] */;
  %9315 = sigmoid(%9313) /* ty=Tensor[(1, 1024), float32] */;
  %9316 = tanh(%9314) /* ty=Tensor[(1, 1024), float32] */;
  %9317 = multiply(%9312, %9276) /* ty=Tensor[(1, 1024), float32] */;
  %9318 = multiply(%9315, %9316) /* ty=Tensor[(1, 1024), float32] */;
  %9319 = add(%9317, %9318) /* ty=Tensor[(1, 1024), float32] */;
  %9320 = sigmoid(%9310) /* ty=Tensor[(1, 1024), float32] */;
  %9321 = tanh(%9319) /* ty=Tensor[(1, 1024), float32] */;
  %9322 = multiply(%9320, %9321) /* ty=Tensor[(1, 1024), float32] */;
  %9323 = multiply(%9299, %9300) /* ty=Tensor[(1, 1024), float32] */;
  %9324 = (%9322, %9323) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9325 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9326 = concatenate(%9324, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9327 = concatenate(%9325, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9328 = nn.dense(%9326, %9327, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9329 = add(%9328, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9330 = add(%9329, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9331 = split(%9330, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9332 = %9331.3 /* ty=Tensor[(1, 1024), float32] */;
  %9333 = %9331.1 /* ty=Tensor[(1, 1024), float32] */;
  %9334 = sigmoid(%9333) /* ty=Tensor[(1, 1024), float32] */;
  %9335 = %9331.0 /* ty=Tensor[(1, 1024), float32] */;
  %9336 = %9331.2 /* ty=Tensor[(1, 1024), float32] */;
  %9337 = sigmoid(%9335) /* ty=Tensor[(1, 1024), float32] */;
  %9338 = tanh(%9336) /* ty=Tensor[(1, 1024), float32] */;
  %9339 = multiply(%9334, %9298) /* ty=Tensor[(1, 1024), float32] */;
  %9340 = multiply(%9337, %9338) /* ty=Tensor[(1, 1024), float32] */;
  %9341 = add(%9339, %9340) /* ty=Tensor[(1, 1024), float32] */;
  %9342 = sigmoid(%9332) /* ty=Tensor[(1, 1024), float32] */;
  %9343 = tanh(%9341) /* ty=Tensor[(1, 1024), float32] */;
  %9344 = %555.204 /* ty=Tensor[(1, 240), float32] */;
  %9345 = (%9344, %9322) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9346 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9347 = concatenate(%9345, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9348 = concatenate(%9346, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9349 = nn.dense(%9347, %9348, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9350 = add(%9349, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9351 = add(%9350, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9352 = split(%9351, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9353 = %9352.3 /* ty=Tensor[(1, 1024), float32] */;
  %9354 = %9352.1 /* ty=Tensor[(1, 1024), float32] */;
  %9355 = sigmoid(%9354) /* ty=Tensor[(1, 1024), float32] */;
  %9356 = %9352.0 /* ty=Tensor[(1, 1024), float32] */;
  %9357 = %9352.2 /* ty=Tensor[(1, 1024), float32] */;
  %9358 = sigmoid(%9356) /* ty=Tensor[(1, 1024), float32] */;
  %9359 = tanh(%9357) /* ty=Tensor[(1, 1024), float32] */;
  %9360 = multiply(%9355, %9319) /* ty=Tensor[(1, 1024), float32] */;
  %9361 = multiply(%9358, %9359) /* ty=Tensor[(1, 1024), float32] */;
  %9362 = add(%9360, %9361) /* ty=Tensor[(1, 1024), float32] */;
  %9363 = sigmoid(%9353) /* ty=Tensor[(1, 1024), float32] */;
  %9364 = tanh(%9362) /* ty=Tensor[(1, 1024), float32] */;
  %9365 = multiply(%9363, %9364) /* ty=Tensor[(1, 1024), float32] */;
  %9366 = multiply(%9342, %9343) /* ty=Tensor[(1, 1024), float32] */;
  %9367 = (%9365, %9366) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9368 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9369 = concatenate(%9367, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9370 = concatenate(%9368, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9371 = nn.dense(%9369, %9370, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9372 = add(%9371, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9373 = add(%9372, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9374 = split(%9373, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9375 = %9374.3 /* ty=Tensor[(1, 1024), float32] */;
  %9376 = %9374.1 /* ty=Tensor[(1, 1024), float32] */;
  %9377 = sigmoid(%9376) /* ty=Tensor[(1, 1024), float32] */;
  %9378 = %9374.0 /* ty=Tensor[(1, 1024), float32] */;
  %9379 = %9374.2 /* ty=Tensor[(1, 1024), float32] */;
  %9380 = sigmoid(%9378) /* ty=Tensor[(1, 1024), float32] */;
  %9381 = tanh(%9379) /* ty=Tensor[(1, 1024), float32] */;
  %9382 = multiply(%9377, %9341) /* ty=Tensor[(1, 1024), float32] */;
  %9383 = multiply(%9380, %9381) /* ty=Tensor[(1, 1024), float32] */;
  %9384 = add(%9382, %9383) /* ty=Tensor[(1, 1024), float32] */;
  %9385 = sigmoid(%9375) /* ty=Tensor[(1, 1024), float32] */;
  %9386 = tanh(%9384) /* ty=Tensor[(1, 1024), float32] */;
  %9387 = %555.205 /* ty=Tensor[(1, 240), float32] */;
  %9388 = (%9387, %9365) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9389 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9390 = concatenate(%9388, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9391 = concatenate(%9389, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9392 = nn.dense(%9390, %9391, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9393 = add(%9392, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9394 = add(%9393, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9395 = split(%9394, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9396 = %9395.3 /* ty=Tensor[(1, 1024), float32] */;
  %9397 = %9395.1 /* ty=Tensor[(1, 1024), float32] */;
  %9398 = sigmoid(%9397) /* ty=Tensor[(1, 1024), float32] */;
  %9399 = %9395.0 /* ty=Tensor[(1, 1024), float32] */;
  %9400 = %9395.2 /* ty=Tensor[(1, 1024), float32] */;
  %9401 = sigmoid(%9399) /* ty=Tensor[(1, 1024), float32] */;
  %9402 = tanh(%9400) /* ty=Tensor[(1, 1024), float32] */;
  %9403 = multiply(%9398, %9362) /* ty=Tensor[(1, 1024), float32] */;
  %9404 = multiply(%9401, %9402) /* ty=Tensor[(1, 1024), float32] */;
  %9405 = add(%9403, %9404) /* ty=Tensor[(1, 1024), float32] */;
  %9406 = sigmoid(%9396) /* ty=Tensor[(1, 1024), float32] */;
  %9407 = tanh(%9405) /* ty=Tensor[(1, 1024), float32] */;
  %9408 = multiply(%9406, %9407) /* ty=Tensor[(1, 1024), float32] */;
  %9409 = multiply(%9385, %9386) /* ty=Tensor[(1, 1024), float32] */;
  %9410 = (%9408, %9409) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9411 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9412 = concatenate(%9410, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9413 = concatenate(%9411, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9414 = nn.dense(%9412, %9413, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9415 = add(%9414, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9416 = add(%9415, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9417 = split(%9416, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9418 = %9417.3 /* ty=Tensor[(1, 1024), float32] */;
  %9419 = %9417.1 /* ty=Tensor[(1, 1024), float32] */;
  %9420 = sigmoid(%9419) /* ty=Tensor[(1, 1024), float32] */;
  %9421 = %9417.0 /* ty=Tensor[(1, 1024), float32] */;
  %9422 = %9417.2 /* ty=Tensor[(1, 1024), float32] */;
  %9423 = sigmoid(%9421) /* ty=Tensor[(1, 1024), float32] */;
  %9424 = tanh(%9422) /* ty=Tensor[(1, 1024), float32] */;
  %9425 = multiply(%9420, %9384) /* ty=Tensor[(1, 1024), float32] */;
  %9426 = multiply(%9423, %9424) /* ty=Tensor[(1, 1024), float32] */;
  %9427 = add(%9425, %9426) /* ty=Tensor[(1, 1024), float32] */;
  %9428 = sigmoid(%9418) /* ty=Tensor[(1, 1024), float32] */;
  %9429 = tanh(%9427) /* ty=Tensor[(1, 1024), float32] */;
  %9430 = %555.206 /* ty=Tensor[(1, 240), float32] */;
  %9431 = (%9430, %9408) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9432 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9433 = concatenate(%9431, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9434 = concatenate(%9432, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9435 = nn.dense(%9433, %9434, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9436 = add(%9435, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9437 = add(%9436, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9438 = split(%9437, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9439 = %9438.3 /* ty=Tensor[(1, 1024), float32] */;
  %9440 = %9438.1 /* ty=Tensor[(1, 1024), float32] */;
  %9441 = sigmoid(%9440) /* ty=Tensor[(1, 1024), float32] */;
  %9442 = %9438.0 /* ty=Tensor[(1, 1024), float32] */;
  %9443 = %9438.2 /* ty=Tensor[(1, 1024), float32] */;
  %9444 = sigmoid(%9442) /* ty=Tensor[(1, 1024), float32] */;
  %9445 = tanh(%9443) /* ty=Tensor[(1, 1024), float32] */;
  %9446 = multiply(%9441, %9405) /* ty=Tensor[(1, 1024), float32] */;
  %9447 = multiply(%9444, %9445) /* ty=Tensor[(1, 1024), float32] */;
  %9448 = add(%9446, %9447) /* ty=Tensor[(1, 1024), float32] */;
  %9449 = sigmoid(%9439) /* ty=Tensor[(1, 1024), float32] */;
  %9450 = tanh(%9448) /* ty=Tensor[(1, 1024), float32] */;
  %9451 = multiply(%9449, %9450) /* ty=Tensor[(1, 1024), float32] */;
  %9452 = multiply(%9428, %9429) /* ty=Tensor[(1, 1024), float32] */;
  %9453 = (%9451, %9452) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9454 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9455 = concatenate(%9453, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9456 = concatenate(%9454, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9457 = nn.dense(%9455, %9456, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9458 = add(%9457, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9459 = add(%9458, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9460 = split(%9459, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9461 = %9460.3 /* ty=Tensor[(1, 1024), float32] */;
  %9462 = %9460.1 /* ty=Tensor[(1, 1024), float32] */;
  %9463 = sigmoid(%9462) /* ty=Tensor[(1, 1024), float32] */;
  %9464 = %9460.0 /* ty=Tensor[(1, 1024), float32] */;
  %9465 = %9460.2 /* ty=Tensor[(1, 1024), float32] */;
  %9466 = sigmoid(%9464) /* ty=Tensor[(1, 1024), float32] */;
  %9467 = tanh(%9465) /* ty=Tensor[(1, 1024), float32] */;
  %9468 = multiply(%9463, %9427) /* ty=Tensor[(1, 1024), float32] */;
  %9469 = multiply(%9466, %9467) /* ty=Tensor[(1, 1024), float32] */;
  %9470 = add(%9468, %9469) /* ty=Tensor[(1, 1024), float32] */;
  %9471 = sigmoid(%9461) /* ty=Tensor[(1, 1024), float32] */;
  %9472 = tanh(%9470) /* ty=Tensor[(1, 1024), float32] */;
  %9473 = %555.207 /* ty=Tensor[(1, 240), float32] */;
  %9474 = (%9473, %9451) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9475 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9476 = concatenate(%9474, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9477 = concatenate(%9475, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9478 = nn.dense(%9476, %9477, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9479 = add(%9478, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9480 = add(%9479, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9481 = split(%9480, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9482 = %9481.3 /* ty=Tensor[(1, 1024), float32] */;
  %9483 = %9481.1 /* ty=Tensor[(1, 1024), float32] */;
  %9484 = sigmoid(%9483) /* ty=Tensor[(1, 1024), float32] */;
  %9485 = %9481.0 /* ty=Tensor[(1, 1024), float32] */;
  %9486 = %9481.2 /* ty=Tensor[(1, 1024), float32] */;
  %9487 = sigmoid(%9485) /* ty=Tensor[(1, 1024), float32] */;
  %9488 = tanh(%9486) /* ty=Tensor[(1, 1024), float32] */;
  %9489 = multiply(%9484, %9448) /* ty=Tensor[(1, 1024), float32] */;
  %9490 = multiply(%9487, %9488) /* ty=Tensor[(1, 1024), float32] */;
  %9491 = add(%9489, %9490) /* ty=Tensor[(1, 1024), float32] */;
  %9492 = sigmoid(%9482) /* ty=Tensor[(1, 1024), float32] */;
  %9493 = tanh(%9491) /* ty=Tensor[(1, 1024), float32] */;
  %9494 = multiply(%9492, %9493) /* ty=Tensor[(1, 1024), float32] */;
  %9495 = multiply(%9471, %9472) /* ty=Tensor[(1, 1024), float32] */;
  %9496 = (%9494, %9495) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9497 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9498 = concatenate(%9496, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9499 = concatenate(%9497, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9500 = nn.dense(%9498, %9499, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9501 = add(%9500, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9502 = add(%9501, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9503 = split(%9502, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9504 = %9503.3 /* ty=Tensor[(1, 1024), float32] */;
  %9505 = %9503.1 /* ty=Tensor[(1, 1024), float32] */;
  %9506 = sigmoid(%9505) /* ty=Tensor[(1, 1024), float32] */;
  %9507 = %9503.0 /* ty=Tensor[(1, 1024), float32] */;
  %9508 = %9503.2 /* ty=Tensor[(1, 1024), float32] */;
  %9509 = sigmoid(%9507) /* ty=Tensor[(1, 1024), float32] */;
  %9510 = tanh(%9508) /* ty=Tensor[(1, 1024), float32] */;
  %9511 = multiply(%9506, %9470) /* ty=Tensor[(1, 1024), float32] */;
  %9512 = multiply(%9509, %9510) /* ty=Tensor[(1, 1024), float32] */;
  %9513 = add(%9511, %9512) /* ty=Tensor[(1, 1024), float32] */;
  %9514 = sigmoid(%9504) /* ty=Tensor[(1, 1024), float32] */;
  %9515 = tanh(%9513) /* ty=Tensor[(1, 1024), float32] */;
  %9516 = %555.208 /* ty=Tensor[(1, 240), float32] */;
  %9517 = (%9516, %9494) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9518 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9519 = concatenate(%9517, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9520 = concatenate(%9518, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9521 = nn.dense(%9519, %9520, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9522 = add(%9521, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9523 = add(%9522, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9524 = split(%9523, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9525 = %9524.3 /* ty=Tensor[(1, 1024), float32] */;
  %9526 = %9524.1 /* ty=Tensor[(1, 1024), float32] */;
  %9527 = sigmoid(%9526) /* ty=Tensor[(1, 1024), float32] */;
  %9528 = %9524.0 /* ty=Tensor[(1, 1024), float32] */;
  %9529 = %9524.2 /* ty=Tensor[(1, 1024), float32] */;
  %9530 = sigmoid(%9528) /* ty=Tensor[(1, 1024), float32] */;
  %9531 = tanh(%9529) /* ty=Tensor[(1, 1024), float32] */;
  %9532 = multiply(%9527, %9491) /* ty=Tensor[(1, 1024), float32] */;
  %9533 = multiply(%9530, %9531) /* ty=Tensor[(1, 1024), float32] */;
  %9534 = add(%9532, %9533) /* ty=Tensor[(1, 1024), float32] */;
  %9535 = sigmoid(%9525) /* ty=Tensor[(1, 1024), float32] */;
  %9536 = tanh(%9534) /* ty=Tensor[(1, 1024), float32] */;
  %9537 = multiply(%9535, %9536) /* ty=Tensor[(1, 1024), float32] */;
  %9538 = multiply(%9514, %9515) /* ty=Tensor[(1, 1024), float32] */;
  %9539 = (%9537, %9538) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9540 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9541 = concatenate(%9539, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9542 = concatenate(%9540, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9543 = nn.dense(%9541, %9542, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9544 = add(%9543, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9545 = add(%9544, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9546 = split(%9545, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9547 = %9546.3 /* ty=Tensor[(1, 1024), float32] */;
  %9548 = %9546.1 /* ty=Tensor[(1, 1024), float32] */;
  %9549 = sigmoid(%9548) /* ty=Tensor[(1, 1024), float32] */;
  %9550 = %9546.0 /* ty=Tensor[(1, 1024), float32] */;
  %9551 = %9546.2 /* ty=Tensor[(1, 1024), float32] */;
  %9552 = sigmoid(%9550) /* ty=Tensor[(1, 1024), float32] */;
  %9553 = tanh(%9551) /* ty=Tensor[(1, 1024), float32] */;
  %9554 = multiply(%9549, %9513) /* ty=Tensor[(1, 1024), float32] */;
  %9555 = multiply(%9552, %9553) /* ty=Tensor[(1, 1024), float32] */;
  %9556 = add(%9554, %9555) /* ty=Tensor[(1, 1024), float32] */;
  %9557 = sigmoid(%9547) /* ty=Tensor[(1, 1024), float32] */;
  %9558 = tanh(%9556) /* ty=Tensor[(1, 1024), float32] */;
  %9559 = %555.209 /* ty=Tensor[(1, 240), float32] */;
  %9560 = (%9559, %9537) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9561 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9562 = concatenate(%9560, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9563 = concatenate(%9561, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9564 = nn.dense(%9562, %9563, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9565 = add(%9564, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9566 = add(%9565, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9567 = split(%9566, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9568 = %9567.3 /* ty=Tensor[(1, 1024), float32] */;
  %9569 = %9567.1 /* ty=Tensor[(1, 1024), float32] */;
  %9570 = sigmoid(%9569) /* ty=Tensor[(1, 1024), float32] */;
  %9571 = %9567.0 /* ty=Tensor[(1, 1024), float32] */;
  %9572 = %9567.2 /* ty=Tensor[(1, 1024), float32] */;
  %9573 = sigmoid(%9571) /* ty=Tensor[(1, 1024), float32] */;
  %9574 = tanh(%9572) /* ty=Tensor[(1, 1024), float32] */;
  %9575 = multiply(%9570, %9534) /* ty=Tensor[(1, 1024), float32] */;
  %9576 = multiply(%9573, %9574) /* ty=Tensor[(1, 1024), float32] */;
  %9577 = add(%9575, %9576) /* ty=Tensor[(1, 1024), float32] */;
  %9578 = sigmoid(%9568) /* ty=Tensor[(1, 1024), float32] */;
  %9579 = tanh(%9577) /* ty=Tensor[(1, 1024), float32] */;
  %9580 = multiply(%9578, %9579) /* ty=Tensor[(1, 1024), float32] */;
  %9581 = multiply(%9557, %9558) /* ty=Tensor[(1, 1024), float32] */;
  %9582 = (%9580, %9581) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9583 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9584 = concatenate(%9582, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9585 = concatenate(%9583, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9586 = nn.dense(%9584, %9585, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9587 = add(%9586, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9588 = add(%9587, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9589 = split(%9588, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9590 = %9589.3 /* ty=Tensor[(1, 1024), float32] */;
  %9591 = %9589.1 /* ty=Tensor[(1, 1024), float32] */;
  %9592 = sigmoid(%9591) /* ty=Tensor[(1, 1024), float32] */;
  %9593 = %9589.0 /* ty=Tensor[(1, 1024), float32] */;
  %9594 = %9589.2 /* ty=Tensor[(1, 1024), float32] */;
  %9595 = sigmoid(%9593) /* ty=Tensor[(1, 1024), float32] */;
  %9596 = tanh(%9594) /* ty=Tensor[(1, 1024), float32] */;
  %9597 = multiply(%9592, %9556) /* ty=Tensor[(1, 1024), float32] */;
  %9598 = multiply(%9595, %9596) /* ty=Tensor[(1, 1024), float32] */;
  %9599 = add(%9597, %9598) /* ty=Tensor[(1, 1024), float32] */;
  %9600 = sigmoid(%9590) /* ty=Tensor[(1, 1024), float32] */;
  %9601 = tanh(%9599) /* ty=Tensor[(1, 1024), float32] */;
  %9602 = %555.210 /* ty=Tensor[(1, 240), float32] */;
  %9603 = (%9602, %9580) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9604 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9605 = concatenate(%9603, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9606 = concatenate(%9604, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9607 = nn.dense(%9605, %9606, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9608 = add(%9607, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9609 = add(%9608, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9610 = split(%9609, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9611 = %9610.3 /* ty=Tensor[(1, 1024), float32] */;
  %9612 = %9610.1 /* ty=Tensor[(1, 1024), float32] */;
  %9613 = sigmoid(%9612) /* ty=Tensor[(1, 1024), float32] */;
  %9614 = %9610.0 /* ty=Tensor[(1, 1024), float32] */;
  %9615 = %9610.2 /* ty=Tensor[(1, 1024), float32] */;
  %9616 = sigmoid(%9614) /* ty=Tensor[(1, 1024), float32] */;
  %9617 = tanh(%9615) /* ty=Tensor[(1, 1024), float32] */;
  %9618 = multiply(%9613, %9577) /* ty=Tensor[(1, 1024), float32] */;
  %9619 = multiply(%9616, %9617) /* ty=Tensor[(1, 1024), float32] */;
  %9620 = add(%9618, %9619) /* ty=Tensor[(1, 1024), float32] */;
  %9621 = sigmoid(%9611) /* ty=Tensor[(1, 1024), float32] */;
  %9622 = tanh(%9620) /* ty=Tensor[(1, 1024), float32] */;
  %9623 = multiply(%9621, %9622) /* ty=Tensor[(1, 1024), float32] */;
  %9624 = multiply(%9600, %9601) /* ty=Tensor[(1, 1024), float32] */;
  %9625 = (%9623, %9624) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9626 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9627 = concatenate(%9625, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9628 = concatenate(%9626, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9629 = nn.dense(%9627, %9628, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9630 = add(%9629, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9631 = add(%9630, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9632 = split(%9631, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9633 = %9632.3 /* ty=Tensor[(1, 1024), float32] */;
  %9634 = %9632.1 /* ty=Tensor[(1, 1024), float32] */;
  %9635 = sigmoid(%9634) /* ty=Tensor[(1, 1024), float32] */;
  %9636 = %9632.0 /* ty=Tensor[(1, 1024), float32] */;
  %9637 = %9632.2 /* ty=Tensor[(1, 1024), float32] */;
  %9638 = sigmoid(%9636) /* ty=Tensor[(1, 1024), float32] */;
  %9639 = tanh(%9637) /* ty=Tensor[(1, 1024), float32] */;
  %9640 = multiply(%9635, %9599) /* ty=Tensor[(1, 1024), float32] */;
  %9641 = multiply(%9638, %9639) /* ty=Tensor[(1, 1024), float32] */;
  %9642 = add(%9640, %9641) /* ty=Tensor[(1, 1024), float32] */;
  %9643 = sigmoid(%9633) /* ty=Tensor[(1, 1024), float32] */;
  %9644 = tanh(%9642) /* ty=Tensor[(1, 1024), float32] */;
  %9645 = %555.211 /* ty=Tensor[(1, 240), float32] */;
  %9646 = (%9645, %9623) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9647 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9648 = concatenate(%9646, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9649 = concatenate(%9647, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9650 = nn.dense(%9648, %9649, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9651 = add(%9650, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9652 = add(%9651, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9653 = split(%9652, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9654 = %9653.3 /* ty=Tensor[(1, 1024), float32] */;
  %9655 = %9653.1 /* ty=Tensor[(1, 1024), float32] */;
  %9656 = sigmoid(%9655) /* ty=Tensor[(1, 1024), float32] */;
  %9657 = %9653.0 /* ty=Tensor[(1, 1024), float32] */;
  %9658 = %9653.2 /* ty=Tensor[(1, 1024), float32] */;
  %9659 = sigmoid(%9657) /* ty=Tensor[(1, 1024), float32] */;
  %9660 = tanh(%9658) /* ty=Tensor[(1, 1024), float32] */;
  %9661 = multiply(%9656, %9620) /* ty=Tensor[(1, 1024), float32] */;
  %9662 = multiply(%9659, %9660) /* ty=Tensor[(1, 1024), float32] */;
  %9663 = add(%9661, %9662) /* ty=Tensor[(1, 1024), float32] */;
  %9664 = sigmoid(%9654) /* ty=Tensor[(1, 1024), float32] */;
  %9665 = tanh(%9663) /* ty=Tensor[(1, 1024), float32] */;
  %9666 = multiply(%9664, %9665) /* ty=Tensor[(1, 1024), float32] */;
  %9667 = multiply(%9643, %9644) /* ty=Tensor[(1, 1024), float32] */;
  %9668 = (%9666, %9667) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9669 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9670 = concatenate(%9668, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9671 = concatenate(%9669, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9672 = nn.dense(%9670, %9671, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9673 = add(%9672, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9674 = add(%9673, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9675 = split(%9674, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9676 = %9675.3 /* ty=Tensor[(1, 1024), float32] */;
  %9677 = %9675.1 /* ty=Tensor[(1, 1024), float32] */;
  %9678 = sigmoid(%9677) /* ty=Tensor[(1, 1024), float32] */;
  %9679 = %9675.0 /* ty=Tensor[(1, 1024), float32] */;
  %9680 = %9675.2 /* ty=Tensor[(1, 1024), float32] */;
  %9681 = sigmoid(%9679) /* ty=Tensor[(1, 1024), float32] */;
  %9682 = tanh(%9680) /* ty=Tensor[(1, 1024), float32] */;
  %9683 = multiply(%9678, %9642) /* ty=Tensor[(1, 1024), float32] */;
  %9684 = multiply(%9681, %9682) /* ty=Tensor[(1, 1024), float32] */;
  %9685 = add(%9683, %9684) /* ty=Tensor[(1, 1024), float32] */;
  %9686 = sigmoid(%9676) /* ty=Tensor[(1, 1024), float32] */;
  %9687 = tanh(%9685) /* ty=Tensor[(1, 1024), float32] */;
  %9688 = %555.212 /* ty=Tensor[(1, 240), float32] */;
  %9689 = (%9688, %9666) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9690 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9691 = concatenate(%9689, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9692 = concatenate(%9690, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9693 = nn.dense(%9691, %9692, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9694 = add(%9693, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9695 = add(%9694, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9696 = split(%9695, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9697 = %9696.3 /* ty=Tensor[(1, 1024), float32] */;
  %9698 = %9696.1 /* ty=Tensor[(1, 1024), float32] */;
  %9699 = sigmoid(%9698) /* ty=Tensor[(1, 1024), float32] */;
  %9700 = %9696.0 /* ty=Tensor[(1, 1024), float32] */;
  %9701 = %9696.2 /* ty=Tensor[(1, 1024), float32] */;
  %9702 = sigmoid(%9700) /* ty=Tensor[(1, 1024), float32] */;
  %9703 = tanh(%9701) /* ty=Tensor[(1, 1024), float32] */;
  %9704 = multiply(%9699, %9663) /* ty=Tensor[(1, 1024), float32] */;
  %9705 = multiply(%9702, %9703) /* ty=Tensor[(1, 1024), float32] */;
  %9706 = add(%9704, %9705) /* ty=Tensor[(1, 1024), float32] */;
  %9707 = sigmoid(%9697) /* ty=Tensor[(1, 1024), float32] */;
  %9708 = tanh(%9706) /* ty=Tensor[(1, 1024), float32] */;
  %9709 = multiply(%9707, %9708) /* ty=Tensor[(1, 1024), float32] */;
  %9710 = multiply(%9686, %9687) /* ty=Tensor[(1, 1024), float32] */;
  %9711 = (%9709, %9710) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9712 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9713 = concatenate(%9711, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9714 = concatenate(%9712, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9715 = nn.dense(%9713, %9714, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9716 = add(%9715, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9717 = add(%9716, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9718 = split(%9717, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9719 = %9718.3 /* ty=Tensor[(1, 1024), float32] */;
  %9720 = %9718.1 /* ty=Tensor[(1, 1024), float32] */;
  %9721 = sigmoid(%9720) /* ty=Tensor[(1, 1024), float32] */;
  %9722 = %9718.0 /* ty=Tensor[(1, 1024), float32] */;
  %9723 = %9718.2 /* ty=Tensor[(1, 1024), float32] */;
  %9724 = sigmoid(%9722) /* ty=Tensor[(1, 1024), float32] */;
  %9725 = tanh(%9723) /* ty=Tensor[(1, 1024), float32] */;
  %9726 = multiply(%9721, %9685) /* ty=Tensor[(1, 1024), float32] */;
  %9727 = multiply(%9724, %9725) /* ty=Tensor[(1, 1024), float32] */;
  %9728 = add(%9726, %9727) /* ty=Tensor[(1, 1024), float32] */;
  %9729 = sigmoid(%9719) /* ty=Tensor[(1, 1024), float32] */;
  %9730 = tanh(%9728) /* ty=Tensor[(1, 1024), float32] */;
  %9731 = %555.213 /* ty=Tensor[(1, 240), float32] */;
  %9732 = (%9731, %9709) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9733 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9734 = concatenate(%9732, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9735 = concatenate(%9733, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9736 = nn.dense(%9734, %9735, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9737 = add(%9736, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9738 = add(%9737, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9739 = split(%9738, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9740 = %9739.3 /* ty=Tensor[(1, 1024), float32] */;
  %9741 = %9739.1 /* ty=Tensor[(1, 1024), float32] */;
  %9742 = sigmoid(%9741) /* ty=Tensor[(1, 1024), float32] */;
  %9743 = %9739.0 /* ty=Tensor[(1, 1024), float32] */;
  %9744 = %9739.2 /* ty=Tensor[(1, 1024), float32] */;
  %9745 = sigmoid(%9743) /* ty=Tensor[(1, 1024), float32] */;
  %9746 = tanh(%9744) /* ty=Tensor[(1, 1024), float32] */;
  %9747 = multiply(%9742, %9706) /* ty=Tensor[(1, 1024), float32] */;
  %9748 = multiply(%9745, %9746) /* ty=Tensor[(1, 1024), float32] */;
  %9749 = add(%9747, %9748) /* ty=Tensor[(1, 1024), float32] */;
  %9750 = sigmoid(%9740) /* ty=Tensor[(1, 1024), float32] */;
  %9751 = tanh(%9749) /* ty=Tensor[(1, 1024), float32] */;
  %9752 = multiply(%9750, %9751) /* ty=Tensor[(1, 1024), float32] */;
  %9753 = multiply(%9729, %9730) /* ty=Tensor[(1, 1024), float32] */;
  %9754 = (%9752, %9753) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9755 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9756 = concatenate(%9754, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9757 = concatenate(%9755, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9758 = nn.dense(%9756, %9757, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9759 = add(%9758, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9760 = add(%9759, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9761 = split(%9760, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9762 = %9761.3 /* ty=Tensor[(1, 1024), float32] */;
  %9763 = %9761.1 /* ty=Tensor[(1, 1024), float32] */;
  %9764 = sigmoid(%9763) /* ty=Tensor[(1, 1024), float32] */;
  %9765 = %9761.0 /* ty=Tensor[(1, 1024), float32] */;
  %9766 = %9761.2 /* ty=Tensor[(1, 1024), float32] */;
  %9767 = sigmoid(%9765) /* ty=Tensor[(1, 1024), float32] */;
  %9768 = tanh(%9766) /* ty=Tensor[(1, 1024), float32] */;
  %9769 = multiply(%9764, %9728) /* ty=Tensor[(1, 1024), float32] */;
  %9770 = multiply(%9767, %9768) /* ty=Tensor[(1, 1024), float32] */;
  %9771 = add(%9769, %9770) /* ty=Tensor[(1, 1024), float32] */;
  %9772 = sigmoid(%9762) /* ty=Tensor[(1, 1024), float32] */;
  %9773 = tanh(%9771) /* ty=Tensor[(1, 1024), float32] */;
  %9774 = %555.214 /* ty=Tensor[(1, 240), float32] */;
  %9775 = (%9774, %9752) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9776 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9777 = concatenate(%9775, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9778 = concatenate(%9776, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9779 = nn.dense(%9777, %9778, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9780 = add(%9779, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9781 = add(%9780, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9782 = split(%9781, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9783 = %9782.3 /* ty=Tensor[(1, 1024), float32] */;
  %9784 = %9782.1 /* ty=Tensor[(1, 1024), float32] */;
  %9785 = sigmoid(%9784) /* ty=Tensor[(1, 1024), float32] */;
  %9786 = %9782.0 /* ty=Tensor[(1, 1024), float32] */;
  %9787 = %9782.2 /* ty=Tensor[(1, 1024), float32] */;
  %9788 = sigmoid(%9786) /* ty=Tensor[(1, 1024), float32] */;
  %9789 = tanh(%9787) /* ty=Tensor[(1, 1024), float32] */;
  %9790 = multiply(%9785, %9749) /* ty=Tensor[(1, 1024), float32] */;
  %9791 = multiply(%9788, %9789) /* ty=Tensor[(1, 1024), float32] */;
  %9792 = add(%9790, %9791) /* ty=Tensor[(1, 1024), float32] */;
  %9793 = sigmoid(%9783) /* ty=Tensor[(1, 1024), float32] */;
  %9794 = tanh(%9792) /* ty=Tensor[(1, 1024), float32] */;
  %9795 = multiply(%9793, %9794) /* ty=Tensor[(1, 1024), float32] */;
  %9796 = multiply(%9772, %9773) /* ty=Tensor[(1, 1024), float32] */;
  %9797 = (%9795, %9796) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9798 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9799 = concatenate(%9797, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9800 = concatenate(%9798, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9801 = nn.dense(%9799, %9800, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9802 = add(%9801, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9803 = add(%9802, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9804 = split(%9803, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9805 = %9804.3 /* ty=Tensor[(1, 1024), float32] */;
  %9806 = %9804.1 /* ty=Tensor[(1, 1024), float32] */;
  %9807 = sigmoid(%9806) /* ty=Tensor[(1, 1024), float32] */;
  %9808 = %9804.0 /* ty=Tensor[(1, 1024), float32] */;
  %9809 = %9804.2 /* ty=Tensor[(1, 1024), float32] */;
  %9810 = sigmoid(%9808) /* ty=Tensor[(1, 1024), float32] */;
  %9811 = tanh(%9809) /* ty=Tensor[(1, 1024), float32] */;
  %9812 = multiply(%9807, %9771) /* ty=Tensor[(1, 1024), float32] */;
  %9813 = multiply(%9810, %9811) /* ty=Tensor[(1, 1024), float32] */;
  %9814 = add(%9812, %9813) /* ty=Tensor[(1, 1024), float32] */;
  %9815 = sigmoid(%9805) /* ty=Tensor[(1, 1024), float32] */;
  %9816 = tanh(%9814) /* ty=Tensor[(1, 1024), float32] */;
  %9817 = %555.215 /* ty=Tensor[(1, 240), float32] */;
  %9818 = (%9817, %9795) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9819 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9820 = concatenate(%9818, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9821 = concatenate(%9819, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9822 = nn.dense(%9820, %9821, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9823 = add(%9822, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9824 = add(%9823, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9825 = split(%9824, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9826 = %9825.3 /* ty=Tensor[(1, 1024), float32] */;
  %9827 = %9825.1 /* ty=Tensor[(1, 1024), float32] */;
  %9828 = sigmoid(%9827) /* ty=Tensor[(1, 1024), float32] */;
  %9829 = %9825.0 /* ty=Tensor[(1, 1024), float32] */;
  %9830 = %9825.2 /* ty=Tensor[(1, 1024), float32] */;
  %9831 = sigmoid(%9829) /* ty=Tensor[(1, 1024), float32] */;
  %9832 = tanh(%9830) /* ty=Tensor[(1, 1024), float32] */;
  %9833 = multiply(%9828, %9792) /* ty=Tensor[(1, 1024), float32] */;
  %9834 = multiply(%9831, %9832) /* ty=Tensor[(1, 1024), float32] */;
  %9835 = add(%9833, %9834) /* ty=Tensor[(1, 1024), float32] */;
  %9836 = sigmoid(%9826) /* ty=Tensor[(1, 1024), float32] */;
  %9837 = tanh(%9835) /* ty=Tensor[(1, 1024), float32] */;
  %9838 = multiply(%9836, %9837) /* ty=Tensor[(1, 1024), float32] */;
  %9839 = multiply(%9815, %9816) /* ty=Tensor[(1, 1024), float32] */;
  %9840 = (%9838, %9839) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9841 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9842 = concatenate(%9840, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9843 = concatenate(%9841, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9844 = nn.dense(%9842, %9843, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9845 = add(%9844, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9846 = add(%9845, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9847 = split(%9846, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9848 = %9847.3 /* ty=Tensor[(1, 1024), float32] */;
  %9849 = %9847.1 /* ty=Tensor[(1, 1024), float32] */;
  %9850 = sigmoid(%9849) /* ty=Tensor[(1, 1024), float32] */;
  %9851 = %9847.0 /* ty=Tensor[(1, 1024), float32] */;
  %9852 = %9847.2 /* ty=Tensor[(1, 1024), float32] */;
  %9853 = sigmoid(%9851) /* ty=Tensor[(1, 1024), float32] */;
  %9854 = tanh(%9852) /* ty=Tensor[(1, 1024), float32] */;
  %9855 = multiply(%9850, %9814) /* ty=Tensor[(1, 1024), float32] */;
  %9856 = multiply(%9853, %9854) /* ty=Tensor[(1, 1024), float32] */;
  %9857 = add(%9855, %9856) /* ty=Tensor[(1, 1024), float32] */;
  %9858 = sigmoid(%9848) /* ty=Tensor[(1, 1024), float32] */;
  %9859 = tanh(%9857) /* ty=Tensor[(1, 1024), float32] */;
  %9860 = %555.216 /* ty=Tensor[(1, 240), float32] */;
  %9861 = (%9860, %9838) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9862 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9863 = concatenate(%9861, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9864 = concatenate(%9862, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9865 = nn.dense(%9863, %9864, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9866 = add(%9865, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9867 = add(%9866, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9868 = split(%9867, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9869 = %9868.3 /* ty=Tensor[(1, 1024), float32] */;
  %9870 = %9868.1 /* ty=Tensor[(1, 1024), float32] */;
  %9871 = sigmoid(%9870) /* ty=Tensor[(1, 1024), float32] */;
  %9872 = %9868.0 /* ty=Tensor[(1, 1024), float32] */;
  %9873 = %9868.2 /* ty=Tensor[(1, 1024), float32] */;
  %9874 = sigmoid(%9872) /* ty=Tensor[(1, 1024), float32] */;
  %9875 = tanh(%9873) /* ty=Tensor[(1, 1024), float32] */;
  %9876 = multiply(%9871, %9835) /* ty=Tensor[(1, 1024), float32] */;
  %9877 = multiply(%9874, %9875) /* ty=Tensor[(1, 1024), float32] */;
  %9878 = add(%9876, %9877) /* ty=Tensor[(1, 1024), float32] */;
  %9879 = sigmoid(%9869) /* ty=Tensor[(1, 1024), float32] */;
  %9880 = tanh(%9878) /* ty=Tensor[(1, 1024), float32] */;
  %9881 = multiply(%9879, %9880) /* ty=Tensor[(1, 1024), float32] */;
  %9882 = multiply(%9858, %9859) /* ty=Tensor[(1, 1024), float32] */;
  %9883 = (%9881, %9882) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9884 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9885 = concatenate(%9883, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9886 = concatenate(%9884, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9887 = nn.dense(%9885, %9886, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9888 = add(%9887, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9889 = add(%9888, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9890 = split(%9889, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9891 = %9890.3 /* ty=Tensor[(1, 1024), float32] */;
  %9892 = %9890.1 /* ty=Tensor[(1, 1024), float32] */;
  %9893 = sigmoid(%9892) /* ty=Tensor[(1, 1024), float32] */;
  %9894 = %9890.0 /* ty=Tensor[(1, 1024), float32] */;
  %9895 = %9890.2 /* ty=Tensor[(1, 1024), float32] */;
  %9896 = sigmoid(%9894) /* ty=Tensor[(1, 1024), float32] */;
  %9897 = tanh(%9895) /* ty=Tensor[(1, 1024), float32] */;
  %9898 = multiply(%9893, %9857) /* ty=Tensor[(1, 1024), float32] */;
  %9899 = multiply(%9896, %9897) /* ty=Tensor[(1, 1024), float32] */;
  %9900 = add(%9898, %9899) /* ty=Tensor[(1, 1024), float32] */;
  %9901 = sigmoid(%9891) /* ty=Tensor[(1, 1024), float32] */;
  %9902 = tanh(%9900) /* ty=Tensor[(1, 1024), float32] */;
  %9903 = %555.217 /* ty=Tensor[(1, 240), float32] */;
  %9904 = (%9903, %9881) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9905 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9906 = concatenate(%9904, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9907 = concatenate(%9905, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9908 = nn.dense(%9906, %9907, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9909 = add(%9908, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9910 = add(%9909, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9911 = split(%9910, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9912 = %9911.3 /* ty=Tensor[(1, 1024), float32] */;
  %9913 = %9911.1 /* ty=Tensor[(1, 1024), float32] */;
  %9914 = sigmoid(%9913) /* ty=Tensor[(1, 1024), float32] */;
  %9915 = %9911.0 /* ty=Tensor[(1, 1024), float32] */;
  %9916 = %9911.2 /* ty=Tensor[(1, 1024), float32] */;
  %9917 = sigmoid(%9915) /* ty=Tensor[(1, 1024), float32] */;
  %9918 = tanh(%9916) /* ty=Tensor[(1, 1024), float32] */;
  %9919 = multiply(%9914, %9878) /* ty=Tensor[(1, 1024), float32] */;
  %9920 = multiply(%9917, %9918) /* ty=Tensor[(1, 1024), float32] */;
  %9921 = add(%9919, %9920) /* ty=Tensor[(1, 1024), float32] */;
  %9922 = sigmoid(%9912) /* ty=Tensor[(1, 1024), float32] */;
  %9923 = tanh(%9921) /* ty=Tensor[(1, 1024), float32] */;
  %9924 = multiply(%9922, %9923) /* ty=Tensor[(1, 1024), float32] */;
  %9925 = multiply(%9901, %9902) /* ty=Tensor[(1, 1024), float32] */;
  %9926 = (%9924, %9925) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9927 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9928 = concatenate(%9926, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9929 = concatenate(%9927, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9930 = nn.dense(%9928, %9929, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9931 = add(%9930, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9932 = add(%9931, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9933 = split(%9932, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9934 = %9933.3 /* ty=Tensor[(1, 1024), float32] */;
  %9935 = %9933.1 /* ty=Tensor[(1, 1024), float32] */;
  %9936 = sigmoid(%9935) /* ty=Tensor[(1, 1024), float32] */;
  %9937 = %9933.0 /* ty=Tensor[(1, 1024), float32] */;
  %9938 = %9933.2 /* ty=Tensor[(1, 1024), float32] */;
  %9939 = sigmoid(%9937) /* ty=Tensor[(1, 1024), float32] */;
  %9940 = tanh(%9938) /* ty=Tensor[(1, 1024), float32] */;
  %9941 = multiply(%9936, %9900) /* ty=Tensor[(1, 1024), float32] */;
  %9942 = multiply(%9939, %9940) /* ty=Tensor[(1, 1024), float32] */;
  %9943 = add(%9941, %9942) /* ty=Tensor[(1, 1024), float32] */;
  %9944 = sigmoid(%9934) /* ty=Tensor[(1, 1024), float32] */;
  %9945 = tanh(%9943) /* ty=Tensor[(1, 1024), float32] */;
  %9946 = %555.218 /* ty=Tensor[(1, 240), float32] */;
  %9947 = (%9946, %9924) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9948 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9949 = concatenate(%9947, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9950 = concatenate(%9948, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9951 = nn.dense(%9949, %9950, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9952 = add(%9951, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9953 = add(%9952, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9954 = split(%9953, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9955 = %9954.3 /* ty=Tensor[(1, 1024), float32] */;
  %9956 = %9954.1 /* ty=Tensor[(1, 1024), float32] */;
  %9957 = sigmoid(%9956) /* ty=Tensor[(1, 1024), float32] */;
  %9958 = %9954.0 /* ty=Tensor[(1, 1024), float32] */;
  %9959 = %9954.2 /* ty=Tensor[(1, 1024), float32] */;
  %9960 = sigmoid(%9958) /* ty=Tensor[(1, 1024), float32] */;
  %9961 = tanh(%9959) /* ty=Tensor[(1, 1024), float32] */;
  %9962 = multiply(%9957, %9921) /* ty=Tensor[(1, 1024), float32] */;
  %9963 = multiply(%9960, %9961) /* ty=Tensor[(1, 1024), float32] */;
  %9964 = add(%9962, %9963) /* ty=Tensor[(1, 1024), float32] */;
  %9965 = sigmoid(%9955) /* ty=Tensor[(1, 1024), float32] */;
  %9966 = tanh(%9964) /* ty=Tensor[(1, 1024), float32] */;
  %9967 = multiply(%9965, %9966) /* ty=Tensor[(1, 1024), float32] */;
  %9968 = multiply(%9944, %9945) /* ty=Tensor[(1, 1024), float32] */;
  %9969 = (%9967, %9968) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9970 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %9971 = concatenate(%9969, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %9972 = concatenate(%9970, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %9973 = nn.dense(%9971, %9972, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9974 = add(%9973, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9975 = add(%9974, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %9976 = split(%9975, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9977 = %9976.3 /* ty=Tensor[(1, 1024), float32] */;
  %9978 = %9976.1 /* ty=Tensor[(1, 1024), float32] */;
  %9979 = sigmoid(%9978) /* ty=Tensor[(1, 1024), float32] */;
  %9980 = %9976.0 /* ty=Tensor[(1, 1024), float32] */;
  %9981 = %9976.2 /* ty=Tensor[(1, 1024), float32] */;
  %9982 = sigmoid(%9980) /* ty=Tensor[(1, 1024), float32] */;
  %9983 = tanh(%9981) /* ty=Tensor[(1, 1024), float32] */;
  %9984 = multiply(%9979, %9943) /* ty=Tensor[(1, 1024), float32] */;
  %9985 = multiply(%9982, %9983) /* ty=Tensor[(1, 1024), float32] */;
  %9986 = add(%9984, %9985) /* ty=Tensor[(1, 1024), float32] */;
  %9987 = sigmoid(%9977) /* ty=Tensor[(1, 1024), float32] */;
  %9988 = tanh(%9986) /* ty=Tensor[(1, 1024), float32] */;
  %9989 = %555.219 /* ty=Tensor[(1, 240), float32] */;
  %9990 = (%9989, %9967) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %9991 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %9992 = concatenate(%9990, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %9993 = concatenate(%9991, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %9994 = nn.dense(%9992, %9993, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %9995 = add(%9994, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9996 = add(%9995, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %9997 = split(%9996, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %9998 = %9997.3 /* ty=Tensor[(1, 1024), float32] */;
  %9999 = %9997.1 /* ty=Tensor[(1, 1024), float32] */;
  %10000 = sigmoid(%9999) /* ty=Tensor[(1, 1024), float32] */;
  %10001 = %9997.0 /* ty=Tensor[(1, 1024), float32] */;
  %10002 = %9997.2 /* ty=Tensor[(1, 1024), float32] */;
  %10003 = sigmoid(%10001) /* ty=Tensor[(1, 1024), float32] */;
  %10004 = tanh(%10002) /* ty=Tensor[(1, 1024), float32] */;
  %10005 = multiply(%10000, %9964) /* ty=Tensor[(1, 1024), float32] */;
  %10006 = multiply(%10003, %10004) /* ty=Tensor[(1, 1024), float32] */;
  %10007 = add(%10005, %10006) /* ty=Tensor[(1, 1024), float32] */;
  %10008 = sigmoid(%9998) /* ty=Tensor[(1, 1024), float32] */;
  %10009 = tanh(%10007) /* ty=Tensor[(1, 1024), float32] */;
  %10010 = multiply(%10008, %10009) /* ty=Tensor[(1, 1024), float32] */;
  %10011 = multiply(%9987, %9988) /* ty=Tensor[(1, 1024), float32] */;
  %10012 = (%10010, %10011) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10013 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10014 = concatenate(%10012, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10015 = concatenate(%10013, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10016 = nn.dense(%10014, %10015, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10017 = add(%10016, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10018 = add(%10017, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10019 = split(%10018, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10020 = %10019.3 /* ty=Tensor[(1, 1024), float32] */;
  %10021 = %10019.1 /* ty=Tensor[(1, 1024), float32] */;
  %10022 = sigmoid(%10021) /* ty=Tensor[(1, 1024), float32] */;
  %10023 = %10019.0 /* ty=Tensor[(1, 1024), float32] */;
  %10024 = %10019.2 /* ty=Tensor[(1, 1024), float32] */;
  %10025 = sigmoid(%10023) /* ty=Tensor[(1, 1024), float32] */;
  %10026 = tanh(%10024) /* ty=Tensor[(1, 1024), float32] */;
  %10027 = multiply(%10022, %9986) /* ty=Tensor[(1, 1024), float32] */;
  %10028 = multiply(%10025, %10026) /* ty=Tensor[(1, 1024), float32] */;
  %10029 = add(%10027, %10028) /* ty=Tensor[(1, 1024), float32] */;
  %10030 = sigmoid(%10020) /* ty=Tensor[(1, 1024), float32] */;
  %10031 = tanh(%10029) /* ty=Tensor[(1, 1024), float32] */;
  %10032 = %555.220 /* ty=Tensor[(1, 240), float32] */;
  %10033 = (%10032, %10010) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10034 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10035 = concatenate(%10033, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10036 = concatenate(%10034, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10037 = nn.dense(%10035, %10036, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10038 = add(%10037, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10039 = add(%10038, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10040 = split(%10039, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10041 = %10040.3 /* ty=Tensor[(1, 1024), float32] */;
  %10042 = %10040.1 /* ty=Tensor[(1, 1024), float32] */;
  %10043 = sigmoid(%10042) /* ty=Tensor[(1, 1024), float32] */;
  %10044 = %10040.0 /* ty=Tensor[(1, 1024), float32] */;
  %10045 = %10040.2 /* ty=Tensor[(1, 1024), float32] */;
  %10046 = sigmoid(%10044) /* ty=Tensor[(1, 1024), float32] */;
  %10047 = tanh(%10045) /* ty=Tensor[(1, 1024), float32] */;
  %10048 = multiply(%10043, %10007) /* ty=Tensor[(1, 1024), float32] */;
  %10049 = multiply(%10046, %10047) /* ty=Tensor[(1, 1024), float32] */;
  %10050 = add(%10048, %10049) /* ty=Tensor[(1, 1024), float32] */;
  %10051 = sigmoid(%10041) /* ty=Tensor[(1, 1024), float32] */;
  %10052 = tanh(%10050) /* ty=Tensor[(1, 1024), float32] */;
  %10053 = multiply(%10051, %10052) /* ty=Tensor[(1, 1024), float32] */;
  %10054 = multiply(%10030, %10031) /* ty=Tensor[(1, 1024), float32] */;
  %10055 = (%10053, %10054) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10056 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10057 = concatenate(%10055, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10058 = concatenate(%10056, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10059 = nn.dense(%10057, %10058, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10060 = add(%10059, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10061 = add(%10060, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10062 = split(%10061, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10063 = %10062.3 /* ty=Tensor[(1, 1024), float32] */;
  %10064 = %10062.1 /* ty=Tensor[(1, 1024), float32] */;
  %10065 = sigmoid(%10064) /* ty=Tensor[(1, 1024), float32] */;
  %10066 = %10062.0 /* ty=Tensor[(1, 1024), float32] */;
  %10067 = %10062.2 /* ty=Tensor[(1, 1024), float32] */;
  %10068 = sigmoid(%10066) /* ty=Tensor[(1, 1024), float32] */;
  %10069 = tanh(%10067) /* ty=Tensor[(1, 1024), float32] */;
  %10070 = multiply(%10065, %10029) /* ty=Tensor[(1, 1024), float32] */;
  %10071 = multiply(%10068, %10069) /* ty=Tensor[(1, 1024), float32] */;
  %10072 = add(%10070, %10071) /* ty=Tensor[(1, 1024), float32] */;
  %10073 = sigmoid(%10063) /* ty=Tensor[(1, 1024), float32] */;
  %10074 = tanh(%10072) /* ty=Tensor[(1, 1024), float32] */;
  %10075 = %555.221 /* ty=Tensor[(1, 240), float32] */;
  %10076 = (%10075, %10053) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10077 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10078 = concatenate(%10076, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10079 = concatenate(%10077, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10080 = nn.dense(%10078, %10079, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10081 = add(%10080, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10082 = add(%10081, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10083 = split(%10082, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10084 = %10083.3 /* ty=Tensor[(1, 1024), float32] */;
  %10085 = %10083.1 /* ty=Tensor[(1, 1024), float32] */;
  %10086 = sigmoid(%10085) /* ty=Tensor[(1, 1024), float32] */;
  %10087 = %10083.0 /* ty=Tensor[(1, 1024), float32] */;
  %10088 = %10083.2 /* ty=Tensor[(1, 1024), float32] */;
  %10089 = sigmoid(%10087) /* ty=Tensor[(1, 1024), float32] */;
  %10090 = tanh(%10088) /* ty=Tensor[(1, 1024), float32] */;
  %10091 = multiply(%10086, %10050) /* ty=Tensor[(1, 1024), float32] */;
  %10092 = multiply(%10089, %10090) /* ty=Tensor[(1, 1024), float32] */;
  %10093 = add(%10091, %10092) /* ty=Tensor[(1, 1024), float32] */;
  %10094 = sigmoid(%10084) /* ty=Tensor[(1, 1024), float32] */;
  %10095 = tanh(%10093) /* ty=Tensor[(1, 1024), float32] */;
  %10096 = multiply(%10094, %10095) /* ty=Tensor[(1, 1024), float32] */;
  %10097 = multiply(%10073, %10074) /* ty=Tensor[(1, 1024), float32] */;
  %10098 = (%10096, %10097) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10099 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10100 = concatenate(%10098, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10101 = concatenate(%10099, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10102 = nn.dense(%10100, %10101, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10103 = add(%10102, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10104 = add(%10103, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10105 = split(%10104, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10106 = %10105.3 /* ty=Tensor[(1, 1024), float32] */;
  %10107 = %10105.1 /* ty=Tensor[(1, 1024), float32] */;
  %10108 = sigmoid(%10107) /* ty=Tensor[(1, 1024), float32] */;
  %10109 = %10105.0 /* ty=Tensor[(1, 1024), float32] */;
  %10110 = %10105.2 /* ty=Tensor[(1, 1024), float32] */;
  %10111 = sigmoid(%10109) /* ty=Tensor[(1, 1024), float32] */;
  %10112 = tanh(%10110) /* ty=Tensor[(1, 1024), float32] */;
  %10113 = multiply(%10108, %10072) /* ty=Tensor[(1, 1024), float32] */;
  %10114 = multiply(%10111, %10112) /* ty=Tensor[(1, 1024), float32] */;
  %10115 = add(%10113, %10114) /* ty=Tensor[(1, 1024), float32] */;
  %10116 = sigmoid(%10106) /* ty=Tensor[(1, 1024), float32] */;
  %10117 = tanh(%10115) /* ty=Tensor[(1, 1024), float32] */;
  %10118 = %555.222 /* ty=Tensor[(1, 240), float32] */;
  %10119 = (%10118, %10096) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10120 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10121 = concatenate(%10119, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10122 = concatenate(%10120, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10123 = nn.dense(%10121, %10122, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10124 = add(%10123, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10125 = add(%10124, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10126 = split(%10125, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10127 = %10126.3 /* ty=Tensor[(1, 1024), float32] */;
  %10128 = %10126.1 /* ty=Tensor[(1, 1024), float32] */;
  %10129 = sigmoid(%10128) /* ty=Tensor[(1, 1024), float32] */;
  %10130 = %10126.0 /* ty=Tensor[(1, 1024), float32] */;
  %10131 = %10126.2 /* ty=Tensor[(1, 1024), float32] */;
  %10132 = sigmoid(%10130) /* ty=Tensor[(1, 1024), float32] */;
  %10133 = tanh(%10131) /* ty=Tensor[(1, 1024), float32] */;
  %10134 = multiply(%10129, %10093) /* ty=Tensor[(1, 1024), float32] */;
  %10135 = multiply(%10132, %10133) /* ty=Tensor[(1, 1024), float32] */;
  %10136 = add(%10134, %10135) /* ty=Tensor[(1, 1024), float32] */;
  %10137 = sigmoid(%10127) /* ty=Tensor[(1, 1024), float32] */;
  %10138 = tanh(%10136) /* ty=Tensor[(1, 1024), float32] */;
  %10139 = multiply(%10137, %10138) /* ty=Tensor[(1, 1024), float32] */;
  %10140 = multiply(%10116, %10117) /* ty=Tensor[(1, 1024), float32] */;
  %10141 = (%10139, %10140) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10142 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10143 = concatenate(%10141, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10144 = concatenate(%10142, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10145 = nn.dense(%10143, %10144, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10146 = add(%10145, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10147 = add(%10146, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10148 = split(%10147, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10149 = %10148.3 /* ty=Tensor[(1, 1024), float32] */;
  %10150 = %10148.1 /* ty=Tensor[(1, 1024), float32] */;
  %10151 = sigmoid(%10150) /* ty=Tensor[(1, 1024), float32] */;
  %10152 = %10148.0 /* ty=Tensor[(1, 1024), float32] */;
  %10153 = %10148.2 /* ty=Tensor[(1, 1024), float32] */;
  %10154 = sigmoid(%10152) /* ty=Tensor[(1, 1024), float32] */;
  %10155 = tanh(%10153) /* ty=Tensor[(1, 1024), float32] */;
  %10156 = multiply(%10151, %10115) /* ty=Tensor[(1, 1024), float32] */;
  %10157 = multiply(%10154, %10155) /* ty=Tensor[(1, 1024), float32] */;
  %10158 = add(%10156, %10157) /* ty=Tensor[(1, 1024), float32] */;
  %10159 = sigmoid(%10149) /* ty=Tensor[(1, 1024), float32] */;
  %10160 = tanh(%10158) /* ty=Tensor[(1, 1024), float32] */;
  %10161 = %555.223 /* ty=Tensor[(1, 240), float32] */;
  %10162 = (%10161, %10139) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10163 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10164 = concatenate(%10162, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10165 = concatenate(%10163, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10166 = nn.dense(%10164, %10165, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10167 = add(%10166, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10168 = add(%10167, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10169 = split(%10168, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10170 = %10169.3 /* ty=Tensor[(1, 1024), float32] */;
  %10171 = %10169.1 /* ty=Tensor[(1, 1024), float32] */;
  %10172 = sigmoid(%10171) /* ty=Tensor[(1, 1024), float32] */;
  %10173 = %10169.0 /* ty=Tensor[(1, 1024), float32] */;
  %10174 = %10169.2 /* ty=Tensor[(1, 1024), float32] */;
  %10175 = sigmoid(%10173) /* ty=Tensor[(1, 1024), float32] */;
  %10176 = tanh(%10174) /* ty=Tensor[(1, 1024), float32] */;
  %10177 = multiply(%10172, %10136) /* ty=Tensor[(1, 1024), float32] */;
  %10178 = multiply(%10175, %10176) /* ty=Tensor[(1, 1024), float32] */;
  %10179 = add(%10177, %10178) /* ty=Tensor[(1, 1024), float32] */;
  %10180 = sigmoid(%10170) /* ty=Tensor[(1, 1024), float32] */;
  %10181 = tanh(%10179) /* ty=Tensor[(1, 1024), float32] */;
  %10182 = multiply(%10180, %10181) /* ty=Tensor[(1, 1024), float32] */;
  %10183 = multiply(%10159, %10160) /* ty=Tensor[(1, 1024), float32] */;
  %10184 = (%10182, %10183) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10185 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10186 = concatenate(%10184, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10187 = concatenate(%10185, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10188 = nn.dense(%10186, %10187, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10189 = add(%10188, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10190 = add(%10189, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10191 = split(%10190, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10192 = %10191.3 /* ty=Tensor[(1, 1024), float32] */;
  %10193 = %10191.1 /* ty=Tensor[(1, 1024), float32] */;
  %10194 = sigmoid(%10193) /* ty=Tensor[(1, 1024), float32] */;
  %10195 = %10191.0 /* ty=Tensor[(1, 1024), float32] */;
  %10196 = %10191.2 /* ty=Tensor[(1, 1024), float32] */;
  %10197 = sigmoid(%10195) /* ty=Tensor[(1, 1024), float32] */;
  %10198 = tanh(%10196) /* ty=Tensor[(1, 1024), float32] */;
  %10199 = multiply(%10194, %10158) /* ty=Tensor[(1, 1024), float32] */;
  %10200 = multiply(%10197, %10198) /* ty=Tensor[(1, 1024), float32] */;
  %10201 = add(%10199, %10200) /* ty=Tensor[(1, 1024), float32] */;
  %10202 = sigmoid(%10192) /* ty=Tensor[(1, 1024), float32] */;
  %10203 = tanh(%10201) /* ty=Tensor[(1, 1024), float32] */;
  %10204 = %555.224 /* ty=Tensor[(1, 240), float32] */;
  %10205 = (%10204, %10182) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10206 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10207 = concatenate(%10205, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10208 = concatenate(%10206, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10209 = nn.dense(%10207, %10208, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10210 = add(%10209, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10211 = add(%10210, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10212 = split(%10211, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10213 = %10212.3 /* ty=Tensor[(1, 1024), float32] */;
  %10214 = %10212.1 /* ty=Tensor[(1, 1024), float32] */;
  %10215 = sigmoid(%10214) /* ty=Tensor[(1, 1024), float32] */;
  %10216 = %10212.0 /* ty=Tensor[(1, 1024), float32] */;
  %10217 = %10212.2 /* ty=Tensor[(1, 1024), float32] */;
  %10218 = sigmoid(%10216) /* ty=Tensor[(1, 1024), float32] */;
  %10219 = tanh(%10217) /* ty=Tensor[(1, 1024), float32] */;
  %10220 = multiply(%10215, %10179) /* ty=Tensor[(1, 1024), float32] */;
  %10221 = multiply(%10218, %10219) /* ty=Tensor[(1, 1024), float32] */;
  %10222 = add(%10220, %10221) /* ty=Tensor[(1, 1024), float32] */;
  %10223 = sigmoid(%10213) /* ty=Tensor[(1, 1024), float32] */;
  %10224 = tanh(%10222) /* ty=Tensor[(1, 1024), float32] */;
  %10225 = multiply(%10223, %10224) /* ty=Tensor[(1, 1024), float32] */;
  %10226 = multiply(%10202, %10203) /* ty=Tensor[(1, 1024), float32] */;
  %10227 = (%10225, %10226) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10228 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10229 = concatenate(%10227, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10230 = concatenate(%10228, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10231 = nn.dense(%10229, %10230, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10232 = add(%10231, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10233 = add(%10232, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10234 = split(%10233, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10235 = %10234.3 /* ty=Tensor[(1, 1024), float32] */;
  %10236 = %10234.1 /* ty=Tensor[(1, 1024), float32] */;
  %10237 = sigmoid(%10236) /* ty=Tensor[(1, 1024), float32] */;
  %10238 = %10234.0 /* ty=Tensor[(1, 1024), float32] */;
  %10239 = %10234.2 /* ty=Tensor[(1, 1024), float32] */;
  %10240 = sigmoid(%10238) /* ty=Tensor[(1, 1024), float32] */;
  %10241 = tanh(%10239) /* ty=Tensor[(1, 1024), float32] */;
  %10242 = multiply(%10237, %10201) /* ty=Tensor[(1, 1024), float32] */;
  %10243 = multiply(%10240, %10241) /* ty=Tensor[(1, 1024), float32] */;
  %10244 = add(%10242, %10243) /* ty=Tensor[(1, 1024), float32] */;
  %10245 = sigmoid(%10235) /* ty=Tensor[(1, 1024), float32] */;
  %10246 = tanh(%10244) /* ty=Tensor[(1, 1024), float32] */;
  %10247 = %555.225 /* ty=Tensor[(1, 240), float32] */;
  %10248 = (%10247, %10225) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10249 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10250 = concatenate(%10248, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10251 = concatenate(%10249, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10252 = nn.dense(%10250, %10251, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10253 = add(%10252, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10254 = add(%10253, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10255 = split(%10254, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10256 = %10255.3 /* ty=Tensor[(1, 1024), float32] */;
  %10257 = %10255.1 /* ty=Tensor[(1, 1024), float32] */;
  %10258 = sigmoid(%10257) /* ty=Tensor[(1, 1024), float32] */;
  %10259 = %10255.0 /* ty=Tensor[(1, 1024), float32] */;
  %10260 = %10255.2 /* ty=Tensor[(1, 1024), float32] */;
  %10261 = sigmoid(%10259) /* ty=Tensor[(1, 1024), float32] */;
  %10262 = tanh(%10260) /* ty=Tensor[(1, 1024), float32] */;
  %10263 = multiply(%10258, %10222) /* ty=Tensor[(1, 1024), float32] */;
  %10264 = multiply(%10261, %10262) /* ty=Tensor[(1, 1024), float32] */;
  %10265 = add(%10263, %10264) /* ty=Tensor[(1, 1024), float32] */;
  %10266 = sigmoid(%10256) /* ty=Tensor[(1, 1024), float32] */;
  %10267 = tanh(%10265) /* ty=Tensor[(1, 1024), float32] */;
  %10268 = multiply(%10266, %10267) /* ty=Tensor[(1, 1024), float32] */;
  %10269 = multiply(%10245, %10246) /* ty=Tensor[(1, 1024), float32] */;
  %10270 = (%10268, %10269) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10271 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10272 = concatenate(%10270, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10273 = concatenate(%10271, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10274 = nn.dense(%10272, %10273, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10275 = add(%10274, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10276 = add(%10275, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10277 = split(%10276, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10278 = %10277.3 /* ty=Tensor[(1, 1024), float32] */;
  %10279 = %10277.1 /* ty=Tensor[(1, 1024), float32] */;
  %10280 = sigmoid(%10279) /* ty=Tensor[(1, 1024), float32] */;
  %10281 = %10277.0 /* ty=Tensor[(1, 1024), float32] */;
  %10282 = %10277.2 /* ty=Tensor[(1, 1024), float32] */;
  %10283 = sigmoid(%10281) /* ty=Tensor[(1, 1024), float32] */;
  %10284 = tanh(%10282) /* ty=Tensor[(1, 1024), float32] */;
  %10285 = multiply(%10280, %10244) /* ty=Tensor[(1, 1024), float32] */;
  %10286 = multiply(%10283, %10284) /* ty=Tensor[(1, 1024), float32] */;
  %10287 = add(%10285, %10286) /* ty=Tensor[(1, 1024), float32] */;
  %10288 = sigmoid(%10278) /* ty=Tensor[(1, 1024), float32] */;
  %10289 = tanh(%10287) /* ty=Tensor[(1, 1024), float32] */;
  %10290 = %555.226 /* ty=Tensor[(1, 240), float32] */;
  %10291 = (%10290, %10268) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10292 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10293 = concatenate(%10291, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10294 = concatenate(%10292, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10295 = nn.dense(%10293, %10294, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10296 = add(%10295, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10297 = add(%10296, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10298 = split(%10297, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10299 = %10298.3 /* ty=Tensor[(1, 1024), float32] */;
  %10300 = %10298.1 /* ty=Tensor[(1, 1024), float32] */;
  %10301 = sigmoid(%10300) /* ty=Tensor[(1, 1024), float32] */;
  %10302 = %10298.0 /* ty=Tensor[(1, 1024), float32] */;
  %10303 = %10298.2 /* ty=Tensor[(1, 1024), float32] */;
  %10304 = sigmoid(%10302) /* ty=Tensor[(1, 1024), float32] */;
  %10305 = tanh(%10303) /* ty=Tensor[(1, 1024), float32] */;
  %10306 = multiply(%10301, %10265) /* ty=Tensor[(1, 1024), float32] */;
  %10307 = multiply(%10304, %10305) /* ty=Tensor[(1, 1024), float32] */;
  %10308 = add(%10306, %10307) /* ty=Tensor[(1, 1024), float32] */;
  %10309 = sigmoid(%10299) /* ty=Tensor[(1, 1024), float32] */;
  %10310 = tanh(%10308) /* ty=Tensor[(1, 1024), float32] */;
  %10311 = multiply(%10309, %10310) /* ty=Tensor[(1, 1024), float32] */;
  %10312 = multiply(%10288, %10289) /* ty=Tensor[(1, 1024), float32] */;
  %10313 = (%10311, %10312) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10314 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10315 = concatenate(%10313, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10316 = concatenate(%10314, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10317 = nn.dense(%10315, %10316, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10318 = add(%10317, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10319 = add(%10318, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10320 = split(%10319, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10321 = %10320.3 /* ty=Tensor[(1, 1024), float32] */;
  %10322 = %10320.1 /* ty=Tensor[(1, 1024), float32] */;
  %10323 = sigmoid(%10322) /* ty=Tensor[(1, 1024), float32] */;
  %10324 = %10320.0 /* ty=Tensor[(1, 1024), float32] */;
  %10325 = %10320.2 /* ty=Tensor[(1, 1024), float32] */;
  %10326 = sigmoid(%10324) /* ty=Tensor[(1, 1024), float32] */;
  %10327 = tanh(%10325) /* ty=Tensor[(1, 1024), float32] */;
  %10328 = multiply(%10323, %10287) /* ty=Tensor[(1, 1024), float32] */;
  %10329 = multiply(%10326, %10327) /* ty=Tensor[(1, 1024), float32] */;
  %10330 = add(%10328, %10329) /* ty=Tensor[(1, 1024), float32] */;
  %10331 = sigmoid(%10321) /* ty=Tensor[(1, 1024), float32] */;
  %10332 = tanh(%10330) /* ty=Tensor[(1, 1024), float32] */;
  %10333 = %555.227 /* ty=Tensor[(1, 240), float32] */;
  %10334 = (%10333, %10311) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10335 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10336 = concatenate(%10334, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10337 = concatenate(%10335, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10338 = nn.dense(%10336, %10337, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10339 = add(%10338, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10340 = add(%10339, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10341 = split(%10340, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10342 = %10341.3 /* ty=Tensor[(1, 1024), float32] */;
  %10343 = %10341.1 /* ty=Tensor[(1, 1024), float32] */;
  %10344 = sigmoid(%10343) /* ty=Tensor[(1, 1024), float32] */;
  %10345 = %10341.0 /* ty=Tensor[(1, 1024), float32] */;
  %10346 = %10341.2 /* ty=Tensor[(1, 1024), float32] */;
  %10347 = sigmoid(%10345) /* ty=Tensor[(1, 1024), float32] */;
  %10348 = tanh(%10346) /* ty=Tensor[(1, 1024), float32] */;
  %10349 = multiply(%10344, %10308) /* ty=Tensor[(1, 1024), float32] */;
  %10350 = multiply(%10347, %10348) /* ty=Tensor[(1, 1024), float32] */;
  %10351 = add(%10349, %10350) /* ty=Tensor[(1, 1024), float32] */;
  %10352 = sigmoid(%10342) /* ty=Tensor[(1, 1024), float32] */;
  %10353 = tanh(%10351) /* ty=Tensor[(1, 1024), float32] */;
  %10354 = multiply(%10352, %10353) /* ty=Tensor[(1, 1024), float32] */;
  %10355 = multiply(%10331, %10332) /* ty=Tensor[(1, 1024), float32] */;
  %10356 = (%10354, %10355) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10357 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10358 = concatenate(%10356, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10359 = concatenate(%10357, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10360 = nn.dense(%10358, %10359, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10361 = add(%10360, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10362 = add(%10361, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10363 = split(%10362, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10364 = %10363.3 /* ty=Tensor[(1, 1024), float32] */;
  %10365 = %10363.1 /* ty=Tensor[(1, 1024), float32] */;
  %10366 = sigmoid(%10365) /* ty=Tensor[(1, 1024), float32] */;
  %10367 = %10363.0 /* ty=Tensor[(1, 1024), float32] */;
  %10368 = %10363.2 /* ty=Tensor[(1, 1024), float32] */;
  %10369 = sigmoid(%10367) /* ty=Tensor[(1, 1024), float32] */;
  %10370 = tanh(%10368) /* ty=Tensor[(1, 1024), float32] */;
  %10371 = multiply(%10366, %10330) /* ty=Tensor[(1, 1024), float32] */;
  %10372 = multiply(%10369, %10370) /* ty=Tensor[(1, 1024), float32] */;
  %10373 = add(%10371, %10372) /* ty=Tensor[(1, 1024), float32] */;
  %10374 = sigmoid(%10364) /* ty=Tensor[(1, 1024), float32] */;
  %10375 = tanh(%10373) /* ty=Tensor[(1, 1024), float32] */;
  %10376 = %555.228 /* ty=Tensor[(1, 240), float32] */;
  %10377 = (%10376, %10354) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10378 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10379 = concatenate(%10377, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10380 = concatenate(%10378, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10381 = nn.dense(%10379, %10380, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10382 = add(%10381, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10383 = add(%10382, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10384 = split(%10383, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10385 = %10384.3 /* ty=Tensor[(1, 1024), float32] */;
  %10386 = %10384.1 /* ty=Tensor[(1, 1024), float32] */;
  %10387 = sigmoid(%10386) /* ty=Tensor[(1, 1024), float32] */;
  %10388 = %10384.0 /* ty=Tensor[(1, 1024), float32] */;
  %10389 = %10384.2 /* ty=Tensor[(1, 1024), float32] */;
  %10390 = sigmoid(%10388) /* ty=Tensor[(1, 1024), float32] */;
  %10391 = tanh(%10389) /* ty=Tensor[(1, 1024), float32] */;
  %10392 = multiply(%10387, %10351) /* ty=Tensor[(1, 1024), float32] */;
  %10393 = multiply(%10390, %10391) /* ty=Tensor[(1, 1024), float32] */;
  %10394 = add(%10392, %10393) /* ty=Tensor[(1, 1024), float32] */;
  %10395 = sigmoid(%10385) /* ty=Tensor[(1, 1024), float32] */;
  %10396 = tanh(%10394) /* ty=Tensor[(1, 1024), float32] */;
  %10397 = multiply(%10395, %10396) /* ty=Tensor[(1, 1024), float32] */;
  %10398 = multiply(%10374, %10375) /* ty=Tensor[(1, 1024), float32] */;
  %10399 = (%10397, %10398) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10400 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10401 = concatenate(%10399, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10402 = concatenate(%10400, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10403 = nn.dense(%10401, %10402, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10404 = add(%10403, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10405 = add(%10404, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10406 = split(%10405, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10407 = %10406.3 /* ty=Tensor[(1, 1024), float32] */;
  %10408 = %10406.1 /* ty=Tensor[(1, 1024), float32] */;
  %10409 = sigmoid(%10408) /* ty=Tensor[(1, 1024), float32] */;
  %10410 = %10406.0 /* ty=Tensor[(1, 1024), float32] */;
  %10411 = %10406.2 /* ty=Tensor[(1, 1024), float32] */;
  %10412 = sigmoid(%10410) /* ty=Tensor[(1, 1024), float32] */;
  %10413 = tanh(%10411) /* ty=Tensor[(1, 1024), float32] */;
  %10414 = multiply(%10409, %10373) /* ty=Tensor[(1, 1024), float32] */;
  %10415 = multiply(%10412, %10413) /* ty=Tensor[(1, 1024), float32] */;
  %10416 = add(%10414, %10415) /* ty=Tensor[(1, 1024), float32] */;
  %10417 = sigmoid(%10407) /* ty=Tensor[(1, 1024), float32] */;
  %10418 = tanh(%10416) /* ty=Tensor[(1, 1024), float32] */;
  %10419 = %555.229 /* ty=Tensor[(1, 240), float32] */;
  %10420 = (%10419, %10397) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10421 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10422 = concatenate(%10420, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10423 = concatenate(%10421, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10424 = nn.dense(%10422, %10423, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10425 = add(%10424, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10426 = add(%10425, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10427 = split(%10426, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10428 = %10427.3 /* ty=Tensor[(1, 1024), float32] */;
  %10429 = %10427.1 /* ty=Tensor[(1, 1024), float32] */;
  %10430 = sigmoid(%10429) /* ty=Tensor[(1, 1024), float32] */;
  %10431 = %10427.0 /* ty=Tensor[(1, 1024), float32] */;
  %10432 = %10427.2 /* ty=Tensor[(1, 1024), float32] */;
  %10433 = sigmoid(%10431) /* ty=Tensor[(1, 1024), float32] */;
  %10434 = tanh(%10432) /* ty=Tensor[(1, 1024), float32] */;
  %10435 = multiply(%10430, %10394) /* ty=Tensor[(1, 1024), float32] */;
  %10436 = multiply(%10433, %10434) /* ty=Tensor[(1, 1024), float32] */;
  %10437 = add(%10435, %10436) /* ty=Tensor[(1, 1024), float32] */;
  %10438 = sigmoid(%10428) /* ty=Tensor[(1, 1024), float32] */;
  %10439 = tanh(%10437) /* ty=Tensor[(1, 1024), float32] */;
  %10440 = multiply(%10438, %10439) /* ty=Tensor[(1, 1024), float32] */;
  %10441 = multiply(%10417, %10418) /* ty=Tensor[(1, 1024), float32] */;
  %10442 = (%10440, %10441) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10443 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10444 = concatenate(%10442, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10445 = concatenate(%10443, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10446 = nn.dense(%10444, %10445, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10447 = add(%10446, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10448 = add(%10447, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10449 = split(%10448, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10450 = %10449.3 /* ty=Tensor[(1, 1024), float32] */;
  %10451 = %10449.1 /* ty=Tensor[(1, 1024), float32] */;
  %10452 = sigmoid(%10451) /* ty=Tensor[(1, 1024), float32] */;
  %10453 = %10449.0 /* ty=Tensor[(1, 1024), float32] */;
  %10454 = %10449.2 /* ty=Tensor[(1, 1024), float32] */;
  %10455 = sigmoid(%10453) /* ty=Tensor[(1, 1024), float32] */;
  %10456 = tanh(%10454) /* ty=Tensor[(1, 1024), float32] */;
  %10457 = multiply(%10452, %10416) /* ty=Tensor[(1, 1024), float32] */;
  %10458 = multiply(%10455, %10456) /* ty=Tensor[(1, 1024), float32] */;
  %10459 = add(%10457, %10458) /* ty=Tensor[(1, 1024), float32] */;
  %10460 = sigmoid(%10450) /* ty=Tensor[(1, 1024), float32] */;
  %10461 = tanh(%10459) /* ty=Tensor[(1, 1024), float32] */;
  %10462 = %555.230 /* ty=Tensor[(1, 240), float32] */;
  %10463 = (%10462, %10440) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10464 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10465 = concatenate(%10463, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10466 = concatenate(%10464, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10467 = nn.dense(%10465, %10466, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10468 = add(%10467, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10469 = add(%10468, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10470 = split(%10469, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10471 = %10470.3 /* ty=Tensor[(1, 1024), float32] */;
  %10472 = %10470.1 /* ty=Tensor[(1, 1024), float32] */;
  %10473 = sigmoid(%10472) /* ty=Tensor[(1, 1024), float32] */;
  %10474 = %10470.0 /* ty=Tensor[(1, 1024), float32] */;
  %10475 = %10470.2 /* ty=Tensor[(1, 1024), float32] */;
  %10476 = sigmoid(%10474) /* ty=Tensor[(1, 1024), float32] */;
  %10477 = tanh(%10475) /* ty=Tensor[(1, 1024), float32] */;
  %10478 = multiply(%10473, %10437) /* ty=Tensor[(1, 1024), float32] */;
  %10479 = multiply(%10476, %10477) /* ty=Tensor[(1, 1024), float32] */;
  %10480 = add(%10478, %10479) /* ty=Tensor[(1, 1024), float32] */;
  %10481 = sigmoid(%10471) /* ty=Tensor[(1, 1024), float32] */;
  %10482 = tanh(%10480) /* ty=Tensor[(1, 1024), float32] */;
  %10483 = multiply(%10481, %10482) /* ty=Tensor[(1, 1024), float32] */;
  %10484 = multiply(%10460, %10461) /* ty=Tensor[(1, 1024), float32] */;
  %10485 = (%10483, %10484) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10486 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10487 = concatenate(%10485, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10488 = concatenate(%10486, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10489 = nn.dense(%10487, %10488, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10490 = add(%10489, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10491 = add(%10490, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10492 = split(%10491, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10493 = %10492.3 /* ty=Tensor[(1, 1024), float32] */;
  %10494 = %10492.1 /* ty=Tensor[(1, 1024), float32] */;
  %10495 = sigmoid(%10494) /* ty=Tensor[(1, 1024), float32] */;
  %10496 = %10492.0 /* ty=Tensor[(1, 1024), float32] */;
  %10497 = %10492.2 /* ty=Tensor[(1, 1024), float32] */;
  %10498 = sigmoid(%10496) /* ty=Tensor[(1, 1024), float32] */;
  %10499 = tanh(%10497) /* ty=Tensor[(1, 1024), float32] */;
  %10500 = multiply(%10495, %10459) /* ty=Tensor[(1, 1024), float32] */;
  %10501 = multiply(%10498, %10499) /* ty=Tensor[(1, 1024), float32] */;
  %10502 = add(%10500, %10501) /* ty=Tensor[(1, 1024), float32] */;
  %10503 = sigmoid(%10493) /* ty=Tensor[(1, 1024), float32] */;
  %10504 = tanh(%10502) /* ty=Tensor[(1, 1024), float32] */;
  %10505 = %555.231 /* ty=Tensor[(1, 240), float32] */;
  %10506 = (%10505, %10483) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10507 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10508 = concatenate(%10506, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10509 = concatenate(%10507, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10510 = nn.dense(%10508, %10509, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10511 = add(%10510, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10512 = add(%10511, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10513 = split(%10512, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10514 = %10513.3 /* ty=Tensor[(1, 1024), float32] */;
  %10515 = %10513.1 /* ty=Tensor[(1, 1024), float32] */;
  %10516 = sigmoid(%10515) /* ty=Tensor[(1, 1024), float32] */;
  %10517 = %10513.0 /* ty=Tensor[(1, 1024), float32] */;
  %10518 = %10513.2 /* ty=Tensor[(1, 1024), float32] */;
  %10519 = sigmoid(%10517) /* ty=Tensor[(1, 1024), float32] */;
  %10520 = tanh(%10518) /* ty=Tensor[(1, 1024), float32] */;
  %10521 = multiply(%10516, %10480) /* ty=Tensor[(1, 1024), float32] */;
  %10522 = multiply(%10519, %10520) /* ty=Tensor[(1, 1024), float32] */;
  %10523 = add(%10521, %10522) /* ty=Tensor[(1, 1024), float32] */;
  %10524 = sigmoid(%10514) /* ty=Tensor[(1, 1024), float32] */;
  %10525 = tanh(%10523) /* ty=Tensor[(1, 1024), float32] */;
  %10526 = multiply(%10524, %10525) /* ty=Tensor[(1, 1024), float32] */;
  %10527 = multiply(%10503, %10504) /* ty=Tensor[(1, 1024), float32] */;
  %10528 = (%10526, %10527) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10529 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10530 = concatenate(%10528, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10531 = concatenate(%10529, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10532 = nn.dense(%10530, %10531, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10533 = add(%10532, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10534 = add(%10533, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10535 = split(%10534, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10536 = %10535.3 /* ty=Tensor[(1, 1024), float32] */;
  %10537 = %10535.1 /* ty=Tensor[(1, 1024), float32] */;
  %10538 = sigmoid(%10537) /* ty=Tensor[(1, 1024), float32] */;
  %10539 = %10535.0 /* ty=Tensor[(1, 1024), float32] */;
  %10540 = %10535.2 /* ty=Tensor[(1, 1024), float32] */;
  %10541 = sigmoid(%10539) /* ty=Tensor[(1, 1024), float32] */;
  %10542 = tanh(%10540) /* ty=Tensor[(1, 1024), float32] */;
  %10543 = multiply(%10538, %10502) /* ty=Tensor[(1, 1024), float32] */;
  %10544 = multiply(%10541, %10542) /* ty=Tensor[(1, 1024), float32] */;
  %10545 = add(%10543, %10544) /* ty=Tensor[(1, 1024), float32] */;
  %10546 = sigmoid(%10536) /* ty=Tensor[(1, 1024), float32] */;
  %10547 = tanh(%10545) /* ty=Tensor[(1, 1024), float32] */;
  %10548 = %555.232 /* ty=Tensor[(1, 240), float32] */;
  %10549 = (%10548, %10526) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10550 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10551 = concatenate(%10549, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10552 = concatenate(%10550, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10553 = nn.dense(%10551, %10552, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10554 = add(%10553, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10555 = add(%10554, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10556 = split(%10555, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10557 = %10556.3 /* ty=Tensor[(1, 1024), float32] */;
  %10558 = %10556.1 /* ty=Tensor[(1, 1024), float32] */;
  %10559 = sigmoid(%10558) /* ty=Tensor[(1, 1024), float32] */;
  %10560 = %10556.0 /* ty=Tensor[(1, 1024), float32] */;
  %10561 = %10556.2 /* ty=Tensor[(1, 1024), float32] */;
  %10562 = sigmoid(%10560) /* ty=Tensor[(1, 1024), float32] */;
  %10563 = tanh(%10561) /* ty=Tensor[(1, 1024), float32] */;
  %10564 = multiply(%10559, %10523) /* ty=Tensor[(1, 1024), float32] */;
  %10565 = multiply(%10562, %10563) /* ty=Tensor[(1, 1024), float32] */;
  %10566 = add(%10564, %10565) /* ty=Tensor[(1, 1024), float32] */;
  %10567 = sigmoid(%10557) /* ty=Tensor[(1, 1024), float32] */;
  %10568 = tanh(%10566) /* ty=Tensor[(1, 1024), float32] */;
  %10569 = multiply(%10567, %10568) /* ty=Tensor[(1, 1024), float32] */;
  %10570 = multiply(%10546, %10547) /* ty=Tensor[(1, 1024), float32] */;
  %10571 = (%10569, %10570) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10572 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10573 = concatenate(%10571, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10574 = concatenate(%10572, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10575 = nn.dense(%10573, %10574, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10576 = add(%10575, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10577 = add(%10576, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10578 = split(%10577, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10579 = %10578.3 /* ty=Tensor[(1, 1024), float32] */;
  %10580 = %10578.1 /* ty=Tensor[(1, 1024), float32] */;
  %10581 = sigmoid(%10580) /* ty=Tensor[(1, 1024), float32] */;
  %10582 = %10578.0 /* ty=Tensor[(1, 1024), float32] */;
  %10583 = %10578.2 /* ty=Tensor[(1, 1024), float32] */;
  %10584 = sigmoid(%10582) /* ty=Tensor[(1, 1024), float32] */;
  %10585 = tanh(%10583) /* ty=Tensor[(1, 1024), float32] */;
  %10586 = multiply(%10581, %10545) /* ty=Tensor[(1, 1024), float32] */;
  %10587 = multiply(%10584, %10585) /* ty=Tensor[(1, 1024), float32] */;
  %10588 = add(%10586, %10587) /* ty=Tensor[(1, 1024), float32] */;
  %10589 = sigmoid(%10579) /* ty=Tensor[(1, 1024), float32] */;
  %10590 = tanh(%10588) /* ty=Tensor[(1, 1024), float32] */;
  %10591 = %555.233 /* ty=Tensor[(1, 240), float32] */;
  %10592 = (%10591, %10569) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10593 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10594 = concatenate(%10592, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10595 = concatenate(%10593, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10596 = nn.dense(%10594, %10595, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10597 = add(%10596, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10598 = add(%10597, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10599 = split(%10598, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10600 = %10599.3 /* ty=Tensor[(1, 1024), float32] */;
  %10601 = %10599.1 /* ty=Tensor[(1, 1024), float32] */;
  %10602 = sigmoid(%10601) /* ty=Tensor[(1, 1024), float32] */;
  %10603 = %10599.0 /* ty=Tensor[(1, 1024), float32] */;
  %10604 = %10599.2 /* ty=Tensor[(1, 1024), float32] */;
  %10605 = sigmoid(%10603) /* ty=Tensor[(1, 1024), float32] */;
  %10606 = tanh(%10604) /* ty=Tensor[(1, 1024), float32] */;
  %10607 = multiply(%10602, %10566) /* ty=Tensor[(1, 1024), float32] */;
  %10608 = multiply(%10605, %10606) /* ty=Tensor[(1, 1024), float32] */;
  %10609 = add(%10607, %10608) /* ty=Tensor[(1, 1024), float32] */;
  %10610 = sigmoid(%10600) /* ty=Tensor[(1, 1024), float32] */;
  %10611 = tanh(%10609) /* ty=Tensor[(1, 1024), float32] */;
  %10612 = multiply(%10610, %10611) /* ty=Tensor[(1, 1024), float32] */;
  %10613 = multiply(%10589, %10590) /* ty=Tensor[(1, 1024), float32] */;
  %10614 = (%10612, %10613) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10615 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10616 = concatenate(%10614, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10617 = concatenate(%10615, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10618 = nn.dense(%10616, %10617, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10619 = add(%10618, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10620 = add(%10619, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10621 = split(%10620, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10622 = %10621.3 /* ty=Tensor[(1, 1024), float32] */;
  %10623 = %10621.1 /* ty=Tensor[(1, 1024), float32] */;
  %10624 = sigmoid(%10623) /* ty=Tensor[(1, 1024), float32] */;
  %10625 = %10621.0 /* ty=Tensor[(1, 1024), float32] */;
  %10626 = %10621.2 /* ty=Tensor[(1, 1024), float32] */;
  %10627 = sigmoid(%10625) /* ty=Tensor[(1, 1024), float32] */;
  %10628 = tanh(%10626) /* ty=Tensor[(1, 1024), float32] */;
  %10629 = multiply(%10624, %10588) /* ty=Tensor[(1, 1024), float32] */;
  %10630 = multiply(%10627, %10628) /* ty=Tensor[(1, 1024), float32] */;
  %10631 = add(%10629, %10630) /* ty=Tensor[(1, 1024), float32] */;
  %10632 = sigmoid(%10622) /* ty=Tensor[(1, 1024), float32] */;
  %10633 = tanh(%10631) /* ty=Tensor[(1, 1024), float32] */;
  %10634 = %555.234 /* ty=Tensor[(1, 240), float32] */;
  %10635 = (%10634, %10612) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10636 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10637 = concatenate(%10635, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10638 = concatenate(%10636, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10639 = nn.dense(%10637, %10638, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10640 = add(%10639, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10641 = add(%10640, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10642 = split(%10641, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10643 = %10642.3 /* ty=Tensor[(1, 1024), float32] */;
  %10644 = %10642.1 /* ty=Tensor[(1, 1024), float32] */;
  %10645 = sigmoid(%10644) /* ty=Tensor[(1, 1024), float32] */;
  %10646 = %10642.0 /* ty=Tensor[(1, 1024), float32] */;
  %10647 = %10642.2 /* ty=Tensor[(1, 1024), float32] */;
  %10648 = sigmoid(%10646) /* ty=Tensor[(1, 1024), float32] */;
  %10649 = tanh(%10647) /* ty=Tensor[(1, 1024), float32] */;
  %10650 = multiply(%10645, %10609) /* ty=Tensor[(1, 1024), float32] */;
  %10651 = multiply(%10648, %10649) /* ty=Tensor[(1, 1024), float32] */;
  %10652 = add(%10650, %10651) /* ty=Tensor[(1, 1024), float32] */;
  %10653 = sigmoid(%10643) /* ty=Tensor[(1, 1024), float32] */;
  %10654 = tanh(%10652) /* ty=Tensor[(1, 1024), float32] */;
  %10655 = multiply(%10653, %10654) /* ty=Tensor[(1, 1024), float32] */;
  %10656 = multiply(%10632, %10633) /* ty=Tensor[(1, 1024), float32] */;
  %10657 = (%10655, %10656) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10658 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10659 = concatenate(%10657, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10660 = concatenate(%10658, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10661 = nn.dense(%10659, %10660, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10662 = add(%10661, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10663 = add(%10662, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10664 = split(%10663, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10665 = %10664.3 /* ty=Tensor[(1, 1024), float32] */;
  %10666 = %10664.1 /* ty=Tensor[(1, 1024), float32] */;
  %10667 = sigmoid(%10666) /* ty=Tensor[(1, 1024), float32] */;
  %10668 = %10664.0 /* ty=Tensor[(1, 1024), float32] */;
  %10669 = %10664.2 /* ty=Tensor[(1, 1024), float32] */;
  %10670 = sigmoid(%10668) /* ty=Tensor[(1, 1024), float32] */;
  %10671 = tanh(%10669) /* ty=Tensor[(1, 1024), float32] */;
  %10672 = multiply(%10667, %10631) /* ty=Tensor[(1, 1024), float32] */;
  %10673 = multiply(%10670, %10671) /* ty=Tensor[(1, 1024), float32] */;
  %10674 = add(%10672, %10673) /* ty=Tensor[(1, 1024), float32] */;
  %10675 = sigmoid(%10665) /* ty=Tensor[(1, 1024), float32] */;
  %10676 = tanh(%10674) /* ty=Tensor[(1, 1024), float32] */;
  %10677 = %555.235 /* ty=Tensor[(1, 240), float32] */;
  %10678 = (%10677, %10655) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10679 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10680 = concatenate(%10678, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10681 = concatenate(%10679, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10682 = nn.dense(%10680, %10681, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10683 = add(%10682, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10684 = add(%10683, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10685 = split(%10684, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10686 = %10685.3 /* ty=Tensor[(1, 1024), float32] */;
  %10687 = %10685.1 /* ty=Tensor[(1, 1024), float32] */;
  %10688 = sigmoid(%10687) /* ty=Tensor[(1, 1024), float32] */;
  %10689 = %10685.0 /* ty=Tensor[(1, 1024), float32] */;
  %10690 = %10685.2 /* ty=Tensor[(1, 1024), float32] */;
  %10691 = sigmoid(%10689) /* ty=Tensor[(1, 1024), float32] */;
  %10692 = tanh(%10690) /* ty=Tensor[(1, 1024), float32] */;
  %10693 = multiply(%10688, %10652) /* ty=Tensor[(1, 1024), float32] */;
  %10694 = multiply(%10691, %10692) /* ty=Tensor[(1, 1024), float32] */;
  %10695 = add(%10693, %10694) /* ty=Tensor[(1, 1024), float32] */;
  %10696 = sigmoid(%10686) /* ty=Tensor[(1, 1024), float32] */;
  %10697 = tanh(%10695) /* ty=Tensor[(1, 1024), float32] */;
  %10698 = multiply(%10696, %10697) /* ty=Tensor[(1, 1024), float32] */;
  %10699 = multiply(%10675, %10676) /* ty=Tensor[(1, 1024), float32] */;
  %10700 = (%10698, %10699) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10701 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10702 = concatenate(%10700, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10703 = concatenate(%10701, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10704 = nn.dense(%10702, %10703, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10705 = add(%10704, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10706 = add(%10705, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10707 = split(%10706, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10708 = %10707.3 /* ty=Tensor[(1, 1024), float32] */;
  %10709 = %10707.1 /* ty=Tensor[(1, 1024), float32] */;
  %10710 = sigmoid(%10709) /* ty=Tensor[(1, 1024), float32] */;
  %10711 = %10707.0 /* ty=Tensor[(1, 1024), float32] */;
  %10712 = %10707.2 /* ty=Tensor[(1, 1024), float32] */;
  %10713 = sigmoid(%10711) /* ty=Tensor[(1, 1024), float32] */;
  %10714 = tanh(%10712) /* ty=Tensor[(1, 1024), float32] */;
  %10715 = multiply(%10710, %10674) /* ty=Tensor[(1, 1024), float32] */;
  %10716 = multiply(%10713, %10714) /* ty=Tensor[(1, 1024), float32] */;
  %10717 = add(%10715, %10716) /* ty=Tensor[(1, 1024), float32] */;
  %10718 = sigmoid(%10708) /* ty=Tensor[(1, 1024), float32] */;
  %10719 = tanh(%10717) /* ty=Tensor[(1, 1024), float32] */;
  %10720 = %555.236 /* ty=Tensor[(1, 240), float32] */;
  %10721 = (%10720, %10698) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10722 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10723 = concatenate(%10721, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10724 = concatenate(%10722, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10725 = nn.dense(%10723, %10724, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10726 = add(%10725, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10727 = add(%10726, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10728 = split(%10727, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10729 = %10728.3 /* ty=Tensor[(1, 1024), float32] */;
  %10730 = %10728.1 /* ty=Tensor[(1, 1024), float32] */;
  %10731 = sigmoid(%10730) /* ty=Tensor[(1, 1024), float32] */;
  %10732 = %10728.0 /* ty=Tensor[(1, 1024), float32] */;
  %10733 = %10728.2 /* ty=Tensor[(1, 1024), float32] */;
  %10734 = sigmoid(%10732) /* ty=Tensor[(1, 1024), float32] */;
  %10735 = tanh(%10733) /* ty=Tensor[(1, 1024), float32] */;
  %10736 = multiply(%10731, %10695) /* ty=Tensor[(1, 1024), float32] */;
  %10737 = multiply(%10734, %10735) /* ty=Tensor[(1, 1024), float32] */;
  %10738 = add(%10736, %10737) /* ty=Tensor[(1, 1024), float32] */;
  %10739 = sigmoid(%10729) /* ty=Tensor[(1, 1024), float32] */;
  %10740 = tanh(%10738) /* ty=Tensor[(1, 1024), float32] */;
  %10741 = multiply(%10739, %10740) /* ty=Tensor[(1, 1024), float32] */;
  %10742 = multiply(%10718, %10719) /* ty=Tensor[(1, 1024), float32] */;
  %10743 = (%10741, %10742) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10744 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10745 = concatenate(%10743, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10746 = concatenate(%10744, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10747 = nn.dense(%10745, %10746, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10748 = add(%10747, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10749 = add(%10748, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10750 = split(%10749, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10751 = %10750.3 /* ty=Tensor[(1, 1024), float32] */;
  %10752 = %10750.1 /* ty=Tensor[(1, 1024), float32] */;
  %10753 = sigmoid(%10752) /* ty=Tensor[(1, 1024), float32] */;
  %10754 = %10750.0 /* ty=Tensor[(1, 1024), float32] */;
  %10755 = %10750.2 /* ty=Tensor[(1, 1024), float32] */;
  %10756 = sigmoid(%10754) /* ty=Tensor[(1, 1024), float32] */;
  %10757 = tanh(%10755) /* ty=Tensor[(1, 1024), float32] */;
  %10758 = multiply(%10753, %10717) /* ty=Tensor[(1, 1024), float32] */;
  %10759 = multiply(%10756, %10757) /* ty=Tensor[(1, 1024), float32] */;
  %10760 = add(%10758, %10759) /* ty=Tensor[(1, 1024), float32] */;
  %10761 = sigmoid(%10751) /* ty=Tensor[(1, 1024), float32] */;
  %10762 = tanh(%10760) /* ty=Tensor[(1, 1024), float32] */;
  %10763 = %555.237 /* ty=Tensor[(1, 240), float32] */;
  %10764 = (%10763, %10741) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10765 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10766 = concatenate(%10764, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10767 = concatenate(%10765, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10768 = nn.dense(%10766, %10767, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10769 = add(%10768, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10770 = add(%10769, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10771 = split(%10770, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10772 = %10771.3 /* ty=Tensor[(1, 1024), float32] */;
  %10773 = %10771.1 /* ty=Tensor[(1, 1024), float32] */;
  %10774 = sigmoid(%10773) /* ty=Tensor[(1, 1024), float32] */;
  %10775 = %10771.0 /* ty=Tensor[(1, 1024), float32] */;
  %10776 = %10771.2 /* ty=Tensor[(1, 1024), float32] */;
  %10777 = sigmoid(%10775) /* ty=Tensor[(1, 1024), float32] */;
  %10778 = tanh(%10776) /* ty=Tensor[(1, 1024), float32] */;
  %10779 = multiply(%10774, %10738) /* ty=Tensor[(1, 1024), float32] */;
  %10780 = multiply(%10777, %10778) /* ty=Tensor[(1, 1024), float32] */;
  %10781 = add(%10779, %10780) /* ty=Tensor[(1, 1024), float32] */;
  %10782 = sigmoid(%10772) /* ty=Tensor[(1, 1024), float32] */;
  %10783 = tanh(%10781) /* ty=Tensor[(1, 1024), float32] */;
  %10784 = multiply(%10782, %10783) /* ty=Tensor[(1, 1024), float32] */;
  %10785 = multiply(%10761, %10762) /* ty=Tensor[(1, 1024), float32] */;
  %10786 = (%10784, %10785) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10787 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10788 = concatenate(%10786, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10789 = concatenate(%10787, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10790 = nn.dense(%10788, %10789, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10791 = add(%10790, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10792 = add(%10791, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10793 = split(%10792, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10794 = %10793.3 /* ty=Tensor[(1, 1024), float32] */;
  %10795 = %10793.1 /* ty=Tensor[(1, 1024), float32] */;
  %10796 = sigmoid(%10795) /* ty=Tensor[(1, 1024), float32] */;
  %10797 = %10793.0 /* ty=Tensor[(1, 1024), float32] */;
  %10798 = %10793.2 /* ty=Tensor[(1, 1024), float32] */;
  %10799 = sigmoid(%10797) /* ty=Tensor[(1, 1024), float32] */;
  %10800 = tanh(%10798) /* ty=Tensor[(1, 1024), float32] */;
  %10801 = multiply(%10796, %10760) /* ty=Tensor[(1, 1024), float32] */;
  %10802 = multiply(%10799, %10800) /* ty=Tensor[(1, 1024), float32] */;
  %10803 = add(%10801, %10802) /* ty=Tensor[(1, 1024), float32] */;
  %10804 = sigmoid(%10794) /* ty=Tensor[(1, 1024), float32] */;
  %10805 = tanh(%10803) /* ty=Tensor[(1, 1024), float32] */;
  %10806 = %555.238 /* ty=Tensor[(1, 240), float32] */;
  %10807 = (%10806, %10784) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10808 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10809 = concatenate(%10807, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10810 = concatenate(%10808, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10811 = nn.dense(%10809, %10810, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10812 = add(%10811, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10813 = add(%10812, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10814 = split(%10813, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10815 = %10814.3 /* ty=Tensor[(1, 1024), float32] */;
  %10816 = %10814.1 /* ty=Tensor[(1, 1024), float32] */;
  %10817 = sigmoid(%10816) /* ty=Tensor[(1, 1024), float32] */;
  %10818 = %10814.0 /* ty=Tensor[(1, 1024), float32] */;
  %10819 = %10814.2 /* ty=Tensor[(1, 1024), float32] */;
  %10820 = sigmoid(%10818) /* ty=Tensor[(1, 1024), float32] */;
  %10821 = tanh(%10819) /* ty=Tensor[(1, 1024), float32] */;
  %10822 = multiply(%10817, %10781) /* ty=Tensor[(1, 1024), float32] */;
  %10823 = multiply(%10820, %10821) /* ty=Tensor[(1, 1024), float32] */;
  %10824 = add(%10822, %10823) /* ty=Tensor[(1, 1024), float32] */;
  %10825 = sigmoid(%10815) /* ty=Tensor[(1, 1024), float32] */;
  %10826 = tanh(%10824) /* ty=Tensor[(1, 1024), float32] */;
  %10827 = multiply(%10825, %10826) /* ty=Tensor[(1, 1024), float32] */;
  %10828 = multiply(%10804, %10805) /* ty=Tensor[(1, 1024), float32] */;
  %10829 = (%10827, %10828) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10830 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10831 = concatenate(%10829, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10832 = concatenate(%10830, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10833 = nn.dense(%10831, %10832, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10834 = add(%10833, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10835 = add(%10834, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10836 = split(%10835, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10837 = %10836.3 /* ty=Tensor[(1, 1024), float32] */;
  %10838 = %10836.1 /* ty=Tensor[(1, 1024), float32] */;
  %10839 = sigmoid(%10838) /* ty=Tensor[(1, 1024), float32] */;
  %10840 = %10836.0 /* ty=Tensor[(1, 1024), float32] */;
  %10841 = %10836.2 /* ty=Tensor[(1, 1024), float32] */;
  %10842 = sigmoid(%10840) /* ty=Tensor[(1, 1024), float32] */;
  %10843 = tanh(%10841) /* ty=Tensor[(1, 1024), float32] */;
  %10844 = multiply(%10839, %10803) /* ty=Tensor[(1, 1024), float32] */;
  %10845 = multiply(%10842, %10843) /* ty=Tensor[(1, 1024), float32] */;
  %10846 = add(%10844, %10845) /* ty=Tensor[(1, 1024), float32] */;
  %10847 = sigmoid(%10837) /* ty=Tensor[(1, 1024), float32] */;
  %10848 = tanh(%10846) /* ty=Tensor[(1, 1024), float32] */;
  %10849 = %555.239 /* ty=Tensor[(1, 240), float32] */;
  %10850 = (%10849, %10827) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10851 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10852 = concatenate(%10850, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10853 = concatenate(%10851, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10854 = nn.dense(%10852, %10853, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10855 = add(%10854, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10856 = add(%10855, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10857 = split(%10856, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10858 = %10857.3 /* ty=Tensor[(1, 1024), float32] */;
  %10859 = %10857.1 /* ty=Tensor[(1, 1024), float32] */;
  %10860 = sigmoid(%10859) /* ty=Tensor[(1, 1024), float32] */;
  %10861 = %10857.0 /* ty=Tensor[(1, 1024), float32] */;
  %10862 = %10857.2 /* ty=Tensor[(1, 1024), float32] */;
  %10863 = sigmoid(%10861) /* ty=Tensor[(1, 1024), float32] */;
  %10864 = tanh(%10862) /* ty=Tensor[(1, 1024), float32] */;
  %10865 = multiply(%10860, %10824) /* ty=Tensor[(1, 1024), float32] */;
  %10866 = multiply(%10863, %10864) /* ty=Tensor[(1, 1024), float32] */;
  %10867 = add(%10865, %10866) /* ty=Tensor[(1, 1024), float32] */;
  %10868 = sigmoid(%10858) /* ty=Tensor[(1, 1024), float32] */;
  %10869 = tanh(%10867) /* ty=Tensor[(1, 1024), float32] */;
  %10870 = multiply(%10868, %10869) /* ty=Tensor[(1, 1024), float32] */;
  %10871 = multiply(%10847, %10848) /* ty=Tensor[(1, 1024), float32] */;
  %10872 = (%10870, %10871) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10873 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10874 = concatenate(%10872, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10875 = concatenate(%10873, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10876 = nn.dense(%10874, %10875, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10877 = add(%10876, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10878 = add(%10877, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10879 = split(%10878, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10880 = %10879.3 /* ty=Tensor[(1, 1024), float32] */;
  %10881 = %10879.1 /* ty=Tensor[(1, 1024), float32] */;
  %10882 = sigmoid(%10881) /* ty=Tensor[(1, 1024), float32] */;
  %10883 = %10879.0 /* ty=Tensor[(1, 1024), float32] */;
  %10884 = %10879.2 /* ty=Tensor[(1, 1024), float32] */;
  %10885 = sigmoid(%10883) /* ty=Tensor[(1, 1024), float32] */;
  %10886 = tanh(%10884) /* ty=Tensor[(1, 1024), float32] */;
  %10887 = multiply(%10882, %10846) /* ty=Tensor[(1, 1024), float32] */;
  %10888 = multiply(%10885, %10886) /* ty=Tensor[(1, 1024), float32] */;
  %10889 = add(%10887, %10888) /* ty=Tensor[(1, 1024), float32] */;
  %10890 = sigmoid(%10880) /* ty=Tensor[(1, 1024), float32] */;
  %10891 = tanh(%10889) /* ty=Tensor[(1, 1024), float32] */;
  %10892 = %555.240 /* ty=Tensor[(1, 240), float32] */;
  %10893 = (%10892, %10870) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10894 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10895 = concatenate(%10893, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10896 = concatenate(%10894, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10897 = nn.dense(%10895, %10896, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10898 = add(%10897, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10899 = add(%10898, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10900 = split(%10899, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10901 = %10900.3 /* ty=Tensor[(1, 1024), float32] */;
  %10902 = %10900.1 /* ty=Tensor[(1, 1024), float32] */;
  %10903 = sigmoid(%10902) /* ty=Tensor[(1, 1024), float32] */;
  %10904 = %10900.0 /* ty=Tensor[(1, 1024), float32] */;
  %10905 = %10900.2 /* ty=Tensor[(1, 1024), float32] */;
  %10906 = sigmoid(%10904) /* ty=Tensor[(1, 1024), float32] */;
  %10907 = tanh(%10905) /* ty=Tensor[(1, 1024), float32] */;
  %10908 = multiply(%10903, %10867) /* ty=Tensor[(1, 1024), float32] */;
  %10909 = multiply(%10906, %10907) /* ty=Tensor[(1, 1024), float32] */;
  %10910 = add(%10908, %10909) /* ty=Tensor[(1, 1024), float32] */;
  %10911 = sigmoid(%10901) /* ty=Tensor[(1, 1024), float32] */;
  %10912 = tanh(%10910) /* ty=Tensor[(1, 1024), float32] */;
  %10913 = multiply(%10911, %10912) /* ty=Tensor[(1, 1024), float32] */;
  %10914 = multiply(%10890, %10891) /* ty=Tensor[(1, 1024), float32] */;
  %10915 = (%10913, %10914) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10916 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10917 = concatenate(%10915, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10918 = concatenate(%10916, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10919 = nn.dense(%10917, %10918, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10920 = add(%10919, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10921 = add(%10920, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10922 = split(%10921, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10923 = %10922.3 /* ty=Tensor[(1, 1024), float32] */;
  %10924 = %10922.1 /* ty=Tensor[(1, 1024), float32] */;
  %10925 = sigmoid(%10924) /* ty=Tensor[(1, 1024), float32] */;
  %10926 = %10922.0 /* ty=Tensor[(1, 1024), float32] */;
  %10927 = %10922.2 /* ty=Tensor[(1, 1024), float32] */;
  %10928 = sigmoid(%10926) /* ty=Tensor[(1, 1024), float32] */;
  %10929 = tanh(%10927) /* ty=Tensor[(1, 1024), float32] */;
  %10930 = multiply(%10925, %10889) /* ty=Tensor[(1, 1024), float32] */;
  %10931 = multiply(%10928, %10929) /* ty=Tensor[(1, 1024), float32] */;
  %10932 = add(%10930, %10931) /* ty=Tensor[(1, 1024), float32] */;
  %10933 = sigmoid(%10923) /* ty=Tensor[(1, 1024), float32] */;
  %10934 = tanh(%10932) /* ty=Tensor[(1, 1024), float32] */;
  %10935 = %555.241 /* ty=Tensor[(1, 240), float32] */;
  %10936 = (%10935, %10913) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10937 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10938 = concatenate(%10936, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10939 = concatenate(%10937, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10940 = nn.dense(%10938, %10939, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10941 = add(%10940, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10942 = add(%10941, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10943 = split(%10942, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10944 = %10943.3 /* ty=Tensor[(1, 1024), float32] */;
  %10945 = %10943.1 /* ty=Tensor[(1, 1024), float32] */;
  %10946 = sigmoid(%10945) /* ty=Tensor[(1, 1024), float32] */;
  %10947 = %10943.0 /* ty=Tensor[(1, 1024), float32] */;
  %10948 = %10943.2 /* ty=Tensor[(1, 1024), float32] */;
  %10949 = sigmoid(%10947) /* ty=Tensor[(1, 1024), float32] */;
  %10950 = tanh(%10948) /* ty=Tensor[(1, 1024), float32] */;
  %10951 = multiply(%10946, %10910) /* ty=Tensor[(1, 1024), float32] */;
  %10952 = multiply(%10949, %10950) /* ty=Tensor[(1, 1024), float32] */;
  %10953 = add(%10951, %10952) /* ty=Tensor[(1, 1024), float32] */;
  %10954 = sigmoid(%10944) /* ty=Tensor[(1, 1024), float32] */;
  %10955 = tanh(%10953) /* ty=Tensor[(1, 1024), float32] */;
  %10956 = multiply(%10954, %10955) /* ty=Tensor[(1, 1024), float32] */;
  %10957 = multiply(%10933, %10934) /* ty=Tensor[(1, 1024), float32] */;
  %10958 = (%10956, %10957) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10959 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %10960 = concatenate(%10958, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %10961 = concatenate(%10959, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %10962 = nn.dense(%10960, %10961, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10963 = add(%10962, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10964 = add(%10963, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %10965 = split(%10964, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10966 = %10965.3 /* ty=Tensor[(1, 1024), float32] */;
  %10967 = %10965.1 /* ty=Tensor[(1, 1024), float32] */;
  %10968 = sigmoid(%10967) /* ty=Tensor[(1, 1024), float32] */;
  %10969 = %10965.0 /* ty=Tensor[(1, 1024), float32] */;
  %10970 = %10965.2 /* ty=Tensor[(1, 1024), float32] */;
  %10971 = sigmoid(%10969) /* ty=Tensor[(1, 1024), float32] */;
  %10972 = tanh(%10970) /* ty=Tensor[(1, 1024), float32] */;
  %10973 = multiply(%10968, %10932) /* ty=Tensor[(1, 1024), float32] */;
  %10974 = multiply(%10971, %10972) /* ty=Tensor[(1, 1024), float32] */;
  %10975 = add(%10973, %10974) /* ty=Tensor[(1, 1024), float32] */;
  %10976 = sigmoid(%10966) /* ty=Tensor[(1, 1024), float32] */;
  %10977 = tanh(%10975) /* ty=Tensor[(1, 1024), float32] */;
  %10978 = %555.242 /* ty=Tensor[(1, 240), float32] */;
  %10979 = (%10978, %10956) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %10980 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %10981 = concatenate(%10979, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %10982 = concatenate(%10980, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %10983 = nn.dense(%10981, %10982, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %10984 = add(%10983, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10985 = add(%10984, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %10986 = split(%10985, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %10987 = %10986.3 /* ty=Tensor[(1, 1024), float32] */;
  %10988 = %10986.1 /* ty=Tensor[(1, 1024), float32] */;
  %10989 = sigmoid(%10988) /* ty=Tensor[(1, 1024), float32] */;
  %10990 = %10986.0 /* ty=Tensor[(1, 1024), float32] */;
  %10991 = %10986.2 /* ty=Tensor[(1, 1024), float32] */;
  %10992 = sigmoid(%10990) /* ty=Tensor[(1, 1024), float32] */;
  %10993 = tanh(%10991) /* ty=Tensor[(1, 1024), float32] */;
  %10994 = multiply(%10989, %10953) /* ty=Tensor[(1, 1024), float32] */;
  %10995 = multiply(%10992, %10993) /* ty=Tensor[(1, 1024), float32] */;
  %10996 = add(%10994, %10995) /* ty=Tensor[(1, 1024), float32] */;
  %10997 = sigmoid(%10987) /* ty=Tensor[(1, 1024), float32] */;
  %10998 = tanh(%10996) /* ty=Tensor[(1, 1024), float32] */;
  %10999 = multiply(%10997, %10998) /* ty=Tensor[(1, 1024), float32] */;
  %11000 = multiply(%10976, %10977) /* ty=Tensor[(1, 1024), float32] */;
  %11001 = (%10999, %11000) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11002 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11003 = concatenate(%11001, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11004 = concatenate(%11002, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11005 = nn.dense(%11003, %11004, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11006 = add(%11005, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11007 = add(%11006, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11008 = split(%11007, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11009 = %11008.3 /* ty=Tensor[(1, 1024), float32] */;
  %11010 = %11008.1 /* ty=Tensor[(1, 1024), float32] */;
  %11011 = sigmoid(%11010) /* ty=Tensor[(1, 1024), float32] */;
  %11012 = %11008.0 /* ty=Tensor[(1, 1024), float32] */;
  %11013 = %11008.2 /* ty=Tensor[(1, 1024), float32] */;
  %11014 = sigmoid(%11012) /* ty=Tensor[(1, 1024), float32] */;
  %11015 = tanh(%11013) /* ty=Tensor[(1, 1024), float32] */;
  %11016 = multiply(%11011, %10975) /* ty=Tensor[(1, 1024), float32] */;
  %11017 = multiply(%11014, %11015) /* ty=Tensor[(1, 1024), float32] */;
  %11018 = add(%11016, %11017) /* ty=Tensor[(1, 1024), float32] */;
  %11019 = sigmoid(%11009) /* ty=Tensor[(1, 1024), float32] */;
  %11020 = tanh(%11018) /* ty=Tensor[(1, 1024), float32] */;
  %11021 = %555.243 /* ty=Tensor[(1, 240), float32] */;
  %11022 = (%11021, %10999) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11023 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11024 = concatenate(%11022, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11025 = concatenate(%11023, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11026 = nn.dense(%11024, %11025, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11027 = add(%11026, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11028 = add(%11027, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11029 = split(%11028, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11030 = %11029.3 /* ty=Tensor[(1, 1024), float32] */;
  %11031 = %11029.1 /* ty=Tensor[(1, 1024), float32] */;
  %11032 = sigmoid(%11031) /* ty=Tensor[(1, 1024), float32] */;
  %11033 = %11029.0 /* ty=Tensor[(1, 1024), float32] */;
  %11034 = %11029.2 /* ty=Tensor[(1, 1024), float32] */;
  %11035 = sigmoid(%11033) /* ty=Tensor[(1, 1024), float32] */;
  %11036 = tanh(%11034) /* ty=Tensor[(1, 1024), float32] */;
  %11037 = multiply(%11032, %10996) /* ty=Tensor[(1, 1024), float32] */;
  %11038 = multiply(%11035, %11036) /* ty=Tensor[(1, 1024), float32] */;
  %11039 = add(%11037, %11038) /* ty=Tensor[(1, 1024), float32] */;
  %11040 = sigmoid(%11030) /* ty=Tensor[(1, 1024), float32] */;
  %11041 = tanh(%11039) /* ty=Tensor[(1, 1024), float32] */;
  %11042 = multiply(%11040, %11041) /* ty=Tensor[(1, 1024), float32] */;
  %11043 = multiply(%11019, %11020) /* ty=Tensor[(1, 1024), float32] */;
  %11044 = (%11042, %11043) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11045 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11046 = concatenate(%11044, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11047 = concatenate(%11045, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11048 = nn.dense(%11046, %11047, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11049 = add(%11048, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11050 = add(%11049, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11051 = split(%11050, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11052 = %11051.3 /* ty=Tensor[(1, 1024), float32] */;
  %11053 = %11051.1 /* ty=Tensor[(1, 1024), float32] */;
  %11054 = sigmoid(%11053) /* ty=Tensor[(1, 1024), float32] */;
  %11055 = %11051.0 /* ty=Tensor[(1, 1024), float32] */;
  %11056 = %11051.2 /* ty=Tensor[(1, 1024), float32] */;
  %11057 = sigmoid(%11055) /* ty=Tensor[(1, 1024), float32] */;
  %11058 = tanh(%11056) /* ty=Tensor[(1, 1024), float32] */;
  %11059 = multiply(%11054, %11018) /* ty=Tensor[(1, 1024), float32] */;
  %11060 = multiply(%11057, %11058) /* ty=Tensor[(1, 1024), float32] */;
  %11061 = add(%11059, %11060) /* ty=Tensor[(1, 1024), float32] */;
  %11062 = sigmoid(%11052) /* ty=Tensor[(1, 1024), float32] */;
  %11063 = tanh(%11061) /* ty=Tensor[(1, 1024), float32] */;
  %11064 = %555.244 /* ty=Tensor[(1, 240), float32] */;
  %11065 = (%11064, %11042) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11066 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11067 = concatenate(%11065, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11068 = concatenate(%11066, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11069 = nn.dense(%11067, %11068, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11070 = add(%11069, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11071 = add(%11070, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11072 = split(%11071, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11073 = %11072.3 /* ty=Tensor[(1, 1024), float32] */;
  %11074 = %11072.1 /* ty=Tensor[(1, 1024), float32] */;
  %11075 = sigmoid(%11074) /* ty=Tensor[(1, 1024), float32] */;
  %11076 = %11072.0 /* ty=Tensor[(1, 1024), float32] */;
  %11077 = %11072.2 /* ty=Tensor[(1, 1024), float32] */;
  %11078 = sigmoid(%11076) /* ty=Tensor[(1, 1024), float32] */;
  %11079 = tanh(%11077) /* ty=Tensor[(1, 1024), float32] */;
  %11080 = multiply(%11075, %11039) /* ty=Tensor[(1, 1024), float32] */;
  %11081 = multiply(%11078, %11079) /* ty=Tensor[(1, 1024), float32] */;
  %11082 = add(%11080, %11081) /* ty=Tensor[(1, 1024), float32] */;
  %11083 = sigmoid(%11073) /* ty=Tensor[(1, 1024), float32] */;
  %11084 = tanh(%11082) /* ty=Tensor[(1, 1024), float32] */;
  %11085 = multiply(%11083, %11084) /* ty=Tensor[(1, 1024), float32] */;
  %11086 = multiply(%11062, %11063) /* ty=Tensor[(1, 1024), float32] */;
  %11087 = (%11085, %11086) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11088 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11089 = concatenate(%11087, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11090 = concatenate(%11088, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11091 = nn.dense(%11089, %11090, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11092 = add(%11091, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11093 = add(%11092, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11094 = split(%11093, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11095 = %11094.3 /* ty=Tensor[(1, 1024), float32] */;
  %11096 = %11094.1 /* ty=Tensor[(1, 1024), float32] */;
  %11097 = sigmoid(%11096) /* ty=Tensor[(1, 1024), float32] */;
  %11098 = %11094.0 /* ty=Tensor[(1, 1024), float32] */;
  %11099 = %11094.2 /* ty=Tensor[(1, 1024), float32] */;
  %11100 = sigmoid(%11098) /* ty=Tensor[(1, 1024), float32] */;
  %11101 = tanh(%11099) /* ty=Tensor[(1, 1024), float32] */;
  %11102 = multiply(%11097, %11061) /* ty=Tensor[(1, 1024), float32] */;
  %11103 = multiply(%11100, %11101) /* ty=Tensor[(1, 1024), float32] */;
  %11104 = add(%11102, %11103) /* ty=Tensor[(1, 1024), float32] */;
  %11105 = sigmoid(%11095) /* ty=Tensor[(1, 1024), float32] */;
  %11106 = tanh(%11104) /* ty=Tensor[(1, 1024), float32] */;
  %11107 = %555.245 /* ty=Tensor[(1, 240), float32] */;
  %11108 = (%11107, %11085) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11109 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11110 = concatenate(%11108, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11111 = concatenate(%11109, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11112 = nn.dense(%11110, %11111, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11113 = add(%11112, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11114 = add(%11113, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11115 = split(%11114, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11116 = %11115.3 /* ty=Tensor[(1, 1024), float32] */;
  %11117 = %11115.1 /* ty=Tensor[(1, 1024), float32] */;
  %11118 = sigmoid(%11117) /* ty=Tensor[(1, 1024), float32] */;
  %11119 = %11115.0 /* ty=Tensor[(1, 1024), float32] */;
  %11120 = %11115.2 /* ty=Tensor[(1, 1024), float32] */;
  %11121 = sigmoid(%11119) /* ty=Tensor[(1, 1024), float32] */;
  %11122 = tanh(%11120) /* ty=Tensor[(1, 1024), float32] */;
  %11123 = multiply(%11118, %11082) /* ty=Tensor[(1, 1024), float32] */;
  %11124 = multiply(%11121, %11122) /* ty=Tensor[(1, 1024), float32] */;
  %11125 = add(%11123, %11124) /* ty=Tensor[(1, 1024), float32] */;
  %11126 = sigmoid(%11116) /* ty=Tensor[(1, 1024), float32] */;
  %11127 = tanh(%11125) /* ty=Tensor[(1, 1024), float32] */;
  %11128 = multiply(%11126, %11127) /* ty=Tensor[(1, 1024), float32] */;
  %11129 = multiply(%11105, %11106) /* ty=Tensor[(1, 1024), float32] */;
  %11130 = (%11128, %11129) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11131 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11132 = concatenate(%11130, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11133 = concatenate(%11131, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11134 = nn.dense(%11132, %11133, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11135 = add(%11134, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11136 = add(%11135, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11137 = split(%11136, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11138 = %11137.3 /* ty=Tensor[(1, 1024), float32] */;
  %11139 = %11137.1 /* ty=Tensor[(1, 1024), float32] */;
  %11140 = sigmoid(%11139) /* ty=Tensor[(1, 1024), float32] */;
  %11141 = %11137.0 /* ty=Tensor[(1, 1024), float32] */;
  %11142 = %11137.2 /* ty=Tensor[(1, 1024), float32] */;
  %11143 = sigmoid(%11141) /* ty=Tensor[(1, 1024), float32] */;
  %11144 = tanh(%11142) /* ty=Tensor[(1, 1024), float32] */;
  %11145 = multiply(%11140, %11104) /* ty=Tensor[(1, 1024), float32] */;
  %11146 = multiply(%11143, %11144) /* ty=Tensor[(1, 1024), float32] */;
  %11147 = add(%11145, %11146) /* ty=Tensor[(1, 1024), float32] */;
  %11148 = sigmoid(%11138) /* ty=Tensor[(1, 1024), float32] */;
  %11149 = tanh(%11147) /* ty=Tensor[(1, 1024), float32] */;
  %11150 = %555.246 /* ty=Tensor[(1, 240), float32] */;
  %11151 = (%11150, %11128) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11152 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11153 = concatenate(%11151, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11154 = concatenate(%11152, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11155 = nn.dense(%11153, %11154, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11156 = add(%11155, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11157 = add(%11156, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11158 = split(%11157, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11159 = %11158.3 /* ty=Tensor[(1, 1024), float32] */;
  %11160 = %11158.1 /* ty=Tensor[(1, 1024), float32] */;
  %11161 = sigmoid(%11160) /* ty=Tensor[(1, 1024), float32] */;
  %11162 = %11158.0 /* ty=Tensor[(1, 1024), float32] */;
  %11163 = %11158.2 /* ty=Tensor[(1, 1024), float32] */;
  %11164 = sigmoid(%11162) /* ty=Tensor[(1, 1024), float32] */;
  %11165 = tanh(%11163) /* ty=Tensor[(1, 1024), float32] */;
  %11166 = multiply(%11161, %11125) /* ty=Tensor[(1, 1024), float32] */;
  %11167 = multiply(%11164, %11165) /* ty=Tensor[(1, 1024), float32] */;
  %11168 = add(%11166, %11167) /* ty=Tensor[(1, 1024), float32] */;
  %11169 = sigmoid(%11159) /* ty=Tensor[(1, 1024), float32] */;
  %11170 = tanh(%11168) /* ty=Tensor[(1, 1024), float32] */;
  %11171 = multiply(%11169, %11170) /* ty=Tensor[(1, 1024), float32] */;
  %11172 = multiply(%11148, %11149) /* ty=Tensor[(1, 1024), float32] */;
  %11173 = (%11171, %11172) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11174 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11175 = concatenate(%11173, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11176 = concatenate(%11174, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11177 = nn.dense(%11175, %11176, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11178 = add(%11177, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11179 = add(%11178, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11180 = split(%11179, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11181 = %11180.3 /* ty=Tensor[(1, 1024), float32] */;
  %11182 = %11180.1 /* ty=Tensor[(1, 1024), float32] */;
  %11183 = sigmoid(%11182) /* ty=Tensor[(1, 1024), float32] */;
  %11184 = %11180.0 /* ty=Tensor[(1, 1024), float32] */;
  %11185 = %11180.2 /* ty=Tensor[(1, 1024), float32] */;
  %11186 = sigmoid(%11184) /* ty=Tensor[(1, 1024), float32] */;
  %11187 = tanh(%11185) /* ty=Tensor[(1, 1024), float32] */;
  %11188 = multiply(%11183, %11147) /* ty=Tensor[(1, 1024), float32] */;
  %11189 = multiply(%11186, %11187) /* ty=Tensor[(1, 1024), float32] */;
  %11190 = add(%11188, %11189) /* ty=Tensor[(1, 1024), float32] */;
  %11191 = sigmoid(%11181) /* ty=Tensor[(1, 1024), float32] */;
  %11192 = tanh(%11190) /* ty=Tensor[(1, 1024), float32] */;
  %11193 = %555.247 /* ty=Tensor[(1, 240), float32] */;
  %11194 = (%11193, %11171) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11195 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11196 = concatenate(%11194, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11197 = concatenate(%11195, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11198 = nn.dense(%11196, %11197, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11199 = add(%11198, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11200 = add(%11199, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11201 = split(%11200, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11202 = %11201.3 /* ty=Tensor[(1, 1024), float32] */;
  %11203 = %11201.1 /* ty=Tensor[(1, 1024), float32] */;
  %11204 = sigmoid(%11203) /* ty=Tensor[(1, 1024), float32] */;
  %11205 = %11201.0 /* ty=Tensor[(1, 1024), float32] */;
  %11206 = %11201.2 /* ty=Tensor[(1, 1024), float32] */;
  %11207 = sigmoid(%11205) /* ty=Tensor[(1, 1024), float32] */;
  %11208 = tanh(%11206) /* ty=Tensor[(1, 1024), float32] */;
  %11209 = multiply(%11204, %11168) /* ty=Tensor[(1, 1024), float32] */;
  %11210 = multiply(%11207, %11208) /* ty=Tensor[(1, 1024), float32] */;
  %11211 = add(%11209, %11210) /* ty=Tensor[(1, 1024), float32] */;
  %11212 = sigmoid(%11202) /* ty=Tensor[(1, 1024), float32] */;
  %11213 = tanh(%11211) /* ty=Tensor[(1, 1024), float32] */;
  %11214 = multiply(%11212, %11213) /* ty=Tensor[(1, 1024), float32] */;
  %11215 = multiply(%11191, %11192) /* ty=Tensor[(1, 1024), float32] */;
  %11216 = (%11214, %11215) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11217 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11218 = concatenate(%11216, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11219 = concatenate(%11217, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11220 = nn.dense(%11218, %11219, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11221 = add(%11220, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11222 = add(%11221, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11223 = split(%11222, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11224 = %11223.3 /* ty=Tensor[(1, 1024), float32] */;
  %11225 = %11223.1 /* ty=Tensor[(1, 1024), float32] */;
  %11226 = sigmoid(%11225) /* ty=Tensor[(1, 1024), float32] */;
  %11227 = %11223.0 /* ty=Tensor[(1, 1024), float32] */;
  %11228 = %11223.2 /* ty=Tensor[(1, 1024), float32] */;
  %11229 = sigmoid(%11227) /* ty=Tensor[(1, 1024), float32] */;
  %11230 = tanh(%11228) /* ty=Tensor[(1, 1024), float32] */;
  %11231 = multiply(%11226, %11190) /* ty=Tensor[(1, 1024), float32] */;
  %11232 = multiply(%11229, %11230) /* ty=Tensor[(1, 1024), float32] */;
  %11233 = add(%11231, %11232) /* ty=Tensor[(1, 1024), float32] */;
  %11234 = sigmoid(%11224) /* ty=Tensor[(1, 1024), float32] */;
  %11235 = tanh(%11233) /* ty=Tensor[(1, 1024), float32] */;
  %11236 = %555.248 /* ty=Tensor[(1, 240), float32] */;
  %11237 = (%11236, %11214) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11238 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11239 = concatenate(%11237, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11240 = concatenate(%11238, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11241 = nn.dense(%11239, %11240, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11242 = add(%11241, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11243 = add(%11242, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11244 = split(%11243, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11245 = %11244.3 /* ty=Tensor[(1, 1024), float32] */;
  %11246 = %11244.1 /* ty=Tensor[(1, 1024), float32] */;
  %11247 = sigmoid(%11246) /* ty=Tensor[(1, 1024), float32] */;
  %11248 = %11244.0 /* ty=Tensor[(1, 1024), float32] */;
  %11249 = %11244.2 /* ty=Tensor[(1, 1024), float32] */;
  %11250 = sigmoid(%11248) /* ty=Tensor[(1, 1024), float32] */;
  %11251 = tanh(%11249) /* ty=Tensor[(1, 1024), float32] */;
  %11252 = multiply(%11247, %11211) /* ty=Tensor[(1, 1024), float32] */;
  %11253 = multiply(%11250, %11251) /* ty=Tensor[(1, 1024), float32] */;
  %11254 = add(%11252, %11253) /* ty=Tensor[(1, 1024), float32] */;
  %11255 = sigmoid(%11245) /* ty=Tensor[(1, 1024), float32] */;
  %11256 = tanh(%11254) /* ty=Tensor[(1, 1024), float32] */;
  %11257 = multiply(%11255, %11256) /* ty=Tensor[(1, 1024), float32] */;
  %11258 = multiply(%11234, %11235) /* ty=Tensor[(1, 1024), float32] */;
  %11259 = (%11257, %11258) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11260 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11261 = concatenate(%11259, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11262 = concatenate(%11260, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11263 = nn.dense(%11261, %11262, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11264 = add(%11263, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11265 = add(%11264, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11266 = split(%11265, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11267 = %11266.3 /* ty=Tensor[(1, 1024), float32] */;
  %11268 = %11266.1 /* ty=Tensor[(1, 1024), float32] */;
  %11269 = sigmoid(%11268) /* ty=Tensor[(1, 1024), float32] */;
  %11270 = %11266.0 /* ty=Tensor[(1, 1024), float32] */;
  %11271 = %11266.2 /* ty=Tensor[(1, 1024), float32] */;
  %11272 = sigmoid(%11270) /* ty=Tensor[(1, 1024), float32] */;
  %11273 = tanh(%11271) /* ty=Tensor[(1, 1024), float32] */;
  %11274 = multiply(%11269, %11233) /* ty=Tensor[(1, 1024), float32] */;
  %11275 = multiply(%11272, %11273) /* ty=Tensor[(1, 1024), float32] */;
  %11276 = add(%11274, %11275) /* ty=Tensor[(1, 1024), float32] */;
  %11277 = sigmoid(%11267) /* ty=Tensor[(1, 1024), float32] */;
  %11278 = tanh(%11276) /* ty=Tensor[(1, 1024), float32] */;
  %11279 = %555.249 /* ty=Tensor[(1, 240), float32] */;
  %11280 = (%11279, %11257) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11281 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11282 = concatenate(%11280, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11283 = concatenate(%11281, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11284 = nn.dense(%11282, %11283, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11285 = add(%11284, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11286 = add(%11285, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11287 = split(%11286, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11288 = %11287.3 /* ty=Tensor[(1, 1024), float32] */;
  %11289 = %11287.1 /* ty=Tensor[(1, 1024), float32] */;
  %11290 = sigmoid(%11289) /* ty=Tensor[(1, 1024), float32] */;
  %11291 = %11287.0 /* ty=Tensor[(1, 1024), float32] */;
  %11292 = %11287.2 /* ty=Tensor[(1, 1024), float32] */;
  %11293 = sigmoid(%11291) /* ty=Tensor[(1, 1024), float32] */;
  %11294 = tanh(%11292) /* ty=Tensor[(1, 1024), float32] */;
  %11295 = multiply(%11290, %11254) /* ty=Tensor[(1, 1024), float32] */;
  %11296 = multiply(%11293, %11294) /* ty=Tensor[(1, 1024), float32] */;
  %11297 = add(%11295, %11296) /* ty=Tensor[(1, 1024), float32] */;
  %11298 = sigmoid(%11288) /* ty=Tensor[(1, 1024), float32] */;
  %11299 = tanh(%11297) /* ty=Tensor[(1, 1024), float32] */;
  %11300 = multiply(%11298, %11299) /* ty=Tensor[(1, 1024), float32] */;
  %11301 = multiply(%11277, %11278) /* ty=Tensor[(1, 1024), float32] */;
  %11302 = (%11300, %11301) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11303 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11304 = concatenate(%11302, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11305 = concatenate(%11303, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11306 = nn.dense(%11304, %11305, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11307 = add(%11306, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11308 = add(%11307, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11309 = split(%11308, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11310 = %11309.3 /* ty=Tensor[(1, 1024), float32] */;
  %11311 = %11309.1 /* ty=Tensor[(1, 1024), float32] */;
  %11312 = sigmoid(%11311) /* ty=Tensor[(1, 1024), float32] */;
  %11313 = %11309.0 /* ty=Tensor[(1, 1024), float32] */;
  %11314 = %11309.2 /* ty=Tensor[(1, 1024), float32] */;
  %11315 = sigmoid(%11313) /* ty=Tensor[(1, 1024), float32] */;
  %11316 = tanh(%11314) /* ty=Tensor[(1, 1024), float32] */;
  %11317 = multiply(%11312, %11276) /* ty=Tensor[(1, 1024), float32] */;
  %11318 = multiply(%11315, %11316) /* ty=Tensor[(1, 1024), float32] */;
  %11319 = add(%11317, %11318) /* ty=Tensor[(1, 1024), float32] */;
  %11320 = sigmoid(%11310) /* ty=Tensor[(1, 1024), float32] */;
  %11321 = tanh(%11319) /* ty=Tensor[(1, 1024), float32] */;
  %11322 = %555.250 /* ty=Tensor[(1, 240), float32] */;
  %11323 = (%11322, %11300) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11324 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11325 = concatenate(%11323, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11326 = concatenate(%11324, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11327 = nn.dense(%11325, %11326, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11328 = add(%11327, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11329 = add(%11328, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11330 = split(%11329, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11331 = %11330.3 /* ty=Tensor[(1, 1024), float32] */;
  %11332 = %11330.1 /* ty=Tensor[(1, 1024), float32] */;
  %11333 = sigmoid(%11332) /* ty=Tensor[(1, 1024), float32] */;
  %11334 = %11330.0 /* ty=Tensor[(1, 1024), float32] */;
  %11335 = %11330.2 /* ty=Tensor[(1, 1024), float32] */;
  %11336 = sigmoid(%11334) /* ty=Tensor[(1, 1024), float32] */;
  %11337 = tanh(%11335) /* ty=Tensor[(1, 1024), float32] */;
  %11338 = multiply(%11333, %11297) /* ty=Tensor[(1, 1024), float32] */;
  %11339 = multiply(%11336, %11337) /* ty=Tensor[(1, 1024), float32] */;
  %11340 = add(%11338, %11339) /* ty=Tensor[(1, 1024), float32] */;
  %11341 = sigmoid(%11331) /* ty=Tensor[(1, 1024), float32] */;
  %11342 = tanh(%11340) /* ty=Tensor[(1, 1024), float32] */;
  %11343 = multiply(%11341, %11342) /* ty=Tensor[(1, 1024), float32] */;
  %11344 = multiply(%11320, %11321) /* ty=Tensor[(1, 1024), float32] */;
  %11345 = (%11343, %11344) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11346 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11347 = concatenate(%11345, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11348 = concatenate(%11346, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11349 = nn.dense(%11347, %11348, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11350 = add(%11349, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11351 = add(%11350, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11352 = split(%11351, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11353 = %11352.3 /* ty=Tensor[(1, 1024), float32] */;
  %11354 = %11352.1 /* ty=Tensor[(1, 1024), float32] */;
  %11355 = sigmoid(%11354) /* ty=Tensor[(1, 1024), float32] */;
  %11356 = %11352.0 /* ty=Tensor[(1, 1024), float32] */;
  %11357 = %11352.2 /* ty=Tensor[(1, 1024), float32] */;
  %11358 = sigmoid(%11356) /* ty=Tensor[(1, 1024), float32] */;
  %11359 = tanh(%11357) /* ty=Tensor[(1, 1024), float32] */;
  %11360 = multiply(%11355, %11319) /* ty=Tensor[(1, 1024), float32] */;
  %11361 = multiply(%11358, %11359) /* ty=Tensor[(1, 1024), float32] */;
  %11362 = add(%11360, %11361) /* ty=Tensor[(1, 1024), float32] */;
  %11363 = sigmoid(%11353) /* ty=Tensor[(1, 1024), float32] */;
  %11364 = tanh(%11362) /* ty=Tensor[(1, 1024), float32] */;
  %11365 = %555.251 /* ty=Tensor[(1, 240), float32] */;
  %11366 = (%11365, %11343) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11367 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11368 = concatenate(%11366, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11369 = concatenate(%11367, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11370 = nn.dense(%11368, %11369, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11371 = add(%11370, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11372 = add(%11371, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11373 = split(%11372, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11374 = %11373.3 /* ty=Tensor[(1, 1024), float32] */;
  %11375 = %11373.1 /* ty=Tensor[(1, 1024), float32] */;
  %11376 = sigmoid(%11375) /* ty=Tensor[(1, 1024), float32] */;
  %11377 = %11373.0 /* ty=Tensor[(1, 1024), float32] */;
  %11378 = %11373.2 /* ty=Tensor[(1, 1024), float32] */;
  %11379 = sigmoid(%11377) /* ty=Tensor[(1, 1024), float32] */;
  %11380 = tanh(%11378) /* ty=Tensor[(1, 1024), float32] */;
  %11381 = multiply(%11376, %11340) /* ty=Tensor[(1, 1024), float32] */;
  %11382 = multiply(%11379, %11380) /* ty=Tensor[(1, 1024), float32] */;
  %11383 = add(%11381, %11382) /* ty=Tensor[(1, 1024), float32] */;
  %11384 = sigmoid(%11374) /* ty=Tensor[(1, 1024), float32] */;
  %11385 = tanh(%11383) /* ty=Tensor[(1, 1024), float32] */;
  %11386 = multiply(%11384, %11385) /* ty=Tensor[(1, 1024), float32] */;
  %11387 = multiply(%11363, %11364) /* ty=Tensor[(1, 1024), float32] */;
  %11388 = (%11386, %11387) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11389 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11390 = concatenate(%11388, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11391 = concatenate(%11389, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11392 = nn.dense(%11390, %11391, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11393 = add(%11392, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11394 = add(%11393, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11395 = split(%11394, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11396 = %11395.3 /* ty=Tensor[(1, 1024), float32] */;
  %11397 = %11395.1 /* ty=Tensor[(1, 1024), float32] */;
  %11398 = sigmoid(%11397) /* ty=Tensor[(1, 1024), float32] */;
  %11399 = %11395.0 /* ty=Tensor[(1, 1024), float32] */;
  %11400 = %11395.2 /* ty=Tensor[(1, 1024), float32] */;
  %11401 = sigmoid(%11399) /* ty=Tensor[(1, 1024), float32] */;
  %11402 = tanh(%11400) /* ty=Tensor[(1, 1024), float32] */;
  %11403 = multiply(%11398, %11362) /* ty=Tensor[(1, 1024), float32] */;
  %11404 = multiply(%11401, %11402) /* ty=Tensor[(1, 1024), float32] */;
  %11405 = add(%11403, %11404) /* ty=Tensor[(1, 1024), float32] */;
  %11406 = sigmoid(%11396) /* ty=Tensor[(1, 1024), float32] */;
  %11407 = tanh(%11405) /* ty=Tensor[(1, 1024), float32] */;
  %11408 = %555.252 /* ty=Tensor[(1, 240), float32] */;
  %11409 = (%11408, %11386) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11410 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11411 = concatenate(%11409, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11412 = concatenate(%11410, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11413 = nn.dense(%11411, %11412, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11414 = add(%11413, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11415 = add(%11414, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11416 = split(%11415, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11417 = %11416.3 /* ty=Tensor[(1, 1024), float32] */;
  %11418 = %11416.1 /* ty=Tensor[(1, 1024), float32] */;
  %11419 = sigmoid(%11418) /* ty=Tensor[(1, 1024), float32] */;
  %11420 = %11416.0 /* ty=Tensor[(1, 1024), float32] */;
  %11421 = %11416.2 /* ty=Tensor[(1, 1024), float32] */;
  %11422 = sigmoid(%11420) /* ty=Tensor[(1, 1024), float32] */;
  %11423 = tanh(%11421) /* ty=Tensor[(1, 1024), float32] */;
  %11424 = multiply(%11419, %11383) /* ty=Tensor[(1, 1024), float32] */;
  %11425 = multiply(%11422, %11423) /* ty=Tensor[(1, 1024), float32] */;
  %11426 = add(%11424, %11425) /* ty=Tensor[(1, 1024), float32] */;
  %11427 = sigmoid(%11417) /* ty=Tensor[(1, 1024), float32] */;
  %11428 = tanh(%11426) /* ty=Tensor[(1, 1024), float32] */;
  %11429 = multiply(%11427, %11428) /* ty=Tensor[(1, 1024), float32] */;
  %11430 = multiply(%11406, %11407) /* ty=Tensor[(1, 1024), float32] */;
  %11431 = (%11429, %11430) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11432 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11433 = concatenate(%11431, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11434 = concatenate(%11432, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11435 = nn.dense(%11433, %11434, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11436 = add(%11435, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11437 = add(%11436, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11438 = split(%11437, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11439 = %11438.3 /* ty=Tensor[(1, 1024), float32] */;
  %11440 = %11438.1 /* ty=Tensor[(1, 1024), float32] */;
  %11441 = sigmoid(%11440) /* ty=Tensor[(1, 1024), float32] */;
  %11442 = %11438.0 /* ty=Tensor[(1, 1024), float32] */;
  %11443 = %11438.2 /* ty=Tensor[(1, 1024), float32] */;
  %11444 = sigmoid(%11442) /* ty=Tensor[(1, 1024), float32] */;
  %11445 = tanh(%11443) /* ty=Tensor[(1, 1024), float32] */;
  %11446 = multiply(%11441, %11405) /* ty=Tensor[(1, 1024), float32] */;
  %11447 = multiply(%11444, %11445) /* ty=Tensor[(1, 1024), float32] */;
  %11448 = add(%11446, %11447) /* ty=Tensor[(1, 1024), float32] */;
  %11449 = sigmoid(%11439) /* ty=Tensor[(1, 1024), float32] */;
  %11450 = tanh(%11448) /* ty=Tensor[(1, 1024), float32] */;
  %11451 = %555.253 /* ty=Tensor[(1, 240), float32] */;
  %11452 = (%11451, %11429) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11453 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11454 = concatenate(%11452, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11455 = concatenate(%11453, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11456 = nn.dense(%11454, %11455, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11457 = add(%11456, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11458 = add(%11457, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11459 = split(%11458, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11460 = %11459.3 /* ty=Tensor[(1, 1024), float32] */;
  %11461 = %11459.1 /* ty=Tensor[(1, 1024), float32] */;
  %11462 = sigmoid(%11461) /* ty=Tensor[(1, 1024), float32] */;
  %11463 = %11459.0 /* ty=Tensor[(1, 1024), float32] */;
  %11464 = %11459.2 /* ty=Tensor[(1, 1024), float32] */;
  %11465 = sigmoid(%11463) /* ty=Tensor[(1, 1024), float32] */;
  %11466 = tanh(%11464) /* ty=Tensor[(1, 1024), float32] */;
  %11467 = multiply(%11462, %11426) /* ty=Tensor[(1, 1024), float32] */;
  %11468 = multiply(%11465, %11466) /* ty=Tensor[(1, 1024), float32] */;
  %11469 = add(%11467, %11468) /* ty=Tensor[(1, 1024), float32] */;
  %11470 = sigmoid(%11460) /* ty=Tensor[(1, 1024), float32] */;
  %11471 = tanh(%11469) /* ty=Tensor[(1, 1024), float32] */;
  %11472 = multiply(%11470, %11471) /* ty=Tensor[(1, 1024), float32] */;
  %11473 = multiply(%11449, %11450) /* ty=Tensor[(1, 1024), float32] */;
  %11474 = (%11472, %11473) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11475 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11476 = concatenate(%11474, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11477 = concatenate(%11475, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11478 = nn.dense(%11476, %11477, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11479 = add(%11478, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11480 = add(%11479, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11481 = split(%11480, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11482 = %11481.3 /* ty=Tensor[(1, 1024), float32] */;
  %11483 = %11481.1 /* ty=Tensor[(1, 1024), float32] */;
  %11484 = sigmoid(%11483) /* ty=Tensor[(1, 1024), float32] */;
  %11485 = %11481.0 /* ty=Tensor[(1, 1024), float32] */;
  %11486 = %11481.2 /* ty=Tensor[(1, 1024), float32] */;
  %11487 = sigmoid(%11485) /* ty=Tensor[(1, 1024), float32] */;
  %11488 = tanh(%11486) /* ty=Tensor[(1, 1024), float32] */;
  %11489 = multiply(%11484, %11448) /* ty=Tensor[(1, 1024), float32] */;
  %11490 = multiply(%11487, %11488) /* ty=Tensor[(1, 1024), float32] */;
  %11491 = add(%11489, %11490) /* ty=Tensor[(1, 1024), float32] */;
  %11492 = sigmoid(%11482) /* ty=Tensor[(1, 1024), float32] */;
  %11493 = tanh(%11491) /* ty=Tensor[(1, 1024), float32] */;
  %11494 = %555.254 /* ty=Tensor[(1, 240), float32] */;
  %11495 = (%11494, %11472) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11496 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11497 = concatenate(%11495, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11498 = concatenate(%11496, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11499 = nn.dense(%11497, %11498, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11500 = add(%11499, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11501 = add(%11500, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11502 = split(%11501, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11503 = %11502.3 /* ty=Tensor[(1, 1024), float32] */;
  %11504 = %11502.1 /* ty=Tensor[(1, 1024), float32] */;
  %11505 = sigmoid(%11504) /* ty=Tensor[(1, 1024), float32] */;
  %11506 = %11502.0 /* ty=Tensor[(1, 1024), float32] */;
  %11507 = %11502.2 /* ty=Tensor[(1, 1024), float32] */;
  %11508 = sigmoid(%11506) /* ty=Tensor[(1, 1024), float32] */;
  %11509 = tanh(%11507) /* ty=Tensor[(1, 1024), float32] */;
  %11510 = multiply(%11505, %11469) /* ty=Tensor[(1, 1024), float32] */;
  %11511 = multiply(%11508, %11509) /* ty=Tensor[(1, 1024), float32] */;
  %11512 = add(%11510, %11511) /* ty=Tensor[(1, 1024), float32] */;
  %11513 = sigmoid(%11503) /* ty=Tensor[(1, 1024), float32] */;
  %11514 = tanh(%11512) /* ty=Tensor[(1, 1024), float32] */;
  %11515 = multiply(%11513, %11514) /* ty=Tensor[(1, 1024), float32] */;
  %11516 = multiply(%11492, %11493) /* ty=Tensor[(1, 1024), float32] */;
  %11517 = (%11515, %11516) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11518 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11519 = concatenate(%11517, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11520 = concatenate(%11518, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11521 = nn.dense(%11519, %11520, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11522 = add(%11521, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11523 = add(%11522, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11524 = split(%11523, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11525 = %11524.3 /* ty=Tensor[(1, 1024), float32] */;
  %11526 = %11524.1 /* ty=Tensor[(1, 1024), float32] */;
  %11527 = sigmoid(%11526) /* ty=Tensor[(1, 1024), float32] */;
  %11528 = %11524.0 /* ty=Tensor[(1, 1024), float32] */;
  %11529 = %11524.2 /* ty=Tensor[(1, 1024), float32] */;
  %11530 = sigmoid(%11528) /* ty=Tensor[(1, 1024), float32] */;
  %11531 = tanh(%11529) /* ty=Tensor[(1, 1024), float32] */;
  %11532 = multiply(%11527, %11491) /* ty=Tensor[(1, 1024), float32] */;
  %11533 = multiply(%11530, %11531) /* ty=Tensor[(1, 1024), float32] */;
  %11534 = add(%11532, %11533) /* ty=Tensor[(1, 1024), float32] */;
  %11535 = sigmoid(%11525) /* ty=Tensor[(1, 1024), float32] */;
  %11536 = tanh(%11534) /* ty=Tensor[(1, 1024), float32] */;
  %11537 = %555.255 /* ty=Tensor[(1, 240), float32] */;
  %11538 = (%11537, %11515) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11539 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11540 = concatenate(%11538, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11541 = concatenate(%11539, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11542 = nn.dense(%11540, %11541, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11543 = add(%11542, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11544 = add(%11543, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11545 = split(%11544, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11546 = %11545.3 /* ty=Tensor[(1, 1024), float32] */;
  %11547 = %11545.1 /* ty=Tensor[(1, 1024), float32] */;
  %11548 = sigmoid(%11547) /* ty=Tensor[(1, 1024), float32] */;
  %11549 = %11545.0 /* ty=Tensor[(1, 1024), float32] */;
  %11550 = %11545.2 /* ty=Tensor[(1, 1024), float32] */;
  %11551 = sigmoid(%11549) /* ty=Tensor[(1, 1024), float32] */;
  %11552 = tanh(%11550) /* ty=Tensor[(1, 1024), float32] */;
  %11553 = multiply(%11548, %11512) /* ty=Tensor[(1, 1024), float32] */;
  %11554 = multiply(%11551, %11552) /* ty=Tensor[(1, 1024), float32] */;
  %11555 = add(%11553, %11554) /* ty=Tensor[(1, 1024), float32] */;
  %11556 = sigmoid(%11546) /* ty=Tensor[(1, 1024), float32] */;
  %11557 = tanh(%11555) /* ty=Tensor[(1, 1024), float32] */;
  %11558 = multiply(%11556, %11557) /* ty=Tensor[(1, 1024), float32] */;
  %11559 = multiply(%11535, %11536) /* ty=Tensor[(1, 1024), float32] */;
  %11560 = (%11558, %11559) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11561 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11562 = concatenate(%11560, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11563 = concatenate(%11561, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11564 = nn.dense(%11562, %11563, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11565 = add(%11564, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11566 = add(%11565, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11567 = split(%11566, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11568 = %11567.3 /* ty=Tensor[(1, 1024), float32] */;
  %11569 = %11567.1 /* ty=Tensor[(1, 1024), float32] */;
  %11570 = sigmoid(%11569) /* ty=Tensor[(1, 1024), float32] */;
  %11571 = %11567.0 /* ty=Tensor[(1, 1024), float32] */;
  %11572 = %11567.2 /* ty=Tensor[(1, 1024), float32] */;
  %11573 = sigmoid(%11571) /* ty=Tensor[(1, 1024), float32] */;
  %11574 = tanh(%11572) /* ty=Tensor[(1, 1024), float32] */;
  %11575 = multiply(%11570, %11534) /* ty=Tensor[(1, 1024), float32] */;
  %11576 = multiply(%11573, %11574) /* ty=Tensor[(1, 1024), float32] */;
  %11577 = add(%11575, %11576) /* ty=Tensor[(1, 1024), float32] */;
  %11578 = sigmoid(%11568) /* ty=Tensor[(1, 1024), float32] */;
  %11579 = tanh(%11577) /* ty=Tensor[(1, 1024), float32] */;
  %11580 = %555.256 /* ty=Tensor[(1, 240), float32] */;
  %11581 = (%11580, %11558) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11582 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11583 = concatenate(%11581, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11584 = concatenate(%11582, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11585 = nn.dense(%11583, %11584, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11586 = add(%11585, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11587 = add(%11586, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11588 = split(%11587, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11589 = %11588.3 /* ty=Tensor[(1, 1024), float32] */;
  %11590 = %11588.1 /* ty=Tensor[(1, 1024), float32] */;
  %11591 = sigmoid(%11590) /* ty=Tensor[(1, 1024), float32] */;
  %11592 = %11588.0 /* ty=Tensor[(1, 1024), float32] */;
  %11593 = %11588.2 /* ty=Tensor[(1, 1024), float32] */;
  %11594 = sigmoid(%11592) /* ty=Tensor[(1, 1024), float32] */;
  %11595 = tanh(%11593) /* ty=Tensor[(1, 1024), float32] */;
  %11596 = multiply(%11591, %11555) /* ty=Tensor[(1, 1024), float32] */;
  %11597 = multiply(%11594, %11595) /* ty=Tensor[(1, 1024), float32] */;
  %11598 = add(%11596, %11597) /* ty=Tensor[(1, 1024), float32] */;
  %11599 = sigmoid(%11589) /* ty=Tensor[(1, 1024), float32] */;
  %11600 = tanh(%11598) /* ty=Tensor[(1, 1024), float32] */;
  %11601 = multiply(%11599, %11600) /* ty=Tensor[(1, 1024), float32] */;
  %11602 = multiply(%11578, %11579) /* ty=Tensor[(1, 1024), float32] */;
  %11603 = (%11601, %11602) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11604 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11605 = concatenate(%11603, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11606 = concatenate(%11604, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11607 = nn.dense(%11605, %11606, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11608 = add(%11607, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11609 = add(%11608, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11610 = split(%11609, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11611 = %11610.3 /* ty=Tensor[(1, 1024), float32] */;
  %11612 = %11610.1 /* ty=Tensor[(1, 1024), float32] */;
  %11613 = sigmoid(%11612) /* ty=Tensor[(1, 1024), float32] */;
  %11614 = %11610.0 /* ty=Tensor[(1, 1024), float32] */;
  %11615 = %11610.2 /* ty=Tensor[(1, 1024), float32] */;
  %11616 = sigmoid(%11614) /* ty=Tensor[(1, 1024), float32] */;
  %11617 = tanh(%11615) /* ty=Tensor[(1, 1024), float32] */;
  %11618 = multiply(%11613, %11577) /* ty=Tensor[(1, 1024), float32] */;
  %11619 = multiply(%11616, %11617) /* ty=Tensor[(1, 1024), float32] */;
  %11620 = add(%11618, %11619) /* ty=Tensor[(1, 1024), float32] */;
  %11621 = sigmoid(%11611) /* ty=Tensor[(1, 1024), float32] */;
  %11622 = tanh(%11620) /* ty=Tensor[(1, 1024), float32] */;
  %11623 = %555.257 /* ty=Tensor[(1, 240), float32] */;
  %11624 = (%11623, %11601) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11625 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11626 = concatenate(%11624, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11627 = concatenate(%11625, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11628 = nn.dense(%11626, %11627, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11629 = add(%11628, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11630 = add(%11629, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11631 = split(%11630, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11632 = %11631.3 /* ty=Tensor[(1, 1024), float32] */;
  %11633 = %11631.1 /* ty=Tensor[(1, 1024), float32] */;
  %11634 = sigmoid(%11633) /* ty=Tensor[(1, 1024), float32] */;
  %11635 = %11631.0 /* ty=Tensor[(1, 1024), float32] */;
  %11636 = %11631.2 /* ty=Tensor[(1, 1024), float32] */;
  %11637 = sigmoid(%11635) /* ty=Tensor[(1, 1024), float32] */;
  %11638 = tanh(%11636) /* ty=Tensor[(1, 1024), float32] */;
  %11639 = multiply(%11634, %11598) /* ty=Tensor[(1, 1024), float32] */;
  %11640 = multiply(%11637, %11638) /* ty=Tensor[(1, 1024), float32] */;
  %11641 = add(%11639, %11640) /* ty=Tensor[(1, 1024), float32] */;
  %11642 = sigmoid(%11632) /* ty=Tensor[(1, 1024), float32] */;
  %11643 = tanh(%11641) /* ty=Tensor[(1, 1024), float32] */;
  %11644 = multiply(%11642, %11643) /* ty=Tensor[(1, 1024), float32] */;
  %11645 = multiply(%11621, %11622) /* ty=Tensor[(1, 1024), float32] */;
  %11646 = (%11644, %11645) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11647 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11648 = concatenate(%11646, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11649 = concatenate(%11647, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11650 = nn.dense(%11648, %11649, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11651 = add(%11650, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11652 = add(%11651, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11653 = split(%11652, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11654 = %11653.3 /* ty=Tensor[(1, 1024), float32] */;
  %11655 = %11653.1 /* ty=Tensor[(1, 1024), float32] */;
  %11656 = sigmoid(%11655) /* ty=Tensor[(1, 1024), float32] */;
  %11657 = %11653.0 /* ty=Tensor[(1, 1024), float32] */;
  %11658 = %11653.2 /* ty=Tensor[(1, 1024), float32] */;
  %11659 = sigmoid(%11657) /* ty=Tensor[(1, 1024), float32] */;
  %11660 = tanh(%11658) /* ty=Tensor[(1, 1024), float32] */;
  %11661 = multiply(%11656, %11620) /* ty=Tensor[(1, 1024), float32] */;
  %11662 = multiply(%11659, %11660) /* ty=Tensor[(1, 1024), float32] */;
  %11663 = add(%11661, %11662) /* ty=Tensor[(1, 1024), float32] */;
  %11664 = sigmoid(%11654) /* ty=Tensor[(1, 1024), float32] */;
  %11665 = tanh(%11663) /* ty=Tensor[(1, 1024), float32] */;
  %11666 = %555.258 /* ty=Tensor[(1, 240), float32] */;
  %11667 = (%11666, %11644) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11668 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11669 = concatenate(%11667, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11670 = concatenate(%11668, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11671 = nn.dense(%11669, %11670, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11672 = add(%11671, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11673 = add(%11672, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11674 = split(%11673, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11675 = %11674.3 /* ty=Tensor[(1, 1024), float32] */;
  %11676 = %11674.1 /* ty=Tensor[(1, 1024), float32] */;
  %11677 = sigmoid(%11676) /* ty=Tensor[(1, 1024), float32] */;
  %11678 = %11674.0 /* ty=Tensor[(1, 1024), float32] */;
  %11679 = %11674.2 /* ty=Tensor[(1, 1024), float32] */;
  %11680 = sigmoid(%11678) /* ty=Tensor[(1, 1024), float32] */;
  %11681 = tanh(%11679) /* ty=Tensor[(1, 1024), float32] */;
  %11682 = multiply(%11677, %11641) /* ty=Tensor[(1, 1024), float32] */;
  %11683 = multiply(%11680, %11681) /* ty=Tensor[(1, 1024), float32] */;
  %11684 = add(%11682, %11683) /* ty=Tensor[(1, 1024), float32] */;
  %11685 = sigmoid(%11675) /* ty=Tensor[(1, 1024), float32] */;
  %11686 = tanh(%11684) /* ty=Tensor[(1, 1024), float32] */;
  %11687 = multiply(%11685, %11686) /* ty=Tensor[(1, 1024), float32] */;
  %11688 = multiply(%11664, %11665) /* ty=Tensor[(1, 1024), float32] */;
  %11689 = (%11687, %11688) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11690 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11691 = concatenate(%11689, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11692 = concatenate(%11690, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11693 = nn.dense(%11691, %11692, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11694 = add(%11693, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11695 = add(%11694, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11696 = split(%11695, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11697 = %11696.3 /* ty=Tensor[(1, 1024), float32] */;
  %11698 = %11696.1 /* ty=Tensor[(1, 1024), float32] */;
  %11699 = sigmoid(%11698) /* ty=Tensor[(1, 1024), float32] */;
  %11700 = %11696.0 /* ty=Tensor[(1, 1024), float32] */;
  %11701 = %11696.2 /* ty=Tensor[(1, 1024), float32] */;
  %11702 = sigmoid(%11700) /* ty=Tensor[(1, 1024), float32] */;
  %11703 = tanh(%11701) /* ty=Tensor[(1, 1024), float32] */;
  %11704 = multiply(%11699, %11663) /* ty=Tensor[(1, 1024), float32] */;
  %11705 = multiply(%11702, %11703) /* ty=Tensor[(1, 1024), float32] */;
  %11706 = add(%11704, %11705) /* ty=Tensor[(1, 1024), float32] */;
  %11707 = sigmoid(%11697) /* ty=Tensor[(1, 1024), float32] */;
  %11708 = tanh(%11706) /* ty=Tensor[(1, 1024), float32] */;
  %11709 = %555.259 /* ty=Tensor[(1, 240), float32] */;
  %11710 = (%11709, %11687) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11711 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11712 = concatenate(%11710, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11713 = concatenate(%11711, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11714 = nn.dense(%11712, %11713, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11715 = add(%11714, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11716 = add(%11715, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11717 = split(%11716, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11718 = %11717.3 /* ty=Tensor[(1, 1024), float32] */;
  %11719 = %11717.1 /* ty=Tensor[(1, 1024), float32] */;
  %11720 = sigmoid(%11719) /* ty=Tensor[(1, 1024), float32] */;
  %11721 = %11717.0 /* ty=Tensor[(1, 1024), float32] */;
  %11722 = %11717.2 /* ty=Tensor[(1, 1024), float32] */;
  %11723 = sigmoid(%11721) /* ty=Tensor[(1, 1024), float32] */;
  %11724 = tanh(%11722) /* ty=Tensor[(1, 1024), float32] */;
  %11725 = multiply(%11720, %11684) /* ty=Tensor[(1, 1024), float32] */;
  %11726 = multiply(%11723, %11724) /* ty=Tensor[(1, 1024), float32] */;
  %11727 = add(%11725, %11726) /* ty=Tensor[(1, 1024), float32] */;
  %11728 = sigmoid(%11718) /* ty=Tensor[(1, 1024), float32] */;
  %11729 = tanh(%11727) /* ty=Tensor[(1, 1024), float32] */;
  %11730 = multiply(%11728, %11729) /* ty=Tensor[(1, 1024), float32] */;
  %11731 = multiply(%11707, %11708) /* ty=Tensor[(1, 1024), float32] */;
  %11732 = (%11730, %11731) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11733 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11734 = concatenate(%11732, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11735 = concatenate(%11733, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11736 = nn.dense(%11734, %11735, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11737 = add(%11736, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11738 = add(%11737, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11739 = split(%11738, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11740 = %11739.3 /* ty=Tensor[(1, 1024), float32] */;
  %11741 = %11739.1 /* ty=Tensor[(1, 1024), float32] */;
  %11742 = sigmoid(%11741) /* ty=Tensor[(1, 1024), float32] */;
  %11743 = %11739.0 /* ty=Tensor[(1, 1024), float32] */;
  %11744 = %11739.2 /* ty=Tensor[(1, 1024), float32] */;
  %11745 = sigmoid(%11743) /* ty=Tensor[(1, 1024), float32] */;
  %11746 = tanh(%11744) /* ty=Tensor[(1, 1024), float32] */;
  %11747 = multiply(%11742, %11706) /* ty=Tensor[(1, 1024), float32] */;
  %11748 = multiply(%11745, %11746) /* ty=Tensor[(1, 1024), float32] */;
  %11749 = add(%11747, %11748) /* ty=Tensor[(1, 1024), float32] */;
  %11750 = sigmoid(%11740) /* ty=Tensor[(1, 1024), float32] */;
  %11751 = tanh(%11749) /* ty=Tensor[(1, 1024), float32] */;
  %11752 = %555.260 /* ty=Tensor[(1, 240), float32] */;
  %11753 = (%11752, %11730) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11754 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11755 = concatenate(%11753, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11756 = concatenate(%11754, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11757 = nn.dense(%11755, %11756, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11758 = add(%11757, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11759 = add(%11758, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11760 = split(%11759, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11761 = %11760.3 /* ty=Tensor[(1, 1024), float32] */;
  %11762 = %11760.1 /* ty=Tensor[(1, 1024), float32] */;
  %11763 = sigmoid(%11762) /* ty=Tensor[(1, 1024), float32] */;
  %11764 = %11760.0 /* ty=Tensor[(1, 1024), float32] */;
  %11765 = %11760.2 /* ty=Tensor[(1, 1024), float32] */;
  %11766 = sigmoid(%11764) /* ty=Tensor[(1, 1024), float32] */;
  %11767 = tanh(%11765) /* ty=Tensor[(1, 1024), float32] */;
  %11768 = multiply(%11763, %11727) /* ty=Tensor[(1, 1024), float32] */;
  %11769 = multiply(%11766, %11767) /* ty=Tensor[(1, 1024), float32] */;
  %11770 = add(%11768, %11769) /* ty=Tensor[(1, 1024), float32] */;
  %11771 = sigmoid(%11761) /* ty=Tensor[(1, 1024), float32] */;
  %11772 = tanh(%11770) /* ty=Tensor[(1, 1024), float32] */;
  %11773 = multiply(%11771, %11772) /* ty=Tensor[(1, 1024), float32] */;
  %11774 = multiply(%11750, %11751) /* ty=Tensor[(1, 1024), float32] */;
  %11775 = (%11773, %11774) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11776 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11777 = concatenate(%11775, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11778 = concatenate(%11776, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11779 = nn.dense(%11777, %11778, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11780 = add(%11779, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11781 = add(%11780, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11782 = split(%11781, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11783 = %11782.3 /* ty=Tensor[(1, 1024), float32] */;
  %11784 = %11782.1 /* ty=Tensor[(1, 1024), float32] */;
  %11785 = sigmoid(%11784) /* ty=Tensor[(1, 1024), float32] */;
  %11786 = %11782.0 /* ty=Tensor[(1, 1024), float32] */;
  %11787 = %11782.2 /* ty=Tensor[(1, 1024), float32] */;
  %11788 = sigmoid(%11786) /* ty=Tensor[(1, 1024), float32] */;
  %11789 = tanh(%11787) /* ty=Tensor[(1, 1024), float32] */;
  %11790 = multiply(%11785, %11749) /* ty=Tensor[(1, 1024), float32] */;
  %11791 = multiply(%11788, %11789) /* ty=Tensor[(1, 1024), float32] */;
  %11792 = add(%11790, %11791) /* ty=Tensor[(1, 1024), float32] */;
  %11793 = sigmoid(%11783) /* ty=Tensor[(1, 1024), float32] */;
  %11794 = tanh(%11792) /* ty=Tensor[(1, 1024), float32] */;
  %11795 = %555.261 /* ty=Tensor[(1, 240), float32] */;
  %11796 = (%11795, %11773) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11797 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11798 = concatenate(%11796, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11799 = concatenate(%11797, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11800 = nn.dense(%11798, %11799, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11801 = add(%11800, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11802 = add(%11801, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11803 = split(%11802, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11804 = %11803.3 /* ty=Tensor[(1, 1024), float32] */;
  %11805 = %11803.1 /* ty=Tensor[(1, 1024), float32] */;
  %11806 = sigmoid(%11805) /* ty=Tensor[(1, 1024), float32] */;
  %11807 = %11803.0 /* ty=Tensor[(1, 1024), float32] */;
  %11808 = %11803.2 /* ty=Tensor[(1, 1024), float32] */;
  %11809 = sigmoid(%11807) /* ty=Tensor[(1, 1024), float32] */;
  %11810 = tanh(%11808) /* ty=Tensor[(1, 1024), float32] */;
  %11811 = multiply(%11806, %11770) /* ty=Tensor[(1, 1024), float32] */;
  %11812 = multiply(%11809, %11810) /* ty=Tensor[(1, 1024), float32] */;
  %11813 = add(%11811, %11812) /* ty=Tensor[(1, 1024), float32] */;
  %11814 = sigmoid(%11804) /* ty=Tensor[(1, 1024), float32] */;
  %11815 = tanh(%11813) /* ty=Tensor[(1, 1024), float32] */;
  %11816 = multiply(%11814, %11815) /* ty=Tensor[(1, 1024), float32] */;
  %11817 = multiply(%11793, %11794) /* ty=Tensor[(1, 1024), float32] */;
  %11818 = (%11816, %11817) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11819 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11820 = concatenate(%11818, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11821 = concatenate(%11819, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11822 = nn.dense(%11820, %11821, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11823 = add(%11822, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11824 = add(%11823, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11825 = split(%11824, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11826 = %11825.3 /* ty=Tensor[(1, 1024), float32] */;
  %11827 = %11825.1 /* ty=Tensor[(1, 1024), float32] */;
  %11828 = sigmoid(%11827) /* ty=Tensor[(1, 1024), float32] */;
  %11829 = %11825.0 /* ty=Tensor[(1, 1024), float32] */;
  %11830 = %11825.2 /* ty=Tensor[(1, 1024), float32] */;
  %11831 = sigmoid(%11829) /* ty=Tensor[(1, 1024), float32] */;
  %11832 = tanh(%11830) /* ty=Tensor[(1, 1024), float32] */;
  %11833 = multiply(%11828, %11792) /* ty=Tensor[(1, 1024), float32] */;
  %11834 = multiply(%11831, %11832) /* ty=Tensor[(1, 1024), float32] */;
  %11835 = add(%11833, %11834) /* ty=Tensor[(1, 1024), float32] */;
  %11836 = sigmoid(%11826) /* ty=Tensor[(1, 1024), float32] */;
  %11837 = tanh(%11835) /* ty=Tensor[(1, 1024), float32] */;
  %11838 = %555.262 /* ty=Tensor[(1, 240), float32] */;
  %11839 = (%11838, %11816) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11840 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11841 = concatenate(%11839, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11842 = concatenate(%11840, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11843 = nn.dense(%11841, %11842, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11844 = add(%11843, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11845 = add(%11844, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11846 = split(%11845, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11847 = %11846.3 /* ty=Tensor[(1, 1024), float32] */;
  %11848 = %11846.1 /* ty=Tensor[(1, 1024), float32] */;
  %11849 = sigmoid(%11848) /* ty=Tensor[(1, 1024), float32] */;
  %11850 = %11846.0 /* ty=Tensor[(1, 1024), float32] */;
  %11851 = %11846.2 /* ty=Tensor[(1, 1024), float32] */;
  %11852 = sigmoid(%11850) /* ty=Tensor[(1, 1024), float32] */;
  %11853 = tanh(%11851) /* ty=Tensor[(1, 1024), float32] */;
  %11854 = multiply(%11849, %11813) /* ty=Tensor[(1, 1024), float32] */;
  %11855 = multiply(%11852, %11853) /* ty=Tensor[(1, 1024), float32] */;
  %11856 = add(%11854, %11855) /* ty=Tensor[(1, 1024), float32] */;
  %11857 = sigmoid(%11847) /* ty=Tensor[(1, 1024), float32] */;
  %11858 = tanh(%11856) /* ty=Tensor[(1, 1024), float32] */;
  %11859 = multiply(%11857, %11858) /* ty=Tensor[(1, 1024), float32] */;
  %11860 = multiply(%11836, %11837) /* ty=Tensor[(1, 1024), float32] */;
  %11861 = (%11859, %11860) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11862 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11863 = concatenate(%11861, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11864 = concatenate(%11862, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11865 = nn.dense(%11863, %11864, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11866 = add(%11865, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11867 = add(%11866, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11868 = split(%11867, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11869 = %11868.3 /* ty=Tensor[(1, 1024), float32] */;
  %11870 = %11868.1 /* ty=Tensor[(1, 1024), float32] */;
  %11871 = sigmoid(%11870) /* ty=Tensor[(1, 1024), float32] */;
  %11872 = %11868.0 /* ty=Tensor[(1, 1024), float32] */;
  %11873 = %11868.2 /* ty=Tensor[(1, 1024), float32] */;
  %11874 = sigmoid(%11872) /* ty=Tensor[(1, 1024), float32] */;
  %11875 = tanh(%11873) /* ty=Tensor[(1, 1024), float32] */;
  %11876 = multiply(%11871, %11835) /* ty=Tensor[(1, 1024), float32] */;
  %11877 = multiply(%11874, %11875) /* ty=Tensor[(1, 1024), float32] */;
  %11878 = add(%11876, %11877) /* ty=Tensor[(1, 1024), float32] */;
  %11879 = sigmoid(%11869) /* ty=Tensor[(1, 1024), float32] */;
  %11880 = tanh(%11878) /* ty=Tensor[(1, 1024), float32] */;
  %11881 = %555.263 /* ty=Tensor[(1, 240), float32] */;
  %11882 = (%11881, %11859) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11883 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11884 = concatenate(%11882, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11885 = concatenate(%11883, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11886 = nn.dense(%11884, %11885, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11887 = add(%11886, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11888 = add(%11887, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11889 = split(%11888, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11890 = %11889.3 /* ty=Tensor[(1, 1024), float32] */;
  %11891 = %11889.1 /* ty=Tensor[(1, 1024), float32] */;
  %11892 = sigmoid(%11891) /* ty=Tensor[(1, 1024), float32] */;
  %11893 = %11889.0 /* ty=Tensor[(1, 1024), float32] */;
  %11894 = %11889.2 /* ty=Tensor[(1, 1024), float32] */;
  %11895 = sigmoid(%11893) /* ty=Tensor[(1, 1024), float32] */;
  %11896 = tanh(%11894) /* ty=Tensor[(1, 1024), float32] */;
  %11897 = multiply(%11892, %11856) /* ty=Tensor[(1, 1024), float32] */;
  %11898 = multiply(%11895, %11896) /* ty=Tensor[(1, 1024), float32] */;
  %11899 = add(%11897, %11898) /* ty=Tensor[(1, 1024), float32] */;
  %11900 = sigmoid(%11890) /* ty=Tensor[(1, 1024), float32] */;
  %11901 = tanh(%11899) /* ty=Tensor[(1, 1024), float32] */;
  %11902 = multiply(%11900, %11901) /* ty=Tensor[(1, 1024), float32] */;
  %11903 = multiply(%11879, %11880) /* ty=Tensor[(1, 1024), float32] */;
  %11904 = (%11902, %11903) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11905 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11906 = concatenate(%11904, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11907 = concatenate(%11905, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11908 = nn.dense(%11906, %11907, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11909 = add(%11908, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11910 = add(%11909, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11911 = split(%11910, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11912 = %11911.3 /* ty=Tensor[(1, 1024), float32] */;
  %11913 = %11911.1 /* ty=Tensor[(1, 1024), float32] */;
  %11914 = sigmoid(%11913) /* ty=Tensor[(1, 1024), float32] */;
  %11915 = %11911.0 /* ty=Tensor[(1, 1024), float32] */;
  %11916 = %11911.2 /* ty=Tensor[(1, 1024), float32] */;
  %11917 = sigmoid(%11915) /* ty=Tensor[(1, 1024), float32] */;
  %11918 = tanh(%11916) /* ty=Tensor[(1, 1024), float32] */;
  %11919 = multiply(%11914, %11878) /* ty=Tensor[(1, 1024), float32] */;
  %11920 = multiply(%11917, %11918) /* ty=Tensor[(1, 1024), float32] */;
  %11921 = add(%11919, %11920) /* ty=Tensor[(1, 1024), float32] */;
  %11922 = sigmoid(%11912) /* ty=Tensor[(1, 1024), float32] */;
  %11923 = tanh(%11921) /* ty=Tensor[(1, 1024), float32] */;
  %11924 = %555.264 /* ty=Tensor[(1, 240), float32] */;
  %11925 = (%11924, %11902) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11926 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11927 = concatenate(%11925, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11928 = concatenate(%11926, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11929 = nn.dense(%11927, %11928, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11930 = add(%11929, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11931 = add(%11930, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11932 = split(%11931, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11933 = %11932.3 /* ty=Tensor[(1, 1024), float32] */;
  %11934 = %11932.1 /* ty=Tensor[(1, 1024), float32] */;
  %11935 = sigmoid(%11934) /* ty=Tensor[(1, 1024), float32] */;
  %11936 = %11932.0 /* ty=Tensor[(1, 1024), float32] */;
  %11937 = %11932.2 /* ty=Tensor[(1, 1024), float32] */;
  %11938 = sigmoid(%11936) /* ty=Tensor[(1, 1024), float32] */;
  %11939 = tanh(%11937) /* ty=Tensor[(1, 1024), float32] */;
  %11940 = multiply(%11935, %11899) /* ty=Tensor[(1, 1024), float32] */;
  %11941 = multiply(%11938, %11939) /* ty=Tensor[(1, 1024), float32] */;
  %11942 = add(%11940, %11941) /* ty=Tensor[(1, 1024), float32] */;
  %11943 = sigmoid(%11933) /* ty=Tensor[(1, 1024), float32] */;
  %11944 = tanh(%11942) /* ty=Tensor[(1, 1024), float32] */;
  %11945 = multiply(%11943, %11944) /* ty=Tensor[(1, 1024), float32] */;
  %11946 = multiply(%11922, %11923) /* ty=Tensor[(1, 1024), float32] */;
  %11947 = (%11945, %11946) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11948 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11949 = concatenate(%11947, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11950 = concatenate(%11948, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11951 = nn.dense(%11949, %11950, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11952 = add(%11951, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11953 = add(%11952, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11954 = split(%11953, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11955 = %11954.3 /* ty=Tensor[(1, 1024), float32] */;
  %11956 = %11954.1 /* ty=Tensor[(1, 1024), float32] */;
  %11957 = sigmoid(%11956) /* ty=Tensor[(1, 1024), float32] */;
  %11958 = %11954.0 /* ty=Tensor[(1, 1024), float32] */;
  %11959 = %11954.2 /* ty=Tensor[(1, 1024), float32] */;
  %11960 = sigmoid(%11958) /* ty=Tensor[(1, 1024), float32] */;
  %11961 = tanh(%11959) /* ty=Tensor[(1, 1024), float32] */;
  %11962 = multiply(%11957, %11921) /* ty=Tensor[(1, 1024), float32] */;
  %11963 = multiply(%11960, %11961) /* ty=Tensor[(1, 1024), float32] */;
  %11964 = add(%11962, %11963) /* ty=Tensor[(1, 1024), float32] */;
  %11965 = sigmoid(%11955) /* ty=Tensor[(1, 1024), float32] */;
  %11966 = tanh(%11964) /* ty=Tensor[(1, 1024), float32] */;
  %11967 = %555.265 /* ty=Tensor[(1, 240), float32] */;
  %11968 = (%11967, %11945) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %11969 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %11970 = concatenate(%11968, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %11971 = concatenate(%11969, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %11972 = nn.dense(%11970, %11971, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11973 = add(%11972, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11974 = add(%11973, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %11975 = split(%11974, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11976 = %11975.3 /* ty=Tensor[(1, 1024), float32] */;
  %11977 = %11975.1 /* ty=Tensor[(1, 1024), float32] */;
  %11978 = sigmoid(%11977) /* ty=Tensor[(1, 1024), float32] */;
  %11979 = %11975.0 /* ty=Tensor[(1, 1024), float32] */;
  %11980 = %11975.2 /* ty=Tensor[(1, 1024), float32] */;
  %11981 = sigmoid(%11979) /* ty=Tensor[(1, 1024), float32] */;
  %11982 = tanh(%11980) /* ty=Tensor[(1, 1024), float32] */;
  %11983 = multiply(%11978, %11942) /* ty=Tensor[(1, 1024), float32] */;
  %11984 = multiply(%11981, %11982) /* ty=Tensor[(1, 1024), float32] */;
  %11985 = add(%11983, %11984) /* ty=Tensor[(1, 1024), float32] */;
  %11986 = sigmoid(%11976) /* ty=Tensor[(1, 1024), float32] */;
  %11987 = tanh(%11985) /* ty=Tensor[(1, 1024), float32] */;
  %11988 = multiply(%11986, %11987) /* ty=Tensor[(1, 1024), float32] */;
  %11989 = multiply(%11965, %11966) /* ty=Tensor[(1, 1024), float32] */;
  %11990 = (%11988, %11989) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11991 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %11992 = concatenate(%11990, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %11993 = concatenate(%11991, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %11994 = nn.dense(%11992, %11993, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %11995 = add(%11994, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11996 = add(%11995, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %11997 = split(%11996, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %11998 = %11997.3 /* ty=Tensor[(1, 1024), float32] */;
  %11999 = %11997.1 /* ty=Tensor[(1, 1024), float32] */;
  %12000 = sigmoid(%11999) /* ty=Tensor[(1, 1024), float32] */;
  %12001 = %11997.0 /* ty=Tensor[(1, 1024), float32] */;
  %12002 = %11997.2 /* ty=Tensor[(1, 1024), float32] */;
  %12003 = sigmoid(%12001) /* ty=Tensor[(1, 1024), float32] */;
  %12004 = tanh(%12002) /* ty=Tensor[(1, 1024), float32] */;
  %12005 = multiply(%12000, %11964) /* ty=Tensor[(1, 1024), float32] */;
  %12006 = multiply(%12003, %12004) /* ty=Tensor[(1, 1024), float32] */;
  %12007 = add(%12005, %12006) /* ty=Tensor[(1, 1024), float32] */;
  %12008 = sigmoid(%11998) /* ty=Tensor[(1, 1024), float32] */;
  %12009 = tanh(%12007) /* ty=Tensor[(1, 1024), float32] */;
  %12010 = %555.266 /* ty=Tensor[(1, 240), float32] */;
  %12011 = (%12010, %11988) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12012 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12013 = concatenate(%12011, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12014 = concatenate(%12012, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12015 = nn.dense(%12013, %12014, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12016 = add(%12015, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12017 = add(%12016, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12018 = split(%12017, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12019 = %12018.3 /* ty=Tensor[(1, 1024), float32] */;
  %12020 = %12018.1 /* ty=Tensor[(1, 1024), float32] */;
  %12021 = sigmoid(%12020) /* ty=Tensor[(1, 1024), float32] */;
  %12022 = %12018.0 /* ty=Tensor[(1, 1024), float32] */;
  %12023 = %12018.2 /* ty=Tensor[(1, 1024), float32] */;
  %12024 = sigmoid(%12022) /* ty=Tensor[(1, 1024), float32] */;
  %12025 = tanh(%12023) /* ty=Tensor[(1, 1024), float32] */;
  %12026 = multiply(%12021, %11985) /* ty=Tensor[(1, 1024), float32] */;
  %12027 = multiply(%12024, %12025) /* ty=Tensor[(1, 1024), float32] */;
  %12028 = add(%12026, %12027) /* ty=Tensor[(1, 1024), float32] */;
  %12029 = sigmoid(%12019) /* ty=Tensor[(1, 1024), float32] */;
  %12030 = tanh(%12028) /* ty=Tensor[(1, 1024), float32] */;
  %12031 = multiply(%12029, %12030) /* ty=Tensor[(1, 1024), float32] */;
  %12032 = multiply(%12008, %12009) /* ty=Tensor[(1, 1024), float32] */;
  %12033 = (%12031, %12032) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12034 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12035 = concatenate(%12033, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12036 = concatenate(%12034, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12037 = nn.dense(%12035, %12036, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12038 = add(%12037, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12039 = add(%12038, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12040 = split(%12039, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12041 = %12040.3 /* ty=Tensor[(1, 1024), float32] */;
  %12042 = %12040.1 /* ty=Tensor[(1, 1024), float32] */;
  %12043 = sigmoid(%12042) /* ty=Tensor[(1, 1024), float32] */;
  %12044 = %12040.0 /* ty=Tensor[(1, 1024), float32] */;
  %12045 = %12040.2 /* ty=Tensor[(1, 1024), float32] */;
  %12046 = sigmoid(%12044) /* ty=Tensor[(1, 1024), float32] */;
  %12047 = tanh(%12045) /* ty=Tensor[(1, 1024), float32] */;
  %12048 = multiply(%12043, %12007) /* ty=Tensor[(1, 1024), float32] */;
  %12049 = multiply(%12046, %12047) /* ty=Tensor[(1, 1024), float32] */;
  %12050 = add(%12048, %12049) /* ty=Tensor[(1, 1024), float32] */;
  %12051 = sigmoid(%12041) /* ty=Tensor[(1, 1024), float32] */;
  %12052 = tanh(%12050) /* ty=Tensor[(1, 1024), float32] */;
  %12053 = %555.267 /* ty=Tensor[(1, 240), float32] */;
  %12054 = (%12053, %12031) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12055 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12056 = concatenate(%12054, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12057 = concatenate(%12055, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12058 = nn.dense(%12056, %12057, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12059 = add(%12058, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12060 = add(%12059, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12061 = split(%12060, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12062 = %12061.3 /* ty=Tensor[(1, 1024), float32] */;
  %12063 = %12061.1 /* ty=Tensor[(1, 1024), float32] */;
  %12064 = sigmoid(%12063) /* ty=Tensor[(1, 1024), float32] */;
  %12065 = %12061.0 /* ty=Tensor[(1, 1024), float32] */;
  %12066 = %12061.2 /* ty=Tensor[(1, 1024), float32] */;
  %12067 = sigmoid(%12065) /* ty=Tensor[(1, 1024), float32] */;
  %12068 = tanh(%12066) /* ty=Tensor[(1, 1024), float32] */;
  %12069 = multiply(%12064, %12028) /* ty=Tensor[(1, 1024), float32] */;
  %12070 = multiply(%12067, %12068) /* ty=Tensor[(1, 1024), float32] */;
  %12071 = add(%12069, %12070) /* ty=Tensor[(1, 1024), float32] */;
  %12072 = sigmoid(%12062) /* ty=Tensor[(1, 1024), float32] */;
  %12073 = tanh(%12071) /* ty=Tensor[(1, 1024), float32] */;
  %12074 = multiply(%12072, %12073) /* ty=Tensor[(1, 1024), float32] */;
  %12075 = multiply(%12051, %12052) /* ty=Tensor[(1, 1024), float32] */;
  %12076 = (%12074, %12075) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12077 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12078 = concatenate(%12076, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12079 = concatenate(%12077, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12080 = nn.dense(%12078, %12079, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12081 = add(%12080, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12082 = add(%12081, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12083 = split(%12082, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12084 = %12083.3 /* ty=Tensor[(1, 1024), float32] */;
  %12085 = %12083.1 /* ty=Tensor[(1, 1024), float32] */;
  %12086 = sigmoid(%12085) /* ty=Tensor[(1, 1024), float32] */;
  %12087 = %12083.0 /* ty=Tensor[(1, 1024), float32] */;
  %12088 = %12083.2 /* ty=Tensor[(1, 1024), float32] */;
  %12089 = sigmoid(%12087) /* ty=Tensor[(1, 1024), float32] */;
  %12090 = tanh(%12088) /* ty=Tensor[(1, 1024), float32] */;
  %12091 = multiply(%12086, %12050) /* ty=Tensor[(1, 1024), float32] */;
  %12092 = multiply(%12089, %12090) /* ty=Tensor[(1, 1024), float32] */;
  %12093 = add(%12091, %12092) /* ty=Tensor[(1, 1024), float32] */;
  %12094 = sigmoid(%12084) /* ty=Tensor[(1, 1024), float32] */;
  %12095 = tanh(%12093) /* ty=Tensor[(1, 1024), float32] */;
  %12096 = %555.268 /* ty=Tensor[(1, 240), float32] */;
  %12097 = (%12096, %12074) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12098 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12099 = concatenate(%12097, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12100 = concatenate(%12098, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12101 = nn.dense(%12099, %12100, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12102 = add(%12101, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12103 = add(%12102, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12104 = split(%12103, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12105 = %12104.3 /* ty=Tensor[(1, 1024), float32] */;
  %12106 = %12104.1 /* ty=Tensor[(1, 1024), float32] */;
  %12107 = sigmoid(%12106) /* ty=Tensor[(1, 1024), float32] */;
  %12108 = %12104.0 /* ty=Tensor[(1, 1024), float32] */;
  %12109 = %12104.2 /* ty=Tensor[(1, 1024), float32] */;
  %12110 = sigmoid(%12108) /* ty=Tensor[(1, 1024), float32] */;
  %12111 = tanh(%12109) /* ty=Tensor[(1, 1024), float32] */;
  %12112 = multiply(%12107, %12071) /* ty=Tensor[(1, 1024), float32] */;
  %12113 = multiply(%12110, %12111) /* ty=Tensor[(1, 1024), float32] */;
  %12114 = add(%12112, %12113) /* ty=Tensor[(1, 1024), float32] */;
  %12115 = sigmoid(%12105) /* ty=Tensor[(1, 1024), float32] */;
  %12116 = tanh(%12114) /* ty=Tensor[(1, 1024), float32] */;
  %12117 = multiply(%12115, %12116) /* ty=Tensor[(1, 1024), float32] */;
  %12118 = multiply(%12094, %12095) /* ty=Tensor[(1, 1024), float32] */;
  %12119 = (%12117, %12118) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12120 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12121 = concatenate(%12119, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12122 = concatenate(%12120, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12123 = nn.dense(%12121, %12122, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12124 = add(%12123, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12125 = add(%12124, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12126 = split(%12125, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12127 = %12126.3 /* ty=Tensor[(1, 1024), float32] */;
  %12128 = %12126.1 /* ty=Tensor[(1, 1024), float32] */;
  %12129 = sigmoid(%12128) /* ty=Tensor[(1, 1024), float32] */;
  %12130 = %12126.0 /* ty=Tensor[(1, 1024), float32] */;
  %12131 = %12126.2 /* ty=Tensor[(1, 1024), float32] */;
  %12132 = sigmoid(%12130) /* ty=Tensor[(1, 1024), float32] */;
  %12133 = tanh(%12131) /* ty=Tensor[(1, 1024), float32] */;
  %12134 = multiply(%12129, %12093) /* ty=Tensor[(1, 1024), float32] */;
  %12135 = multiply(%12132, %12133) /* ty=Tensor[(1, 1024), float32] */;
  %12136 = add(%12134, %12135) /* ty=Tensor[(1, 1024), float32] */;
  %12137 = sigmoid(%12127) /* ty=Tensor[(1, 1024), float32] */;
  %12138 = tanh(%12136) /* ty=Tensor[(1, 1024), float32] */;
  %12139 = %555.269 /* ty=Tensor[(1, 240), float32] */;
  %12140 = (%12139, %12117) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12141 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12142 = concatenate(%12140, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12143 = concatenate(%12141, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12144 = nn.dense(%12142, %12143, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12145 = add(%12144, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12146 = add(%12145, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12147 = split(%12146, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12148 = %12147.3 /* ty=Tensor[(1, 1024), float32] */;
  %12149 = %12147.1 /* ty=Tensor[(1, 1024), float32] */;
  %12150 = sigmoid(%12149) /* ty=Tensor[(1, 1024), float32] */;
  %12151 = %12147.0 /* ty=Tensor[(1, 1024), float32] */;
  %12152 = %12147.2 /* ty=Tensor[(1, 1024), float32] */;
  %12153 = sigmoid(%12151) /* ty=Tensor[(1, 1024), float32] */;
  %12154 = tanh(%12152) /* ty=Tensor[(1, 1024), float32] */;
  %12155 = multiply(%12150, %12114) /* ty=Tensor[(1, 1024), float32] */;
  %12156 = multiply(%12153, %12154) /* ty=Tensor[(1, 1024), float32] */;
  %12157 = add(%12155, %12156) /* ty=Tensor[(1, 1024), float32] */;
  %12158 = sigmoid(%12148) /* ty=Tensor[(1, 1024), float32] */;
  %12159 = tanh(%12157) /* ty=Tensor[(1, 1024), float32] */;
  %12160 = multiply(%12158, %12159) /* ty=Tensor[(1, 1024), float32] */;
  %12161 = multiply(%12137, %12138) /* ty=Tensor[(1, 1024), float32] */;
  %12162 = (%12160, %12161) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12163 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12164 = concatenate(%12162, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12165 = concatenate(%12163, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12166 = nn.dense(%12164, %12165, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12167 = add(%12166, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12168 = add(%12167, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12169 = split(%12168, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12170 = %12169.3 /* ty=Tensor[(1, 1024), float32] */;
  %12171 = %12169.1 /* ty=Tensor[(1, 1024), float32] */;
  %12172 = sigmoid(%12171) /* ty=Tensor[(1, 1024), float32] */;
  %12173 = %12169.0 /* ty=Tensor[(1, 1024), float32] */;
  %12174 = %12169.2 /* ty=Tensor[(1, 1024), float32] */;
  %12175 = sigmoid(%12173) /* ty=Tensor[(1, 1024), float32] */;
  %12176 = tanh(%12174) /* ty=Tensor[(1, 1024), float32] */;
  %12177 = multiply(%12172, %12136) /* ty=Tensor[(1, 1024), float32] */;
  %12178 = multiply(%12175, %12176) /* ty=Tensor[(1, 1024), float32] */;
  %12179 = add(%12177, %12178) /* ty=Tensor[(1, 1024), float32] */;
  %12180 = sigmoid(%12170) /* ty=Tensor[(1, 1024), float32] */;
  %12181 = tanh(%12179) /* ty=Tensor[(1, 1024), float32] */;
  %12182 = %555.270 /* ty=Tensor[(1, 240), float32] */;
  %12183 = (%12182, %12160) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12184 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12185 = concatenate(%12183, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12186 = concatenate(%12184, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12187 = nn.dense(%12185, %12186, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12188 = add(%12187, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12189 = add(%12188, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12190 = split(%12189, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12191 = %12190.3 /* ty=Tensor[(1, 1024), float32] */;
  %12192 = %12190.1 /* ty=Tensor[(1, 1024), float32] */;
  %12193 = sigmoid(%12192) /* ty=Tensor[(1, 1024), float32] */;
  %12194 = %12190.0 /* ty=Tensor[(1, 1024), float32] */;
  %12195 = %12190.2 /* ty=Tensor[(1, 1024), float32] */;
  %12196 = sigmoid(%12194) /* ty=Tensor[(1, 1024), float32] */;
  %12197 = tanh(%12195) /* ty=Tensor[(1, 1024), float32] */;
  %12198 = multiply(%12193, %12157) /* ty=Tensor[(1, 1024), float32] */;
  %12199 = multiply(%12196, %12197) /* ty=Tensor[(1, 1024), float32] */;
  %12200 = add(%12198, %12199) /* ty=Tensor[(1, 1024), float32] */;
  %12201 = sigmoid(%12191) /* ty=Tensor[(1, 1024), float32] */;
  %12202 = tanh(%12200) /* ty=Tensor[(1, 1024), float32] */;
  %12203 = multiply(%12201, %12202) /* ty=Tensor[(1, 1024), float32] */;
  %12204 = multiply(%12180, %12181) /* ty=Tensor[(1, 1024), float32] */;
  %12205 = (%12203, %12204) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12206 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12207 = concatenate(%12205, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12208 = concatenate(%12206, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12209 = nn.dense(%12207, %12208, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12210 = add(%12209, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12211 = add(%12210, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12212 = split(%12211, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12213 = %12212.3 /* ty=Tensor[(1, 1024), float32] */;
  %12214 = %12212.1 /* ty=Tensor[(1, 1024), float32] */;
  %12215 = sigmoid(%12214) /* ty=Tensor[(1, 1024), float32] */;
  %12216 = %12212.0 /* ty=Tensor[(1, 1024), float32] */;
  %12217 = %12212.2 /* ty=Tensor[(1, 1024), float32] */;
  %12218 = sigmoid(%12216) /* ty=Tensor[(1, 1024), float32] */;
  %12219 = tanh(%12217) /* ty=Tensor[(1, 1024), float32] */;
  %12220 = multiply(%12215, %12179) /* ty=Tensor[(1, 1024), float32] */;
  %12221 = multiply(%12218, %12219) /* ty=Tensor[(1, 1024), float32] */;
  %12222 = add(%12220, %12221) /* ty=Tensor[(1, 1024), float32] */;
  %12223 = sigmoid(%12213) /* ty=Tensor[(1, 1024), float32] */;
  %12224 = tanh(%12222) /* ty=Tensor[(1, 1024), float32] */;
  %12225 = %555.271 /* ty=Tensor[(1, 240), float32] */;
  %12226 = (%12225, %12203) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12227 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12228 = concatenate(%12226, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12229 = concatenate(%12227, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12230 = nn.dense(%12228, %12229, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12231 = add(%12230, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12232 = add(%12231, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12233 = split(%12232, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12234 = %12233.3 /* ty=Tensor[(1, 1024), float32] */;
  %12235 = %12233.1 /* ty=Tensor[(1, 1024), float32] */;
  %12236 = sigmoid(%12235) /* ty=Tensor[(1, 1024), float32] */;
  %12237 = %12233.0 /* ty=Tensor[(1, 1024), float32] */;
  %12238 = %12233.2 /* ty=Tensor[(1, 1024), float32] */;
  %12239 = sigmoid(%12237) /* ty=Tensor[(1, 1024), float32] */;
  %12240 = tanh(%12238) /* ty=Tensor[(1, 1024), float32] */;
  %12241 = multiply(%12236, %12200) /* ty=Tensor[(1, 1024), float32] */;
  %12242 = multiply(%12239, %12240) /* ty=Tensor[(1, 1024), float32] */;
  %12243 = add(%12241, %12242) /* ty=Tensor[(1, 1024), float32] */;
  %12244 = sigmoid(%12234) /* ty=Tensor[(1, 1024), float32] */;
  %12245 = tanh(%12243) /* ty=Tensor[(1, 1024), float32] */;
  %12246 = multiply(%12244, %12245) /* ty=Tensor[(1, 1024), float32] */;
  %12247 = multiply(%12223, %12224) /* ty=Tensor[(1, 1024), float32] */;
  %12248 = (%12246, %12247) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12249 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12250 = concatenate(%12248, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12251 = concatenate(%12249, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12252 = nn.dense(%12250, %12251, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12253 = add(%12252, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12254 = add(%12253, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12255 = split(%12254, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12256 = %12255.3 /* ty=Tensor[(1, 1024), float32] */;
  %12257 = %12255.1 /* ty=Tensor[(1, 1024), float32] */;
  %12258 = sigmoid(%12257) /* ty=Tensor[(1, 1024), float32] */;
  %12259 = %12255.0 /* ty=Tensor[(1, 1024), float32] */;
  %12260 = %12255.2 /* ty=Tensor[(1, 1024), float32] */;
  %12261 = sigmoid(%12259) /* ty=Tensor[(1, 1024), float32] */;
  %12262 = tanh(%12260) /* ty=Tensor[(1, 1024), float32] */;
  %12263 = multiply(%12258, %12222) /* ty=Tensor[(1, 1024), float32] */;
  %12264 = multiply(%12261, %12262) /* ty=Tensor[(1, 1024), float32] */;
  %12265 = add(%12263, %12264) /* ty=Tensor[(1, 1024), float32] */;
  %12266 = sigmoid(%12256) /* ty=Tensor[(1, 1024), float32] */;
  %12267 = tanh(%12265) /* ty=Tensor[(1, 1024), float32] */;
  %12268 = %555.272 /* ty=Tensor[(1, 240), float32] */;
  %12269 = (%12268, %12246) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12270 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12271 = concatenate(%12269, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12272 = concatenate(%12270, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12273 = nn.dense(%12271, %12272, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12274 = add(%12273, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12275 = add(%12274, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12276 = split(%12275, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12277 = %12276.3 /* ty=Tensor[(1, 1024), float32] */;
  %12278 = %12276.1 /* ty=Tensor[(1, 1024), float32] */;
  %12279 = sigmoid(%12278) /* ty=Tensor[(1, 1024), float32] */;
  %12280 = %12276.0 /* ty=Tensor[(1, 1024), float32] */;
  %12281 = %12276.2 /* ty=Tensor[(1, 1024), float32] */;
  %12282 = sigmoid(%12280) /* ty=Tensor[(1, 1024), float32] */;
  %12283 = tanh(%12281) /* ty=Tensor[(1, 1024), float32] */;
  %12284 = multiply(%12279, %12243) /* ty=Tensor[(1, 1024), float32] */;
  %12285 = multiply(%12282, %12283) /* ty=Tensor[(1, 1024), float32] */;
  %12286 = add(%12284, %12285) /* ty=Tensor[(1, 1024), float32] */;
  %12287 = sigmoid(%12277) /* ty=Tensor[(1, 1024), float32] */;
  %12288 = tanh(%12286) /* ty=Tensor[(1, 1024), float32] */;
  %12289 = multiply(%12287, %12288) /* ty=Tensor[(1, 1024), float32] */;
  %12290 = multiply(%12266, %12267) /* ty=Tensor[(1, 1024), float32] */;
  %12291 = (%12289, %12290) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12292 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12293 = concatenate(%12291, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12294 = concatenate(%12292, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12295 = nn.dense(%12293, %12294, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12296 = add(%12295, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12297 = add(%12296, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12298 = split(%12297, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12299 = %12298.3 /* ty=Tensor[(1, 1024), float32] */;
  %12300 = %12298.1 /* ty=Tensor[(1, 1024), float32] */;
  %12301 = sigmoid(%12300) /* ty=Tensor[(1, 1024), float32] */;
  %12302 = %12298.0 /* ty=Tensor[(1, 1024), float32] */;
  %12303 = %12298.2 /* ty=Tensor[(1, 1024), float32] */;
  %12304 = sigmoid(%12302) /* ty=Tensor[(1, 1024), float32] */;
  %12305 = tanh(%12303) /* ty=Tensor[(1, 1024), float32] */;
  %12306 = multiply(%12301, %12265) /* ty=Tensor[(1, 1024), float32] */;
  %12307 = multiply(%12304, %12305) /* ty=Tensor[(1, 1024), float32] */;
  %12308 = add(%12306, %12307) /* ty=Tensor[(1, 1024), float32] */;
  %12309 = sigmoid(%12299) /* ty=Tensor[(1, 1024), float32] */;
  %12310 = tanh(%12308) /* ty=Tensor[(1, 1024), float32] */;
  %12311 = %555.273 /* ty=Tensor[(1, 240), float32] */;
  %12312 = (%12311, %12289) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12313 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12314 = concatenate(%12312, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12315 = concatenate(%12313, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12316 = nn.dense(%12314, %12315, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12317 = add(%12316, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12318 = add(%12317, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12319 = split(%12318, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12320 = %12319.3 /* ty=Tensor[(1, 1024), float32] */;
  %12321 = %12319.1 /* ty=Tensor[(1, 1024), float32] */;
  %12322 = sigmoid(%12321) /* ty=Tensor[(1, 1024), float32] */;
  %12323 = %12319.0 /* ty=Tensor[(1, 1024), float32] */;
  %12324 = %12319.2 /* ty=Tensor[(1, 1024), float32] */;
  %12325 = sigmoid(%12323) /* ty=Tensor[(1, 1024), float32] */;
  %12326 = tanh(%12324) /* ty=Tensor[(1, 1024), float32] */;
  %12327 = multiply(%12322, %12286) /* ty=Tensor[(1, 1024), float32] */;
  %12328 = multiply(%12325, %12326) /* ty=Tensor[(1, 1024), float32] */;
  %12329 = add(%12327, %12328) /* ty=Tensor[(1, 1024), float32] */;
  %12330 = sigmoid(%12320) /* ty=Tensor[(1, 1024), float32] */;
  %12331 = tanh(%12329) /* ty=Tensor[(1, 1024), float32] */;
  %12332 = multiply(%12330, %12331) /* ty=Tensor[(1, 1024), float32] */;
  %12333 = multiply(%12309, %12310) /* ty=Tensor[(1, 1024), float32] */;
  %12334 = (%12332, %12333) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12335 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12336 = concatenate(%12334, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12337 = concatenate(%12335, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12338 = nn.dense(%12336, %12337, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12339 = add(%12338, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12340 = add(%12339, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12341 = split(%12340, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12342 = %12341.3 /* ty=Tensor[(1, 1024), float32] */;
  %12343 = %12341.1 /* ty=Tensor[(1, 1024), float32] */;
  %12344 = sigmoid(%12343) /* ty=Tensor[(1, 1024), float32] */;
  %12345 = %12341.0 /* ty=Tensor[(1, 1024), float32] */;
  %12346 = %12341.2 /* ty=Tensor[(1, 1024), float32] */;
  %12347 = sigmoid(%12345) /* ty=Tensor[(1, 1024), float32] */;
  %12348 = tanh(%12346) /* ty=Tensor[(1, 1024), float32] */;
  %12349 = multiply(%12344, %12308) /* ty=Tensor[(1, 1024), float32] */;
  %12350 = multiply(%12347, %12348) /* ty=Tensor[(1, 1024), float32] */;
  %12351 = add(%12349, %12350) /* ty=Tensor[(1, 1024), float32] */;
  %12352 = sigmoid(%12342) /* ty=Tensor[(1, 1024), float32] */;
  %12353 = tanh(%12351) /* ty=Tensor[(1, 1024), float32] */;
  %12354 = %555.274 /* ty=Tensor[(1, 240), float32] */;
  %12355 = (%12354, %12332) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12356 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12357 = concatenate(%12355, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12358 = concatenate(%12356, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12359 = nn.dense(%12357, %12358, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12360 = add(%12359, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12361 = add(%12360, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12362 = split(%12361, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12363 = %12362.3 /* ty=Tensor[(1, 1024), float32] */;
  %12364 = %12362.1 /* ty=Tensor[(1, 1024), float32] */;
  %12365 = sigmoid(%12364) /* ty=Tensor[(1, 1024), float32] */;
  %12366 = %12362.0 /* ty=Tensor[(1, 1024), float32] */;
  %12367 = %12362.2 /* ty=Tensor[(1, 1024), float32] */;
  %12368 = sigmoid(%12366) /* ty=Tensor[(1, 1024), float32] */;
  %12369 = tanh(%12367) /* ty=Tensor[(1, 1024), float32] */;
  %12370 = multiply(%12365, %12329) /* ty=Tensor[(1, 1024), float32] */;
  %12371 = multiply(%12368, %12369) /* ty=Tensor[(1, 1024), float32] */;
  %12372 = add(%12370, %12371) /* ty=Tensor[(1, 1024), float32] */;
  %12373 = sigmoid(%12363) /* ty=Tensor[(1, 1024), float32] */;
  %12374 = tanh(%12372) /* ty=Tensor[(1, 1024), float32] */;
  %12375 = multiply(%12373, %12374) /* ty=Tensor[(1, 1024), float32] */;
  %12376 = multiply(%12352, %12353) /* ty=Tensor[(1, 1024), float32] */;
  %12377 = (%12375, %12376) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12378 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12379 = concatenate(%12377, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12380 = concatenate(%12378, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12381 = nn.dense(%12379, %12380, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12382 = add(%12381, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12383 = add(%12382, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12384 = split(%12383, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12385 = %12384.3 /* ty=Tensor[(1, 1024), float32] */;
  %12386 = %12384.1 /* ty=Tensor[(1, 1024), float32] */;
  %12387 = sigmoid(%12386) /* ty=Tensor[(1, 1024), float32] */;
  %12388 = %12384.0 /* ty=Tensor[(1, 1024), float32] */;
  %12389 = %12384.2 /* ty=Tensor[(1, 1024), float32] */;
  %12390 = sigmoid(%12388) /* ty=Tensor[(1, 1024), float32] */;
  %12391 = tanh(%12389) /* ty=Tensor[(1, 1024), float32] */;
  %12392 = multiply(%12387, %12351) /* ty=Tensor[(1, 1024), float32] */;
  %12393 = multiply(%12390, %12391) /* ty=Tensor[(1, 1024), float32] */;
  %12394 = add(%12392, %12393) /* ty=Tensor[(1, 1024), float32] */;
  %12395 = sigmoid(%12385) /* ty=Tensor[(1, 1024), float32] */;
  %12396 = tanh(%12394) /* ty=Tensor[(1, 1024), float32] */;
  %12397 = %555.275 /* ty=Tensor[(1, 240), float32] */;
  %12398 = (%12397, %12375) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12399 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12400 = concatenate(%12398, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12401 = concatenate(%12399, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12402 = nn.dense(%12400, %12401, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12403 = add(%12402, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12404 = add(%12403, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12405 = split(%12404, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12406 = %12405.3 /* ty=Tensor[(1, 1024), float32] */;
  %12407 = %12405.1 /* ty=Tensor[(1, 1024), float32] */;
  %12408 = sigmoid(%12407) /* ty=Tensor[(1, 1024), float32] */;
  %12409 = %12405.0 /* ty=Tensor[(1, 1024), float32] */;
  %12410 = %12405.2 /* ty=Tensor[(1, 1024), float32] */;
  %12411 = sigmoid(%12409) /* ty=Tensor[(1, 1024), float32] */;
  %12412 = tanh(%12410) /* ty=Tensor[(1, 1024), float32] */;
  %12413 = multiply(%12408, %12372) /* ty=Tensor[(1, 1024), float32] */;
  %12414 = multiply(%12411, %12412) /* ty=Tensor[(1, 1024), float32] */;
  %12415 = add(%12413, %12414) /* ty=Tensor[(1, 1024), float32] */;
  %12416 = sigmoid(%12406) /* ty=Tensor[(1, 1024), float32] */;
  %12417 = tanh(%12415) /* ty=Tensor[(1, 1024), float32] */;
  %12418 = multiply(%12416, %12417) /* ty=Tensor[(1, 1024), float32] */;
  %12419 = multiply(%12395, %12396) /* ty=Tensor[(1, 1024), float32] */;
  %12420 = (%12418, %12419) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12421 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12422 = concatenate(%12420, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12423 = concatenate(%12421, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12424 = nn.dense(%12422, %12423, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12425 = add(%12424, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12426 = add(%12425, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12427 = split(%12426, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12428 = %12427.3 /* ty=Tensor[(1, 1024), float32] */;
  %12429 = %12427.1 /* ty=Tensor[(1, 1024), float32] */;
  %12430 = sigmoid(%12429) /* ty=Tensor[(1, 1024), float32] */;
  %12431 = %12427.0 /* ty=Tensor[(1, 1024), float32] */;
  %12432 = %12427.2 /* ty=Tensor[(1, 1024), float32] */;
  %12433 = sigmoid(%12431) /* ty=Tensor[(1, 1024), float32] */;
  %12434 = tanh(%12432) /* ty=Tensor[(1, 1024), float32] */;
  %12435 = multiply(%12430, %12394) /* ty=Tensor[(1, 1024), float32] */;
  %12436 = multiply(%12433, %12434) /* ty=Tensor[(1, 1024), float32] */;
  %12437 = add(%12435, %12436) /* ty=Tensor[(1, 1024), float32] */;
  %12438 = sigmoid(%12428) /* ty=Tensor[(1, 1024), float32] */;
  %12439 = tanh(%12437) /* ty=Tensor[(1, 1024), float32] */;
  %12440 = %555.276 /* ty=Tensor[(1, 240), float32] */;
  %12441 = (%12440, %12418) /* ty=(Tensor[(1, 240), float32], Tensor[(1, 1024), float32]) */;
  %12442 = (%encoder.pre_rnn.lstm.weight_ih_l0, %encoder.pre_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 240), float32], Tensor[(4096, 1024), float32]) */;
  %12443 = concatenate(%12441, axis=1) /* ty=Tensor[(1, 1264), float32] */;
  %12444 = concatenate(%12442, axis=1) /* ty=Tensor[(4096, 1264), float32] */;
  %12445 = nn.dense(%12443, %12444, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12446 = add(%12445, %encoder.pre_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12447 = add(%12446, %encoder.pre_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12448 = split(%12447, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12449 = %12448.3 /* ty=Tensor[(1, 1024), float32] */;
  %12450 = %12448.1 /* ty=Tensor[(1, 1024), float32] */;
  %12451 = sigmoid(%12450) /* ty=Tensor[(1, 1024), float32] */;
  %12452 = %12448.0 /* ty=Tensor[(1, 1024), float32] */;
  %12453 = %12448.2 /* ty=Tensor[(1, 1024), float32] */;
  %12454 = sigmoid(%12452) /* ty=Tensor[(1, 1024), float32] */;
  %12455 = tanh(%12453) /* ty=Tensor[(1, 1024), float32] */;
  %12456 = multiply(%12451, %12415) /* ty=Tensor[(1, 1024), float32] */;
  %12457 = multiply(%12454, %12455) /* ty=Tensor[(1, 1024), float32] */;
  %12458 = add(%12456, %12457) /* ty=Tensor[(1, 1024), float32] */;
  %12459 = sigmoid(%12449) /* ty=Tensor[(1, 1024), float32] */;
  %12460 = tanh(%12458) /* ty=Tensor[(1, 1024), float32] */;
  %12461 = multiply(%12459, %12460) /* ty=Tensor[(1, 1024), float32] */;
  %12462 = multiply(%12438, %12439) /* ty=Tensor[(1, 1024), float32] */;
  %12463 = (%12461, %12462) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12464 = (%encoder.pre_rnn.lstm.weight_ih_l1, %encoder.pre_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12465 = concatenate(%12463, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12466 = concatenate(%12464, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12467 = nn.dense(%12465, %12466, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12468 = add(%12467, %encoder.pre_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12469 = add(%12468, %encoder.pre_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12470 = split(%12469, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12471 = %12470.3 /* ty=Tensor[(1, 1024), float32] */;
  %12472 = %12470.1 /* ty=Tensor[(1, 1024), float32] */;
  %12473 = sigmoid(%12472) /* ty=Tensor[(1, 1024), float32] */;
  %12474 = %12470.0 /* ty=Tensor[(1, 1024), float32] */;
  %12475 = %12470.2 /* ty=Tensor[(1, 1024), float32] */;
  %12476 = sigmoid(%12474) /* ty=Tensor[(1, 1024), float32] */;
  %12477 = tanh(%12475) /* ty=Tensor[(1, 1024), float32] */;
  %12478 = multiply(%12473, %12437) /* ty=Tensor[(1, 1024), float32] */;
  %12479 = multiply(%12476, %12477) /* ty=Tensor[(1, 1024), float32] */;
  %12480 = add(%12478, %12479) /* ty=Tensor[(1, 1024), float32] */;
  %12481 = sigmoid(%12471) /* ty=Tensor[(1, 1024), float32] */;
  %12482 = tanh(%12480) /* ty=Tensor[(1, 1024), float32] */;
  %12483 = multiply(%12481, %12482) /* ty=Tensor[(1, 1024), float32] */;
  %12484 = (%637, %680, %723, %766, %809, %852, %895, %938, %981, %1024, %1067, %1110, %1153, %1196, %1239, %1282, %1325, %1368, %1411, %1454, %1497, %1540, %1583, %1626, %1669, %1712, %1755, %1798, %1841, %1884, %1927, %1970, %2013, %2056, %2099, %2142, %2185, %2228, %2271, %2314, %2357, %2400, %2443, %2486, %2529, %2572, %2615, %2658, %2701, %2744, %2787, %2830, %2873, %2916, %2959, %3002, %3045, %3088, %3131, %3174, %3217, %3260, %3303, %3346, %3389, %3432, %3475, %3518, %3561, %3604, %3647, %3690, %3733, %3776, %3819, %3862, %3905, %3948, %3991, %4034, %4077, %4120, %4163, %4206, %4249, %4292, %4335, %4378, %4421, %4464, %4507, %4550, %4593, %4636, %4679, %4722, %4765, %4808, %4851, %4894, %4937, %4980, %5023, %5066, %5109, %5152, %5195, %5238, %5281, %5324, %5367, %5410, %5453, %5496, %5539, %5582, %5625, %5668, %5711, %5754, %5797, %5840, %5883, %5926, %5969, %6012, %6055, %6098, %6141, %6184, %6227, %6270, %6313, %6356, %6399, %6442, %6485, %6528, %6571, %6614, %6657, %6700, %6743, %6786, %6829, %6872, %6915, %6958, %7001, %7044, %7087, %7130, %7173, %7216, %7259, %7302, %7345, %7388, %7431, %7474, %7517, %7560, %7603, %7646, %7689, %7732, %7775, %7818, %7861, %7904, %7947, %7990, %8033, %8076, %8119, %8162, %8205, %8248, %8291, %8334, %8377, %8420, %8463, %8506, %8549, %8592, %8635, %8678, %8721, %8764, %8807, %8850, %8893, %8936, %8979, %9022, %9065, %9108, %9151, %9194, %9237, %9280, %9323, %9366, %9409, %9452, %9495, %9538, %9581, %9624, %9667, %9710, %9753, %9796, %9839, %9882, %9925, %9968, %10011, %10054, %10097, %10140, %10183, %10226, %10269, %10312, %10355, %10398, %10441, %10484, %10527, %10570, %10613, %10656, %10699, %10742, %10785, %10828, %10871, %10914, %10957, %11000, %11043, %11086, %11129, %11172, %11215, %11258, %11301, %11344, %11387, %11430, %11473, %11516, %11559, %11602, %11645, %11688, %11731, %11774, %11817, %11860, %11903, %11946, %11989, %12032, %12075, %12118, %12161, %12204, %12247, %12290, %12333, %12376, %12419, %12462, %12483) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12485 = stack(%12484) /* ty=Tensor[(277, 1, 1024), float32] */;
  %12486 = nn.dropout(%12485, rate=0.1f) /* ty=(Tensor[(277, 1, 1024), float32], Tensor[(277, 1, 1024), float32]) */;
  %12487 = %12486.0 /* ty=Tensor[(277, 1, 1024), float32] */;
  %12488 = cast(277 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %12489 = arange(0i64 /* ty=int64 */, %12488, 1i64 /* ty=int64 */, start=meta[relay.Constant][0], stop=meta[relay.Call][0], step=meta[relay.Constant][1], dtype="int64") /* ty=Tensor[(?), int64] */;
  %12490 = strided_slice(%12489, begin=[0], end=[-1], strides=[1], axes=None) /* ty=Tensor[(?), int64] */;
  %12491 = cast(1 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %12492 = arange(0i64 /* ty=int64 */, %12491, 1i64 /* ty=int64 */, start=meta[relay.Constant][2], stop=meta[relay.Call][1], step=meta[relay.Constant][3], dtype="int64") /* ty=Tensor[(?), int64] */;
  %12493 = cast(1024 /* ty=int32 */, dtype="int64") /* ty=int64 */;
  %12494 = arange(0i64 /* ty=int64 */, %12493, 1i64 /* ty=int64 */, start=meta[relay.Constant][4], stop=meta[relay.Call][2], step=meta[relay.Constant][5], dtype="int64") /* ty=Tensor[(?), int64] */;
  %12495 = reshape(%12490, newshape=[3]) /* ty=Tensor[(3), int64] */;
  %12496 = reshape(%12492, newshape=[2]) /* ty=Tensor[(2), int64] */;
  %12497 = reshape(%12494, newshape=[1]) /* ty=Tensor[(1), int64] */;
  %12498 = (%12495, %12496, %12497) /* ty=(Tensor[(3), int64], Tensor[(2), int64], Tensor[(1), int64]) */;
  %12499 = strided_slice(%12487, begin=[1, 0, 0], end=[277, 1, 1024], strides=[1, 1, 1], axes=None) /* ty=Tensor[(276, 1, 1024), float32] */;
  %12500 = zeros_like(%12487) /* ty=Tensor[(277, 1, 1024), float32] */;
  %12501 = reshape(%12499, newshape=[276, 1, 1024]) /* ty=Tensor[(276, 1, 1024), float32] */;
  %12502 = strided_slice(%12500, begin=[0, 0, 0], end=[-1, 1, 1024], strides=[1, 1, 1], axes=None) /* ty=Tensor[(276, 1, 1024), float32] */;
  %12503 = stack(%12498) /* ty=Tensor[(3, 3), int64] */;
  %12504 = broadcast_to_like(%12501, %12502) /* ty=Tensor[(276, 1, 1024), float32] */;
  %12505 = scatter_nd(%12500, %12503, %12504, mode="update") /* ty=Tensor[(277, 1, 1024), float32] */;
  %12506 = (%12487, %12505) /* ty=(Tensor[(277, 1, 1024), float32], Tensor[(277, 1, 1024), float32]) */;
  %12507 = concatenate(%12506, axis=2) /* ty=Tensor[(277, 1, 2048), float32] */;
  %12508 = strided_slice(%12507, begin=[0, 0, 0], end=[277, 1, 2048], strides=[2, 1, 1], axes=None) /* ty=Tensor[(139, 1, 2048), float32] */;
  %12509 = split(%12508, indices_or_sections=139) /* ty=(Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32], Tensor[(1, 1, 2048), float32]) */;
  %12510 = %12509.0 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12511 = %12509.1 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12512 = %12509.2 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12513 = %12509.3 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12514 = %12509.4 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12515 = %12509.5 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12516 = %12509.6 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12517 = %12509.7 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12518 = %12509.8 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12519 = %12509.9 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12520 = %12509.10 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12521 = %12509.11 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12522 = %12509.12 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12523 = %12509.13 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12524 = %12509.14 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12525 = %12509.15 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12526 = %12509.16 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12527 = %12509.17 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12528 = %12509.18 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12529 = %12509.19 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12530 = %12509.20 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12531 = %12509.21 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12532 = %12509.22 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12533 = %12509.23 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12534 = %12509.24 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12535 = %12509.25 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12536 = %12509.26 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12537 = %12509.27 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12538 = %12509.28 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12539 = %12509.29 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12540 = %12509.30 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12541 = %12509.31 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12542 = %12509.32 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12543 = %12509.33 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12544 = %12509.34 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12545 = %12509.35 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12546 = %12509.36 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12547 = %12509.37 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12548 = %12509.38 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12549 = %12509.39 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12550 = %12509.40 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12551 = %12509.41 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12552 = %12509.42 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12553 = %12509.43 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12554 = %12509.44 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12555 = %12509.45 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12556 = %12509.46 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12557 = %12509.47 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12558 = %12509.48 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12559 = %12509.49 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12560 = %12509.50 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12561 = %12509.51 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12562 = %12509.52 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12563 = %12509.53 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12564 = %12509.54 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12565 = %12509.55 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12566 = %12509.56 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12567 = %12509.57 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12568 = %12509.58 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12569 = %12509.59 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12570 = %12509.60 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12571 = %12509.61 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12572 = %12509.62 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12573 = %12509.63 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12574 = %12509.64 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12575 = %12509.65 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12576 = %12509.66 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12577 = %12509.67 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12578 = %12509.68 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12579 = %12509.69 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12580 = %12509.70 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12581 = %12509.71 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12582 = %12509.72 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12583 = %12509.73 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12584 = %12509.74 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12585 = %12509.75 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12586 = %12509.76 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12587 = %12509.77 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12588 = %12509.78 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12589 = %12509.79 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12590 = %12509.80 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12591 = %12509.81 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12592 = %12509.82 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12593 = %12509.83 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12594 = %12509.84 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12595 = %12509.85 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12596 = %12509.86 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12597 = %12509.87 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12598 = %12509.88 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12599 = %12509.89 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12600 = %12509.90 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12601 = %12509.91 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12602 = %12509.92 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12603 = %12509.93 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12604 = %12509.94 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12605 = %12509.95 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12606 = %12509.96 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12607 = %12509.97 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12608 = %12509.98 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12609 = %12509.99 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12610 = %12509.100 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12611 = %12509.101 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12612 = %12509.102 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12613 = %12509.103 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12614 = %12509.104 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12615 = %12509.105 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12616 = %12509.106 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12617 = %12509.107 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12618 = %12509.108 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12619 = %12509.109 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12620 = %12509.110 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12621 = %12509.111 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12622 = %12509.112 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12623 = %12509.113 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12624 = %12509.114 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12625 = %12509.115 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12626 = %12509.116 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12627 = %12509.117 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12628 = %12509.118 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12629 = %12509.119 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12630 = %12509.120 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12631 = %12509.121 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12632 = %12509.122 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12633 = %12509.123 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12634 = %12509.124 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12635 = %12509.125 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12636 = %12509.126 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12637 = %12509.127 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12638 = %12509.128 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12639 = %12509.129 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12640 = %12509.130 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12641 = %12509.131 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12642 = %12509.132 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12643 = %12509.133 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12644 = %12509.134 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12645 = %12509.135 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12646 = %12509.136 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12647 = %12509.137 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12648 = %12509.138 /* ty=Tensor[(1, 1, 2048), float32] */;
  %12649 = squeeze(%12510, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12650 = squeeze(%12511, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12651 = squeeze(%12512, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12652 = squeeze(%12513, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12653 = squeeze(%12514, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12654 = squeeze(%12515, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12655 = squeeze(%12516, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12656 = squeeze(%12517, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12657 = squeeze(%12518, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12658 = squeeze(%12519, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12659 = squeeze(%12520, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12660 = squeeze(%12521, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12661 = squeeze(%12522, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12662 = squeeze(%12523, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12663 = squeeze(%12524, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12664 = squeeze(%12525, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12665 = squeeze(%12526, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12666 = squeeze(%12527, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12667 = squeeze(%12528, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12668 = squeeze(%12529, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12669 = squeeze(%12530, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12670 = squeeze(%12531, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12671 = squeeze(%12532, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12672 = squeeze(%12533, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12673 = squeeze(%12534, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12674 = squeeze(%12535, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12675 = squeeze(%12536, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12676 = squeeze(%12537, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12677 = squeeze(%12538, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12678 = squeeze(%12539, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12679 = squeeze(%12540, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12680 = squeeze(%12541, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12681 = squeeze(%12542, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12682 = squeeze(%12543, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12683 = squeeze(%12544, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12684 = squeeze(%12545, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12685 = squeeze(%12546, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12686 = squeeze(%12547, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12687 = squeeze(%12548, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12688 = squeeze(%12549, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12689 = squeeze(%12550, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12690 = squeeze(%12551, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12691 = squeeze(%12552, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12692 = squeeze(%12553, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12693 = squeeze(%12554, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12694 = squeeze(%12555, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12695 = squeeze(%12556, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12696 = squeeze(%12557, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12697 = squeeze(%12558, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12698 = squeeze(%12559, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12699 = squeeze(%12560, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12700 = squeeze(%12561, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12701 = squeeze(%12562, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12702 = squeeze(%12563, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12703 = squeeze(%12564, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12704 = squeeze(%12565, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12705 = squeeze(%12566, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12706 = squeeze(%12567, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12707 = squeeze(%12568, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12708 = squeeze(%12569, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12709 = squeeze(%12570, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12710 = squeeze(%12571, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12711 = squeeze(%12572, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12712 = squeeze(%12573, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12713 = squeeze(%12574, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12714 = squeeze(%12575, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12715 = squeeze(%12576, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12716 = squeeze(%12577, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12717 = squeeze(%12578, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12718 = squeeze(%12579, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12719 = squeeze(%12580, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12720 = squeeze(%12581, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12721 = squeeze(%12582, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12722 = squeeze(%12583, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12723 = squeeze(%12584, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12724 = squeeze(%12585, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12725 = squeeze(%12586, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12726 = squeeze(%12587, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12727 = squeeze(%12588, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12728 = squeeze(%12589, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12729 = squeeze(%12590, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12730 = squeeze(%12591, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12731 = squeeze(%12592, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12732 = squeeze(%12593, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12733 = squeeze(%12594, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12734 = squeeze(%12595, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12735 = squeeze(%12596, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12736 = squeeze(%12597, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12737 = squeeze(%12598, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12738 = squeeze(%12599, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12739 = squeeze(%12600, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12740 = squeeze(%12601, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12741 = squeeze(%12602, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12742 = squeeze(%12603, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12743 = squeeze(%12604, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12744 = squeeze(%12605, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12745 = squeeze(%12606, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12746 = squeeze(%12607, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12747 = squeeze(%12608, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12748 = squeeze(%12609, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12749 = squeeze(%12610, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12750 = squeeze(%12611, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12751 = squeeze(%12612, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12752 = squeeze(%12613, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12753 = squeeze(%12614, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12754 = squeeze(%12615, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12755 = squeeze(%12616, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12756 = squeeze(%12617, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12757 = squeeze(%12618, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12758 = squeeze(%12619, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12759 = squeeze(%12620, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12760 = squeeze(%12621, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12761 = squeeze(%12622, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12762 = squeeze(%12623, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12763 = squeeze(%12624, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12764 = squeeze(%12625, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12765 = squeeze(%12626, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12766 = squeeze(%12627, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12767 = squeeze(%12628, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12768 = squeeze(%12629, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12769 = squeeze(%12630, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12770 = squeeze(%12631, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12771 = squeeze(%12632, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12772 = squeeze(%12633, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12773 = squeeze(%12634, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12774 = squeeze(%12635, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12775 = squeeze(%12636, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12776 = squeeze(%12637, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12777 = squeeze(%12638, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12778 = squeeze(%12639, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12779 = squeeze(%12640, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12780 = squeeze(%12641, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12781 = squeeze(%12642, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12782 = squeeze(%12643, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12783 = squeeze(%12644, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12784 = squeeze(%12645, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12785 = squeeze(%12646, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12786 = squeeze(%12647, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12787 = squeeze(%12648, axis=[0]) /* ty=Tensor[(1, 2048), float32] */;
  %12788 = (%12649, %12650, %12651, %12652, %12653, %12654, %12655, %12656, %12657, %12658, %12659, %12660, %12661, %12662, %12663, %12664, %12665, %12666, %12667, %12668, %12669, %12670, %12671, %12672, %12673, %12674, %12675, %12676, %12677, %12678, %12679, %12680, %12681, %12682, %12683, %12684, %12685, %12686, %12687, %12688, %12689, %12690, %12691, %12692, %12693, %12694, %12695, %12696, %12697, %12698, %12699, %12700, %12701, %12702, %12703, %12704, %12705, %12706, %12707, %12708, %12709, %12710, %12711, %12712, %12713, %12714, %12715, %12716, %12717, %12718, %12719, %12720, %12721, %12722, %12723, %12724, %12725, %12726, %12727, %12728, %12729, %12730, %12731, %12732, %12733, %12734, %12735, %12736, %12737, %12738, %12739, %12740, %12741, %12742, %12743, %12744, %12745, %12746, %12747, %12748, %12749, %12750, %12751, %12752, %12753, %12754, %12755, %12756, %12757, %12758, %12759, %12760, %12761, %12762, %12763, %12764, %12765, %12766, %12767, %12768, %12769, %12770, %12771, %12772, %12773, %12774, %12775, %12776, %12777, %12778, %12779, %12780, %12781, %12782, %12783, %12784, %12785, %12786, %12787) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32], Tensor[(1, 2048), float32]) */;
  %12789 = full(0f /* ty=float32 */, shape=[3, 1, 1024], dtype="float32") /* ty=Tensor[(3, 1, 1024), float32] */;
  %12790 = split(%12789, indices_or_sections=3) /* ty=(Tensor[(1, 1, 1024), float32], Tensor[(1, 1, 1024), float32], Tensor[(1, 1, 1024), float32]) */;
  %12791 = %12790.0 /* ty=Tensor[(1, 1, 1024), float32] */;
  %12792 = %12790.1 /* ty=Tensor[(1, 1, 1024), float32] */;
  %12793 = %12790.2 /* ty=Tensor[(1, 1, 1024), float32] */;
  %12794 = squeeze(%12791, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %12795 = squeeze(%12792, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %12796 = squeeze(%12793, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %12797 = (%12794, %12795, %12796) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12798 = %12788.0 /* ty=Tensor[(1, 2048), float32] */;
  %12799 = %12797.0 /* ty=Tensor[(1, 1024), float32] */;
  %12800 = (%12798, %12799) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %12801 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %12802 = concatenate(%12800, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %12803 = concatenate(%12801, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %12804 = nn.dense(%12802, %12803, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12805 = add(%12804, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12806 = add(%12805, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12807 = split(%12806, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12808 = %12807.3 /* ty=Tensor[(1, 1024), float32] */;
  %12809 = %12807.1 /* ty=Tensor[(1, 1024), float32] */;
  %12810 = split(%12789, indices_or_sections=3) /* ty=(Tensor[(1, 1, 1024), float32], Tensor[(1, 1, 1024), float32], Tensor[(1, 1, 1024), float32]) */;
  %12811 = %12810.0 /* ty=Tensor[(1, 1, 1024), float32] */;
  %12812 = %12810.1 /* ty=Tensor[(1, 1, 1024), float32] */;
  %12813 = %12810.2 /* ty=Tensor[(1, 1, 1024), float32] */;
  %12814 = squeeze(%12811, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %12815 = squeeze(%12812, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %12816 = squeeze(%12813, axis=[0]) /* ty=Tensor[(1, 1024), float32] */;
  %12817 = (%12814, %12815, %12816) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12818 = sigmoid(%12809) /* ty=Tensor[(1, 1024), float32] */;
  %12819 = %12817.0 /* ty=Tensor[(1, 1024), float32] */;
  %12820 = %12807.0 /* ty=Tensor[(1, 1024), float32] */;
  %12821 = %12807.2 /* ty=Tensor[(1, 1024), float32] */;
  %12822 = sigmoid(%12820) /* ty=Tensor[(1, 1024), float32] */;
  %12823 = tanh(%12821) /* ty=Tensor[(1, 1024), float32] */;
  %12824 = multiply(%12818, %12819) /* ty=Tensor[(1, 1024), float32] */;
  %12825 = multiply(%12822, %12823) /* ty=Tensor[(1, 1024), float32] */;
  %12826 = add(%12824, %12825) /* ty=Tensor[(1, 1024), float32] */;
  %12827 = sigmoid(%12808) /* ty=Tensor[(1, 1024), float32] */;
  %12828 = tanh(%12826) /* ty=Tensor[(1, 1024), float32] */;
  %12829 = multiply(%12827, %12828) /* ty=Tensor[(1, 1024), float32] */;
  %12830 = %12797.1 /* ty=Tensor[(1, 1024), float32] */;
  %12831 = (%12829, %12830) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12832 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12833 = concatenate(%12831, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12834 = concatenate(%12832, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12835 = nn.dense(%12833, %12834, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12836 = add(%12835, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12837 = add(%12836, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12838 = split(%12837, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12839 = %12838.3 /* ty=Tensor[(1, 1024), float32] */;
  %12840 = %12838.1 /* ty=Tensor[(1, 1024), float32] */;
  %12841 = sigmoid(%12840) /* ty=Tensor[(1, 1024), float32] */;
  %12842 = %12817.1 /* ty=Tensor[(1, 1024), float32] */;
  %12843 = %12838.0 /* ty=Tensor[(1, 1024), float32] */;
  %12844 = %12838.2 /* ty=Tensor[(1, 1024), float32] */;
  %12845 = sigmoid(%12843) /* ty=Tensor[(1, 1024), float32] */;
  %12846 = tanh(%12844) /* ty=Tensor[(1, 1024), float32] */;
  %12847 = multiply(%12841, %12842) /* ty=Tensor[(1, 1024), float32] */;
  %12848 = multiply(%12845, %12846) /* ty=Tensor[(1, 1024), float32] */;
  %12849 = add(%12847, %12848) /* ty=Tensor[(1, 1024), float32] */;
  %12850 = sigmoid(%12839) /* ty=Tensor[(1, 1024), float32] */;
  %12851 = tanh(%12849) /* ty=Tensor[(1, 1024), float32] */;
  %12852 = multiply(%12850, %12851) /* ty=Tensor[(1, 1024), float32] */;
  %12853 = %12797.2 /* ty=Tensor[(1, 1024), float32] */;
  %12854 = (%12852, %12853) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12855 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12856 = concatenate(%12854, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12857 = concatenate(%12855, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12858 = nn.dense(%12856, %12857, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12859 = add(%12858, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %12860 = add(%12859, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %12861 = split(%12860, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12862 = %12861.3 /* ty=Tensor[(1, 1024), float32] */;
  %12863 = %12861.1 /* ty=Tensor[(1, 1024), float32] */;
  %12864 = sigmoid(%12863) /* ty=Tensor[(1, 1024), float32] */;
  %12865 = %12817.2 /* ty=Tensor[(1, 1024), float32] */;
  %12866 = %12861.0 /* ty=Tensor[(1, 1024), float32] */;
  %12867 = %12861.2 /* ty=Tensor[(1, 1024), float32] */;
  %12868 = sigmoid(%12866) /* ty=Tensor[(1, 1024), float32] */;
  %12869 = tanh(%12867) /* ty=Tensor[(1, 1024), float32] */;
  %12870 = multiply(%12864, %12865) /* ty=Tensor[(1, 1024), float32] */;
  %12871 = multiply(%12868, %12869) /* ty=Tensor[(1, 1024), float32] */;
  %12872 = add(%12870, %12871) /* ty=Tensor[(1, 1024), float32] */;
  %12873 = sigmoid(%12862) /* ty=Tensor[(1, 1024), float32] */;
  %12874 = tanh(%12872) /* ty=Tensor[(1, 1024), float32] */;
  %12875 = %12788.1 /* ty=Tensor[(1, 2048), float32] */;
  %12876 = (%12875, %12829) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %12877 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %12878 = concatenate(%12876, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %12879 = concatenate(%12877, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %12880 = nn.dense(%12878, %12879, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12881 = add(%12880, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12882 = add(%12881, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12883 = split(%12882, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12884 = %12883.3 /* ty=Tensor[(1, 1024), float32] */;
  %12885 = %12883.1 /* ty=Tensor[(1, 1024), float32] */;
  %12886 = sigmoid(%12885) /* ty=Tensor[(1, 1024), float32] */;
  %12887 = %12883.0 /* ty=Tensor[(1, 1024), float32] */;
  %12888 = %12883.2 /* ty=Tensor[(1, 1024), float32] */;
  %12889 = sigmoid(%12887) /* ty=Tensor[(1, 1024), float32] */;
  %12890 = tanh(%12888) /* ty=Tensor[(1, 1024), float32] */;
  %12891 = multiply(%12886, %12826) /* ty=Tensor[(1, 1024), float32] */;
  %12892 = multiply(%12889, %12890) /* ty=Tensor[(1, 1024), float32] */;
  %12893 = add(%12891, %12892) /* ty=Tensor[(1, 1024), float32] */;
  %12894 = sigmoid(%12884) /* ty=Tensor[(1, 1024), float32] */;
  %12895 = tanh(%12893) /* ty=Tensor[(1, 1024), float32] */;
  %12896 = multiply(%12894, %12895) /* ty=Tensor[(1, 1024), float32] */;
  %12897 = (%12896, %12852) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12898 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12899 = concatenate(%12897, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12900 = concatenate(%12898, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12901 = nn.dense(%12899, %12900, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12902 = add(%12901, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12903 = add(%12902, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12904 = split(%12903, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12905 = %12904.3 /* ty=Tensor[(1, 1024), float32] */;
  %12906 = %12904.1 /* ty=Tensor[(1, 1024), float32] */;
  %12907 = sigmoid(%12906) /* ty=Tensor[(1, 1024), float32] */;
  %12908 = %12904.0 /* ty=Tensor[(1, 1024), float32] */;
  %12909 = %12904.2 /* ty=Tensor[(1, 1024), float32] */;
  %12910 = sigmoid(%12908) /* ty=Tensor[(1, 1024), float32] */;
  %12911 = tanh(%12909) /* ty=Tensor[(1, 1024), float32] */;
  %12912 = multiply(%12907, %12849) /* ty=Tensor[(1, 1024), float32] */;
  %12913 = multiply(%12910, %12911) /* ty=Tensor[(1, 1024), float32] */;
  %12914 = add(%12912, %12913) /* ty=Tensor[(1, 1024), float32] */;
  %12915 = sigmoid(%12905) /* ty=Tensor[(1, 1024), float32] */;
  %12916 = tanh(%12914) /* ty=Tensor[(1, 1024), float32] */;
  %12917 = multiply(%12915, %12916) /* ty=Tensor[(1, 1024), float32] */;
  %12918 = multiply(%12873, %12874) /* ty=Tensor[(1, 1024), float32] */;
  %12919 = (%12917, %12918) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12920 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12921 = concatenate(%12919, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12922 = concatenate(%12920, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12923 = nn.dense(%12921, %12922, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12924 = add(%12923, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %12925 = add(%12924, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %12926 = split(%12925, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12927 = %12926.3 /* ty=Tensor[(1, 1024), float32] */;
  %12928 = %12926.1 /* ty=Tensor[(1, 1024), float32] */;
  %12929 = sigmoid(%12928) /* ty=Tensor[(1, 1024), float32] */;
  %12930 = %12926.0 /* ty=Tensor[(1, 1024), float32] */;
  %12931 = %12926.2 /* ty=Tensor[(1, 1024), float32] */;
  %12932 = sigmoid(%12930) /* ty=Tensor[(1, 1024), float32] */;
  %12933 = tanh(%12931) /* ty=Tensor[(1, 1024), float32] */;
  %12934 = multiply(%12929, %12872) /* ty=Tensor[(1, 1024), float32] */;
  %12935 = multiply(%12932, %12933) /* ty=Tensor[(1, 1024), float32] */;
  %12936 = add(%12934, %12935) /* ty=Tensor[(1, 1024), float32] */;
  %12937 = sigmoid(%12927) /* ty=Tensor[(1, 1024), float32] */;
  %12938 = tanh(%12936) /* ty=Tensor[(1, 1024), float32] */;
  %12939 = %12788.2 /* ty=Tensor[(1, 2048), float32] */;
  %12940 = (%12939, %12896) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %12941 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %12942 = concatenate(%12940, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %12943 = concatenate(%12941, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %12944 = nn.dense(%12942, %12943, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12945 = add(%12944, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12946 = add(%12945, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %12947 = split(%12946, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12948 = %12947.3 /* ty=Tensor[(1, 1024), float32] */;
  %12949 = %12947.1 /* ty=Tensor[(1, 1024), float32] */;
  %12950 = sigmoid(%12949) /* ty=Tensor[(1, 1024), float32] */;
  %12951 = %12947.0 /* ty=Tensor[(1, 1024), float32] */;
  %12952 = %12947.2 /* ty=Tensor[(1, 1024), float32] */;
  %12953 = sigmoid(%12951) /* ty=Tensor[(1, 1024), float32] */;
  %12954 = tanh(%12952) /* ty=Tensor[(1, 1024), float32] */;
  %12955 = multiply(%12950, %12893) /* ty=Tensor[(1, 1024), float32] */;
  %12956 = multiply(%12953, %12954) /* ty=Tensor[(1, 1024), float32] */;
  %12957 = add(%12955, %12956) /* ty=Tensor[(1, 1024), float32] */;
  %12958 = sigmoid(%12948) /* ty=Tensor[(1, 1024), float32] */;
  %12959 = tanh(%12957) /* ty=Tensor[(1, 1024), float32] */;
  %12960 = multiply(%12958, %12959) /* ty=Tensor[(1, 1024), float32] */;
  %12961 = (%12960, %12917) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12962 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12963 = concatenate(%12961, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12964 = concatenate(%12962, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12965 = nn.dense(%12963, %12964, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12966 = add(%12965, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12967 = add(%12966, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %12968 = split(%12967, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12969 = %12968.3 /* ty=Tensor[(1, 1024), float32] */;
  %12970 = %12968.1 /* ty=Tensor[(1, 1024), float32] */;
  %12971 = sigmoid(%12970) /* ty=Tensor[(1, 1024), float32] */;
  %12972 = %12968.0 /* ty=Tensor[(1, 1024), float32] */;
  %12973 = %12968.2 /* ty=Tensor[(1, 1024), float32] */;
  %12974 = sigmoid(%12972) /* ty=Tensor[(1, 1024), float32] */;
  %12975 = tanh(%12973) /* ty=Tensor[(1, 1024), float32] */;
  %12976 = multiply(%12971, %12914) /* ty=Tensor[(1, 1024), float32] */;
  %12977 = multiply(%12974, %12975) /* ty=Tensor[(1, 1024), float32] */;
  %12978 = add(%12976, %12977) /* ty=Tensor[(1, 1024), float32] */;
  %12979 = sigmoid(%12969) /* ty=Tensor[(1, 1024), float32] */;
  %12980 = tanh(%12978) /* ty=Tensor[(1, 1024), float32] */;
  %12981 = multiply(%12979, %12980) /* ty=Tensor[(1, 1024), float32] */;
  %12982 = multiply(%12937, %12938) /* ty=Tensor[(1, 1024), float32] */;
  %12983 = (%12981, %12982) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12984 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %12985 = concatenate(%12983, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %12986 = concatenate(%12984, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %12987 = nn.dense(%12985, %12986, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %12988 = add(%12987, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %12989 = add(%12988, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %12990 = split(%12989, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %12991 = %12990.3 /* ty=Tensor[(1, 1024), float32] */;
  %12992 = %12990.1 /* ty=Tensor[(1, 1024), float32] */;
  %12993 = sigmoid(%12992) /* ty=Tensor[(1, 1024), float32] */;
  %12994 = %12990.0 /* ty=Tensor[(1, 1024), float32] */;
  %12995 = %12990.2 /* ty=Tensor[(1, 1024), float32] */;
  %12996 = sigmoid(%12994) /* ty=Tensor[(1, 1024), float32] */;
  %12997 = tanh(%12995) /* ty=Tensor[(1, 1024), float32] */;
  %12998 = multiply(%12993, %12936) /* ty=Tensor[(1, 1024), float32] */;
  %12999 = multiply(%12996, %12997) /* ty=Tensor[(1, 1024), float32] */;
  %13000 = add(%12998, %12999) /* ty=Tensor[(1, 1024), float32] */;
  %13001 = sigmoid(%12991) /* ty=Tensor[(1, 1024), float32] */;
  %13002 = tanh(%13000) /* ty=Tensor[(1, 1024), float32] */;
  %13003 = %12788.3 /* ty=Tensor[(1, 2048), float32] */;
  %13004 = (%13003, %12960) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13005 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13006 = concatenate(%13004, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13007 = concatenate(%13005, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13008 = nn.dense(%13006, %13007, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13009 = add(%13008, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13010 = add(%13009, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13011 = split(%13010, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13012 = %13011.3 /* ty=Tensor[(1, 1024), float32] */;
  %13013 = %13011.1 /* ty=Tensor[(1, 1024), float32] */;
  %13014 = sigmoid(%13013) /* ty=Tensor[(1, 1024), float32] */;
  %13015 = %13011.0 /* ty=Tensor[(1, 1024), float32] */;
  %13016 = %13011.2 /* ty=Tensor[(1, 1024), float32] */;
  %13017 = sigmoid(%13015) /* ty=Tensor[(1, 1024), float32] */;
  %13018 = tanh(%13016) /* ty=Tensor[(1, 1024), float32] */;
  %13019 = multiply(%13014, %12957) /* ty=Tensor[(1, 1024), float32] */;
  %13020 = multiply(%13017, %13018) /* ty=Tensor[(1, 1024), float32] */;
  %13021 = add(%13019, %13020) /* ty=Tensor[(1, 1024), float32] */;
  %13022 = sigmoid(%13012) /* ty=Tensor[(1, 1024), float32] */;
  %13023 = tanh(%13021) /* ty=Tensor[(1, 1024), float32] */;
  %13024 = multiply(%13022, %13023) /* ty=Tensor[(1, 1024), float32] */;
  %13025 = (%13024, %12981) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13026 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13027 = concatenate(%13025, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13028 = concatenate(%13026, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13029 = nn.dense(%13027, %13028, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13030 = add(%13029, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13031 = add(%13030, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13032 = split(%13031, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13033 = %13032.3 /* ty=Tensor[(1, 1024), float32] */;
  %13034 = %13032.1 /* ty=Tensor[(1, 1024), float32] */;
  %13035 = sigmoid(%13034) /* ty=Tensor[(1, 1024), float32] */;
  %13036 = %13032.0 /* ty=Tensor[(1, 1024), float32] */;
  %13037 = %13032.2 /* ty=Tensor[(1, 1024), float32] */;
  %13038 = sigmoid(%13036) /* ty=Tensor[(1, 1024), float32] */;
  %13039 = tanh(%13037) /* ty=Tensor[(1, 1024), float32] */;
  %13040 = multiply(%13035, %12978) /* ty=Tensor[(1, 1024), float32] */;
  %13041 = multiply(%13038, %13039) /* ty=Tensor[(1, 1024), float32] */;
  %13042 = add(%13040, %13041) /* ty=Tensor[(1, 1024), float32] */;
  %13043 = sigmoid(%13033) /* ty=Tensor[(1, 1024), float32] */;
  %13044 = tanh(%13042) /* ty=Tensor[(1, 1024), float32] */;
  %13045 = multiply(%13043, %13044) /* ty=Tensor[(1, 1024), float32] */;
  %13046 = multiply(%13001, %13002) /* ty=Tensor[(1, 1024), float32] */;
  %13047 = (%13045, %13046) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13048 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13049 = concatenate(%13047, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13050 = concatenate(%13048, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13051 = nn.dense(%13049, %13050, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13052 = add(%13051, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13053 = add(%13052, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13054 = split(%13053, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13055 = %13054.3 /* ty=Tensor[(1, 1024), float32] */;
  %13056 = %13054.1 /* ty=Tensor[(1, 1024), float32] */;
  %13057 = sigmoid(%13056) /* ty=Tensor[(1, 1024), float32] */;
  %13058 = %13054.0 /* ty=Tensor[(1, 1024), float32] */;
  %13059 = %13054.2 /* ty=Tensor[(1, 1024), float32] */;
  %13060 = sigmoid(%13058) /* ty=Tensor[(1, 1024), float32] */;
  %13061 = tanh(%13059) /* ty=Tensor[(1, 1024), float32] */;
  %13062 = multiply(%13057, %13000) /* ty=Tensor[(1, 1024), float32] */;
  %13063 = multiply(%13060, %13061) /* ty=Tensor[(1, 1024), float32] */;
  %13064 = add(%13062, %13063) /* ty=Tensor[(1, 1024), float32] */;
  %13065 = sigmoid(%13055) /* ty=Tensor[(1, 1024), float32] */;
  %13066 = tanh(%13064) /* ty=Tensor[(1, 1024), float32] */;
  %13067 = %12788.4 /* ty=Tensor[(1, 2048), float32] */;
  %13068 = (%13067, %13024) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13069 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13070 = concatenate(%13068, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13071 = concatenate(%13069, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13072 = nn.dense(%13070, %13071, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13073 = add(%13072, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13074 = add(%13073, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13075 = split(%13074, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13076 = %13075.3 /* ty=Tensor[(1, 1024), float32] */;
  %13077 = %13075.1 /* ty=Tensor[(1, 1024), float32] */;
  %13078 = sigmoid(%13077) /* ty=Tensor[(1, 1024), float32] */;
  %13079 = %13075.0 /* ty=Tensor[(1, 1024), float32] */;
  %13080 = %13075.2 /* ty=Tensor[(1, 1024), float32] */;
  %13081 = sigmoid(%13079) /* ty=Tensor[(1, 1024), float32] */;
  %13082 = tanh(%13080) /* ty=Tensor[(1, 1024), float32] */;
  %13083 = multiply(%13078, %13021) /* ty=Tensor[(1, 1024), float32] */;
  %13084 = multiply(%13081, %13082) /* ty=Tensor[(1, 1024), float32] */;
  %13085 = add(%13083, %13084) /* ty=Tensor[(1, 1024), float32] */;
  %13086 = sigmoid(%13076) /* ty=Tensor[(1, 1024), float32] */;
  %13087 = tanh(%13085) /* ty=Tensor[(1, 1024), float32] */;
  %13088 = multiply(%13086, %13087) /* ty=Tensor[(1, 1024), float32] */;
  %13089 = (%13088, %13045) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13090 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13091 = concatenate(%13089, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13092 = concatenate(%13090, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13093 = nn.dense(%13091, %13092, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13094 = add(%13093, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13095 = add(%13094, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13096 = split(%13095, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13097 = %13096.3 /* ty=Tensor[(1, 1024), float32] */;
  %13098 = %13096.1 /* ty=Tensor[(1, 1024), float32] */;
  %13099 = sigmoid(%13098) /* ty=Tensor[(1, 1024), float32] */;
  %13100 = %13096.0 /* ty=Tensor[(1, 1024), float32] */;
  %13101 = %13096.2 /* ty=Tensor[(1, 1024), float32] */;
  %13102 = sigmoid(%13100) /* ty=Tensor[(1, 1024), float32] */;
  %13103 = tanh(%13101) /* ty=Tensor[(1, 1024), float32] */;
  %13104 = multiply(%13099, %13042) /* ty=Tensor[(1, 1024), float32] */;
  %13105 = multiply(%13102, %13103) /* ty=Tensor[(1, 1024), float32] */;
  %13106 = add(%13104, %13105) /* ty=Tensor[(1, 1024), float32] */;
  %13107 = sigmoid(%13097) /* ty=Tensor[(1, 1024), float32] */;
  %13108 = tanh(%13106) /* ty=Tensor[(1, 1024), float32] */;
  %13109 = multiply(%13107, %13108) /* ty=Tensor[(1, 1024), float32] */;
  %13110 = multiply(%13065, %13066) /* ty=Tensor[(1, 1024), float32] */;
  %13111 = (%13109, %13110) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13112 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13113 = concatenate(%13111, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13114 = concatenate(%13112, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13115 = nn.dense(%13113, %13114, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13116 = add(%13115, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13117 = add(%13116, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13118 = split(%13117, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13119 = %13118.3 /* ty=Tensor[(1, 1024), float32] */;
  %13120 = %13118.1 /* ty=Tensor[(1, 1024), float32] */;
  %13121 = sigmoid(%13120) /* ty=Tensor[(1, 1024), float32] */;
  %13122 = %13118.0 /* ty=Tensor[(1, 1024), float32] */;
  %13123 = %13118.2 /* ty=Tensor[(1, 1024), float32] */;
  %13124 = sigmoid(%13122) /* ty=Tensor[(1, 1024), float32] */;
  %13125 = tanh(%13123) /* ty=Tensor[(1, 1024), float32] */;
  %13126 = multiply(%13121, %13064) /* ty=Tensor[(1, 1024), float32] */;
  %13127 = multiply(%13124, %13125) /* ty=Tensor[(1, 1024), float32] */;
  %13128 = add(%13126, %13127) /* ty=Tensor[(1, 1024), float32] */;
  %13129 = sigmoid(%13119) /* ty=Tensor[(1, 1024), float32] */;
  %13130 = tanh(%13128) /* ty=Tensor[(1, 1024), float32] */;
  %13131 = %12788.5 /* ty=Tensor[(1, 2048), float32] */;
  %13132 = (%13131, %13088) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13133 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13134 = concatenate(%13132, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13135 = concatenate(%13133, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13136 = nn.dense(%13134, %13135, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13137 = add(%13136, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13138 = add(%13137, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13139 = split(%13138, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13140 = %13139.3 /* ty=Tensor[(1, 1024), float32] */;
  %13141 = %13139.1 /* ty=Tensor[(1, 1024), float32] */;
  %13142 = sigmoid(%13141) /* ty=Tensor[(1, 1024), float32] */;
  %13143 = %13139.0 /* ty=Tensor[(1, 1024), float32] */;
  %13144 = %13139.2 /* ty=Tensor[(1, 1024), float32] */;
  %13145 = sigmoid(%13143) /* ty=Tensor[(1, 1024), float32] */;
  %13146 = tanh(%13144) /* ty=Tensor[(1, 1024), float32] */;
  %13147 = multiply(%13142, %13085) /* ty=Tensor[(1, 1024), float32] */;
  %13148 = multiply(%13145, %13146) /* ty=Tensor[(1, 1024), float32] */;
  %13149 = add(%13147, %13148) /* ty=Tensor[(1, 1024), float32] */;
  %13150 = sigmoid(%13140) /* ty=Tensor[(1, 1024), float32] */;
  %13151 = tanh(%13149) /* ty=Tensor[(1, 1024), float32] */;
  %13152 = multiply(%13150, %13151) /* ty=Tensor[(1, 1024), float32] */;
  %13153 = (%13152, %13109) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13154 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13155 = concatenate(%13153, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13156 = concatenate(%13154, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13157 = nn.dense(%13155, %13156, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13158 = add(%13157, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13159 = add(%13158, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13160 = split(%13159, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13161 = %13160.3 /* ty=Tensor[(1, 1024), float32] */;
  %13162 = %13160.1 /* ty=Tensor[(1, 1024), float32] */;
  %13163 = sigmoid(%13162) /* ty=Tensor[(1, 1024), float32] */;
  %13164 = %13160.0 /* ty=Tensor[(1, 1024), float32] */;
  %13165 = %13160.2 /* ty=Tensor[(1, 1024), float32] */;
  %13166 = sigmoid(%13164) /* ty=Tensor[(1, 1024), float32] */;
  %13167 = tanh(%13165) /* ty=Tensor[(1, 1024), float32] */;
  %13168 = multiply(%13163, %13106) /* ty=Tensor[(1, 1024), float32] */;
  %13169 = multiply(%13166, %13167) /* ty=Tensor[(1, 1024), float32] */;
  %13170 = add(%13168, %13169) /* ty=Tensor[(1, 1024), float32] */;
  %13171 = sigmoid(%13161) /* ty=Tensor[(1, 1024), float32] */;
  %13172 = tanh(%13170) /* ty=Tensor[(1, 1024), float32] */;
  %13173 = multiply(%13171, %13172) /* ty=Tensor[(1, 1024), float32] */;
  %13174 = multiply(%13129, %13130) /* ty=Tensor[(1, 1024), float32] */;
  %13175 = (%13173, %13174) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13176 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13177 = concatenate(%13175, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13178 = concatenate(%13176, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13179 = nn.dense(%13177, %13178, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13180 = add(%13179, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13181 = add(%13180, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13182 = split(%13181, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13183 = %13182.3 /* ty=Tensor[(1, 1024), float32] */;
  %13184 = %13182.1 /* ty=Tensor[(1, 1024), float32] */;
  %13185 = sigmoid(%13184) /* ty=Tensor[(1, 1024), float32] */;
  %13186 = %13182.0 /* ty=Tensor[(1, 1024), float32] */;
  %13187 = %13182.2 /* ty=Tensor[(1, 1024), float32] */;
  %13188 = sigmoid(%13186) /* ty=Tensor[(1, 1024), float32] */;
  %13189 = tanh(%13187) /* ty=Tensor[(1, 1024), float32] */;
  %13190 = multiply(%13185, %13128) /* ty=Tensor[(1, 1024), float32] */;
  %13191 = multiply(%13188, %13189) /* ty=Tensor[(1, 1024), float32] */;
  %13192 = add(%13190, %13191) /* ty=Tensor[(1, 1024), float32] */;
  %13193 = sigmoid(%13183) /* ty=Tensor[(1, 1024), float32] */;
  %13194 = tanh(%13192) /* ty=Tensor[(1, 1024), float32] */;
  %13195 = %12788.6 /* ty=Tensor[(1, 2048), float32] */;
  %13196 = (%13195, %13152) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13197 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13198 = concatenate(%13196, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13199 = concatenate(%13197, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13200 = nn.dense(%13198, %13199, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13201 = add(%13200, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13202 = add(%13201, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13203 = split(%13202, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13204 = %13203.3 /* ty=Tensor[(1, 1024), float32] */;
  %13205 = %13203.1 /* ty=Tensor[(1, 1024), float32] */;
  %13206 = sigmoid(%13205) /* ty=Tensor[(1, 1024), float32] */;
  %13207 = %13203.0 /* ty=Tensor[(1, 1024), float32] */;
  %13208 = %13203.2 /* ty=Tensor[(1, 1024), float32] */;
  %13209 = sigmoid(%13207) /* ty=Tensor[(1, 1024), float32] */;
  %13210 = tanh(%13208) /* ty=Tensor[(1, 1024), float32] */;
  %13211 = multiply(%13206, %13149) /* ty=Tensor[(1, 1024), float32] */;
  %13212 = multiply(%13209, %13210) /* ty=Tensor[(1, 1024), float32] */;
  %13213 = add(%13211, %13212) /* ty=Tensor[(1, 1024), float32] */;
  %13214 = sigmoid(%13204) /* ty=Tensor[(1, 1024), float32] */;
  %13215 = tanh(%13213) /* ty=Tensor[(1, 1024), float32] */;
  %13216 = multiply(%13214, %13215) /* ty=Tensor[(1, 1024), float32] */;
  %13217 = (%13216, %13173) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13218 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13219 = concatenate(%13217, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13220 = concatenate(%13218, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13221 = nn.dense(%13219, %13220, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13222 = add(%13221, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13223 = add(%13222, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13224 = split(%13223, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13225 = %13224.3 /* ty=Tensor[(1, 1024), float32] */;
  %13226 = %13224.1 /* ty=Tensor[(1, 1024), float32] */;
  %13227 = sigmoid(%13226) /* ty=Tensor[(1, 1024), float32] */;
  %13228 = %13224.0 /* ty=Tensor[(1, 1024), float32] */;
  %13229 = %13224.2 /* ty=Tensor[(1, 1024), float32] */;
  %13230 = sigmoid(%13228) /* ty=Tensor[(1, 1024), float32] */;
  %13231 = tanh(%13229) /* ty=Tensor[(1, 1024), float32] */;
  %13232 = multiply(%13227, %13170) /* ty=Tensor[(1, 1024), float32] */;
  %13233 = multiply(%13230, %13231) /* ty=Tensor[(1, 1024), float32] */;
  %13234 = add(%13232, %13233) /* ty=Tensor[(1, 1024), float32] */;
  %13235 = sigmoid(%13225) /* ty=Tensor[(1, 1024), float32] */;
  %13236 = tanh(%13234) /* ty=Tensor[(1, 1024), float32] */;
  %13237 = multiply(%13235, %13236) /* ty=Tensor[(1, 1024), float32] */;
  %13238 = multiply(%13193, %13194) /* ty=Tensor[(1, 1024), float32] */;
  %13239 = (%13237, %13238) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13240 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13241 = concatenate(%13239, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13242 = concatenate(%13240, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13243 = nn.dense(%13241, %13242, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13244 = add(%13243, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13245 = add(%13244, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13246 = split(%13245, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13247 = %13246.3 /* ty=Tensor[(1, 1024), float32] */;
  %13248 = %13246.1 /* ty=Tensor[(1, 1024), float32] */;
  %13249 = sigmoid(%13248) /* ty=Tensor[(1, 1024), float32] */;
  %13250 = %13246.0 /* ty=Tensor[(1, 1024), float32] */;
  %13251 = %13246.2 /* ty=Tensor[(1, 1024), float32] */;
  %13252 = sigmoid(%13250) /* ty=Tensor[(1, 1024), float32] */;
  %13253 = tanh(%13251) /* ty=Tensor[(1, 1024), float32] */;
  %13254 = multiply(%13249, %13192) /* ty=Tensor[(1, 1024), float32] */;
  %13255 = multiply(%13252, %13253) /* ty=Tensor[(1, 1024), float32] */;
  %13256 = add(%13254, %13255) /* ty=Tensor[(1, 1024), float32] */;
  %13257 = sigmoid(%13247) /* ty=Tensor[(1, 1024), float32] */;
  %13258 = tanh(%13256) /* ty=Tensor[(1, 1024), float32] */;
  %13259 = %12788.7 /* ty=Tensor[(1, 2048), float32] */;
  %13260 = (%13259, %13216) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13261 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13262 = concatenate(%13260, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13263 = concatenate(%13261, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13264 = nn.dense(%13262, %13263, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13265 = add(%13264, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13266 = add(%13265, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13267 = split(%13266, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13268 = %13267.3 /* ty=Tensor[(1, 1024), float32] */;
  %13269 = %13267.1 /* ty=Tensor[(1, 1024), float32] */;
  %13270 = sigmoid(%13269) /* ty=Tensor[(1, 1024), float32] */;
  %13271 = %13267.0 /* ty=Tensor[(1, 1024), float32] */;
  %13272 = %13267.2 /* ty=Tensor[(1, 1024), float32] */;
  %13273 = sigmoid(%13271) /* ty=Tensor[(1, 1024), float32] */;
  %13274 = tanh(%13272) /* ty=Tensor[(1, 1024), float32] */;
  %13275 = multiply(%13270, %13213) /* ty=Tensor[(1, 1024), float32] */;
  %13276 = multiply(%13273, %13274) /* ty=Tensor[(1, 1024), float32] */;
  %13277 = add(%13275, %13276) /* ty=Tensor[(1, 1024), float32] */;
  %13278 = sigmoid(%13268) /* ty=Tensor[(1, 1024), float32] */;
  %13279 = tanh(%13277) /* ty=Tensor[(1, 1024), float32] */;
  %13280 = multiply(%13278, %13279) /* ty=Tensor[(1, 1024), float32] */;
  %13281 = (%13280, %13237) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13282 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13283 = concatenate(%13281, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13284 = concatenate(%13282, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13285 = nn.dense(%13283, %13284, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13286 = add(%13285, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13287 = add(%13286, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13288 = split(%13287, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13289 = %13288.3 /* ty=Tensor[(1, 1024), float32] */;
  %13290 = %13288.1 /* ty=Tensor[(1, 1024), float32] */;
  %13291 = sigmoid(%13290) /* ty=Tensor[(1, 1024), float32] */;
  %13292 = %13288.0 /* ty=Tensor[(1, 1024), float32] */;
  %13293 = %13288.2 /* ty=Tensor[(1, 1024), float32] */;
  %13294 = sigmoid(%13292) /* ty=Tensor[(1, 1024), float32] */;
  %13295 = tanh(%13293) /* ty=Tensor[(1, 1024), float32] */;
  %13296 = multiply(%13291, %13234) /* ty=Tensor[(1, 1024), float32] */;
  %13297 = multiply(%13294, %13295) /* ty=Tensor[(1, 1024), float32] */;
  %13298 = add(%13296, %13297) /* ty=Tensor[(1, 1024), float32] */;
  %13299 = sigmoid(%13289) /* ty=Tensor[(1, 1024), float32] */;
  %13300 = tanh(%13298) /* ty=Tensor[(1, 1024), float32] */;
  %13301 = multiply(%13299, %13300) /* ty=Tensor[(1, 1024), float32] */;
  %13302 = multiply(%13257, %13258) /* ty=Tensor[(1, 1024), float32] */;
  %13303 = (%13301, %13302) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13304 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13305 = concatenate(%13303, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13306 = concatenate(%13304, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13307 = nn.dense(%13305, %13306, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13308 = add(%13307, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13309 = add(%13308, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13310 = split(%13309, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13311 = %13310.3 /* ty=Tensor[(1, 1024), float32] */;
  %13312 = %13310.1 /* ty=Tensor[(1, 1024), float32] */;
  %13313 = sigmoid(%13312) /* ty=Tensor[(1, 1024), float32] */;
  %13314 = %13310.0 /* ty=Tensor[(1, 1024), float32] */;
  %13315 = %13310.2 /* ty=Tensor[(1, 1024), float32] */;
  %13316 = sigmoid(%13314) /* ty=Tensor[(1, 1024), float32] */;
  %13317 = tanh(%13315) /* ty=Tensor[(1, 1024), float32] */;
  %13318 = multiply(%13313, %13256) /* ty=Tensor[(1, 1024), float32] */;
  %13319 = multiply(%13316, %13317) /* ty=Tensor[(1, 1024), float32] */;
  %13320 = add(%13318, %13319) /* ty=Tensor[(1, 1024), float32] */;
  %13321 = sigmoid(%13311) /* ty=Tensor[(1, 1024), float32] */;
  %13322 = tanh(%13320) /* ty=Tensor[(1, 1024), float32] */;
  %13323 = %12788.8 /* ty=Tensor[(1, 2048), float32] */;
  %13324 = (%13323, %13280) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13325 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13326 = concatenate(%13324, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13327 = concatenate(%13325, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13328 = nn.dense(%13326, %13327, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13329 = add(%13328, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13330 = add(%13329, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13331 = split(%13330, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13332 = %13331.3 /* ty=Tensor[(1, 1024), float32] */;
  %13333 = %13331.1 /* ty=Tensor[(1, 1024), float32] */;
  %13334 = sigmoid(%13333) /* ty=Tensor[(1, 1024), float32] */;
  %13335 = %13331.0 /* ty=Tensor[(1, 1024), float32] */;
  %13336 = %13331.2 /* ty=Tensor[(1, 1024), float32] */;
  %13337 = sigmoid(%13335) /* ty=Tensor[(1, 1024), float32] */;
  %13338 = tanh(%13336) /* ty=Tensor[(1, 1024), float32] */;
  %13339 = multiply(%13334, %13277) /* ty=Tensor[(1, 1024), float32] */;
  %13340 = multiply(%13337, %13338) /* ty=Tensor[(1, 1024), float32] */;
  %13341 = add(%13339, %13340) /* ty=Tensor[(1, 1024), float32] */;
  %13342 = sigmoid(%13332) /* ty=Tensor[(1, 1024), float32] */;
  %13343 = tanh(%13341) /* ty=Tensor[(1, 1024), float32] */;
  %13344 = multiply(%13342, %13343) /* ty=Tensor[(1, 1024), float32] */;
  %13345 = (%13344, %13301) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13346 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13347 = concatenate(%13345, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13348 = concatenate(%13346, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13349 = nn.dense(%13347, %13348, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13350 = add(%13349, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13351 = add(%13350, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13352 = split(%13351, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13353 = %13352.3 /* ty=Tensor[(1, 1024), float32] */;
  %13354 = %13352.1 /* ty=Tensor[(1, 1024), float32] */;
  %13355 = sigmoid(%13354) /* ty=Tensor[(1, 1024), float32] */;
  %13356 = %13352.0 /* ty=Tensor[(1, 1024), float32] */;
  %13357 = %13352.2 /* ty=Tensor[(1, 1024), float32] */;
  %13358 = sigmoid(%13356) /* ty=Tensor[(1, 1024), float32] */;
  %13359 = tanh(%13357) /* ty=Tensor[(1, 1024), float32] */;
  %13360 = multiply(%13355, %13298) /* ty=Tensor[(1, 1024), float32] */;
  %13361 = multiply(%13358, %13359) /* ty=Tensor[(1, 1024), float32] */;
  %13362 = add(%13360, %13361) /* ty=Tensor[(1, 1024), float32] */;
  %13363 = sigmoid(%13353) /* ty=Tensor[(1, 1024), float32] */;
  %13364 = tanh(%13362) /* ty=Tensor[(1, 1024), float32] */;
  %13365 = multiply(%13363, %13364) /* ty=Tensor[(1, 1024), float32] */;
  %13366 = multiply(%13321, %13322) /* ty=Tensor[(1, 1024), float32] */;
  %13367 = (%13365, %13366) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13368 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13369 = concatenate(%13367, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13370 = concatenate(%13368, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13371 = nn.dense(%13369, %13370, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13372 = add(%13371, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13373 = add(%13372, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13374 = split(%13373, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13375 = %13374.3 /* ty=Tensor[(1, 1024), float32] */;
  %13376 = %13374.1 /* ty=Tensor[(1, 1024), float32] */;
  %13377 = sigmoid(%13376) /* ty=Tensor[(1, 1024), float32] */;
  %13378 = %13374.0 /* ty=Tensor[(1, 1024), float32] */;
  %13379 = %13374.2 /* ty=Tensor[(1, 1024), float32] */;
  %13380 = sigmoid(%13378) /* ty=Tensor[(1, 1024), float32] */;
  %13381 = tanh(%13379) /* ty=Tensor[(1, 1024), float32] */;
  %13382 = multiply(%13377, %13320) /* ty=Tensor[(1, 1024), float32] */;
  %13383 = multiply(%13380, %13381) /* ty=Tensor[(1, 1024), float32] */;
  %13384 = add(%13382, %13383) /* ty=Tensor[(1, 1024), float32] */;
  %13385 = sigmoid(%13375) /* ty=Tensor[(1, 1024), float32] */;
  %13386 = tanh(%13384) /* ty=Tensor[(1, 1024), float32] */;
  %13387 = %12788.9 /* ty=Tensor[(1, 2048), float32] */;
  %13388 = (%13387, %13344) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13389 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13390 = concatenate(%13388, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13391 = concatenate(%13389, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13392 = nn.dense(%13390, %13391, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13393 = add(%13392, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13394 = add(%13393, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13395 = split(%13394, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13396 = %13395.3 /* ty=Tensor[(1, 1024), float32] */;
  %13397 = %13395.1 /* ty=Tensor[(1, 1024), float32] */;
  %13398 = sigmoid(%13397) /* ty=Tensor[(1, 1024), float32] */;
  %13399 = %13395.0 /* ty=Tensor[(1, 1024), float32] */;
  %13400 = %13395.2 /* ty=Tensor[(1, 1024), float32] */;
  %13401 = sigmoid(%13399) /* ty=Tensor[(1, 1024), float32] */;
  %13402 = tanh(%13400) /* ty=Tensor[(1, 1024), float32] */;
  %13403 = multiply(%13398, %13341) /* ty=Tensor[(1, 1024), float32] */;
  %13404 = multiply(%13401, %13402) /* ty=Tensor[(1, 1024), float32] */;
  %13405 = add(%13403, %13404) /* ty=Tensor[(1, 1024), float32] */;
  %13406 = sigmoid(%13396) /* ty=Tensor[(1, 1024), float32] */;
  %13407 = tanh(%13405) /* ty=Tensor[(1, 1024), float32] */;
  %13408 = multiply(%13406, %13407) /* ty=Tensor[(1, 1024), float32] */;
  %13409 = (%13408, %13365) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13410 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13411 = concatenate(%13409, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13412 = concatenate(%13410, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13413 = nn.dense(%13411, %13412, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13414 = add(%13413, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13415 = add(%13414, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13416 = split(%13415, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13417 = %13416.3 /* ty=Tensor[(1, 1024), float32] */;
  %13418 = %13416.1 /* ty=Tensor[(1, 1024), float32] */;
  %13419 = sigmoid(%13418) /* ty=Tensor[(1, 1024), float32] */;
  %13420 = %13416.0 /* ty=Tensor[(1, 1024), float32] */;
  %13421 = %13416.2 /* ty=Tensor[(1, 1024), float32] */;
  %13422 = sigmoid(%13420) /* ty=Tensor[(1, 1024), float32] */;
  %13423 = tanh(%13421) /* ty=Tensor[(1, 1024), float32] */;
  %13424 = multiply(%13419, %13362) /* ty=Tensor[(1, 1024), float32] */;
  %13425 = multiply(%13422, %13423) /* ty=Tensor[(1, 1024), float32] */;
  %13426 = add(%13424, %13425) /* ty=Tensor[(1, 1024), float32] */;
  %13427 = sigmoid(%13417) /* ty=Tensor[(1, 1024), float32] */;
  %13428 = tanh(%13426) /* ty=Tensor[(1, 1024), float32] */;
  %13429 = multiply(%13427, %13428) /* ty=Tensor[(1, 1024), float32] */;
  %13430 = multiply(%13385, %13386) /* ty=Tensor[(1, 1024), float32] */;
  %13431 = (%13429, %13430) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13432 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13433 = concatenate(%13431, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13434 = concatenate(%13432, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13435 = nn.dense(%13433, %13434, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13436 = add(%13435, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13437 = add(%13436, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13438 = split(%13437, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13439 = %13438.3 /* ty=Tensor[(1, 1024), float32] */;
  %13440 = %13438.1 /* ty=Tensor[(1, 1024), float32] */;
  %13441 = sigmoid(%13440) /* ty=Tensor[(1, 1024), float32] */;
  %13442 = %13438.0 /* ty=Tensor[(1, 1024), float32] */;
  %13443 = %13438.2 /* ty=Tensor[(1, 1024), float32] */;
  %13444 = sigmoid(%13442) /* ty=Tensor[(1, 1024), float32] */;
  %13445 = tanh(%13443) /* ty=Tensor[(1, 1024), float32] */;
  %13446 = multiply(%13441, %13384) /* ty=Tensor[(1, 1024), float32] */;
  %13447 = multiply(%13444, %13445) /* ty=Tensor[(1, 1024), float32] */;
  %13448 = add(%13446, %13447) /* ty=Tensor[(1, 1024), float32] */;
  %13449 = sigmoid(%13439) /* ty=Tensor[(1, 1024), float32] */;
  %13450 = tanh(%13448) /* ty=Tensor[(1, 1024), float32] */;
  %13451 = %12788.10 /* ty=Tensor[(1, 2048), float32] */;
  %13452 = (%13451, %13408) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13453 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13454 = concatenate(%13452, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13455 = concatenate(%13453, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13456 = nn.dense(%13454, %13455, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13457 = add(%13456, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13458 = add(%13457, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13459 = split(%13458, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13460 = %13459.3 /* ty=Tensor[(1, 1024), float32] */;
  %13461 = %13459.1 /* ty=Tensor[(1, 1024), float32] */;
  %13462 = sigmoid(%13461) /* ty=Tensor[(1, 1024), float32] */;
  %13463 = %13459.0 /* ty=Tensor[(1, 1024), float32] */;
  %13464 = %13459.2 /* ty=Tensor[(1, 1024), float32] */;
  %13465 = sigmoid(%13463) /* ty=Tensor[(1, 1024), float32] */;
  %13466 = tanh(%13464) /* ty=Tensor[(1, 1024), float32] */;
  %13467 = multiply(%13462, %13405) /* ty=Tensor[(1, 1024), float32] */;
  %13468 = multiply(%13465, %13466) /* ty=Tensor[(1, 1024), float32] */;
  %13469 = add(%13467, %13468) /* ty=Tensor[(1, 1024), float32] */;
  %13470 = sigmoid(%13460) /* ty=Tensor[(1, 1024), float32] */;
  %13471 = tanh(%13469) /* ty=Tensor[(1, 1024), float32] */;
  %13472 = multiply(%13470, %13471) /* ty=Tensor[(1, 1024), float32] */;
  %13473 = (%13472, %13429) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13474 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13475 = concatenate(%13473, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13476 = concatenate(%13474, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13477 = nn.dense(%13475, %13476, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13478 = add(%13477, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13479 = add(%13478, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13480 = split(%13479, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13481 = %13480.3 /* ty=Tensor[(1, 1024), float32] */;
  %13482 = %13480.1 /* ty=Tensor[(1, 1024), float32] */;
  %13483 = sigmoid(%13482) /* ty=Tensor[(1, 1024), float32] */;
  %13484 = %13480.0 /* ty=Tensor[(1, 1024), float32] */;
  %13485 = %13480.2 /* ty=Tensor[(1, 1024), float32] */;
  %13486 = sigmoid(%13484) /* ty=Tensor[(1, 1024), float32] */;
  %13487 = tanh(%13485) /* ty=Tensor[(1, 1024), float32] */;
  %13488 = multiply(%13483, %13426) /* ty=Tensor[(1, 1024), float32] */;
  %13489 = multiply(%13486, %13487) /* ty=Tensor[(1, 1024), float32] */;
  %13490 = add(%13488, %13489) /* ty=Tensor[(1, 1024), float32] */;
  %13491 = sigmoid(%13481) /* ty=Tensor[(1, 1024), float32] */;
  %13492 = tanh(%13490) /* ty=Tensor[(1, 1024), float32] */;
  %13493 = multiply(%13491, %13492) /* ty=Tensor[(1, 1024), float32] */;
  %13494 = multiply(%13449, %13450) /* ty=Tensor[(1, 1024), float32] */;
  %13495 = (%13493, %13494) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13496 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13497 = concatenate(%13495, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13498 = concatenate(%13496, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13499 = nn.dense(%13497, %13498, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13500 = add(%13499, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13501 = add(%13500, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13502 = split(%13501, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13503 = %13502.3 /* ty=Tensor[(1, 1024), float32] */;
  %13504 = %13502.1 /* ty=Tensor[(1, 1024), float32] */;
  %13505 = sigmoid(%13504) /* ty=Tensor[(1, 1024), float32] */;
  %13506 = %13502.0 /* ty=Tensor[(1, 1024), float32] */;
  %13507 = %13502.2 /* ty=Tensor[(1, 1024), float32] */;
  %13508 = sigmoid(%13506) /* ty=Tensor[(1, 1024), float32] */;
  %13509 = tanh(%13507) /* ty=Tensor[(1, 1024), float32] */;
  %13510 = multiply(%13505, %13448) /* ty=Tensor[(1, 1024), float32] */;
  %13511 = multiply(%13508, %13509) /* ty=Tensor[(1, 1024), float32] */;
  %13512 = add(%13510, %13511) /* ty=Tensor[(1, 1024), float32] */;
  %13513 = sigmoid(%13503) /* ty=Tensor[(1, 1024), float32] */;
  %13514 = tanh(%13512) /* ty=Tensor[(1, 1024), float32] */;
  %13515 = %12788.11 /* ty=Tensor[(1, 2048), float32] */;
  %13516 = (%13515, %13472) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13517 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13518 = concatenate(%13516, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13519 = concatenate(%13517, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13520 = nn.dense(%13518, %13519, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13521 = add(%13520, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13522 = add(%13521, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13523 = split(%13522, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13524 = %13523.3 /* ty=Tensor[(1, 1024), float32] */;
  %13525 = %13523.1 /* ty=Tensor[(1, 1024), float32] */;
  %13526 = sigmoid(%13525) /* ty=Tensor[(1, 1024), float32] */;
  %13527 = %13523.0 /* ty=Tensor[(1, 1024), float32] */;
  %13528 = %13523.2 /* ty=Tensor[(1, 1024), float32] */;
  %13529 = sigmoid(%13527) /* ty=Tensor[(1, 1024), float32] */;
  %13530 = tanh(%13528) /* ty=Tensor[(1, 1024), float32] */;
  %13531 = multiply(%13526, %13469) /* ty=Tensor[(1, 1024), float32] */;
  %13532 = multiply(%13529, %13530) /* ty=Tensor[(1, 1024), float32] */;
  %13533 = add(%13531, %13532) /* ty=Tensor[(1, 1024), float32] */;
  %13534 = sigmoid(%13524) /* ty=Tensor[(1, 1024), float32] */;
  %13535 = tanh(%13533) /* ty=Tensor[(1, 1024), float32] */;
  %13536 = multiply(%13534, %13535) /* ty=Tensor[(1, 1024), float32] */;
  %13537 = (%13536, %13493) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13538 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13539 = concatenate(%13537, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13540 = concatenate(%13538, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13541 = nn.dense(%13539, %13540, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13542 = add(%13541, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13543 = add(%13542, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13544 = split(%13543, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13545 = %13544.3 /* ty=Tensor[(1, 1024), float32] */;
  %13546 = %13544.1 /* ty=Tensor[(1, 1024), float32] */;
  %13547 = sigmoid(%13546) /* ty=Tensor[(1, 1024), float32] */;
  %13548 = %13544.0 /* ty=Tensor[(1, 1024), float32] */;
  %13549 = %13544.2 /* ty=Tensor[(1, 1024), float32] */;
  %13550 = sigmoid(%13548) /* ty=Tensor[(1, 1024), float32] */;
  %13551 = tanh(%13549) /* ty=Tensor[(1, 1024), float32] */;
  %13552 = multiply(%13547, %13490) /* ty=Tensor[(1, 1024), float32] */;
  %13553 = multiply(%13550, %13551) /* ty=Tensor[(1, 1024), float32] */;
  %13554 = add(%13552, %13553) /* ty=Tensor[(1, 1024), float32] */;
  %13555 = sigmoid(%13545) /* ty=Tensor[(1, 1024), float32] */;
  %13556 = tanh(%13554) /* ty=Tensor[(1, 1024), float32] */;
  %13557 = multiply(%13555, %13556) /* ty=Tensor[(1, 1024), float32] */;
  %13558 = multiply(%13513, %13514) /* ty=Tensor[(1, 1024), float32] */;
  %13559 = (%13557, %13558) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13560 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13561 = concatenate(%13559, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13562 = concatenate(%13560, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13563 = nn.dense(%13561, %13562, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13564 = add(%13563, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13565 = add(%13564, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13566 = split(%13565, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13567 = %13566.3 /* ty=Tensor[(1, 1024), float32] */;
  %13568 = %13566.1 /* ty=Tensor[(1, 1024), float32] */;
  %13569 = sigmoid(%13568) /* ty=Tensor[(1, 1024), float32] */;
  %13570 = %13566.0 /* ty=Tensor[(1, 1024), float32] */;
  %13571 = %13566.2 /* ty=Tensor[(1, 1024), float32] */;
  %13572 = sigmoid(%13570) /* ty=Tensor[(1, 1024), float32] */;
  %13573 = tanh(%13571) /* ty=Tensor[(1, 1024), float32] */;
  %13574 = multiply(%13569, %13512) /* ty=Tensor[(1, 1024), float32] */;
  %13575 = multiply(%13572, %13573) /* ty=Tensor[(1, 1024), float32] */;
  %13576 = add(%13574, %13575) /* ty=Tensor[(1, 1024), float32] */;
  %13577 = sigmoid(%13567) /* ty=Tensor[(1, 1024), float32] */;
  %13578 = tanh(%13576) /* ty=Tensor[(1, 1024), float32] */;
  %13579 = %12788.12 /* ty=Tensor[(1, 2048), float32] */;
  %13580 = (%13579, %13536) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13581 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13582 = concatenate(%13580, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13583 = concatenate(%13581, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13584 = nn.dense(%13582, %13583, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13585 = add(%13584, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13586 = add(%13585, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13587 = split(%13586, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13588 = %13587.3 /* ty=Tensor[(1, 1024), float32] */;
  %13589 = %13587.1 /* ty=Tensor[(1, 1024), float32] */;
  %13590 = sigmoid(%13589) /* ty=Tensor[(1, 1024), float32] */;
  %13591 = %13587.0 /* ty=Tensor[(1, 1024), float32] */;
  %13592 = %13587.2 /* ty=Tensor[(1, 1024), float32] */;
  %13593 = sigmoid(%13591) /* ty=Tensor[(1, 1024), float32] */;
  %13594 = tanh(%13592) /* ty=Tensor[(1, 1024), float32] */;
  %13595 = multiply(%13590, %13533) /* ty=Tensor[(1, 1024), float32] */;
  %13596 = multiply(%13593, %13594) /* ty=Tensor[(1, 1024), float32] */;
  %13597 = add(%13595, %13596) /* ty=Tensor[(1, 1024), float32] */;
  %13598 = sigmoid(%13588) /* ty=Tensor[(1, 1024), float32] */;
  %13599 = tanh(%13597) /* ty=Tensor[(1, 1024), float32] */;
  %13600 = multiply(%13598, %13599) /* ty=Tensor[(1, 1024), float32] */;
  %13601 = (%13600, %13557) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13602 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13603 = concatenate(%13601, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13604 = concatenate(%13602, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13605 = nn.dense(%13603, %13604, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13606 = add(%13605, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13607 = add(%13606, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13608 = split(%13607, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13609 = %13608.3 /* ty=Tensor[(1, 1024), float32] */;
  %13610 = %13608.1 /* ty=Tensor[(1, 1024), float32] */;
  %13611 = sigmoid(%13610) /* ty=Tensor[(1, 1024), float32] */;
  %13612 = %13608.0 /* ty=Tensor[(1, 1024), float32] */;
  %13613 = %13608.2 /* ty=Tensor[(1, 1024), float32] */;
  %13614 = sigmoid(%13612) /* ty=Tensor[(1, 1024), float32] */;
  %13615 = tanh(%13613) /* ty=Tensor[(1, 1024), float32] */;
  %13616 = multiply(%13611, %13554) /* ty=Tensor[(1, 1024), float32] */;
  %13617 = multiply(%13614, %13615) /* ty=Tensor[(1, 1024), float32] */;
  %13618 = add(%13616, %13617) /* ty=Tensor[(1, 1024), float32] */;
  %13619 = sigmoid(%13609) /* ty=Tensor[(1, 1024), float32] */;
  %13620 = tanh(%13618) /* ty=Tensor[(1, 1024), float32] */;
  %13621 = multiply(%13619, %13620) /* ty=Tensor[(1, 1024), float32] */;
  %13622 = multiply(%13577, %13578) /* ty=Tensor[(1, 1024), float32] */;
  %13623 = (%13621, %13622) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13624 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13625 = concatenate(%13623, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13626 = concatenate(%13624, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13627 = nn.dense(%13625, %13626, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13628 = add(%13627, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13629 = add(%13628, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13630 = split(%13629, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13631 = %13630.3 /* ty=Tensor[(1, 1024), float32] */;
  %13632 = %13630.1 /* ty=Tensor[(1, 1024), float32] */;
  %13633 = sigmoid(%13632) /* ty=Tensor[(1, 1024), float32] */;
  %13634 = %13630.0 /* ty=Tensor[(1, 1024), float32] */;
  %13635 = %13630.2 /* ty=Tensor[(1, 1024), float32] */;
  %13636 = sigmoid(%13634) /* ty=Tensor[(1, 1024), float32] */;
  %13637 = tanh(%13635) /* ty=Tensor[(1, 1024), float32] */;
  %13638 = multiply(%13633, %13576) /* ty=Tensor[(1, 1024), float32] */;
  %13639 = multiply(%13636, %13637) /* ty=Tensor[(1, 1024), float32] */;
  %13640 = add(%13638, %13639) /* ty=Tensor[(1, 1024), float32] */;
  %13641 = sigmoid(%13631) /* ty=Tensor[(1, 1024), float32] */;
  %13642 = tanh(%13640) /* ty=Tensor[(1, 1024), float32] */;
  %13643 = %12788.13 /* ty=Tensor[(1, 2048), float32] */;
  %13644 = (%13643, %13600) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13645 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13646 = concatenate(%13644, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13647 = concatenate(%13645, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13648 = nn.dense(%13646, %13647, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13649 = add(%13648, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13650 = add(%13649, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13651 = split(%13650, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13652 = %13651.3 /* ty=Tensor[(1, 1024), float32] */;
  %13653 = %13651.1 /* ty=Tensor[(1, 1024), float32] */;
  %13654 = sigmoid(%13653) /* ty=Tensor[(1, 1024), float32] */;
  %13655 = %13651.0 /* ty=Tensor[(1, 1024), float32] */;
  %13656 = %13651.2 /* ty=Tensor[(1, 1024), float32] */;
  %13657 = sigmoid(%13655) /* ty=Tensor[(1, 1024), float32] */;
  %13658 = tanh(%13656) /* ty=Tensor[(1, 1024), float32] */;
  %13659 = multiply(%13654, %13597) /* ty=Tensor[(1, 1024), float32] */;
  %13660 = multiply(%13657, %13658) /* ty=Tensor[(1, 1024), float32] */;
  %13661 = add(%13659, %13660) /* ty=Tensor[(1, 1024), float32] */;
  %13662 = sigmoid(%13652) /* ty=Tensor[(1, 1024), float32] */;
  %13663 = tanh(%13661) /* ty=Tensor[(1, 1024), float32] */;
  %13664 = multiply(%13662, %13663) /* ty=Tensor[(1, 1024), float32] */;
  %13665 = (%13664, %13621) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13666 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13667 = concatenate(%13665, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13668 = concatenate(%13666, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13669 = nn.dense(%13667, %13668, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13670 = add(%13669, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13671 = add(%13670, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13672 = split(%13671, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13673 = %13672.3 /* ty=Tensor[(1, 1024), float32] */;
  %13674 = %13672.1 /* ty=Tensor[(1, 1024), float32] */;
  %13675 = sigmoid(%13674) /* ty=Tensor[(1, 1024), float32] */;
  %13676 = %13672.0 /* ty=Tensor[(1, 1024), float32] */;
  %13677 = %13672.2 /* ty=Tensor[(1, 1024), float32] */;
  %13678 = sigmoid(%13676) /* ty=Tensor[(1, 1024), float32] */;
  %13679 = tanh(%13677) /* ty=Tensor[(1, 1024), float32] */;
  %13680 = multiply(%13675, %13618) /* ty=Tensor[(1, 1024), float32] */;
  %13681 = multiply(%13678, %13679) /* ty=Tensor[(1, 1024), float32] */;
  %13682 = add(%13680, %13681) /* ty=Tensor[(1, 1024), float32] */;
  %13683 = sigmoid(%13673) /* ty=Tensor[(1, 1024), float32] */;
  %13684 = tanh(%13682) /* ty=Tensor[(1, 1024), float32] */;
  %13685 = multiply(%13683, %13684) /* ty=Tensor[(1, 1024), float32] */;
  %13686 = multiply(%13641, %13642) /* ty=Tensor[(1, 1024), float32] */;
  %13687 = (%13685, %13686) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13688 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13689 = concatenate(%13687, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13690 = concatenate(%13688, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13691 = nn.dense(%13689, %13690, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13692 = add(%13691, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13693 = add(%13692, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13694 = split(%13693, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13695 = %13694.3 /* ty=Tensor[(1, 1024), float32] */;
  %13696 = %13694.1 /* ty=Tensor[(1, 1024), float32] */;
  %13697 = sigmoid(%13696) /* ty=Tensor[(1, 1024), float32] */;
  %13698 = %13694.0 /* ty=Tensor[(1, 1024), float32] */;
  %13699 = %13694.2 /* ty=Tensor[(1, 1024), float32] */;
  %13700 = sigmoid(%13698) /* ty=Tensor[(1, 1024), float32] */;
  %13701 = tanh(%13699) /* ty=Tensor[(1, 1024), float32] */;
  %13702 = multiply(%13697, %13640) /* ty=Tensor[(1, 1024), float32] */;
  %13703 = multiply(%13700, %13701) /* ty=Tensor[(1, 1024), float32] */;
  %13704 = add(%13702, %13703) /* ty=Tensor[(1, 1024), float32] */;
  %13705 = sigmoid(%13695) /* ty=Tensor[(1, 1024), float32] */;
  %13706 = tanh(%13704) /* ty=Tensor[(1, 1024), float32] */;
  %13707 = %12788.14 /* ty=Tensor[(1, 2048), float32] */;
  %13708 = (%13707, %13664) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13709 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13710 = concatenate(%13708, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13711 = concatenate(%13709, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13712 = nn.dense(%13710, %13711, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13713 = add(%13712, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13714 = add(%13713, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13715 = split(%13714, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13716 = %13715.3 /* ty=Tensor[(1, 1024), float32] */;
  %13717 = %13715.1 /* ty=Tensor[(1, 1024), float32] */;
  %13718 = sigmoid(%13717) /* ty=Tensor[(1, 1024), float32] */;
  %13719 = %13715.0 /* ty=Tensor[(1, 1024), float32] */;
  %13720 = %13715.2 /* ty=Tensor[(1, 1024), float32] */;
  %13721 = sigmoid(%13719) /* ty=Tensor[(1, 1024), float32] */;
  %13722 = tanh(%13720) /* ty=Tensor[(1, 1024), float32] */;
  %13723 = multiply(%13718, %13661) /* ty=Tensor[(1, 1024), float32] */;
  %13724 = multiply(%13721, %13722) /* ty=Tensor[(1, 1024), float32] */;
  %13725 = add(%13723, %13724) /* ty=Tensor[(1, 1024), float32] */;
  %13726 = sigmoid(%13716) /* ty=Tensor[(1, 1024), float32] */;
  %13727 = tanh(%13725) /* ty=Tensor[(1, 1024), float32] */;
  %13728 = multiply(%13726, %13727) /* ty=Tensor[(1, 1024), float32] */;
  %13729 = (%13728, %13685) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13730 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13731 = concatenate(%13729, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13732 = concatenate(%13730, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13733 = nn.dense(%13731, %13732, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13734 = add(%13733, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13735 = add(%13734, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13736 = split(%13735, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13737 = %13736.3 /* ty=Tensor[(1, 1024), float32] */;
  %13738 = %13736.1 /* ty=Tensor[(1, 1024), float32] */;
  %13739 = sigmoid(%13738) /* ty=Tensor[(1, 1024), float32] */;
  %13740 = %13736.0 /* ty=Tensor[(1, 1024), float32] */;
  %13741 = %13736.2 /* ty=Tensor[(1, 1024), float32] */;
  %13742 = sigmoid(%13740) /* ty=Tensor[(1, 1024), float32] */;
  %13743 = tanh(%13741) /* ty=Tensor[(1, 1024), float32] */;
  %13744 = multiply(%13739, %13682) /* ty=Tensor[(1, 1024), float32] */;
  %13745 = multiply(%13742, %13743) /* ty=Tensor[(1, 1024), float32] */;
  %13746 = add(%13744, %13745) /* ty=Tensor[(1, 1024), float32] */;
  %13747 = sigmoid(%13737) /* ty=Tensor[(1, 1024), float32] */;
  %13748 = tanh(%13746) /* ty=Tensor[(1, 1024), float32] */;
  %13749 = multiply(%13747, %13748) /* ty=Tensor[(1, 1024), float32] */;
  %13750 = multiply(%13705, %13706) /* ty=Tensor[(1, 1024), float32] */;
  %13751 = (%13749, %13750) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13752 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13753 = concatenate(%13751, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13754 = concatenate(%13752, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13755 = nn.dense(%13753, %13754, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13756 = add(%13755, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13757 = add(%13756, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13758 = split(%13757, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13759 = %13758.3 /* ty=Tensor[(1, 1024), float32] */;
  %13760 = %13758.1 /* ty=Tensor[(1, 1024), float32] */;
  %13761 = sigmoid(%13760) /* ty=Tensor[(1, 1024), float32] */;
  %13762 = %13758.0 /* ty=Tensor[(1, 1024), float32] */;
  %13763 = %13758.2 /* ty=Tensor[(1, 1024), float32] */;
  %13764 = sigmoid(%13762) /* ty=Tensor[(1, 1024), float32] */;
  %13765 = tanh(%13763) /* ty=Tensor[(1, 1024), float32] */;
  %13766 = multiply(%13761, %13704) /* ty=Tensor[(1, 1024), float32] */;
  %13767 = multiply(%13764, %13765) /* ty=Tensor[(1, 1024), float32] */;
  %13768 = add(%13766, %13767) /* ty=Tensor[(1, 1024), float32] */;
  %13769 = sigmoid(%13759) /* ty=Tensor[(1, 1024), float32] */;
  %13770 = tanh(%13768) /* ty=Tensor[(1, 1024), float32] */;
  %13771 = %12788.15 /* ty=Tensor[(1, 2048), float32] */;
  %13772 = (%13771, %13728) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13773 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13774 = concatenate(%13772, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13775 = concatenate(%13773, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13776 = nn.dense(%13774, %13775, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13777 = add(%13776, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13778 = add(%13777, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13779 = split(%13778, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13780 = %13779.3 /* ty=Tensor[(1, 1024), float32] */;
  %13781 = %13779.1 /* ty=Tensor[(1, 1024), float32] */;
  %13782 = sigmoid(%13781) /* ty=Tensor[(1, 1024), float32] */;
  %13783 = %13779.0 /* ty=Tensor[(1, 1024), float32] */;
  %13784 = %13779.2 /* ty=Tensor[(1, 1024), float32] */;
  %13785 = sigmoid(%13783) /* ty=Tensor[(1, 1024), float32] */;
  %13786 = tanh(%13784) /* ty=Tensor[(1, 1024), float32] */;
  %13787 = multiply(%13782, %13725) /* ty=Tensor[(1, 1024), float32] */;
  %13788 = multiply(%13785, %13786) /* ty=Tensor[(1, 1024), float32] */;
  %13789 = add(%13787, %13788) /* ty=Tensor[(1, 1024), float32] */;
  %13790 = sigmoid(%13780) /* ty=Tensor[(1, 1024), float32] */;
  %13791 = tanh(%13789) /* ty=Tensor[(1, 1024), float32] */;
  %13792 = multiply(%13790, %13791) /* ty=Tensor[(1, 1024), float32] */;
  %13793 = (%13792, %13749) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13794 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13795 = concatenate(%13793, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13796 = concatenate(%13794, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13797 = nn.dense(%13795, %13796, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13798 = add(%13797, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13799 = add(%13798, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13800 = split(%13799, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13801 = %13800.3 /* ty=Tensor[(1, 1024), float32] */;
  %13802 = %13800.1 /* ty=Tensor[(1, 1024), float32] */;
  %13803 = sigmoid(%13802) /* ty=Tensor[(1, 1024), float32] */;
  %13804 = %13800.0 /* ty=Tensor[(1, 1024), float32] */;
  %13805 = %13800.2 /* ty=Tensor[(1, 1024), float32] */;
  %13806 = sigmoid(%13804) /* ty=Tensor[(1, 1024), float32] */;
  %13807 = tanh(%13805) /* ty=Tensor[(1, 1024), float32] */;
  %13808 = multiply(%13803, %13746) /* ty=Tensor[(1, 1024), float32] */;
  %13809 = multiply(%13806, %13807) /* ty=Tensor[(1, 1024), float32] */;
  %13810 = add(%13808, %13809) /* ty=Tensor[(1, 1024), float32] */;
  %13811 = sigmoid(%13801) /* ty=Tensor[(1, 1024), float32] */;
  %13812 = tanh(%13810) /* ty=Tensor[(1, 1024), float32] */;
  %13813 = multiply(%13811, %13812) /* ty=Tensor[(1, 1024), float32] */;
  %13814 = multiply(%13769, %13770) /* ty=Tensor[(1, 1024), float32] */;
  %13815 = (%13813, %13814) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13816 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13817 = concatenate(%13815, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13818 = concatenate(%13816, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13819 = nn.dense(%13817, %13818, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13820 = add(%13819, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13821 = add(%13820, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13822 = split(%13821, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13823 = %13822.3 /* ty=Tensor[(1, 1024), float32] */;
  %13824 = %13822.1 /* ty=Tensor[(1, 1024), float32] */;
  %13825 = sigmoid(%13824) /* ty=Tensor[(1, 1024), float32] */;
  %13826 = %13822.0 /* ty=Tensor[(1, 1024), float32] */;
  %13827 = %13822.2 /* ty=Tensor[(1, 1024), float32] */;
  %13828 = sigmoid(%13826) /* ty=Tensor[(1, 1024), float32] */;
  %13829 = tanh(%13827) /* ty=Tensor[(1, 1024), float32] */;
  %13830 = multiply(%13825, %13768) /* ty=Tensor[(1, 1024), float32] */;
  %13831 = multiply(%13828, %13829) /* ty=Tensor[(1, 1024), float32] */;
  %13832 = add(%13830, %13831) /* ty=Tensor[(1, 1024), float32] */;
  %13833 = sigmoid(%13823) /* ty=Tensor[(1, 1024), float32] */;
  %13834 = tanh(%13832) /* ty=Tensor[(1, 1024), float32] */;
  %13835 = %12788.16 /* ty=Tensor[(1, 2048), float32] */;
  %13836 = (%13835, %13792) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13837 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13838 = concatenate(%13836, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13839 = concatenate(%13837, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13840 = nn.dense(%13838, %13839, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13841 = add(%13840, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13842 = add(%13841, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13843 = split(%13842, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13844 = %13843.3 /* ty=Tensor[(1, 1024), float32] */;
  %13845 = %13843.1 /* ty=Tensor[(1, 1024), float32] */;
  %13846 = sigmoid(%13845) /* ty=Tensor[(1, 1024), float32] */;
  %13847 = %13843.0 /* ty=Tensor[(1, 1024), float32] */;
  %13848 = %13843.2 /* ty=Tensor[(1, 1024), float32] */;
  %13849 = sigmoid(%13847) /* ty=Tensor[(1, 1024), float32] */;
  %13850 = tanh(%13848) /* ty=Tensor[(1, 1024), float32] */;
  %13851 = multiply(%13846, %13789) /* ty=Tensor[(1, 1024), float32] */;
  %13852 = multiply(%13849, %13850) /* ty=Tensor[(1, 1024), float32] */;
  %13853 = add(%13851, %13852) /* ty=Tensor[(1, 1024), float32] */;
  %13854 = sigmoid(%13844) /* ty=Tensor[(1, 1024), float32] */;
  %13855 = tanh(%13853) /* ty=Tensor[(1, 1024), float32] */;
  %13856 = multiply(%13854, %13855) /* ty=Tensor[(1, 1024), float32] */;
  %13857 = (%13856, %13813) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13858 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13859 = concatenate(%13857, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13860 = concatenate(%13858, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13861 = nn.dense(%13859, %13860, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13862 = add(%13861, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13863 = add(%13862, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13864 = split(%13863, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13865 = %13864.3 /* ty=Tensor[(1, 1024), float32] */;
  %13866 = %13864.1 /* ty=Tensor[(1, 1024), float32] */;
  %13867 = sigmoid(%13866) /* ty=Tensor[(1, 1024), float32] */;
  %13868 = %13864.0 /* ty=Tensor[(1, 1024), float32] */;
  %13869 = %13864.2 /* ty=Tensor[(1, 1024), float32] */;
  %13870 = sigmoid(%13868) /* ty=Tensor[(1, 1024), float32] */;
  %13871 = tanh(%13869) /* ty=Tensor[(1, 1024), float32] */;
  %13872 = multiply(%13867, %13810) /* ty=Tensor[(1, 1024), float32] */;
  %13873 = multiply(%13870, %13871) /* ty=Tensor[(1, 1024), float32] */;
  %13874 = add(%13872, %13873) /* ty=Tensor[(1, 1024), float32] */;
  %13875 = sigmoid(%13865) /* ty=Tensor[(1, 1024), float32] */;
  %13876 = tanh(%13874) /* ty=Tensor[(1, 1024), float32] */;
  %13877 = multiply(%13875, %13876) /* ty=Tensor[(1, 1024), float32] */;
  %13878 = multiply(%13833, %13834) /* ty=Tensor[(1, 1024), float32] */;
  %13879 = (%13877, %13878) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13880 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13881 = concatenate(%13879, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13882 = concatenate(%13880, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13883 = nn.dense(%13881, %13882, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13884 = add(%13883, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13885 = add(%13884, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13886 = split(%13885, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13887 = %13886.3 /* ty=Tensor[(1, 1024), float32] */;
  %13888 = %13886.1 /* ty=Tensor[(1, 1024), float32] */;
  %13889 = sigmoid(%13888) /* ty=Tensor[(1, 1024), float32] */;
  %13890 = %13886.0 /* ty=Tensor[(1, 1024), float32] */;
  %13891 = %13886.2 /* ty=Tensor[(1, 1024), float32] */;
  %13892 = sigmoid(%13890) /* ty=Tensor[(1, 1024), float32] */;
  %13893 = tanh(%13891) /* ty=Tensor[(1, 1024), float32] */;
  %13894 = multiply(%13889, %13832) /* ty=Tensor[(1, 1024), float32] */;
  %13895 = multiply(%13892, %13893) /* ty=Tensor[(1, 1024), float32] */;
  %13896 = add(%13894, %13895) /* ty=Tensor[(1, 1024), float32] */;
  %13897 = sigmoid(%13887) /* ty=Tensor[(1, 1024), float32] */;
  %13898 = tanh(%13896) /* ty=Tensor[(1, 1024), float32] */;
  %13899 = %12788.17 /* ty=Tensor[(1, 2048), float32] */;
  %13900 = (%13899, %13856) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13901 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13902 = concatenate(%13900, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13903 = concatenate(%13901, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13904 = nn.dense(%13902, %13903, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13905 = add(%13904, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13906 = add(%13905, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13907 = split(%13906, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13908 = %13907.3 /* ty=Tensor[(1, 1024), float32] */;
  %13909 = %13907.1 /* ty=Tensor[(1, 1024), float32] */;
  %13910 = sigmoid(%13909) /* ty=Tensor[(1, 1024), float32] */;
  %13911 = %13907.0 /* ty=Tensor[(1, 1024), float32] */;
  %13912 = %13907.2 /* ty=Tensor[(1, 1024), float32] */;
  %13913 = sigmoid(%13911) /* ty=Tensor[(1, 1024), float32] */;
  %13914 = tanh(%13912) /* ty=Tensor[(1, 1024), float32] */;
  %13915 = multiply(%13910, %13853) /* ty=Tensor[(1, 1024), float32] */;
  %13916 = multiply(%13913, %13914) /* ty=Tensor[(1, 1024), float32] */;
  %13917 = add(%13915, %13916) /* ty=Tensor[(1, 1024), float32] */;
  %13918 = sigmoid(%13908) /* ty=Tensor[(1, 1024), float32] */;
  %13919 = tanh(%13917) /* ty=Tensor[(1, 1024), float32] */;
  %13920 = multiply(%13918, %13919) /* ty=Tensor[(1, 1024), float32] */;
  %13921 = (%13920, %13877) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13922 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13923 = concatenate(%13921, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13924 = concatenate(%13922, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13925 = nn.dense(%13923, %13924, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13926 = add(%13925, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13927 = add(%13926, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13928 = split(%13927, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13929 = %13928.3 /* ty=Tensor[(1, 1024), float32] */;
  %13930 = %13928.1 /* ty=Tensor[(1, 1024), float32] */;
  %13931 = sigmoid(%13930) /* ty=Tensor[(1, 1024), float32] */;
  %13932 = %13928.0 /* ty=Tensor[(1, 1024), float32] */;
  %13933 = %13928.2 /* ty=Tensor[(1, 1024), float32] */;
  %13934 = sigmoid(%13932) /* ty=Tensor[(1, 1024), float32] */;
  %13935 = tanh(%13933) /* ty=Tensor[(1, 1024), float32] */;
  %13936 = multiply(%13931, %13874) /* ty=Tensor[(1, 1024), float32] */;
  %13937 = multiply(%13934, %13935) /* ty=Tensor[(1, 1024), float32] */;
  %13938 = add(%13936, %13937) /* ty=Tensor[(1, 1024), float32] */;
  %13939 = sigmoid(%13929) /* ty=Tensor[(1, 1024), float32] */;
  %13940 = tanh(%13938) /* ty=Tensor[(1, 1024), float32] */;
  %13941 = multiply(%13939, %13940) /* ty=Tensor[(1, 1024), float32] */;
  %13942 = multiply(%13897, %13898) /* ty=Tensor[(1, 1024), float32] */;
  %13943 = (%13941, %13942) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13944 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13945 = concatenate(%13943, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13946 = concatenate(%13944, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13947 = nn.dense(%13945, %13946, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13948 = add(%13947, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13949 = add(%13948, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %13950 = split(%13949, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13951 = %13950.3 /* ty=Tensor[(1, 1024), float32] */;
  %13952 = %13950.1 /* ty=Tensor[(1, 1024), float32] */;
  %13953 = sigmoid(%13952) /* ty=Tensor[(1, 1024), float32] */;
  %13954 = %13950.0 /* ty=Tensor[(1, 1024), float32] */;
  %13955 = %13950.2 /* ty=Tensor[(1, 1024), float32] */;
  %13956 = sigmoid(%13954) /* ty=Tensor[(1, 1024), float32] */;
  %13957 = tanh(%13955) /* ty=Tensor[(1, 1024), float32] */;
  %13958 = multiply(%13953, %13896) /* ty=Tensor[(1, 1024), float32] */;
  %13959 = multiply(%13956, %13957) /* ty=Tensor[(1, 1024), float32] */;
  %13960 = add(%13958, %13959) /* ty=Tensor[(1, 1024), float32] */;
  %13961 = sigmoid(%13951) /* ty=Tensor[(1, 1024), float32] */;
  %13962 = tanh(%13960) /* ty=Tensor[(1, 1024), float32] */;
  %13963 = %12788.18 /* ty=Tensor[(1, 2048), float32] */;
  %13964 = (%13963, %13920) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %13965 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %13966 = concatenate(%13964, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %13967 = concatenate(%13965, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %13968 = nn.dense(%13966, %13967, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13969 = add(%13968, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13970 = add(%13969, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %13971 = split(%13970, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13972 = %13971.3 /* ty=Tensor[(1, 1024), float32] */;
  %13973 = %13971.1 /* ty=Tensor[(1, 1024), float32] */;
  %13974 = sigmoid(%13973) /* ty=Tensor[(1, 1024), float32] */;
  %13975 = %13971.0 /* ty=Tensor[(1, 1024), float32] */;
  %13976 = %13971.2 /* ty=Tensor[(1, 1024), float32] */;
  %13977 = sigmoid(%13975) /* ty=Tensor[(1, 1024), float32] */;
  %13978 = tanh(%13976) /* ty=Tensor[(1, 1024), float32] */;
  %13979 = multiply(%13974, %13917) /* ty=Tensor[(1, 1024), float32] */;
  %13980 = multiply(%13977, %13978) /* ty=Tensor[(1, 1024), float32] */;
  %13981 = add(%13979, %13980) /* ty=Tensor[(1, 1024), float32] */;
  %13982 = sigmoid(%13972) /* ty=Tensor[(1, 1024), float32] */;
  %13983 = tanh(%13981) /* ty=Tensor[(1, 1024), float32] */;
  %13984 = multiply(%13982, %13983) /* ty=Tensor[(1, 1024), float32] */;
  %13985 = (%13984, %13941) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13986 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %13987 = concatenate(%13985, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %13988 = concatenate(%13986, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %13989 = nn.dense(%13987, %13988, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %13990 = add(%13989, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13991 = add(%13990, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %13992 = split(%13991, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %13993 = %13992.3 /* ty=Tensor[(1, 1024), float32] */;
  %13994 = %13992.1 /* ty=Tensor[(1, 1024), float32] */;
  %13995 = sigmoid(%13994) /* ty=Tensor[(1, 1024), float32] */;
  %13996 = %13992.0 /* ty=Tensor[(1, 1024), float32] */;
  %13997 = %13992.2 /* ty=Tensor[(1, 1024), float32] */;
  %13998 = sigmoid(%13996) /* ty=Tensor[(1, 1024), float32] */;
  %13999 = tanh(%13997) /* ty=Tensor[(1, 1024), float32] */;
  %14000 = multiply(%13995, %13938) /* ty=Tensor[(1, 1024), float32] */;
  %14001 = multiply(%13998, %13999) /* ty=Tensor[(1, 1024), float32] */;
  %14002 = add(%14000, %14001) /* ty=Tensor[(1, 1024), float32] */;
  %14003 = sigmoid(%13993) /* ty=Tensor[(1, 1024), float32] */;
  %14004 = tanh(%14002) /* ty=Tensor[(1, 1024), float32] */;
  %14005 = multiply(%14003, %14004) /* ty=Tensor[(1, 1024), float32] */;
  %14006 = multiply(%13961, %13962) /* ty=Tensor[(1, 1024), float32] */;
  %14007 = (%14005, %14006) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14008 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14009 = concatenate(%14007, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14010 = concatenate(%14008, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14011 = nn.dense(%14009, %14010, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14012 = add(%14011, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14013 = add(%14012, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14014 = split(%14013, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14015 = %14014.3 /* ty=Tensor[(1, 1024), float32] */;
  %14016 = %14014.1 /* ty=Tensor[(1, 1024), float32] */;
  %14017 = sigmoid(%14016) /* ty=Tensor[(1, 1024), float32] */;
  %14018 = %14014.0 /* ty=Tensor[(1, 1024), float32] */;
  %14019 = %14014.2 /* ty=Tensor[(1, 1024), float32] */;
  %14020 = sigmoid(%14018) /* ty=Tensor[(1, 1024), float32] */;
  %14021 = tanh(%14019) /* ty=Tensor[(1, 1024), float32] */;
  %14022 = multiply(%14017, %13960) /* ty=Tensor[(1, 1024), float32] */;
  %14023 = multiply(%14020, %14021) /* ty=Tensor[(1, 1024), float32] */;
  %14024 = add(%14022, %14023) /* ty=Tensor[(1, 1024), float32] */;
  %14025 = sigmoid(%14015) /* ty=Tensor[(1, 1024), float32] */;
  %14026 = tanh(%14024) /* ty=Tensor[(1, 1024), float32] */;
  %14027 = %12788.19 /* ty=Tensor[(1, 2048), float32] */;
  %14028 = (%14027, %13984) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14029 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14030 = concatenate(%14028, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14031 = concatenate(%14029, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14032 = nn.dense(%14030, %14031, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14033 = add(%14032, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14034 = add(%14033, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14035 = split(%14034, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14036 = %14035.3 /* ty=Tensor[(1, 1024), float32] */;
  %14037 = %14035.1 /* ty=Tensor[(1, 1024), float32] */;
  %14038 = sigmoid(%14037) /* ty=Tensor[(1, 1024), float32] */;
  %14039 = %14035.0 /* ty=Tensor[(1, 1024), float32] */;
  %14040 = %14035.2 /* ty=Tensor[(1, 1024), float32] */;
  %14041 = sigmoid(%14039) /* ty=Tensor[(1, 1024), float32] */;
  %14042 = tanh(%14040) /* ty=Tensor[(1, 1024), float32] */;
  %14043 = multiply(%14038, %13981) /* ty=Tensor[(1, 1024), float32] */;
  %14044 = multiply(%14041, %14042) /* ty=Tensor[(1, 1024), float32] */;
  %14045 = add(%14043, %14044) /* ty=Tensor[(1, 1024), float32] */;
  %14046 = sigmoid(%14036) /* ty=Tensor[(1, 1024), float32] */;
  %14047 = tanh(%14045) /* ty=Tensor[(1, 1024), float32] */;
  %14048 = multiply(%14046, %14047) /* ty=Tensor[(1, 1024), float32] */;
  %14049 = (%14048, %14005) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14050 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14051 = concatenate(%14049, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14052 = concatenate(%14050, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14053 = nn.dense(%14051, %14052, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14054 = add(%14053, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14055 = add(%14054, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14056 = split(%14055, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14057 = %14056.3 /* ty=Tensor[(1, 1024), float32] */;
  %14058 = %14056.1 /* ty=Tensor[(1, 1024), float32] */;
  %14059 = sigmoid(%14058) /* ty=Tensor[(1, 1024), float32] */;
  %14060 = %14056.0 /* ty=Tensor[(1, 1024), float32] */;
  %14061 = %14056.2 /* ty=Tensor[(1, 1024), float32] */;
  %14062 = sigmoid(%14060) /* ty=Tensor[(1, 1024), float32] */;
  %14063 = tanh(%14061) /* ty=Tensor[(1, 1024), float32] */;
  %14064 = multiply(%14059, %14002) /* ty=Tensor[(1, 1024), float32] */;
  %14065 = multiply(%14062, %14063) /* ty=Tensor[(1, 1024), float32] */;
  %14066 = add(%14064, %14065) /* ty=Tensor[(1, 1024), float32] */;
  %14067 = sigmoid(%14057) /* ty=Tensor[(1, 1024), float32] */;
  %14068 = tanh(%14066) /* ty=Tensor[(1, 1024), float32] */;
  %14069 = multiply(%14067, %14068) /* ty=Tensor[(1, 1024), float32] */;
  %14070 = multiply(%14025, %14026) /* ty=Tensor[(1, 1024), float32] */;
  %14071 = (%14069, %14070) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14072 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14073 = concatenate(%14071, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14074 = concatenate(%14072, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14075 = nn.dense(%14073, %14074, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14076 = add(%14075, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14077 = add(%14076, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14078 = split(%14077, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14079 = %14078.3 /* ty=Tensor[(1, 1024), float32] */;
  %14080 = %14078.1 /* ty=Tensor[(1, 1024), float32] */;
  %14081 = sigmoid(%14080) /* ty=Tensor[(1, 1024), float32] */;
  %14082 = %14078.0 /* ty=Tensor[(1, 1024), float32] */;
  %14083 = %14078.2 /* ty=Tensor[(1, 1024), float32] */;
  %14084 = sigmoid(%14082) /* ty=Tensor[(1, 1024), float32] */;
  %14085 = tanh(%14083) /* ty=Tensor[(1, 1024), float32] */;
  %14086 = multiply(%14081, %14024) /* ty=Tensor[(1, 1024), float32] */;
  %14087 = multiply(%14084, %14085) /* ty=Tensor[(1, 1024), float32] */;
  %14088 = add(%14086, %14087) /* ty=Tensor[(1, 1024), float32] */;
  %14089 = sigmoid(%14079) /* ty=Tensor[(1, 1024), float32] */;
  %14090 = tanh(%14088) /* ty=Tensor[(1, 1024), float32] */;
  %14091 = %12788.20 /* ty=Tensor[(1, 2048), float32] */;
  %14092 = (%14091, %14048) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14093 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14094 = concatenate(%14092, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14095 = concatenate(%14093, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14096 = nn.dense(%14094, %14095, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14097 = add(%14096, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14098 = add(%14097, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14099 = split(%14098, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14100 = %14099.3 /* ty=Tensor[(1, 1024), float32] */;
  %14101 = %14099.1 /* ty=Tensor[(1, 1024), float32] */;
  %14102 = sigmoid(%14101) /* ty=Tensor[(1, 1024), float32] */;
  %14103 = %14099.0 /* ty=Tensor[(1, 1024), float32] */;
  %14104 = %14099.2 /* ty=Tensor[(1, 1024), float32] */;
  %14105 = sigmoid(%14103) /* ty=Tensor[(1, 1024), float32] */;
  %14106 = tanh(%14104) /* ty=Tensor[(1, 1024), float32] */;
  %14107 = multiply(%14102, %14045) /* ty=Tensor[(1, 1024), float32] */;
  %14108 = multiply(%14105, %14106) /* ty=Tensor[(1, 1024), float32] */;
  %14109 = add(%14107, %14108) /* ty=Tensor[(1, 1024), float32] */;
  %14110 = sigmoid(%14100) /* ty=Tensor[(1, 1024), float32] */;
  %14111 = tanh(%14109) /* ty=Tensor[(1, 1024), float32] */;
  %14112 = multiply(%14110, %14111) /* ty=Tensor[(1, 1024), float32] */;
  %14113 = (%14112, %14069) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14114 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14115 = concatenate(%14113, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14116 = concatenate(%14114, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14117 = nn.dense(%14115, %14116, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14118 = add(%14117, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14119 = add(%14118, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14120 = split(%14119, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14121 = %14120.3 /* ty=Tensor[(1, 1024), float32] */;
  %14122 = %14120.1 /* ty=Tensor[(1, 1024), float32] */;
  %14123 = sigmoid(%14122) /* ty=Tensor[(1, 1024), float32] */;
  %14124 = %14120.0 /* ty=Tensor[(1, 1024), float32] */;
  %14125 = %14120.2 /* ty=Tensor[(1, 1024), float32] */;
  %14126 = sigmoid(%14124) /* ty=Tensor[(1, 1024), float32] */;
  %14127 = tanh(%14125) /* ty=Tensor[(1, 1024), float32] */;
  %14128 = multiply(%14123, %14066) /* ty=Tensor[(1, 1024), float32] */;
  %14129 = multiply(%14126, %14127) /* ty=Tensor[(1, 1024), float32] */;
  %14130 = add(%14128, %14129) /* ty=Tensor[(1, 1024), float32] */;
  %14131 = sigmoid(%14121) /* ty=Tensor[(1, 1024), float32] */;
  %14132 = tanh(%14130) /* ty=Tensor[(1, 1024), float32] */;
  %14133 = multiply(%14131, %14132) /* ty=Tensor[(1, 1024), float32] */;
  %14134 = multiply(%14089, %14090) /* ty=Tensor[(1, 1024), float32] */;
  %14135 = (%14133, %14134) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14136 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14137 = concatenate(%14135, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14138 = concatenate(%14136, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14139 = nn.dense(%14137, %14138, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14140 = add(%14139, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14141 = add(%14140, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14142 = split(%14141, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14143 = %14142.3 /* ty=Tensor[(1, 1024), float32] */;
  %14144 = %14142.1 /* ty=Tensor[(1, 1024), float32] */;
  %14145 = sigmoid(%14144) /* ty=Tensor[(1, 1024), float32] */;
  %14146 = %14142.0 /* ty=Tensor[(1, 1024), float32] */;
  %14147 = %14142.2 /* ty=Tensor[(1, 1024), float32] */;
  %14148 = sigmoid(%14146) /* ty=Tensor[(1, 1024), float32] */;
  %14149 = tanh(%14147) /* ty=Tensor[(1, 1024), float32] */;
  %14150 = multiply(%14145, %14088) /* ty=Tensor[(1, 1024), float32] */;
  %14151 = multiply(%14148, %14149) /* ty=Tensor[(1, 1024), float32] */;
  %14152 = add(%14150, %14151) /* ty=Tensor[(1, 1024), float32] */;
  %14153 = sigmoid(%14143) /* ty=Tensor[(1, 1024), float32] */;
  %14154 = tanh(%14152) /* ty=Tensor[(1, 1024), float32] */;
  %14155 = %12788.21 /* ty=Tensor[(1, 2048), float32] */;
  %14156 = (%14155, %14112) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14157 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14158 = concatenate(%14156, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14159 = concatenate(%14157, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14160 = nn.dense(%14158, %14159, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14161 = add(%14160, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14162 = add(%14161, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14163 = split(%14162, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14164 = %14163.3 /* ty=Tensor[(1, 1024), float32] */;
  %14165 = %14163.1 /* ty=Tensor[(1, 1024), float32] */;
  %14166 = sigmoid(%14165) /* ty=Tensor[(1, 1024), float32] */;
  %14167 = %14163.0 /* ty=Tensor[(1, 1024), float32] */;
  %14168 = %14163.2 /* ty=Tensor[(1, 1024), float32] */;
  %14169 = sigmoid(%14167) /* ty=Tensor[(1, 1024), float32] */;
  %14170 = tanh(%14168) /* ty=Tensor[(1, 1024), float32] */;
  %14171 = multiply(%14166, %14109) /* ty=Tensor[(1, 1024), float32] */;
  %14172 = multiply(%14169, %14170) /* ty=Tensor[(1, 1024), float32] */;
  %14173 = add(%14171, %14172) /* ty=Tensor[(1, 1024), float32] */;
  %14174 = sigmoid(%14164) /* ty=Tensor[(1, 1024), float32] */;
  %14175 = tanh(%14173) /* ty=Tensor[(1, 1024), float32] */;
  %14176 = multiply(%14174, %14175) /* ty=Tensor[(1, 1024), float32] */;
  %14177 = (%14176, %14133) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14178 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14179 = concatenate(%14177, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14180 = concatenate(%14178, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14181 = nn.dense(%14179, %14180, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14182 = add(%14181, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14183 = add(%14182, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14184 = split(%14183, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14185 = %14184.3 /* ty=Tensor[(1, 1024), float32] */;
  %14186 = %14184.1 /* ty=Tensor[(1, 1024), float32] */;
  %14187 = sigmoid(%14186) /* ty=Tensor[(1, 1024), float32] */;
  %14188 = %14184.0 /* ty=Tensor[(1, 1024), float32] */;
  %14189 = %14184.2 /* ty=Tensor[(1, 1024), float32] */;
  %14190 = sigmoid(%14188) /* ty=Tensor[(1, 1024), float32] */;
  %14191 = tanh(%14189) /* ty=Tensor[(1, 1024), float32] */;
  %14192 = multiply(%14187, %14130) /* ty=Tensor[(1, 1024), float32] */;
  %14193 = multiply(%14190, %14191) /* ty=Tensor[(1, 1024), float32] */;
  %14194 = add(%14192, %14193) /* ty=Tensor[(1, 1024), float32] */;
  %14195 = sigmoid(%14185) /* ty=Tensor[(1, 1024), float32] */;
  %14196 = tanh(%14194) /* ty=Tensor[(1, 1024), float32] */;
  %14197 = multiply(%14195, %14196) /* ty=Tensor[(1, 1024), float32] */;
  %14198 = multiply(%14153, %14154) /* ty=Tensor[(1, 1024), float32] */;
  %14199 = (%14197, %14198) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14200 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14201 = concatenate(%14199, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14202 = concatenate(%14200, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14203 = nn.dense(%14201, %14202, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14204 = add(%14203, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14205 = add(%14204, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14206 = split(%14205, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14207 = %14206.3 /* ty=Tensor[(1, 1024), float32] */;
  %14208 = %14206.1 /* ty=Tensor[(1, 1024), float32] */;
  %14209 = sigmoid(%14208) /* ty=Tensor[(1, 1024), float32] */;
  %14210 = %14206.0 /* ty=Tensor[(1, 1024), float32] */;
  %14211 = %14206.2 /* ty=Tensor[(1, 1024), float32] */;
  %14212 = sigmoid(%14210) /* ty=Tensor[(1, 1024), float32] */;
  %14213 = tanh(%14211) /* ty=Tensor[(1, 1024), float32] */;
  %14214 = multiply(%14209, %14152) /* ty=Tensor[(1, 1024), float32] */;
  %14215 = multiply(%14212, %14213) /* ty=Tensor[(1, 1024), float32] */;
  %14216 = add(%14214, %14215) /* ty=Tensor[(1, 1024), float32] */;
  %14217 = sigmoid(%14207) /* ty=Tensor[(1, 1024), float32] */;
  %14218 = tanh(%14216) /* ty=Tensor[(1, 1024), float32] */;
  %14219 = %12788.22 /* ty=Tensor[(1, 2048), float32] */;
  %14220 = (%14219, %14176) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14221 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14222 = concatenate(%14220, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14223 = concatenate(%14221, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14224 = nn.dense(%14222, %14223, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14225 = add(%14224, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14226 = add(%14225, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14227 = split(%14226, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14228 = %14227.3 /* ty=Tensor[(1, 1024), float32] */;
  %14229 = %14227.1 /* ty=Tensor[(1, 1024), float32] */;
  %14230 = sigmoid(%14229) /* ty=Tensor[(1, 1024), float32] */;
  %14231 = %14227.0 /* ty=Tensor[(1, 1024), float32] */;
  %14232 = %14227.2 /* ty=Tensor[(1, 1024), float32] */;
  %14233 = sigmoid(%14231) /* ty=Tensor[(1, 1024), float32] */;
  %14234 = tanh(%14232) /* ty=Tensor[(1, 1024), float32] */;
  %14235 = multiply(%14230, %14173) /* ty=Tensor[(1, 1024), float32] */;
  %14236 = multiply(%14233, %14234) /* ty=Tensor[(1, 1024), float32] */;
  %14237 = add(%14235, %14236) /* ty=Tensor[(1, 1024), float32] */;
  %14238 = sigmoid(%14228) /* ty=Tensor[(1, 1024), float32] */;
  %14239 = tanh(%14237) /* ty=Tensor[(1, 1024), float32] */;
  %14240 = multiply(%14238, %14239) /* ty=Tensor[(1, 1024), float32] */;
  %14241 = (%14240, %14197) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14242 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14243 = concatenate(%14241, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14244 = concatenate(%14242, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14245 = nn.dense(%14243, %14244, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14246 = add(%14245, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14247 = add(%14246, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14248 = split(%14247, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14249 = %14248.3 /* ty=Tensor[(1, 1024), float32] */;
  %14250 = %14248.1 /* ty=Tensor[(1, 1024), float32] */;
  %14251 = sigmoid(%14250) /* ty=Tensor[(1, 1024), float32] */;
  %14252 = %14248.0 /* ty=Tensor[(1, 1024), float32] */;
  %14253 = %14248.2 /* ty=Tensor[(1, 1024), float32] */;
  %14254 = sigmoid(%14252) /* ty=Tensor[(1, 1024), float32] */;
  %14255 = tanh(%14253) /* ty=Tensor[(1, 1024), float32] */;
  %14256 = multiply(%14251, %14194) /* ty=Tensor[(1, 1024), float32] */;
  %14257 = multiply(%14254, %14255) /* ty=Tensor[(1, 1024), float32] */;
  %14258 = add(%14256, %14257) /* ty=Tensor[(1, 1024), float32] */;
  %14259 = sigmoid(%14249) /* ty=Tensor[(1, 1024), float32] */;
  %14260 = tanh(%14258) /* ty=Tensor[(1, 1024), float32] */;
  %14261 = multiply(%14259, %14260) /* ty=Tensor[(1, 1024), float32] */;
  %14262 = multiply(%14217, %14218) /* ty=Tensor[(1, 1024), float32] */;
  %14263 = (%14261, %14262) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14264 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14265 = concatenate(%14263, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14266 = concatenate(%14264, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14267 = nn.dense(%14265, %14266, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14268 = add(%14267, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14269 = add(%14268, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14270 = split(%14269, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14271 = %14270.3 /* ty=Tensor[(1, 1024), float32] */;
  %14272 = %14270.1 /* ty=Tensor[(1, 1024), float32] */;
  %14273 = sigmoid(%14272) /* ty=Tensor[(1, 1024), float32] */;
  %14274 = %14270.0 /* ty=Tensor[(1, 1024), float32] */;
  %14275 = %14270.2 /* ty=Tensor[(1, 1024), float32] */;
  %14276 = sigmoid(%14274) /* ty=Tensor[(1, 1024), float32] */;
  %14277 = tanh(%14275) /* ty=Tensor[(1, 1024), float32] */;
  %14278 = multiply(%14273, %14216) /* ty=Tensor[(1, 1024), float32] */;
  %14279 = multiply(%14276, %14277) /* ty=Tensor[(1, 1024), float32] */;
  %14280 = add(%14278, %14279) /* ty=Tensor[(1, 1024), float32] */;
  %14281 = sigmoid(%14271) /* ty=Tensor[(1, 1024), float32] */;
  %14282 = tanh(%14280) /* ty=Tensor[(1, 1024), float32] */;
  %14283 = %12788.23 /* ty=Tensor[(1, 2048), float32] */;
  %14284 = (%14283, %14240) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14285 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14286 = concatenate(%14284, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14287 = concatenate(%14285, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14288 = nn.dense(%14286, %14287, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14289 = add(%14288, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14290 = add(%14289, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14291 = split(%14290, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14292 = %14291.3 /* ty=Tensor[(1, 1024), float32] */;
  %14293 = %14291.1 /* ty=Tensor[(1, 1024), float32] */;
  %14294 = sigmoid(%14293) /* ty=Tensor[(1, 1024), float32] */;
  %14295 = %14291.0 /* ty=Tensor[(1, 1024), float32] */;
  %14296 = %14291.2 /* ty=Tensor[(1, 1024), float32] */;
  %14297 = sigmoid(%14295) /* ty=Tensor[(1, 1024), float32] */;
  %14298 = tanh(%14296) /* ty=Tensor[(1, 1024), float32] */;
  %14299 = multiply(%14294, %14237) /* ty=Tensor[(1, 1024), float32] */;
  %14300 = multiply(%14297, %14298) /* ty=Tensor[(1, 1024), float32] */;
  %14301 = add(%14299, %14300) /* ty=Tensor[(1, 1024), float32] */;
  %14302 = sigmoid(%14292) /* ty=Tensor[(1, 1024), float32] */;
  %14303 = tanh(%14301) /* ty=Tensor[(1, 1024), float32] */;
  %14304 = multiply(%14302, %14303) /* ty=Tensor[(1, 1024), float32] */;
  %14305 = (%14304, %14261) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14306 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14307 = concatenate(%14305, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14308 = concatenate(%14306, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14309 = nn.dense(%14307, %14308, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14310 = add(%14309, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14311 = add(%14310, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14312 = split(%14311, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14313 = %14312.3 /* ty=Tensor[(1, 1024), float32] */;
  %14314 = %14312.1 /* ty=Tensor[(1, 1024), float32] */;
  %14315 = sigmoid(%14314) /* ty=Tensor[(1, 1024), float32] */;
  %14316 = %14312.0 /* ty=Tensor[(1, 1024), float32] */;
  %14317 = %14312.2 /* ty=Tensor[(1, 1024), float32] */;
  %14318 = sigmoid(%14316) /* ty=Tensor[(1, 1024), float32] */;
  %14319 = tanh(%14317) /* ty=Tensor[(1, 1024), float32] */;
  %14320 = multiply(%14315, %14258) /* ty=Tensor[(1, 1024), float32] */;
  %14321 = multiply(%14318, %14319) /* ty=Tensor[(1, 1024), float32] */;
  %14322 = add(%14320, %14321) /* ty=Tensor[(1, 1024), float32] */;
  %14323 = sigmoid(%14313) /* ty=Tensor[(1, 1024), float32] */;
  %14324 = tanh(%14322) /* ty=Tensor[(1, 1024), float32] */;
  %14325 = multiply(%14323, %14324) /* ty=Tensor[(1, 1024), float32] */;
  %14326 = multiply(%14281, %14282) /* ty=Tensor[(1, 1024), float32] */;
  %14327 = (%14325, %14326) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14328 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14329 = concatenate(%14327, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14330 = concatenate(%14328, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14331 = nn.dense(%14329, %14330, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14332 = add(%14331, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14333 = add(%14332, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14334 = split(%14333, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14335 = %14334.3 /* ty=Tensor[(1, 1024), float32] */;
  %14336 = %14334.1 /* ty=Tensor[(1, 1024), float32] */;
  %14337 = sigmoid(%14336) /* ty=Tensor[(1, 1024), float32] */;
  %14338 = %14334.0 /* ty=Tensor[(1, 1024), float32] */;
  %14339 = %14334.2 /* ty=Tensor[(1, 1024), float32] */;
  %14340 = sigmoid(%14338) /* ty=Tensor[(1, 1024), float32] */;
  %14341 = tanh(%14339) /* ty=Tensor[(1, 1024), float32] */;
  %14342 = multiply(%14337, %14280) /* ty=Tensor[(1, 1024), float32] */;
  %14343 = multiply(%14340, %14341) /* ty=Tensor[(1, 1024), float32] */;
  %14344 = add(%14342, %14343) /* ty=Tensor[(1, 1024), float32] */;
  %14345 = sigmoid(%14335) /* ty=Tensor[(1, 1024), float32] */;
  %14346 = tanh(%14344) /* ty=Tensor[(1, 1024), float32] */;
  %14347 = %12788.24 /* ty=Tensor[(1, 2048), float32] */;
  %14348 = (%14347, %14304) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14349 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14350 = concatenate(%14348, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14351 = concatenate(%14349, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14352 = nn.dense(%14350, %14351, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14353 = add(%14352, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14354 = add(%14353, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14355 = split(%14354, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14356 = %14355.3 /* ty=Tensor[(1, 1024), float32] */;
  %14357 = %14355.1 /* ty=Tensor[(1, 1024), float32] */;
  %14358 = sigmoid(%14357) /* ty=Tensor[(1, 1024), float32] */;
  %14359 = %14355.0 /* ty=Tensor[(1, 1024), float32] */;
  %14360 = %14355.2 /* ty=Tensor[(1, 1024), float32] */;
  %14361 = sigmoid(%14359) /* ty=Tensor[(1, 1024), float32] */;
  %14362 = tanh(%14360) /* ty=Tensor[(1, 1024), float32] */;
  %14363 = multiply(%14358, %14301) /* ty=Tensor[(1, 1024), float32] */;
  %14364 = multiply(%14361, %14362) /* ty=Tensor[(1, 1024), float32] */;
  %14365 = add(%14363, %14364) /* ty=Tensor[(1, 1024), float32] */;
  %14366 = sigmoid(%14356) /* ty=Tensor[(1, 1024), float32] */;
  %14367 = tanh(%14365) /* ty=Tensor[(1, 1024), float32] */;
  %14368 = multiply(%14366, %14367) /* ty=Tensor[(1, 1024), float32] */;
  %14369 = (%14368, %14325) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14370 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14371 = concatenate(%14369, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14372 = concatenate(%14370, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14373 = nn.dense(%14371, %14372, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14374 = add(%14373, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14375 = add(%14374, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14376 = split(%14375, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14377 = %14376.3 /* ty=Tensor[(1, 1024), float32] */;
  %14378 = %14376.1 /* ty=Tensor[(1, 1024), float32] */;
  %14379 = sigmoid(%14378) /* ty=Tensor[(1, 1024), float32] */;
  %14380 = %14376.0 /* ty=Tensor[(1, 1024), float32] */;
  %14381 = %14376.2 /* ty=Tensor[(1, 1024), float32] */;
  %14382 = sigmoid(%14380) /* ty=Tensor[(1, 1024), float32] */;
  %14383 = tanh(%14381) /* ty=Tensor[(1, 1024), float32] */;
  %14384 = multiply(%14379, %14322) /* ty=Tensor[(1, 1024), float32] */;
  %14385 = multiply(%14382, %14383) /* ty=Tensor[(1, 1024), float32] */;
  %14386 = add(%14384, %14385) /* ty=Tensor[(1, 1024), float32] */;
  %14387 = sigmoid(%14377) /* ty=Tensor[(1, 1024), float32] */;
  %14388 = tanh(%14386) /* ty=Tensor[(1, 1024), float32] */;
  %14389 = multiply(%14387, %14388) /* ty=Tensor[(1, 1024), float32] */;
  %14390 = multiply(%14345, %14346) /* ty=Tensor[(1, 1024), float32] */;
  %14391 = (%14389, %14390) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14392 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14393 = concatenate(%14391, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14394 = concatenate(%14392, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14395 = nn.dense(%14393, %14394, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14396 = add(%14395, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14397 = add(%14396, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14398 = split(%14397, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14399 = %14398.3 /* ty=Tensor[(1, 1024), float32] */;
  %14400 = %14398.1 /* ty=Tensor[(1, 1024), float32] */;
  %14401 = sigmoid(%14400) /* ty=Tensor[(1, 1024), float32] */;
  %14402 = %14398.0 /* ty=Tensor[(1, 1024), float32] */;
  %14403 = %14398.2 /* ty=Tensor[(1, 1024), float32] */;
  %14404 = sigmoid(%14402) /* ty=Tensor[(1, 1024), float32] */;
  %14405 = tanh(%14403) /* ty=Tensor[(1, 1024), float32] */;
  %14406 = multiply(%14401, %14344) /* ty=Tensor[(1, 1024), float32] */;
  %14407 = multiply(%14404, %14405) /* ty=Tensor[(1, 1024), float32] */;
  %14408 = add(%14406, %14407) /* ty=Tensor[(1, 1024), float32] */;
  %14409 = sigmoid(%14399) /* ty=Tensor[(1, 1024), float32] */;
  %14410 = tanh(%14408) /* ty=Tensor[(1, 1024), float32] */;
  %14411 = %12788.25 /* ty=Tensor[(1, 2048), float32] */;
  %14412 = (%14411, %14368) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14413 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14414 = concatenate(%14412, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14415 = concatenate(%14413, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14416 = nn.dense(%14414, %14415, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14417 = add(%14416, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14418 = add(%14417, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14419 = split(%14418, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14420 = %14419.3 /* ty=Tensor[(1, 1024), float32] */;
  %14421 = %14419.1 /* ty=Tensor[(1, 1024), float32] */;
  %14422 = sigmoid(%14421) /* ty=Tensor[(1, 1024), float32] */;
  %14423 = %14419.0 /* ty=Tensor[(1, 1024), float32] */;
  %14424 = %14419.2 /* ty=Tensor[(1, 1024), float32] */;
  %14425 = sigmoid(%14423) /* ty=Tensor[(1, 1024), float32] */;
  %14426 = tanh(%14424) /* ty=Tensor[(1, 1024), float32] */;
  %14427 = multiply(%14422, %14365) /* ty=Tensor[(1, 1024), float32] */;
  %14428 = multiply(%14425, %14426) /* ty=Tensor[(1, 1024), float32] */;
  %14429 = add(%14427, %14428) /* ty=Tensor[(1, 1024), float32] */;
  %14430 = sigmoid(%14420) /* ty=Tensor[(1, 1024), float32] */;
  %14431 = tanh(%14429) /* ty=Tensor[(1, 1024), float32] */;
  %14432 = multiply(%14430, %14431) /* ty=Tensor[(1, 1024), float32] */;
  %14433 = (%14432, %14389) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14434 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14435 = concatenate(%14433, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14436 = concatenate(%14434, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14437 = nn.dense(%14435, %14436, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14438 = add(%14437, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14439 = add(%14438, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14440 = split(%14439, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14441 = %14440.3 /* ty=Tensor[(1, 1024), float32] */;
  %14442 = %14440.1 /* ty=Tensor[(1, 1024), float32] */;
  %14443 = sigmoid(%14442) /* ty=Tensor[(1, 1024), float32] */;
  %14444 = %14440.0 /* ty=Tensor[(1, 1024), float32] */;
  %14445 = %14440.2 /* ty=Tensor[(1, 1024), float32] */;
  %14446 = sigmoid(%14444) /* ty=Tensor[(1, 1024), float32] */;
  %14447 = tanh(%14445) /* ty=Tensor[(1, 1024), float32] */;
  %14448 = multiply(%14443, %14386) /* ty=Tensor[(1, 1024), float32] */;
  %14449 = multiply(%14446, %14447) /* ty=Tensor[(1, 1024), float32] */;
  %14450 = add(%14448, %14449) /* ty=Tensor[(1, 1024), float32] */;
  %14451 = sigmoid(%14441) /* ty=Tensor[(1, 1024), float32] */;
  %14452 = tanh(%14450) /* ty=Tensor[(1, 1024), float32] */;
  %14453 = multiply(%14451, %14452) /* ty=Tensor[(1, 1024), float32] */;
  %14454 = multiply(%14409, %14410) /* ty=Tensor[(1, 1024), float32] */;
  %14455 = (%14453, %14454) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14456 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14457 = concatenate(%14455, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14458 = concatenate(%14456, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14459 = nn.dense(%14457, %14458, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14460 = add(%14459, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14461 = add(%14460, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14462 = split(%14461, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14463 = %14462.3 /* ty=Tensor[(1, 1024), float32] */;
  %14464 = %14462.1 /* ty=Tensor[(1, 1024), float32] */;
  %14465 = sigmoid(%14464) /* ty=Tensor[(1, 1024), float32] */;
  %14466 = %14462.0 /* ty=Tensor[(1, 1024), float32] */;
  %14467 = %14462.2 /* ty=Tensor[(1, 1024), float32] */;
  %14468 = sigmoid(%14466) /* ty=Tensor[(1, 1024), float32] */;
  %14469 = tanh(%14467) /* ty=Tensor[(1, 1024), float32] */;
  %14470 = multiply(%14465, %14408) /* ty=Tensor[(1, 1024), float32] */;
  %14471 = multiply(%14468, %14469) /* ty=Tensor[(1, 1024), float32] */;
  %14472 = add(%14470, %14471) /* ty=Tensor[(1, 1024), float32] */;
  %14473 = sigmoid(%14463) /* ty=Tensor[(1, 1024), float32] */;
  %14474 = tanh(%14472) /* ty=Tensor[(1, 1024), float32] */;
  %14475 = %12788.26 /* ty=Tensor[(1, 2048), float32] */;
  %14476 = (%14475, %14432) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14477 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14478 = concatenate(%14476, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14479 = concatenate(%14477, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14480 = nn.dense(%14478, %14479, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14481 = add(%14480, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14482 = add(%14481, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14483 = split(%14482, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14484 = %14483.3 /* ty=Tensor[(1, 1024), float32] */;
  %14485 = %14483.1 /* ty=Tensor[(1, 1024), float32] */;
  %14486 = sigmoid(%14485) /* ty=Tensor[(1, 1024), float32] */;
  %14487 = %14483.0 /* ty=Tensor[(1, 1024), float32] */;
  %14488 = %14483.2 /* ty=Tensor[(1, 1024), float32] */;
  %14489 = sigmoid(%14487) /* ty=Tensor[(1, 1024), float32] */;
  %14490 = tanh(%14488) /* ty=Tensor[(1, 1024), float32] */;
  %14491 = multiply(%14486, %14429) /* ty=Tensor[(1, 1024), float32] */;
  %14492 = multiply(%14489, %14490) /* ty=Tensor[(1, 1024), float32] */;
  %14493 = add(%14491, %14492) /* ty=Tensor[(1, 1024), float32] */;
  %14494 = sigmoid(%14484) /* ty=Tensor[(1, 1024), float32] */;
  %14495 = tanh(%14493) /* ty=Tensor[(1, 1024), float32] */;
  %14496 = multiply(%14494, %14495) /* ty=Tensor[(1, 1024), float32] */;
  %14497 = (%14496, %14453) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14498 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14499 = concatenate(%14497, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14500 = concatenate(%14498, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14501 = nn.dense(%14499, %14500, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14502 = add(%14501, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14503 = add(%14502, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14504 = split(%14503, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14505 = %14504.3 /* ty=Tensor[(1, 1024), float32] */;
  %14506 = %14504.1 /* ty=Tensor[(1, 1024), float32] */;
  %14507 = sigmoid(%14506) /* ty=Tensor[(1, 1024), float32] */;
  %14508 = %14504.0 /* ty=Tensor[(1, 1024), float32] */;
  %14509 = %14504.2 /* ty=Tensor[(1, 1024), float32] */;
  %14510 = sigmoid(%14508) /* ty=Tensor[(1, 1024), float32] */;
  %14511 = tanh(%14509) /* ty=Tensor[(1, 1024), float32] */;
  %14512 = multiply(%14507, %14450) /* ty=Tensor[(1, 1024), float32] */;
  %14513 = multiply(%14510, %14511) /* ty=Tensor[(1, 1024), float32] */;
  %14514 = add(%14512, %14513) /* ty=Tensor[(1, 1024), float32] */;
  %14515 = sigmoid(%14505) /* ty=Tensor[(1, 1024), float32] */;
  %14516 = tanh(%14514) /* ty=Tensor[(1, 1024), float32] */;
  %14517 = multiply(%14515, %14516) /* ty=Tensor[(1, 1024), float32] */;
  %14518 = multiply(%14473, %14474) /* ty=Tensor[(1, 1024), float32] */;
  %14519 = (%14517, %14518) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14520 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14521 = concatenate(%14519, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14522 = concatenate(%14520, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14523 = nn.dense(%14521, %14522, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14524 = add(%14523, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14525 = add(%14524, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14526 = split(%14525, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14527 = %14526.3 /* ty=Tensor[(1, 1024), float32] */;
  %14528 = %14526.1 /* ty=Tensor[(1, 1024), float32] */;
  %14529 = sigmoid(%14528) /* ty=Tensor[(1, 1024), float32] */;
  %14530 = %14526.0 /* ty=Tensor[(1, 1024), float32] */;
  %14531 = %14526.2 /* ty=Tensor[(1, 1024), float32] */;
  %14532 = sigmoid(%14530) /* ty=Tensor[(1, 1024), float32] */;
  %14533 = tanh(%14531) /* ty=Tensor[(1, 1024), float32] */;
  %14534 = multiply(%14529, %14472) /* ty=Tensor[(1, 1024), float32] */;
  %14535 = multiply(%14532, %14533) /* ty=Tensor[(1, 1024), float32] */;
  %14536 = add(%14534, %14535) /* ty=Tensor[(1, 1024), float32] */;
  %14537 = sigmoid(%14527) /* ty=Tensor[(1, 1024), float32] */;
  %14538 = tanh(%14536) /* ty=Tensor[(1, 1024), float32] */;
  %14539 = %12788.27 /* ty=Tensor[(1, 2048), float32] */;
  %14540 = (%14539, %14496) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14541 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14542 = concatenate(%14540, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14543 = concatenate(%14541, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14544 = nn.dense(%14542, %14543, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14545 = add(%14544, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14546 = add(%14545, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14547 = split(%14546, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14548 = %14547.3 /* ty=Tensor[(1, 1024), float32] */;
  %14549 = %14547.1 /* ty=Tensor[(1, 1024), float32] */;
  %14550 = sigmoid(%14549) /* ty=Tensor[(1, 1024), float32] */;
  %14551 = %14547.0 /* ty=Tensor[(1, 1024), float32] */;
  %14552 = %14547.2 /* ty=Tensor[(1, 1024), float32] */;
  %14553 = sigmoid(%14551) /* ty=Tensor[(1, 1024), float32] */;
  %14554 = tanh(%14552) /* ty=Tensor[(1, 1024), float32] */;
  %14555 = multiply(%14550, %14493) /* ty=Tensor[(1, 1024), float32] */;
  %14556 = multiply(%14553, %14554) /* ty=Tensor[(1, 1024), float32] */;
  %14557 = add(%14555, %14556) /* ty=Tensor[(1, 1024), float32] */;
  %14558 = sigmoid(%14548) /* ty=Tensor[(1, 1024), float32] */;
  %14559 = tanh(%14557) /* ty=Tensor[(1, 1024), float32] */;
  %14560 = multiply(%14558, %14559) /* ty=Tensor[(1, 1024), float32] */;
  %14561 = (%14560, %14517) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14562 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14563 = concatenate(%14561, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14564 = concatenate(%14562, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14565 = nn.dense(%14563, %14564, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14566 = add(%14565, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14567 = add(%14566, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14568 = split(%14567, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14569 = %14568.3 /* ty=Tensor[(1, 1024), float32] */;
  %14570 = %14568.1 /* ty=Tensor[(1, 1024), float32] */;
  %14571 = sigmoid(%14570) /* ty=Tensor[(1, 1024), float32] */;
  %14572 = %14568.0 /* ty=Tensor[(1, 1024), float32] */;
  %14573 = %14568.2 /* ty=Tensor[(1, 1024), float32] */;
  %14574 = sigmoid(%14572) /* ty=Tensor[(1, 1024), float32] */;
  %14575 = tanh(%14573) /* ty=Tensor[(1, 1024), float32] */;
  %14576 = multiply(%14571, %14514) /* ty=Tensor[(1, 1024), float32] */;
  %14577 = multiply(%14574, %14575) /* ty=Tensor[(1, 1024), float32] */;
  %14578 = add(%14576, %14577) /* ty=Tensor[(1, 1024), float32] */;
  %14579 = sigmoid(%14569) /* ty=Tensor[(1, 1024), float32] */;
  %14580 = tanh(%14578) /* ty=Tensor[(1, 1024), float32] */;
  %14581 = multiply(%14579, %14580) /* ty=Tensor[(1, 1024), float32] */;
  %14582 = multiply(%14537, %14538) /* ty=Tensor[(1, 1024), float32] */;
  %14583 = (%14581, %14582) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14584 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14585 = concatenate(%14583, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14586 = concatenate(%14584, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14587 = nn.dense(%14585, %14586, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14588 = add(%14587, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14589 = add(%14588, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14590 = split(%14589, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14591 = %14590.3 /* ty=Tensor[(1, 1024), float32] */;
  %14592 = %14590.1 /* ty=Tensor[(1, 1024), float32] */;
  %14593 = sigmoid(%14592) /* ty=Tensor[(1, 1024), float32] */;
  %14594 = %14590.0 /* ty=Tensor[(1, 1024), float32] */;
  %14595 = %14590.2 /* ty=Tensor[(1, 1024), float32] */;
  %14596 = sigmoid(%14594) /* ty=Tensor[(1, 1024), float32] */;
  %14597 = tanh(%14595) /* ty=Tensor[(1, 1024), float32] */;
  %14598 = multiply(%14593, %14536) /* ty=Tensor[(1, 1024), float32] */;
  %14599 = multiply(%14596, %14597) /* ty=Tensor[(1, 1024), float32] */;
  %14600 = add(%14598, %14599) /* ty=Tensor[(1, 1024), float32] */;
  %14601 = sigmoid(%14591) /* ty=Tensor[(1, 1024), float32] */;
  %14602 = tanh(%14600) /* ty=Tensor[(1, 1024), float32] */;
  %14603 = %12788.28 /* ty=Tensor[(1, 2048), float32] */;
  %14604 = (%14603, %14560) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14605 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14606 = concatenate(%14604, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14607 = concatenate(%14605, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14608 = nn.dense(%14606, %14607, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14609 = add(%14608, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14610 = add(%14609, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14611 = split(%14610, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14612 = %14611.3 /* ty=Tensor[(1, 1024), float32] */;
  %14613 = %14611.1 /* ty=Tensor[(1, 1024), float32] */;
  %14614 = sigmoid(%14613) /* ty=Tensor[(1, 1024), float32] */;
  %14615 = %14611.0 /* ty=Tensor[(1, 1024), float32] */;
  %14616 = %14611.2 /* ty=Tensor[(1, 1024), float32] */;
  %14617 = sigmoid(%14615) /* ty=Tensor[(1, 1024), float32] */;
  %14618 = tanh(%14616) /* ty=Tensor[(1, 1024), float32] */;
  %14619 = multiply(%14614, %14557) /* ty=Tensor[(1, 1024), float32] */;
  %14620 = multiply(%14617, %14618) /* ty=Tensor[(1, 1024), float32] */;
  %14621 = add(%14619, %14620) /* ty=Tensor[(1, 1024), float32] */;
  %14622 = sigmoid(%14612) /* ty=Tensor[(1, 1024), float32] */;
  %14623 = tanh(%14621) /* ty=Tensor[(1, 1024), float32] */;
  %14624 = multiply(%14622, %14623) /* ty=Tensor[(1, 1024), float32] */;
  %14625 = (%14624, %14581) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14626 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14627 = concatenate(%14625, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14628 = concatenate(%14626, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14629 = nn.dense(%14627, %14628, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14630 = add(%14629, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14631 = add(%14630, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14632 = split(%14631, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14633 = %14632.3 /* ty=Tensor[(1, 1024), float32] */;
  %14634 = %14632.1 /* ty=Tensor[(1, 1024), float32] */;
  %14635 = sigmoid(%14634) /* ty=Tensor[(1, 1024), float32] */;
  %14636 = %14632.0 /* ty=Tensor[(1, 1024), float32] */;
  %14637 = %14632.2 /* ty=Tensor[(1, 1024), float32] */;
  %14638 = sigmoid(%14636) /* ty=Tensor[(1, 1024), float32] */;
  %14639 = tanh(%14637) /* ty=Tensor[(1, 1024), float32] */;
  %14640 = multiply(%14635, %14578) /* ty=Tensor[(1, 1024), float32] */;
  %14641 = multiply(%14638, %14639) /* ty=Tensor[(1, 1024), float32] */;
  %14642 = add(%14640, %14641) /* ty=Tensor[(1, 1024), float32] */;
  %14643 = sigmoid(%14633) /* ty=Tensor[(1, 1024), float32] */;
  %14644 = tanh(%14642) /* ty=Tensor[(1, 1024), float32] */;
  %14645 = multiply(%14643, %14644) /* ty=Tensor[(1, 1024), float32] */;
  %14646 = multiply(%14601, %14602) /* ty=Tensor[(1, 1024), float32] */;
  %14647 = (%14645, %14646) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14648 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14649 = concatenate(%14647, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14650 = concatenate(%14648, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14651 = nn.dense(%14649, %14650, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14652 = add(%14651, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14653 = add(%14652, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14654 = split(%14653, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14655 = %14654.3 /* ty=Tensor[(1, 1024), float32] */;
  %14656 = %14654.1 /* ty=Tensor[(1, 1024), float32] */;
  %14657 = sigmoid(%14656) /* ty=Tensor[(1, 1024), float32] */;
  %14658 = %14654.0 /* ty=Tensor[(1, 1024), float32] */;
  %14659 = %14654.2 /* ty=Tensor[(1, 1024), float32] */;
  %14660 = sigmoid(%14658) /* ty=Tensor[(1, 1024), float32] */;
  %14661 = tanh(%14659) /* ty=Tensor[(1, 1024), float32] */;
  %14662 = multiply(%14657, %14600) /* ty=Tensor[(1, 1024), float32] */;
  %14663 = multiply(%14660, %14661) /* ty=Tensor[(1, 1024), float32] */;
  %14664 = add(%14662, %14663) /* ty=Tensor[(1, 1024), float32] */;
  %14665 = sigmoid(%14655) /* ty=Tensor[(1, 1024), float32] */;
  %14666 = tanh(%14664) /* ty=Tensor[(1, 1024), float32] */;
  %14667 = %12788.29 /* ty=Tensor[(1, 2048), float32] */;
  %14668 = (%14667, %14624) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14669 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14670 = concatenate(%14668, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14671 = concatenate(%14669, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14672 = nn.dense(%14670, %14671, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14673 = add(%14672, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14674 = add(%14673, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14675 = split(%14674, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14676 = %14675.3 /* ty=Tensor[(1, 1024), float32] */;
  %14677 = %14675.1 /* ty=Tensor[(1, 1024), float32] */;
  %14678 = sigmoid(%14677) /* ty=Tensor[(1, 1024), float32] */;
  %14679 = %14675.0 /* ty=Tensor[(1, 1024), float32] */;
  %14680 = %14675.2 /* ty=Tensor[(1, 1024), float32] */;
  %14681 = sigmoid(%14679) /* ty=Tensor[(1, 1024), float32] */;
  %14682 = tanh(%14680) /* ty=Tensor[(1, 1024), float32] */;
  %14683 = multiply(%14678, %14621) /* ty=Tensor[(1, 1024), float32] */;
  %14684 = multiply(%14681, %14682) /* ty=Tensor[(1, 1024), float32] */;
  %14685 = add(%14683, %14684) /* ty=Tensor[(1, 1024), float32] */;
  %14686 = sigmoid(%14676) /* ty=Tensor[(1, 1024), float32] */;
  %14687 = tanh(%14685) /* ty=Tensor[(1, 1024), float32] */;
  %14688 = multiply(%14686, %14687) /* ty=Tensor[(1, 1024), float32] */;
  %14689 = (%14688, %14645) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14690 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14691 = concatenate(%14689, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14692 = concatenate(%14690, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14693 = nn.dense(%14691, %14692, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14694 = add(%14693, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14695 = add(%14694, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14696 = split(%14695, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14697 = %14696.3 /* ty=Tensor[(1, 1024), float32] */;
  %14698 = %14696.1 /* ty=Tensor[(1, 1024), float32] */;
  %14699 = sigmoid(%14698) /* ty=Tensor[(1, 1024), float32] */;
  %14700 = %14696.0 /* ty=Tensor[(1, 1024), float32] */;
  %14701 = %14696.2 /* ty=Tensor[(1, 1024), float32] */;
  %14702 = sigmoid(%14700) /* ty=Tensor[(1, 1024), float32] */;
  %14703 = tanh(%14701) /* ty=Tensor[(1, 1024), float32] */;
  %14704 = multiply(%14699, %14642) /* ty=Tensor[(1, 1024), float32] */;
  %14705 = multiply(%14702, %14703) /* ty=Tensor[(1, 1024), float32] */;
  %14706 = add(%14704, %14705) /* ty=Tensor[(1, 1024), float32] */;
  %14707 = sigmoid(%14697) /* ty=Tensor[(1, 1024), float32] */;
  %14708 = tanh(%14706) /* ty=Tensor[(1, 1024), float32] */;
  %14709 = multiply(%14707, %14708) /* ty=Tensor[(1, 1024), float32] */;
  %14710 = multiply(%14665, %14666) /* ty=Tensor[(1, 1024), float32] */;
  %14711 = (%14709, %14710) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14712 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14713 = concatenate(%14711, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14714 = concatenate(%14712, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14715 = nn.dense(%14713, %14714, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14716 = add(%14715, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14717 = add(%14716, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14718 = split(%14717, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14719 = %14718.3 /* ty=Tensor[(1, 1024), float32] */;
  %14720 = %14718.1 /* ty=Tensor[(1, 1024), float32] */;
  %14721 = sigmoid(%14720) /* ty=Tensor[(1, 1024), float32] */;
  %14722 = %14718.0 /* ty=Tensor[(1, 1024), float32] */;
  %14723 = %14718.2 /* ty=Tensor[(1, 1024), float32] */;
  %14724 = sigmoid(%14722) /* ty=Tensor[(1, 1024), float32] */;
  %14725 = tanh(%14723) /* ty=Tensor[(1, 1024), float32] */;
  %14726 = multiply(%14721, %14664) /* ty=Tensor[(1, 1024), float32] */;
  %14727 = multiply(%14724, %14725) /* ty=Tensor[(1, 1024), float32] */;
  %14728 = add(%14726, %14727) /* ty=Tensor[(1, 1024), float32] */;
  %14729 = sigmoid(%14719) /* ty=Tensor[(1, 1024), float32] */;
  %14730 = tanh(%14728) /* ty=Tensor[(1, 1024), float32] */;
  %14731 = %12788.30 /* ty=Tensor[(1, 2048), float32] */;
  %14732 = (%14731, %14688) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14733 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14734 = concatenate(%14732, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14735 = concatenate(%14733, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14736 = nn.dense(%14734, %14735, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14737 = add(%14736, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14738 = add(%14737, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14739 = split(%14738, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14740 = %14739.3 /* ty=Tensor[(1, 1024), float32] */;
  %14741 = %14739.1 /* ty=Tensor[(1, 1024), float32] */;
  %14742 = sigmoid(%14741) /* ty=Tensor[(1, 1024), float32] */;
  %14743 = %14739.0 /* ty=Tensor[(1, 1024), float32] */;
  %14744 = %14739.2 /* ty=Tensor[(1, 1024), float32] */;
  %14745 = sigmoid(%14743) /* ty=Tensor[(1, 1024), float32] */;
  %14746 = tanh(%14744) /* ty=Tensor[(1, 1024), float32] */;
  %14747 = multiply(%14742, %14685) /* ty=Tensor[(1, 1024), float32] */;
  %14748 = multiply(%14745, %14746) /* ty=Tensor[(1, 1024), float32] */;
  %14749 = add(%14747, %14748) /* ty=Tensor[(1, 1024), float32] */;
  %14750 = sigmoid(%14740) /* ty=Tensor[(1, 1024), float32] */;
  %14751 = tanh(%14749) /* ty=Tensor[(1, 1024), float32] */;
  %14752 = multiply(%14750, %14751) /* ty=Tensor[(1, 1024), float32] */;
  %14753 = (%14752, %14709) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14754 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14755 = concatenate(%14753, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14756 = concatenate(%14754, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14757 = nn.dense(%14755, %14756, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14758 = add(%14757, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14759 = add(%14758, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14760 = split(%14759, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14761 = %14760.3 /* ty=Tensor[(1, 1024), float32] */;
  %14762 = %14760.1 /* ty=Tensor[(1, 1024), float32] */;
  %14763 = sigmoid(%14762) /* ty=Tensor[(1, 1024), float32] */;
  %14764 = %14760.0 /* ty=Tensor[(1, 1024), float32] */;
  %14765 = %14760.2 /* ty=Tensor[(1, 1024), float32] */;
  %14766 = sigmoid(%14764) /* ty=Tensor[(1, 1024), float32] */;
  %14767 = tanh(%14765) /* ty=Tensor[(1, 1024), float32] */;
  %14768 = multiply(%14763, %14706) /* ty=Tensor[(1, 1024), float32] */;
  %14769 = multiply(%14766, %14767) /* ty=Tensor[(1, 1024), float32] */;
  %14770 = add(%14768, %14769) /* ty=Tensor[(1, 1024), float32] */;
  %14771 = sigmoid(%14761) /* ty=Tensor[(1, 1024), float32] */;
  %14772 = tanh(%14770) /* ty=Tensor[(1, 1024), float32] */;
  %14773 = multiply(%14771, %14772) /* ty=Tensor[(1, 1024), float32] */;
  %14774 = multiply(%14729, %14730) /* ty=Tensor[(1, 1024), float32] */;
  %14775 = (%14773, %14774) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14776 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14777 = concatenate(%14775, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14778 = concatenate(%14776, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14779 = nn.dense(%14777, %14778, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14780 = add(%14779, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14781 = add(%14780, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14782 = split(%14781, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14783 = %14782.3 /* ty=Tensor[(1, 1024), float32] */;
  %14784 = %14782.1 /* ty=Tensor[(1, 1024), float32] */;
  %14785 = sigmoid(%14784) /* ty=Tensor[(1, 1024), float32] */;
  %14786 = %14782.0 /* ty=Tensor[(1, 1024), float32] */;
  %14787 = %14782.2 /* ty=Tensor[(1, 1024), float32] */;
  %14788 = sigmoid(%14786) /* ty=Tensor[(1, 1024), float32] */;
  %14789 = tanh(%14787) /* ty=Tensor[(1, 1024), float32] */;
  %14790 = multiply(%14785, %14728) /* ty=Tensor[(1, 1024), float32] */;
  %14791 = multiply(%14788, %14789) /* ty=Tensor[(1, 1024), float32] */;
  %14792 = add(%14790, %14791) /* ty=Tensor[(1, 1024), float32] */;
  %14793 = sigmoid(%14783) /* ty=Tensor[(1, 1024), float32] */;
  %14794 = tanh(%14792) /* ty=Tensor[(1, 1024), float32] */;
  %14795 = %12788.31 /* ty=Tensor[(1, 2048), float32] */;
  %14796 = (%14795, %14752) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14797 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14798 = concatenate(%14796, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14799 = concatenate(%14797, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14800 = nn.dense(%14798, %14799, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14801 = add(%14800, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14802 = add(%14801, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14803 = split(%14802, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14804 = %14803.3 /* ty=Tensor[(1, 1024), float32] */;
  %14805 = %14803.1 /* ty=Tensor[(1, 1024), float32] */;
  %14806 = sigmoid(%14805) /* ty=Tensor[(1, 1024), float32] */;
  %14807 = %14803.0 /* ty=Tensor[(1, 1024), float32] */;
  %14808 = %14803.2 /* ty=Tensor[(1, 1024), float32] */;
  %14809 = sigmoid(%14807) /* ty=Tensor[(1, 1024), float32] */;
  %14810 = tanh(%14808) /* ty=Tensor[(1, 1024), float32] */;
  %14811 = multiply(%14806, %14749) /* ty=Tensor[(1, 1024), float32] */;
  %14812 = multiply(%14809, %14810) /* ty=Tensor[(1, 1024), float32] */;
  %14813 = add(%14811, %14812) /* ty=Tensor[(1, 1024), float32] */;
  %14814 = sigmoid(%14804) /* ty=Tensor[(1, 1024), float32] */;
  %14815 = tanh(%14813) /* ty=Tensor[(1, 1024), float32] */;
  %14816 = multiply(%14814, %14815) /* ty=Tensor[(1, 1024), float32] */;
  %14817 = (%14816, %14773) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14818 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14819 = concatenate(%14817, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14820 = concatenate(%14818, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14821 = nn.dense(%14819, %14820, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14822 = add(%14821, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14823 = add(%14822, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14824 = split(%14823, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14825 = %14824.3 /* ty=Tensor[(1, 1024), float32] */;
  %14826 = %14824.1 /* ty=Tensor[(1, 1024), float32] */;
  %14827 = sigmoid(%14826) /* ty=Tensor[(1, 1024), float32] */;
  %14828 = %14824.0 /* ty=Tensor[(1, 1024), float32] */;
  %14829 = %14824.2 /* ty=Tensor[(1, 1024), float32] */;
  %14830 = sigmoid(%14828) /* ty=Tensor[(1, 1024), float32] */;
  %14831 = tanh(%14829) /* ty=Tensor[(1, 1024), float32] */;
  %14832 = multiply(%14827, %14770) /* ty=Tensor[(1, 1024), float32] */;
  %14833 = multiply(%14830, %14831) /* ty=Tensor[(1, 1024), float32] */;
  %14834 = add(%14832, %14833) /* ty=Tensor[(1, 1024), float32] */;
  %14835 = sigmoid(%14825) /* ty=Tensor[(1, 1024), float32] */;
  %14836 = tanh(%14834) /* ty=Tensor[(1, 1024), float32] */;
  %14837 = multiply(%14835, %14836) /* ty=Tensor[(1, 1024), float32] */;
  %14838 = multiply(%14793, %14794) /* ty=Tensor[(1, 1024), float32] */;
  %14839 = (%14837, %14838) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14840 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14841 = concatenate(%14839, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14842 = concatenate(%14840, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14843 = nn.dense(%14841, %14842, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14844 = add(%14843, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14845 = add(%14844, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14846 = split(%14845, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14847 = %14846.3 /* ty=Tensor[(1, 1024), float32] */;
  %14848 = %14846.1 /* ty=Tensor[(1, 1024), float32] */;
  %14849 = sigmoid(%14848) /* ty=Tensor[(1, 1024), float32] */;
  %14850 = %14846.0 /* ty=Tensor[(1, 1024), float32] */;
  %14851 = %14846.2 /* ty=Tensor[(1, 1024), float32] */;
  %14852 = sigmoid(%14850) /* ty=Tensor[(1, 1024), float32] */;
  %14853 = tanh(%14851) /* ty=Tensor[(1, 1024), float32] */;
  %14854 = multiply(%14849, %14792) /* ty=Tensor[(1, 1024), float32] */;
  %14855 = multiply(%14852, %14853) /* ty=Tensor[(1, 1024), float32] */;
  %14856 = add(%14854, %14855) /* ty=Tensor[(1, 1024), float32] */;
  %14857 = sigmoid(%14847) /* ty=Tensor[(1, 1024), float32] */;
  %14858 = tanh(%14856) /* ty=Tensor[(1, 1024), float32] */;
  %14859 = %12788.32 /* ty=Tensor[(1, 2048), float32] */;
  %14860 = (%14859, %14816) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14861 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14862 = concatenate(%14860, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14863 = concatenate(%14861, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14864 = nn.dense(%14862, %14863, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14865 = add(%14864, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14866 = add(%14865, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14867 = split(%14866, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14868 = %14867.3 /* ty=Tensor[(1, 1024), float32] */;
  %14869 = %14867.1 /* ty=Tensor[(1, 1024), float32] */;
  %14870 = sigmoid(%14869) /* ty=Tensor[(1, 1024), float32] */;
  %14871 = %14867.0 /* ty=Tensor[(1, 1024), float32] */;
  %14872 = %14867.2 /* ty=Tensor[(1, 1024), float32] */;
  %14873 = sigmoid(%14871) /* ty=Tensor[(1, 1024), float32] */;
  %14874 = tanh(%14872) /* ty=Tensor[(1, 1024), float32] */;
  %14875 = multiply(%14870, %14813) /* ty=Tensor[(1, 1024), float32] */;
  %14876 = multiply(%14873, %14874) /* ty=Tensor[(1, 1024), float32] */;
  %14877 = add(%14875, %14876) /* ty=Tensor[(1, 1024), float32] */;
  %14878 = sigmoid(%14868) /* ty=Tensor[(1, 1024), float32] */;
  %14879 = tanh(%14877) /* ty=Tensor[(1, 1024), float32] */;
  %14880 = multiply(%14878, %14879) /* ty=Tensor[(1, 1024), float32] */;
  %14881 = (%14880, %14837) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14882 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14883 = concatenate(%14881, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14884 = concatenate(%14882, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14885 = nn.dense(%14883, %14884, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14886 = add(%14885, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14887 = add(%14886, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14888 = split(%14887, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14889 = %14888.3 /* ty=Tensor[(1, 1024), float32] */;
  %14890 = %14888.1 /* ty=Tensor[(1, 1024), float32] */;
  %14891 = sigmoid(%14890) /* ty=Tensor[(1, 1024), float32] */;
  %14892 = %14888.0 /* ty=Tensor[(1, 1024), float32] */;
  %14893 = %14888.2 /* ty=Tensor[(1, 1024), float32] */;
  %14894 = sigmoid(%14892) /* ty=Tensor[(1, 1024), float32] */;
  %14895 = tanh(%14893) /* ty=Tensor[(1, 1024), float32] */;
  %14896 = multiply(%14891, %14834) /* ty=Tensor[(1, 1024), float32] */;
  %14897 = multiply(%14894, %14895) /* ty=Tensor[(1, 1024), float32] */;
  %14898 = add(%14896, %14897) /* ty=Tensor[(1, 1024), float32] */;
  %14899 = sigmoid(%14889) /* ty=Tensor[(1, 1024), float32] */;
  %14900 = tanh(%14898) /* ty=Tensor[(1, 1024), float32] */;
  %14901 = multiply(%14899, %14900) /* ty=Tensor[(1, 1024), float32] */;
  %14902 = multiply(%14857, %14858) /* ty=Tensor[(1, 1024), float32] */;
  %14903 = (%14901, %14902) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14904 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14905 = concatenate(%14903, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14906 = concatenate(%14904, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14907 = nn.dense(%14905, %14906, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14908 = add(%14907, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14909 = add(%14908, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14910 = split(%14909, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14911 = %14910.3 /* ty=Tensor[(1, 1024), float32] */;
  %14912 = %14910.1 /* ty=Tensor[(1, 1024), float32] */;
  %14913 = sigmoid(%14912) /* ty=Tensor[(1, 1024), float32] */;
  %14914 = %14910.0 /* ty=Tensor[(1, 1024), float32] */;
  %14915 = %14910.2 /* ty=Tensor[(1, 1024), float32] */;
  %14916 = sigmoid(%14914) /* ty=Tensor[(1, 1024), float32] */;
  %14917 = tanh(%14915) /* ty=Tensor[(1, 1024), float32] */;
  %14918 = multiply(%14913, %14856) /* ty=Tensor[(1, 1024), float32] */;
  %14919 = multiply(%14916, %14917) /* ty=Tensor[(1, 1024), float32] */;
  %14920 = add(%14918, %14919) /* ty=Tensor[(1, 1024), float32] */;
  %14921 = sigmoid(%14911) /* ty=Tensor[(1, 1024), float32] */;
  %14922 = tanh(%14920) /* ty=Tensor[(1, 1024), float32] */;
  %14923 = %12788.33 /* ty=Tensor[(1, 2048), float32] */;
  %14924 = (%14923, %14880) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14925 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14926 = concatenate(%14924, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14927 = concatenate(%14925, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14928 = nn.dense(%14926, %14927, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14929 = add(%14928, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14930 = add(%14929, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14931 = split(%14930, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14932 = %14931.3 /* ty=Tensor[(1, 1024), float32] */;
  %14933 = %14931.1 /* ty=Tensor[(1, 1024), float32] */;
  %14934 = sigmoid(%14933) /* ty=Tensor[(1, 1024), float32] */;
  %14935 = %14931.0 /* ty=Tensor[(1, 1024), float32] */;
  %14936 = %14931.2 /* ty=Tensor[(1, 1024), float32] */;
  %14937 = sigmoid(%14935) /* ty=Tensor[(1, 1024), float32] */;
  %14938 = tanh(%14936) /* ty=Tensor[(1, 1024), float32] */;
  %14939 = multiply(%14934, %14877) /* ty=Tensor[(1, 1024), float32] */;
  %14940 = multiply(%14937, %14938) /* ty=Tensor[(1, 1024), float32] */;
  %14941 = add(%14939, %14940) /* ty=Tensor[(1, 1024), float32] */;
  %14942 = sigmoid(%14932) /* ty=Tensor[(1, 1024), float32] */;
  %14943 = tanh(%14941) /* ty=Tensor[(1, 1024), float32] */;
  %14944 = multiply(%14942, %14943) /* ty=Tensor[(1, 1024), float32] */;
  %14945 = (%14944, %14901) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14946 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14947 = concatenate(%14945, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14948 = concatenate(%14946, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14949 = nn.dense(%14947, %14948, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14950 = add(%14949, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14951 = add(%14950, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %14952 = split(%14951, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14953 = %14952.3 /* ty=Tensor[(1, 1024), float32] */;
  %14954 = %14952.1 /* ty=Tensor[(1, 1024), float32] */;
  %14955 = sigmoid(%14954) /* ty=Tensor[(1, 1024), float32] */;
  %14956 = %14952.0 /* ty=Tensor[(1, 1024), float32] */;
  %14957 = %14952.2 /* ty=Tensor[(1, 1024), float32] */;
  %14958 = sigmoid(%14956) /* ty=Tensor[(1, 1024), float32] */;
  %14959 = tanh(%14957) /* ty=Tensor[(1, 1024), float32] */;
  %14960 = multiply(%14955, %14898) /* ty=Tensor[(1, 1024), float32] */;
  %14961 = multiply(%14958, %14959) /* ty=Tensor[(1, 1024), float32] */;
  %14962 = add(%14960, %14961) /* ty=Tensor[(1, 1024), float32] */;
  %14963 = sigmoid(%14953) /* ty=Tensor[(1, 1024), float32] */;
  %14964 = tanh(%14962) /* ty=Tensor[(1, 1024), float32] */;
  %14965 = multiply(%14963, %14964) /* ty=Tensor[(1, 1024), float32] */;
  %14966 = multiply(%14921, %14922) /* ty=Tensor[(1, 1024), float32] */;
  %14967 = (%14965, %14966) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14968 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %14969 = concatenate(%14967, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %14970 = concatenate(%14968, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %14971 = nn.dense(%14969, %14970, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14972 = add(%14971, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14973 = add(%14972, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %14974 = split(%14973, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14975 = %14974.3 /* ty=Tensor[(1, 1024), float32] */;
  %14976 = %14974.1 /* ty=Tensor[(1, 1024), float32] */;
  %14977 = sigmoid(%14976) /* ty=Tensor[(1, 1024), float32] */;
  %14978 = %14974.0 /* ty=Tensor[(1, 1024), float32] */;
  %14979 = %14974.2 /* ty=Tensor[(1, 1024), float32] */;
  %14980 = sigmoid(%14978) /* ty=Tensor[(1, 1024), float32] */;
  %14981 = tanh(%14979) /* ty=Tensor[(1, 1024), float32] */;
  %14982 = multiply(%14977, %14920) /* ty=Tensor[(1, 1024), float32] */;
  %14983 = multiply(%14980, %14981) /* ty=Tensor[(1, 1024), float32] */;
  %14984 = add(%14982, %14983) /* ty=Tensor[(1, 1024), float32] */;
  %14985 = sigmoid(%14975) /* ty=Tensor[(1, 1024), float32] */;
  %14986 = tanh(%14984) /* ty=Tensor[(1, 1024), float32] */;
  %14987 = %12788.34 /* ty=Tensor[(1, 2048), float32] */;
  %14988 = (%14987, %14944) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %14989 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %14990 = concatenate(%14988, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %14991 = concatenate(%14989, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %14992 = nn.dense(%14990, %14991, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %14993 = add(%14992, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14994 = add(%14993, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %14995 = split(%14994, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %14996 = %14995.3 /* ty=Tensor[(1, 1024), float32] */;
  %14997 = %14995.1 /* ty=Tensor[(1, 1024), float32] */;
  %14998 = sigmoid(%14997) /* ty=Tensor[(1, 1024), float32] */;
  %14999 = %14995.0 /* ty=Tensor[(1, 1024), float32] */;
  %15000 = %14995.2 /* ty=Tensor[(1, 1024), float32] */;
  %15001 = sigmoid(%14999) /* ty=Tensor[(1, 1024), float32] */;
  %15002 = tanh(%15000) /* ty=Tensor[(1, 1024), float32] */;
  %15003 = multiply(%14998, %14941) /* ty=Tensor[(1, 1024), float32] */;
  %15004 = multiply(%15001, %15002) /* ty=Tensor[(1, 1024), float32] */;
  %15005 = add(%15003, %15004) /* ty=Tensor[(1, 1024), float32] */;
  %15006 = sigmoid(%14996) /* ty=Tensor[(1, 1024), float32] */;
  %15007 = tanh(%15005) /* ty=Tensor[(1, 1024), float32] */;
  %15008 = multiply(%15006, %15007) /* ty=Tensor[(1, 1024), float32] */;
  %15009 = (%15008, %14965) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15010 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15011 = concatenate(%15009, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15012 = concatenate(%15010, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15013 = nn.dense(%15011, %15012, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15014 = add(%15013, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15015 = add(%15014, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15016 = split(%15015, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15017 = %15016.3 /* ty=Tensor[(1, 1024), float32] */;
  %15018 = %15016.1 /* ty=Tensor[(1, 1024), float32] */;
  %15019 = sigmoid(%15018) /* ty=Tensor[(1, 1024), float32] */;
  %15020 = %15016.0 /* ty=Tensor[(1, 1024), float32] */;
  %15021 = %15016.2 /* ty=Tensor[(1, 1024), float32] */;
  %15022 = sigmoid(%15020) /* ty=Tensor[(1, 1024), float32] */;
  %15023 = tanh(%15021) /* ty=Tensor[(1, 1024), float32] */;
  %15024 = multiply(%15019, %14962) /* ty=Tensor[(1, 1024), float32] */;
  %15025 = multiply(%15022, %15023) /* ty=Tensor[(1, 1024), float32] */;
  %15026 = add(%15024, %15025) /* ty=Tensor[(1, 1024), float32] */;
  %15027 = sigmoid(%15017) /* ty=Tensor[(1, 1024), float32] */;
  %15028 = tanh(%15026) /* ty=Tensor[(1, 1024), float32] */;
  %15029 = multiply(%15027, %15028) /* ty=Tensor[(1, 1024), float32] */;
  %15030 = multiply(%14985, %14986) /* ty=Tensor[(1, 1024), float32] */;
  %15031 = (%15029, %15030) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15032 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15033 = concatenate(%15031, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15034 = concatenate(%15032, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15035 = nn.dense(%15033, %15034, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15036 = add(%15035, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15037 = add(%15036, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15038 = split(%15037, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15039 = %15038.3 /* ty=Tensor[(1, 1024), float32] */;
  %15040 = %15038.1 /* ty=Tensor[(1, 1024), float32] */;
  %15041 = sigmoid(%15040) /* ty=Tensor[(1, 1024), float32] */;
  %15042 = %15038.0 /* ty=Tensor[(1, 1024), float32] */;
  %15043 = %15038.2 /* ty=Tensor[(1, 1024), float32] */;
  %15044 = sigmoid(%15042) /* ty=Tensor[(1, 1024), float32] */;
  %15045 = tanh(%15043) /* ty=Tensor[(1, 1024), float32] */;
  %15046 = multiply(%15041, %14984) /* ty=Tensor[(1, 1024), float32] */;
  %15047 = multiply(%15044, %15045) /* ty=Tensor[(1, 1024), float32] */;
  %15048 = add(%15046, %15047) /* ty=Tensor[(1, 1024), float32] */;
  %15049 = sigmoid(%15039) /* ty=Tensor[(1, 1024), float32] */;
  %15050 = tanh(%15048) /* ty=Tensor[(1, 1024), float32] */;
  %15051 = %12788.35 /* ty=Tensor[(1, 2048), float32] */;
  %15052 = (%15051, %15008) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15053 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15054 = concatenate(%15052, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15055 = concatenate(%15053, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15056 = nn.dense(%15054, %15055, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15057 = add(%15056, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15058 = add(%15057, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15059 = split(%15058, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15060 = %15059.3 /* ty=Tensor[(1, 1024), float32] */;
  %15061 = %15059.1 /* ty=Tensor[(1, 1024), float32] */;
  %15062 = sigmoid(%15061) /* ty=Tensor[(1, 1024), float32] */;
  %15063 = %15059.0 /* ty=Tensor[(1, 1024), float32] */;
  %15064 = %15059.2 /* ty=Tensor[(1, 1024), float32] */;
  %15065 = sigmoid(%15063) /* ty=Tensor[(1, 1024), float32] */;
  %15066 = tanh(%15064) /* ty=Tensor[(1, 1024), float32] */;
  %15067 = multiply(%15062, %15005) /* ty=Tensor[(1, 1024), float32] */;
  %15068 = multiply(%15065, %15066) /* ty=Tensor[(1, 1024), float32] */;
  %15069 = add(%15067, %15068) /* ty=Tensor[(1, 1024), float32] */;
  %15070 = sigmoid(%15060) /* ty=Tensor[(1, 1024), float32] */;
  %15071 = tanh(%15069) /* ty=Tensor[(1, 1024), float32] */;
  %15072 = multiply(%15070, %15071) /* ty=Tensor[(1, 1024), float32] */;
  %15073 = (%15072, %15029) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15074 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15075 = concatenate(%15073, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15076 = concatenate(%15074, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15077 = nn.dense(%15075, %15076, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15078 = add(%15077, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15079 = add(%15078, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15080 = split(%15079, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15081 = %15080.3 /* ty=Tensor[(1, 1024), float32] */;
  %15082 = %15080.1 /* ty=Tensor[(1, 1024), float32] */;
  %15083 = sigmoid(%15082) /* ty=Tensor[(1, 1024), float32] */;
  %15084 = %15080.0 /* ty=Tensor[(1, 1024), float32] */;
  %15085 = %15080.2 /* ty=Tensor[(1, 1024), float32] */;
  %15086 = sigmoid(%15084) /* ty=Tensor[(1, 1024), float32] */;
  %15087 = tanh(%15085) /* ty=Tensor[(1, 1024), float32] */;
  %15088 = multiply(%15083, %15026) /* ty=Tensor[(1, 1024), float32] */;
  %15089 = multiply(%15086, %15087) /* ty=Tensor[(1, 1024), float32] */;
  %15090 = add(%15088, %15089) /* ty=Tensor[(1, 1024), float32] */;
  %15091 = sigmoid(%15081) /* ty=Tensor[(1, 1024), float32] */;
  %15092 = tanh(%15090) /* ty=Tensor[(1, 1024), float32] */;
  %15093 = multiply(%15091, %15092) /* ty=Tensor[(1, 1024), float32] */;
  %15094 = multiply(%15049, %15050) /* ty=Tensor[(1, 1024), float32] */;
  %15095 = (%15093, %15094) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15096 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15097 = concatenate(%15095, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15098 = concatenate(%15096, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15099 = nn.dense(%15097, %15098, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15100 = add(%15099, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15101 = add(%15100, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15102 = split(%15101, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15103 = %15102.3 /* ty=Tensor[(1, 1024), float32] */;
  %15104 = %15102.1 /* ty=Tensor[(1, 1024), float32] */;
  %15105 = sigmoid(%15104) /* ty=Tensor[(1, 1024), float32] */;
  %15106 = %15102.0 /* ty=Tensor[(1, 1024), float32] */;
  %15107 = %15102.2 /* ty=Tensor[(1, 1024), float32] */;
  %15108 = sigmoid(%15106) /* ty=Tensor[(1, 1024), float32] */;
  %15109 = tanh(%15107) /* ty=Tensor[(1, 1024), float32] */;
  %15110 = multiply(%15105, %15048) /* ty=Tensor[(1, 1024), float32] */;
  %15111 = multiply(%15108, %15109) /* ty=Tensor[(1, 1024), float32] */;
  %15112 = add(%15110, %15111) /* ty=Tensor[(1, 1024), float32] */;
  %15113 = sigmoid(%15103) /* ty=Tensor[(1, 1024), float32] */;
  %15114 = tanh(%15112) /* ty=Tensor[(1, 1024), float32] */;
  %15115 = %12788.36 /* ty=Tensor[(1, 2048), float32] */;
  %15116 = (%15115, %15072) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15117 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15118 = concatenate(%15116, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15119 = concatenate(%15117, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15120 = nn.dense(%15118, %15119, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15121 = add(%15120, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15122 = add(%15121, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15123 = split(%15122, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15124 = %15123.3 /* ty=Tensor[(1, 1024), float32] */;
  %15125 = %15123.1 /* ty=Tensor[(1, 1024), float32] */;
  %15126 = sigmoid(%15125) /* ty=Tensor[(1, 1024), float32] */;
  %15127 = %15123.0 /* ty=Tensor[(1, 1024), float32] */;
  %15128 = %15123.2 /* ty=Tensor[(1, 1024), float32] */;
  %15129 = sigmoid(%15127) /* ty=Tensor[(1, 1024), float32] */;
  %15130 = tanh(%15128) /* ty=Tensor[(1, 1024), float32] */;
  %15131 = multiply(%15126, %15069) /* ty=Tensor[(1, 1024), float32] */;
  %15132 = multiply(%15129, %15130) /* ty=Tensor[(1, 1024), float32] */;
  %15133 = add(%15131, %15132) /* ty=Tensor[(1, 1024), float32] */;
  %15134 = sigmoid(%15124) /* ty=Tensor[(1, 1024), float32] */;
  %15135 = tanh(%15133) /* ty=Tensor[(1, 1024), float32] */;
  %15136 = multiply(%15134, %15135) /* ty=Tensor[(1, 1024), float32] */;
  %15137 = (%15136, %15093) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15138 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15139 = concatenate(%15137, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15140 = concatenate(%15138, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15141 = nn.dense(%15139, %15140, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15142 = add(%15141, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15143 = add(%15142, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15144 = split(%15143, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15145 = %15144.3 /* ty=Tensor[(1, 1024), float32] */;
  %15146 = %15144.1 /* ty=Tensor[(1, 1024), float32] */;
  %15147 = sigmoid(%15146) /* ty=Tensor[(1, 1024), float32] */;
  %15148 = %15144.0 /* ty=Tensor[(1, 1024), float32] */;
  %15149 = %15144.2 /* ty=Tensor[(1, 1024), float32] */;
  %15150 = sigmoid(%15148) /* ty=Tensor[(1, 1024), float32] */;
  %15151 = tanh(%15149) /* ty=Tensor[(1, 1024), float32] */;
  %15152 = multiply(%15147, %15090) /* ty=Tensor[(1, 1024), float32] */;
  %15153 = multiply(%15150, %15151) /* ty=Tensor[(1, 1024), float32] */;
  %15154 = add(%15152, %15153) /* ty=Tensor[(1, 1024), float32] */;
  %15155 = sigmoid(%15145) /* ty=Tensor[(1, 1024), float32] */;
  %15156 = tanh(%15154) /* ty=Tensor[(1, 1024), float32] */;
  %15157 = multiply(%15155, %15156) /* ty=Tensor[(1, 1024), float32] */;
  %15158 = multiply(%15113, %15114) /* ty=Tensor[(1, 1024), float32] */;
  %15159 = (%15157, %15158) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15160 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15161 = concatenate(%15159, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15162 = concatenate(%15160, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15163 = nn.dense(%15161, %15162, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15164 = add(%15163, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15165 = add(%15164, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15166 = split(%15165, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15167 = %15166.3 /* ty=Tensor[(1, 1024), float32] */;
  %15168 = %15166.1 /* ty=Tensor[(1, 1024), float32] */;
  %15169 = sigmoid(%15168) /* ty=Tensor[(1, 1024), float32] */;
  %15170 = %15166.0 /* ty=Tensor[(1, 1024), float32] */;
  %15171 = %15166.2 /* ty=Tensor[(1, 1024), float32] */;
  %15172 = sigmoid(%15170) /* ty=Tensor[(1, 1024), float32] */;
  %15173 = tanh(%15171) /* ty=Tensor[(1, 1024), float32] */;
  %15174 = multiply(%15169, %15112) /* ty=Tensor[(1, 1024), float32] */;
  %15175 = multiply(%15172, %15173) /* ty=Tensor[(1, 1024), float32] */;
  %15176 = add(%15174, %15175) /* ty=Tensor[(1, 1024), float32] */;
  %15177 = sigmoid(%15167) /* ty=Tensor[(1, 1024), float32] */;
  %15178 = tanh(%15176) /* ty=Tensor[(1, 1024), float32] */;
  %15179 = %12788.37 /* ty=Tensor[(1, 2048), float32] */;
  %15180 = (%15179, %15136) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15181 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15182 = concatenate(%15180, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15183 = concatenate(%15181, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15184 = nn.dense(%15182, %15183, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15185 = add(%15184, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15186 = add(%15185, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15187 = split(%15186, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15188 = %15187.3 /* ty=Tensor[(1, 1024), float32] */;
  %15189 = %15187.1 /* ty=Tensor[(1, 1024), float32] */;
  %15190 = sigmoid(%15189) /* ty=Tensor[(1, 1024), float32] */;
  %15191 = %15187.0 /* ty=Tensor[(1, 1024), float32] */;
  %15192 = %15187.2 /* ty=Tensor[(1, 1024), float32] */;
  %15193 = sigmoid(%15191) /* ty=Tensor[(1, 1024), float32] */;
  %15194 = tanh(%15192) /* ty=Tensor[(1, 1024), float32] */;
  %15195 = multiply(%15190, %15133) /* ty=Tensor[(1, 1024), float32] */;
  %15196 = multiply(%15193, %15194) /* ty=Tensor[(1, 1024), float32] */;
  %15197 = add(%15195, %15196) /* ty=Tensor[(1, 1024), float32] */;
  %15198 = sigmoid(%15188) /* ty=Tensor[(1, 1024), float32] */;
  %15199 = tanh(%15197) /* ty=Tensor[(1, 1024), float32] */;
  %15200 = multiply(%15198, %15199) /* ty=Tensor[(1, 1024), float32] */;
  %15201 = (%15200, %15157) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15202 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15203 = concatenate(%15201, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15204 = concatenate(%15202, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15205 = nn.dense(%15203, %15204, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15206 = add(%15205, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15207 = add(%15206, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15208 = split(%15207, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15209 = %15208.3 /* ty=Tensor[(1, 1024), float32] */;
  %15210 = %15208.1 /* ty=Tensor[(1, 1024), float32] */;
  %15211 = sigmoid(%15210) /* ty=Tensor[(1, 1024), float32] */;
  %15212 = %15208.0 /* ty=Tensor[(1, 1024), float32] */;
  %15213 = %15208.2 /* ty=Tensor[(1, 1024), float32] */;
  %15214 = sigmoid(%15212) /* ty=Tensor[(1, 1024), float32] */;
  %15215 = tanh(%15213) /* ty=Tensor[(1, 1024), float32] */;
  %15216 = multiply(%15211, %15154) /* ty=Tensor[(1, 1024), float32] */;
  %15217 = multiply(%15214, %15215) /* ty=Tensor[(1, 1024), float32] */;
  %15218 = add(%15216, %15217) /* ty=Tensor[(1, 1024), float32] */;
  %15219 = sigmoid(%15209) /* ty=Tensor[(1, 1024), float32] */;
  %15220 = tanh(%15218) /* ty=Tensor[(1, 1024), float32] */;
  %15221 = multiply(%15219, %15220) /* ty=Tensor[(1, 1024), float32] */;
  %15222 = multiply(%15177, %15178) /* ty=Tensor[(1, 1024), float32] */;
  %15223 = (%15221, %15222) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15224 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15225 = concatenate(%15223, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15226 = concatenate(%15224, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15227 = nn.dense(%15225, %15226, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15228 = add(%15227, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15229 = add(%15228, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15230 = split(%15229, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15231 = %15230.3 /* ty=Tensor[(1, 1024), float32] */;
  %15232 = %15230.1 /* ty=Tensor[(1, 1024), float32] */;
  %15233 = sigmoid(%15232) /* ty=Tensor[(1, 1024), float32] */;
  %15234 = %15230.0 /* ty=Tensor[(1, 1024), float32] */;
  %15235 = %15230.2 /* ty=Tensor[(1, 1024), float32] */;
  %15236 = sigmoid(%15234) /* ty=Tensor[(1, 1024), float32] */;
  %15237 = tanh(%15235) /* ty=Tensor[(1, 1024), float32] */;
  %15238 = multiply(%15233, %15176) /* ty=Tensor[(1, 1024), float32] */;
  %15239 = multiply(%15236, %15237) /* ty=Tensor[(1, 1024), float32] */;
  %15240 = add(%15238, %15239) /* ty=Tensor[(1, 1024), float32] */;
  %15241 = sigmoid(%15231) /* ty=Tensor[(1, 1024), float32] */;
  %15242 = tanh(%15240) /* ty=Tensor[(1, 1024), float32] */;
  %15243 = %12788.38 /* ty=Tensor[(1, 2048), float32] */;
  %15244 = (%15243, %15200) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15245 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15246 = concatenate(%15244, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15247 = concatenate(%15245, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15248 = nn.dense(%15246, %15247, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15249 = add(%15248, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15250 = add(%15249, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15251 = split(%15250, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15252 = %15251.3 /* ty=Tensor[(1, 1024), float32] */;
  %15253 = %15251.1 /* ty=Tensor[(1, 1024), float32] */;
  %15254 = sigmoid(%15253) /* ty=Tensor[(1, 1024), float32] */;
  %15255 = %15251.0 /* ty=Tensor[(1, 1024), float32] */;
  %15256 = %15251.2 /* ty=Tensor[(1, 1024), float32] */;
  %15257 = sigmoid(%15255) /* ty=Tensor[(1, 1024), float32] */;
  %15258 = tanh(%15256) /* ty=Tensor[(1, 1024), float32] */;
  %15259 = multiply(%15254, %15197) /* ty=Tensor[(1, 1024), float32] */;
  %15260 = multiply(%15257, %15258) /* ty=Tensor[(1, 1024), float32] */;
  %15261 = add(%15259, %15260) /* ty=Tensor[(1, 1024), float32] */;
  %15262 = sigmoid(%15252) /* ty=Tensor[(1, 1024), float32] */;
  %15263 = tanh(%15261) /* ty=Tensor[(1, 1024), float32] */;
  %15264 = multiply(%15262, %15263) /* ty=Tensor[(1, 1024), float32] */;
  %15265 = (%15264, %15221) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15266 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15267 = concatenate(%15265, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15268 = concatenate(%15266, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15269 = nn.dense(%15267, %15268, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15270 = add(%15269, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15271 = add(%15270, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15272 = split(%15271, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15273 = %15272.3 /* ty=Tensor[(1, 1024), float32] */;
  %15274 = %15272.1 /* ty=Tensor[(1, 1024), float32] */;
  %15275 = sigmoid(%15274) /* ty=Tensor[(1, 1024), float32] */;
  %15276 = %15272.0 /* ty=Tensor[(1, 1024), float32] */;
  %15277 = %15272.2 /* ty=Tensor[(1, 1024), float32] */;
  %15278 = sigmoid(%15276) /* ty=Tensor[(1, 1024), float32] */;
  %15279 = tanh(%15277) /* ty=Tensor[(1, 1024), float32] */;
  %15280 = multiply(%15275, %15218) /* ty=Tensor[(1, 1024), float32] */;
  %15281 = multiply(%15278, %15279) /* ty=Tensor[(1, 1024), float32] */;
  %15282 = add(%15280, %15281) /* ty=Tensor[(1, 1024), float32] */;
  %15283 = sigmoid(%15273) /* ty=Tensor[(1, 1024), float32] */;
  %15284 = tanh(%15282) /* ty=Tensor[(1, 1024), float32] */;
  %15285 = multiply(%15283, %15284) /* ty=Tensor[(1, 1024), float32] */;
  %15286 = multiply(%15241, %15242) /* ty=Tensor[(1, 1024), float32] */;
  %15287 = (%15285, %15286) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15288 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15289 = concatenate(%15287, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15290 = concatenate(%15288, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15291 = nn.dense(%15289, %15290, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15292 = add(%15291, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15293 = add(%15292, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15294 = split(%15293, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15295 = %15294.3 /* ty=Tensor[(1, 1024), float32] */;
  %15296 = %15294.1 /* ty=Tensor[(1, 1024), float32] */;
  %15297 = sigmoid(%15296) /* ty=Tensor[(1, 1024), float32] */;
  %15298 = %15294.0 /* ty=Tensor[(1, 1024), float32] */;
  %15299 = %15294.2 /* ty=Tensor[(1, 1024), float32] */;
  %15300 = sigmoid(%15298) /* ty=Tensor[(1, 1024), float32] */;
  %15301 = tanh(%15299) /* ty=Tensor[(1, 1024), float32] */;
  %15302 = multiply(%15297, %15240) /* ty=Tensor[(1, 1024), float32] */;
  %15303 = multiply(%15300, %15301) /* ty=Tensor[(1, 1024), float32] */;
  %15304 = add(%15302, %15303) /* ty=Tensor[(1, 1024), float32] */;
  %15305 = sigmoid(%15295) /* ty=Tensor[(1, 1024), float32] */;
  %15306 = tanh(%15304) /* ty=Tensor[(1, 1024), float32] */;
  %15307 = %12788.39 /* ty=Tensor[(1, 2048), float32] */;
  %15308 = (%15307, %15264) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15309 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15310 = concatenate(%15308, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15311 = concatenate(%15309, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15312 = nn.dense(%15310, %15311, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15313 = add(%15312, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15314 = add(%15313, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15315 = split(%15314, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15316 = %15315.3 /* ty=Tensor[(1, 1024), float32] */;
  %15317 = %15315.1 /* ty=Tensor[(1, 1024), float32] */;
  %15318 = sigmoid(%15317) /* ty=Tensor[(1, 1024), float32] */;
  %15319 = %15315.0 /* ty=Tensor[(1, 1024), float32] */;
  %15320 = %15315.2 /* ty=Tensor[(1, 1024), float32] */;
  %15321 = sigmoid(%15319) /* ty=Tensor[(1, 1024), float32] */;
  %15322 = tanh(%15320) /* ty=Tensor[(1, 1024), float32] */;
  %15323 = multiply(%15318, %15261) /* ty=Tensor[(1, 1024), float32] */;
  %15324 = multiply(%15321, %15322) /* ty=Tensor[(1, 1024), float32] */;
  %15325 = add(%15323, %15324) /* ty=Tensor[(1, 1024), float32] */;
  %15326 = sigmoid(%15316) /* ty=Tensor[(1, 1024), float32] */;
  %15327 = tanh(%15325) /* ty=Tensor[(1, 1024), float32] */;
  %15328 = multiply(%15326, %15327) /* ty=Tensor[(1, 1024), float32] */;
  %15329 = (%15328, %15285) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15330 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15331 = concatenate(%15329, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15332 = concatenate(%15330, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15333 = nn.dense(%15331, %15332, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15334 = add(%15333, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15335 = add(%15334, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15336 = split(%15335, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15337 = %15336.3 /* ty=Tensor[(1, 1024), float32] */;
  %15338 = %15336.1 /* ty=Tensor[(1, 1024), float32] */;
  %15339 = sigmoid(%15338) /* ty=Tensor[(1, 1024), float32] */;
  %15340 = %15336.0 /* ty=Tensor[(1, 1024), float32] */;
  %15341 = %15336.2 /* ty=Tensor[(1, 1024), float32] */;
  %15342 = sigmoid(%15340) /* ty=Tensor[(1, 1024), float32] */;
  %15343 = tanh(%15341) /* ty=Tensor[(1, 1024), float32] */;
  %15344 = multiply(%15339, %15282) /* ty=Tensor[(1, 1024), float32] */;
  %15345 = multiply(%15342, %15343) /* ty=Tensor[(1, 1024), float32] */;
  %15346 = add(%15344, %15345) /* ty=Tensor[(1, 1024), float32] */;
  %15347 = sigmoid(%15337) /* ty=Tensor[(1, 1024), float32] */;
  %15348 = tanh(%15346) /* ty=Tensor[(1, 1024), float32] */;
  %15349 = multiply(%15347, %15348) /* ty=Tensor[(1, 1024), float32] */;
  %15350 = multiply(%15305, %15306) /* ty=Tensor[(1, 1024), float32] */;
  %15351 = (%15349, %15350) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15352 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15353 = concatenate(%15351, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15354 = concatenate(%15352, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15355 = nn.dense(%15353, %15354, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15356 = add(%15355, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15357 = add(%15356, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15358 = split(%15357, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15359 = %15358.3 /* ty=Tensor[(1, 1024), float32] */;
  %15360 = %15358.1 /* ty=Tensor[(1, 1024), float32] */;
  %15361 = sigmoid(%15360) /* ty=Tensor[(1, 1024), float32] */;
  %15362 = %15358.0 /* ty=Tensor[(1, 1024), float32] */;
  %15363 = %15358.2 /* ty=Tensor[(1, 1024), float32] */;
  %15364 = sigmoid(%15362) /* ty=Tensor[(1, 1024), float32] */;
  %15365 = tanh(%15363) /* ty=Tensor[(1, 1024), float32] */;
  %15366 = multiply(%15361, %15304) /* ty=Tensor[(1, 1024), float32] */;
  %15367 = multiply(%15364, %15365) /* ty=Tensor[(1, 1024), float32] */;
  %15368 = add(%15366, %15367) /* ty=Tensor[(1, 1024), float32] */;
  %15369 = sigmoid(%15359) /* ty=Tensor[(1, 1024), float32] */;
  %15370 = tanh(%15368) /* ty=Tensor[(1, 1024), float32] */;
  %15371 = %12788.40 /* ty=Tensor[(1, 2048), float32] */;
  %15372 = (%15371, %15328) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15373 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15374 = concatenate(%15372, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15375 = concatenate(%15373, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15376 = nn.dense(%15374, %15375, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15377 = add(%15376, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15378 = add(%15377, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15379 = split(%15378, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15380 = %15379.3 /* ty=Tensor[(1, 1024), float32] */;
  %15381 = %15379.1 /* ty=Tensor[(1, 1024), float32] */;
  %15382 = sigmoid(%15381) /* ty=Tensor[(1, 1024), float32] */;
  %15383 = %15379.0 /* ty=Tensor[(1, 1024), float32] */;
  %15384 = %15379.2 /* ty=Tensor[(1, 1024), float32] */;
  %15385 = sigmoid(%15383) /* ty=Tensor[(1, 1024), float32] */;
  %15386 = tanh(%15384) /* ty=Tensor[(1, 1024), float32] */;
  %15387 = multiply(%15382, %15325) /* ty=Tensor[(1, 1024), float32] */;
  %15388 = multiply(%15385, %15386) /* ty=Tensor[(1, 1024), float32] */;
  %15389 = add(%15387, %15388) /* ty=Tensor[(1, 1024), float32] */;
  %15390 = sigmoid(%15380) /* ty=Tensor[(1, 1024), float32] */;
  %15391 = tanh(%15389) /* ty=Tensor[(1, 1024), float32] */;
  %15392 = multiply(%15390, %15391) /* ty=Tensor[(1, 1024), float32] */;
  %15393 = (%15392, %15349) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15394 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15395 = concatenate(%15393, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15396 = concatenate(%15394, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15397 = nn.dense(%15395, %15396, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15398 = add(%15397, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15399 = add(%15398, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15400 = split(%15399, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15401 = %15400.3 /* ty=Tensor[(1, 1024), float32] */;
  %15402 = %15400.1 /* ty=Tensor[(1, 1024), float32] */;
  %15403 = sigmoid(%15402) /* ty=Tensor[(1, 1024), float32] */;
  %15404 = %15400.0 /* ty=Tensor[(1, 1024), float32] */;
  %15405 = %15400.2 /* ty=Tensor[(1, 1024), float32] */;
  %15406 = sigmoid(%15404) /* ty=Tensor[(1, 1024), float32] */;
  %15407 = tanh(%15405) /* ty=Tensor[(1, 1024), float32] */;
  %15408 = multiply(%15403, %15346) /* ty=Tensor[(1, 1024), float32] */;
  %15409 = multiply(%15406, %15407) /* ty=Tensor[(1, 1024), float32] */;
  %15410 = add(%15408, %15409) /* ty=Tensor[(1, 1024), float32] */;
  %15411 = sigmoid(%15401) /* ty=Tensor[(1, 1024), float32] */;
  %15412 = tanh(%15410) /* ty=Tensor[(1, 1024), float32] */;
  %15413 = multiply(%15411, %15412) /* ty=Tensor[(1, 1024), float32] */;
  %15414 = multiply(%15369, %15370) /* ty=Tensor[(1, 1024), float32] */;
  %15415 = (%15413, %15414) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15416 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15417 = concatenate(%15415, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15418 = concatenate(%15416, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15419 = nn.dense(%15417, %15418, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15420 = add(%15419, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15421 = add(%15420, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15422 = split(%15421, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15423 = %15422.3 /* ty=Tensor[(1, 1024), float32] */;
  %15424 = %15422.1 /* ty=Tensor[(1, 1024), float32] */;
  %15425 = sigmoid(%15424) /* ty=Tensor[(1, 1024), float32] */;
  %15426 = %15422.0 /* ty=Tensor[(1, 1024), float32] */;
  %15427 = %15422.2 /* ty=Tensor[(1, 1024), float32] */;
  %15428 = sigmoid(%15426) /* ty=Tensor[(1, 1024), float32] */;
  %15429 = tanh(%15427) /* ty=Tensor[(1, 1024), float32] */;
  %15430 = multiply(%15425, %15368) /* ty=Tensor[(1, 1024), float32] */;
  %15431 = multiply(%15428, %15429) /* ty=Tensor[(1, 1024), float32] */;
  %15432 = add(%15430, %15431) /* ty=Tensor[(1, 1024), float32] */;
  %15433 = sigmoid(%15423) /* ty=Tensor[(1, 1024), float32] */;
  %15434 = tanh(%15432) /* ty=Tensor[(1, 1024), float32] */;
  %15435 = %12788.41 /* ty=Tensor[(1, 2048), float32] */;
  %15436 = (%15435, %15392) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15437 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15438 = concatenate(%15436, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15439 = concatenate(%15437, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15440 = nn.dense(%15438, %15439, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15441 = add(%15440, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15442 = add(%15441, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15443 = split(%15442, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15444 = %15443.3 /* ty=Tensor[(1, 1024), float32] */;
  %15445 = %15443.1 /* ty=Tensor[(1, 1024), float32] */;
  %15446 = sigmoid(%15445) /* ty=Tensor[(1, 1024), float32] */;
  %15447 = %15443.0 /* ty=Tensor[(1, 1024), float32] */;
  %15448 = %15443.2 /* ty=Tensor[(1, 1024), float32] */;
  %15449 = sigmoid(%15447) /* ty=Tensor[(1, 1024), float32] */;
  %15450 = tanh(%15448) /* ty=Tensor[(1, 1024), float32] */;
  %15451 = multiply(%15446, %15389) /* ty=Tensor[(1, 1024), float32] */;
  %15452 = multiply(%15449, %15450) /* ty=Tensor[(1, 1024), float32] */;
  %15453 = add(%15451, %15452) /* ty=Tensor[(1, 1024), float32] */;
  %15454 = sigmoid(%15444) /* ty=Tensor[(1, 1024), float32] */;
  %15455 = tanh(%15453) /* ty=Tensor[(1, 1024), float32] */;
  %15456 = multiply(%15454, %15455) /* ty=Tensor[(1, 1024), float32] */;
  %15457 = (%15456, %15413) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15458 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15459 = concatenate(%15457, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15460 = concatenate(%15458, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15461 = nn.dense(%15459, %15460, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15462 = add(%15461, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15463 = add(%15462, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15464 = split(%15463, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15465 = %15464.3 /* ty=Tensor[(1, 1024), float32] */;
  %15466 = %15464.1 /* ty=Tensor[(1, 1024), float32] */;
  %15467 = sigmoid(%15466) /* ty=Tensor[(1, 1024), float32] */;
  %15468 = %15464.0 /* ty=Tensor[(1, 1024), float32] */;
  %15469 = %15464.2 /* ty=Tensor[(1, 1024), float32] */;
  %15470 = sigmoid(%15468) /* ty=Tensor[(1, 1024), float32] */;
  %15471 = tanh(%15469) /* ty=Tensor[(1, 1024), float32] */;
  %15472 = multiply(%15467, %15410) /* ty=Tensor[(1, 1024), float32] */;
  %15473 = multiply(%15470, %15471) /* ty=Tensor[(1, 1024), float32] */;
  %15474 = add(%15472, %15473) /* ty=Tensor[(1, 1024), float32] */;
  %15475 = sigmoid(%15465) /* ty=Tensor[(1, 1024), float32] */;
  %15476 = tanh(%15474) /* ty=Tensor[(1, 1024), float32] */;
  %15477 = multiply(%15475, %15476) /* ty=Tensor[(1, 1024), float32] */;
  %15478 = multiply(%15433, %15434) /* ty=Tensor[(1, 1024), float32] */;
  %15479 = (%15477, %15478) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15480 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15481 = concatenate(%15479, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15482 = concatenate(%15480, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15483 = nn.dense(%15481, %15482, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15484 = add(%15483, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15485 = add(%15484, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15486 = split(%15485, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15487 = %15486.3 /* ty=Tensor[(1, 1024), float32] */;
  %15488 = %15486.1 /* ty=Tensor[(1, 1024), float32] */;
  %15489 = sigmoid(%15488) /* ty=Tensor[(1, 1024), float32] */;
  %15490 = %15486.0 /* ty=Tensor[(1, 1024), float32] */;
  %15491 = %15486.2 /* ty=Tensor[(1, 1024), float32] */;
  %15492 = sigmoid(%15490) /* ty=Tensor[(1, 1024), float32] */;
  %15493 = tanh(%15491) /* ty=Tensor[(1, 1024), float32] */;
  %15494 = multiply(%15489, %15432) /* ty=Tensor[(1, 1024), float32] */;
  %15495 = multiply(%15492, %15493) /* ty=Tensor[(1, 1024), float32] */;
  %15496 = add(%15494, %15495) /* ty=Tensor[(1, 1024), float32] */;
  %15497 = sigmoid(%15487) /* ty=Tensor[(1, 1024), float32] */;
  %15498 = tanh(%15496) /* ty=Tensor[(1, 1024), float32] */;
  %15499 = %12788.42 /* ty=Tensor[(1, 2048), float32] */;
  %15500 = (%15499, %15456) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15501 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15502 = concatenate(%15500, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15503 = concatenate(%15501, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15504 = nn.dense(%15502, %15503, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15505 = add(%15504, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15506 = add(%15505, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15507 = split(%15506, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15508 = %15507.3 /* ty=Tensor[(1, 1024), float32] */;
  %15509 = %15507.1 /* ty=Tensor[(1, 1024), float32] */;
  %15510 = sigmoid(%15509) /* ty=Tensor[(1, 1024), float32] */;
  %15511 = %15507.0 /* ty=Tensor[(1, 1024), float32] */;
  %15512 = %15507.2 /* ty=Tensor[(1, 1024), float32] */;
  %15513 = sigmoid(%15511) /* ty=Tensor[(1, 1024), float32] */;
  %15514 = tanh(%15512) /* ty=Tensor[(1, 1024), float32] */;
  %15515 = multiply(%15510, %15453) /* ty=Tensor[(1, 1024), float32] */;
  %15516 = multiply(%15513, %15514) /* ty=Tensor[(1, 1024), float32] */;
  %15517 = add(%15515, %15516) /* ty=Tensor[(1, 1024), float32] */;
  %15518 = sigmoid(%15508) /* ty=Tensor[(1, 1024), float32] */;
  %15519 = tanh(%15517) /* ty=Tensor[(1, 1024), float32] */;
  %15520 = multiply(%15518, %15519) /* ty=Tensor[(1, 1024), float32] */;
  %15521 = (%15520, %15477) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15522 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15523 = concatenate(%15521, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15524 = concatenate(%15522, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15525 = nn.dense(%15523, %15524, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15526 = add(%15525, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15527 = add(%15526, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15528 = split(%15527, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15529 = %15528.3 /* ty=Tensor[(1, 1024), float32] */;
  %15530 = %15528.1 /* ty=Tensor[(1, 1024), float32] */;
  %15531 = sigmoid(%15530) /* ty=Tensor[(1, 1024), float32] */;
  %15532 = %15528.0 /* ty=Tensor[(1, 1024), float32] */;
  %15533 = %15528.2 /* ty=Tensor[(1, 1024), float32] */;
  %15534 = sigmoid(%15532) /* ty=Tensor[(1, 1024), float32] */;
  %15535 = tanh(%15533) /* ty=Tensor[(1, 1024), float32] */;
  %15536 = multiply(%15531, %15474) /* ty=Tensor[(1, 1024), float32] */;
  %15537 = multiply(%15534, %15535) /* ty=Tensor[(1, 1024), float32] */;
  %15538 = add(%15536, %15537) /* ty=Tensor[(1, 1024), float32] */;
  %15539 = sigmoid(%15529) /* ty=Tensor[(1, 1024), float32] */;
  %15540 = tanh(%15538) /* ty=Tensor[(1, 1024), float32] */;
  %15541 = multiply(%15539, %15540) /* ty=Tensor[(1, 1024), float32] */;
  %15542 = multiply(%15497, %15498) /* ty=Tensor[(1, 1024), float32] */;
  %15543 = (%15541, %15542) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15544 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15545 = concatenate(%15543, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15546 = concatenate(%15544, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15547 = nn.dense(%15545, %15546, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15548 = add(%15547, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15549 = add(%15548, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15550 = split(%15549, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15551 = %15550.3 /* ty=Tensor[(1, 1024), float32] */;
  %15552 = %15550.1 /* ty=Tensor[(1, 1024), float32] */;
  %15553 = sigmoid(%15552) /* ty=Tensor[(1, 1024), float32] */;
  %15554 = %15550.0 /* ty=Tensor[(1, 1024), float32] */;
  %15555 = %15550.2 /* ty=Tensor[(1, 1024), float32] */;
  %15556 = sigmoid(%15554) /* ty=Tensor[(1, 1024), float32] */;
  %15557 = tanh(%15555) /* ty=Tensor[(1, 1024), float32] */;
  %15558 = multiply(%15553, %15496) /* ty=Tensor[(1, 1024), float32] */;
  %15559 = multiply(%15556, %15557) /* ty=Tensor[(1, 1024), float32] */;
  %15560 = add(%15558, %15559) /* ty=Tensor[(1, 1024), float32] */;
  %15561 = sigmoid(%15551) /* ty=Tensor[(1, 1024), float32] */;
  %15562 = tanh(%15560) /* ty=Tensor[(1, 1024), float32] */;
  %15563 = %12788.43 /* ty=Tensor[(1, 2048), float32] */;
  %15564 = (%15563, %15520) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15565 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15566 = concatenate(%15564, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15567 = concatenate(%15565, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15568 = nn.dense(%15566, %15567, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15569 = add(%15568, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15570 = add(%15569, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15571 = split(%15570, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15572 = %15571.3 /* ty=Tensor[(1, 1024), float32] */;
  %15573 = %15571.1 /* ty=Tensor[(1, 1024), float32] */;
  %15574 = sigmoid(%15573) /* ty=Tensor[(1, 1024), float32] */;
  %15575 = %15571.0 /* ty=Tensor[(1, 1024), float32] */;
  %15576 = %15571.2 /* ty=Tensor[(1, 1024), float32] */;
  %15577 = sigmoid(%15575) /* ty=Tensor[(1, 1024), float32] */;
  %15578 = tanh(%15576) /* ty=Tensor[(1, 1024), float32] */;
  %15579 = multiply(%15574, %15517) /* ty=Tensor[(1, 1024), float32] */;
  %15580 = multiply(%15577, %15578) /* ty=Tensor[(1, 1024), float32] */;
  %15581 = add(%15579, %15580) /* ty=Tensor[(1, 1024), float32] */;
  %15582 = sigmoid(%15572) /* ty=Tensor[(1, 1024), float32] */;
  %15583 = tanh(%15581) /* ty=Tensor[(1, 1024), float32] */;
  %15584 = multiply(%15582, %15583) /* ty=Tensor[(1, 1024), float32] */;
  %15585 = (%15584, %15541) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15586 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15587 = concatenate(%15585, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15588 = concatenate(%15586, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15589 = nn.dense(%15587, %15588, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15590 = add(%15589, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15591 = add(%15590, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15592 = split(%15591, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15593 = %15592.3 /* ty=Tensor[(1, 1024), float32] */;
  %15594 = %15592.1 /* ty=Tensor[(1, 1024), float32] */;
  %15595 = sigmoid(%15594) /* ty=Tensor[(1, 1024), float32] */;
  %15596 = %15592.0 /* ty=Tensor[(1, 1024), float32] */;
  %15597 = %15592.2 /* ty=Tensor[(1, 1024), float32] */;
  %15598 = sigmoid(%15596) /* ty=Tensor[(1, 1024), float32] */;
  %15599 = tanh(%15597) /* ty=Tensor[(1, 1024), float32] */;
  %15600 = multiply(%15595, %15538) /* ty=Tensor[(1, 1024), float32] */;
  %15601 = multiply(%15598, %15599) /* ty=Tensor[(1, 1024), float32] */;
  %15602 = add(%15600, %15601) /* ty=Tensor[(1, 1024), float32] */;
  %15603 = sigmoid(%15593) /* ty=Tensor[(1, 1024), float32] */;
  %15604 = tanh(%15602) /* ty=Tensor[(1, 1024), float32] */;
  %15605 = multiply(%15603, %15604) /* ty=Tensor[(1, 1024), float32] */;
  %15606 = multiply(%15561, %15562) /* ty=Tensor[(1, 1024), float32] */;
  %15607 = (%15605, %15606) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15608 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15609 = concatenate(%15607, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15610 = concatenate(%15608, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15611 = nn.dense(%15609, %15610, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15612 = add(%15611, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15613 = add(%15612, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15614 = split(%15613, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15615 = %15614.3 /* ty=Tensor[(1, 1024), float32] */;
  %15616 = %15614.1 /* ty=Tensor[(1, 1024), float32] */;
  %15617 = sigmoid(%15616) /* ty=Tensor[(1, 1024), float32] */;
  %15618 = %15614.0 /* ty=Tensor[(1, 1024), float32] */;
  %15619 = %15614.2 /* ty=Tensor[(1, 1024), float32] */;
  %15620 = sigmoid(%15618) /* ty=Tensor[(1, 1024), float32] */;
  %15621 = tanh(%15619) /* ty=Tensor[(1, 1024), float32] */;
  %15622 = multiply(%15617, %15560) /* ty=Tensor[(1, 1024), float32] */;
  %15623 = multiply(%15620, %15621) /* ty=Tensor[(1, 1024), float32] */;
  %15624 = add(%15622, %15623) /* ty=Tensor[(1, 1024), float32] */;
  %15625 = sigmoid(%15615) /* ty=Tensor[(1, 1024), float32] */;
  %15626 = tanh(%15624) /* ty=Tensor[(1, 1024), float32] */;
  %15627 = %12788.44 /* ty=Tensor[(1, 2048), float32] */;
  %15628 = (%15627, %15584) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15629 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15630 = concatenate(%15628, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15631 = concatenate(%15629, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15632 = nn.dense(%15630, %15631, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15633 = add(%15632, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15634 = add(%15633, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15635 = split(%15634, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15636 = %15635.3 /* ty=Tensor[(1, 1024), float32] */;
  %15637 = %15635.1 /* ty=Tensor[(1, 1024), float32] */;
  %15638 = sigmoid(%15637) /* ty=Tensor[(1, 1024), float32] */;
  %15639 = %15635.0 /* ty=Tensor[(1, 1024), float32] */;
  %15640 = %15635.2 /* ty=Tensor[(1, 1024), float32] */;
  %15641 = sigmoid(%15639) /* ty=Tensor[(1, 1024), float32] */;
  %15642 = tanh(%15640) /* ty=Tensor[(1, 1024), float32] */;
  %15643 = multiply(%15638, %15581) /* ty=Tensor[(1, 1024), float32] */;
  %15644 = multiply(%15641, %15642) /* ty=Tensor[(1, 1024), float32] */;
  %15645 = add(%15643, %15644) /* ty=Tensor[(1, 1024), float32] */;
  %15646 = sigmoid(%15636) /* ty=Tensor[(1, 1024), float32] */;
  %15647 = tanh(%15645) /* ty=Tensor[(1, 1024), float32] */;
  %15648 = multiply(%15646, %15647) /* ty=Tensor[(1, 1024), float32] */;
  %15649 = (%15648, %15605) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15650 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15651 = concatenate(%15649, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15652 = concatenate(%15650, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15653 = nn.dense(%15651, %15652, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15654 = add(%15653, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15655 = add(%15654, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15656 = split(%15655, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15657 = %15656.3 /* ty=Tensor[(1, 1024), float32] */;
  %15658 = %15656.1 /* ty=Tensor[(1, 1024), float32] */;
  %15659 = sigmoid(%15658) /* ty=Tensor[(1, 1024), float32] */;
  %15660 = %15656.0 /* ty=Tensor[(1, 1024), float32] */;
  %15661 = %15656.2 /* ty=Tensor[(1, 1024), float32] */;
  %15662 = sigmoid(%15660) /* ty=Tensor[(1, 1024), float32] */;
  %15663 = tanh(%15661) /* ty=Tensor[(1, 1024), float32] */;
  %15664 = multiply(%15659, %15602) /* ty=Tensor[(1, 1024), float32] */;
  %15665 = multiply(%15662, %15663) /* ty=Tensor[(1, 1024), float32] */;
  %15666 = add(%15664, %15665) /* ty=Tensor[(1, 1024), float32] */;
  %15667 = sigmoid(%15657) /* ty=Tensor[(1, 1024), float32] */;
  %15668 = tanh(%15666) /* ty=Tensor[(1, 1024), float32] */;
  %15669 = multiply(%15667, %15668) /* ty=Tensor[(1, 1024), float32] */;
  %15670 = multiply(%15625, %15626) /* ty=Tensor[(1, 1024), float32] */;
  %15671 = (%15669, %15670) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15672 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15673 = concatenate(%15671, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15674 = concatenate(%15672, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15675 = nn.dense(%15673, %15674, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15676 = add(%15675, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15677 = add(%15676, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15678 = split(%15677, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15679 = %15678.3 /* ty=Tensor[(1, 1024), float32] */;
  %15680 = %15678.1 /* ty=Tensor[(1, 1024), float32] */;
  %15681 = sigmoid(%15680) /* ty=Tensor[(1, 1024), float32] */;
  %15682 = %15678.0 /* ty=Tensor[(1, 1024), float32] */;
  %15683 = %15678.2 /* ty=Tensor[(1, 1024), float32] */;
  %15684 = sigmoid(%15682) /* ty=Tensor[(1, 1024), float32] */;
  %15685 = tanh(%15683) /* ty=Tensor[(1, 1024), float32] */;
  %15686 = multiply(%15681, %15624) /* ty=Tensor[(1, 1024), float32] */;
  %15687 = multiply(%15684, %15685) /* ty=Tensor[(1, 1024), float32] */;
  %15688 = add(%15686, %15687) /* ty=Tensor[(1, 1024), float32] */;
  %15689 = sigmoid(%15679) /* ty=Tensor[(1, 1024), float32] */;
  %15690 = tanh(%15688) /* ty=Tensor[(1, 1024), float32] */;
  %15691 = %12788.45 /* ty=Tensor[(1, 2048), float32] */;
  %15692 = (%15691, %15648) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15693 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15694 = concatenate(%15692, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15695 = concatenate(%15693, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15696 = nn.dense(%15694, %15695, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15697 = add(%15696, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15698 = add(%15697, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15699 = split(%15698, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15700 = %15699.3 /* ty=Tensor[(1, 1024), float32] */;
  %15701 = %15699.1 /* ty=Tensor[(1, 1024), float32] */;
  %15702 = sigmoid(%15701) /* ty=Tensor[(1, 1024), float32] */;
  %15703 = %15699.0 /* ty=Tensor[(1, 1024), float32] */;
  %15704 = %15699.2 /* ty=Tensor[(1, 1024), float32] */;
  %15705 = sigmoid(%15703) /* ty=Tensor[(1, 1024), float32] */;
  %15706 = tanh(%15704) /* ty=Tensor[(1, 1024), float32] */;
  %15707 = multiply(%15702, %15645) /* ty=Tensor[(1, 1024), float32] */;
  %15708 = multiply(%15705, %15706) /* ty=Tensor[(1, 1024), float32] */;
  %15709 = add(%15707, %15708) /* ty=Tensor[(1, 1024), float32] */;
  %15710 = sigmoid(%15700) /* ty=Tensor[(1, 1024), float32] */;
  %15711 = tanh(%15709) /* ty=Tensor[(1, 1024), float32] */;
  %15712 = multiply(%15710, %15711) /* ty=Tensor[(1, 1024), float32] */;
  %15713 = (%15712, %15669) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15714 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15715 = concatenate(%15713, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15716 = concatenate(%15714, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15717 = nn.dense(%15715, %15716, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15718 = add(%15717, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15719 = add(%15718, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15720 = split(%15719, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15721 = %15720.3 /* ty=Tensor[(1, 1024), float32] */;
  %15722 = %15720.1 /* ty=Tensor[(1, 1024), float32] */;
  %15723 = sigmoid(%15722) /* ty=Tensor[(1, 1024), float32] */;
  %15724 = %15720.0 /* ty=Tensor[(1, 1024), float32] */;
  %15725 = %15720.2 /* ty=Tensor[(1, 1024), float32] */;
  %15726 = sigmoid(%15724) /* ty=Tensor[(1, 1024), float32] */;
  %15727 = tanh(%15725) /* ty=Tensor[(1, 1024), float32] */;
  %15728 = multiply(%15723, %15666) /* ty=Tensor[(1, 1024), float32] */;
  %15729 = multiply(%15726, %15727) /* ty=Tensor[(1, 1024), float32] */;
  %15730 = add(%15728, %15729) /* ty=Tensor[(1, 1024), float32] */;
  %15731 = sigmoid(%15721) /* ty=Tensor[(1, 1024), float32] */;
  %15732 = tanh(%15730) /* ty=Tensor[(1, 1024), float32] */;
  %15733 = multiply(%15731, %15732) /* ty=Tensor[(1, 1024), float32] */;
  %15734 = multiply(%15689, %15690) /* ty=Tensor[(1, 1024), float32] */;
  %15735 = (%15733, %15734) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15736 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15737 = concatenate(%15735, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15738 = concatenate(%15736, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15739 = nn.dense(%15737, %15738, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15740 = add(%15739, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15741 = add(%15740, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15742 = split(%15741, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15743 = %15742.3 /* ty=Tensor[(1, 1024), float32] */;
  %15744 = %15742.1 /* ty=Tensor[(1, 1024), float32] */;
  %15745 = sigmoid(%15744) /* ty=Tensor[(1, 1024), float32] */;
  %15746 = %15742.0 /* ty=Tensor[(1, 1024), float32] */;
  %15747 = %15742.2 /* ty=Tensor[(1, 1024), float32] */;
  %15748 = sigmoid(%15746) /* ty=Tensor[(1, 1024), float32] */;
  %15749 = tanh(%15747) /* ty=Tensor[(1, 1024), float32] */;
  %15750 = multiply(%15745, %15688) /* ty=Tensor[(1, 1024), float32] */;
  %15751 = multiply(%15748, %15749) /* ty=Tensor[(1, 1024), float32] */;
  %15752 = add(%15750, %15751) /* ty=Tensor[(1, 1024), float32] */;
  %15753 = sigmoid(%15743) /* ty=Tensor[(1, 1024), float32] */;
  %15754 = tanh(%15752) /* ty=Tensor[(1, 1024), float32] */;
  %15755 = %12788.46 /* ty=Tensor[(1, 2048), float32] */;
  %15756 = (%15755, %15712) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15757 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15758 = concatenate(%15756, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15759 = concatenate(%15757, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15760 = nn.dense(%15758, %15759, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15761 = add(%15760, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15762 = add(%15761, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15763 = split(%15762, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15764 = %15763.3 /* ty=Tensor[(1, 1024), float32] */;
  %15765 = %15763.1 /* ty=Tensor[(1, 1024), float32] */;
  %15766 = sigmoid(%15765) /* ty=Tensor[(1, 1024), float32] */;
  %15767 = %15763.0 /* ty=Tensor[(1, 1024), float32] */;
  %15768 = %15763.2 /* ty=Tensor[(1, 1024), float32] */;
  %15769 = sigmoid(%15767) /* ty=Tensor[(1, 1024), float32] */;
  %15770 = tanh(%15768) /* ty=Tensor[(1, 1024), float32] */;
  %15771 = multiply(%15766, %15709) /* ty=Tensor[(1, 1024), float32] */;
  %15772 = multiply(%15769, %15770) /* ty=Tensor[(1, 1024), float32] */;
  %15773 = add(%15771, %15772) /* ty=Tensor[(1, 1024), float32] */;
  %15774 = sigmoid(%15764) /* ty=Tensor[(1, 1024), float32] */;
  %15775 = tanh(%15773) /* ty=Tensor[(1, 1024), float32] */;
  %15776 = multiply(%15774, %15775) /* ty=Tensor[(1, 1024), float32] */;
  %15777 = (%15776, %15733) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15778 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15779 = concatenate(%15777, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15780 = concatenate(%15778, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15781 = nn.dense(%15779, %15780, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15782 = add(%15781, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15783 = add(%15782, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15784 = split(%15783, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15785 = %15784.3 /* ty=Tensor[(1, 1024), float32] */;
  %15786 = %15784.1 /* ty=Tensor[(1, 1024), float32] */;
  %15787 = sigmoid(%15786) /* ty=Tensor[(1, 1024), float32] */;
  %15788 = %15784.0 /* ty=Tensor[(1, 1024), float32] */;
  %15789 = %15784.2 /* ty=Tensor[(1, 1024), float32] */;
  %15790 = sigmoid(%15788) /* ty=Tensor[(1, 1024), float32] */;
  %15791 = tanh(%15789) /* ty=Tensor[(1, 1024), float32] */;
  %15792 = multiply(%15787, %15730) /* ty=Tensor[(1, 1024), float32] */;
  %15793 = multiply(%15790, %15791) /* ty=Tensor[(1, 1024), float32] */;
  %15794 = add(%15792, %15793) /* ty=Tensor[(1, 1024), float32] */;
  %15795 = sigmoid(%15785) /* ty=Tensor[(1, 1024), float32] */;
  %15796 = tanh(%15794) /* ty=Tensor[(1, 1024), float32] */;
  %15797 = multiply(%15795, %15796) /* ty=Tensor[(1, 1024), float32] */;
  %15798 = multiply(%15753, %15754) /* ty=Tensor[(1, 1024), float32] */;
  %15799 = (%15797, %15798) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15800 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15801 = concatenate(%15799, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15802 = concatenate(%15800, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15803 = nn.dense(%15801, %15802, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15804 = add(%15803, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15805 = add(%15804, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15806 = split(%15805, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15807 = %15806.3 /* ty=Tensor[(1, 1024), float32] */;
  %15808 = %15806.1 /* ty=Tensor[(1, 1024), float32] */;
  %15809 = sigmoid(%15808) /* ty=Tensor[(1, 1024), float32] */;
  %15810 = %15806.0 /* ty=Tensor[(1, 1024), float32] */;
  %15811 = %15806.2 /* ty=Tensor[(1, 1024), float32] */;
  %15812 = sigmoid(%15810) /* ty=Tensor[(1, 1024), float32] */;
  %15813 = tanh(%15811) /* ty=Tensor[(1, 1024), float32] */;
  %15814 = multiply(%15809, %15752) /* ty=Tensor[(1, 1024), float32] */;
  %15815 = multiply(%15812, %15813) /* ty=Tensor[(1, 1024), float32] */;
  %15816 = add(%15814, %15815) /* ty=Tensor[(1, 1024), float32] */;
  %15817 = sigmoid(%15807) /* ty=Tensor[(1, 1024), float32] */;
  %15818 = tanh(%15816) /* ty=Tensor[(1, 1024), float32] */;
  %15819 = %12788.47 /* ty=Tensor[(1, 2048), float32] */;
  %15820 = (%15819, %15776) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15821 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15822 = concatenate(%15820, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15823 = concatenate(%15821, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15824 = nn.dense(%15822, %15823, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15825 = add(%15824, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15826 = add(%15825, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15827 = split(%15826, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15828 = %15827.3 /* ty=Tensor[(1, 1024), float32] */;
  %15829 = %15827.1 /* ty=Tensor[(1, 1024), float32] */;
  %15830 = sigmoid(%15829) /* ty=Tensor[(1, 1024), float32] */;
  %15831 = %15827.0 /* ty=Tensor[(1, 1024), float32] */;
  %15832 = %15827.2 /* ty=Tensor[(1, 1024), float32] */;
  %15833 = sigmoid(%15831) /* ty=Tensor[(1, 1024), float32] */;
  %15834 = tanh(%15832) /* ty=Tensor[(1, 1024), float32] */;
  %15835 = multiply(%15830, %15773) /* ty=Tensor[(1, 1024), float32] */;
  %15836 = multiply(%15833, %15834) /* ty=Tensor[(1, 1024), float32] */;
  %15837 = add(%15835, %15836) /* ty=Tensor[(1, 1024), float32] */;
  %15838 = sigmoid(%15828) /* ty=Tensor[(1, 1024), float32] */;
  %15839 = tanh(%15837) /* ty=Tensor[(1, 1024), float32] */;
  %15840 = multiply(%15838, %15839) /* ty=Tensor[(1, 1024), float32] */;
  %15841 = (%15840, %15797) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15842 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15843 = concatenate(%15841, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15844 = concatenate(%15842, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15845 = nn.dense(%15843, %15844, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15846 = add(%15845, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15847 = add(%15846, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15848 = split(%15847, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15849 = %15848.3 /* ty=Tensor[(1, 1024), float32] */;
  %15850 = %15848.1 /* ty=Tensor[(1, 1024), float32] */;
  %15851 = sigmoid(%15850) /* ty=Tensor[(1, 1024), float32] */;
  %15852 = %15848.0 /* ty=Tensor[(1, 1024), float32] */;
  %15853 = %15848.2 /* ty=Tensor[(1, 1024), float32] */;
  %15854 = sigmoid(%15852) /* ty=Tensor[(1, 1024), float32] */;
  %15855 = tanh(%15853) /* ty=Tensor[(1, 1024), float32] */;
  %15856 = multiply(%15851, %15794) /* ty=Tensor[(1, 1024), float32] */;
  %15857 = multiply(%15854, %15855) /* ty=Tensor[(1, 1024), float32] */;
  %15858 = add(%15856, %15857) /* ty=Tensor[(1, 1024), float32] */;
  %15859 = sigmoid(%15849) /* ty=Tensor[(1, 1024), float32] */;
  %15860 = tanh(%15858) /* ty=Tensor[(1, 1024), float32] */;
  %15861 = multiply(%15859, %15860) /* ty=Tensor[(1, 1024), float32] */;
  %15862 = multiply(%15817, %15818) /* ty=Tensor[(1, 1024), float32] */;
  %15863 = (%15861, %15862) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15864 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15865 = concatenate(%15863, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15866 = concatenate(%15864, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15867 = nn.dense(%15865, %15866, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15868 = add(%15867, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15869 = add(%15868, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15870 = split(%15869, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15871 = %15870.3 /* ty=Tensor[(1, 1024), float32] */;
  %15872 = %15870.1 /* ty=Tensor[(1, 1024), float32] */;
  %15873 = sigmoid(%15872) /* ty=Tensor[(1, 1024), float32] */;
  %15874 = %15870.0 /* ty=Tensor[(1, 1024), float32] */;
  %15875 = %15870.2 /* ty=Tensor[(1, 1024), float32] */;
  %15876 = sigmoid(%15874) /* ty=Tensor[(1, 1024), float32] */;
  %15877 = tanh(%15875) /* ty=Tensor[(1, 1024), float32] */;
  %15878 = multiply(%15873, %15816) /* ty=Tensor[(1, 1024), float32] */;
  %15879 = multiply(%15876, %15877) /* ty=Tensor[(1, 1024), float32] */;
  %15880 = add(%15878, %15879) /* ty=Tensor[(1, 1024), float32] */;
  %15881 = sigmoid(%15871) /* ty=Tensor[(1, 1024), float32] */;
  %15882 = tanh(%15880) /* ty=Tensor[(1, 1024), float32] */;
  %15883 = %12788.48 /* ty=Tensor[(1, 2048), float32] */;
  %15884 = (%15883, %15840) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15885 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15886 = concatenate(%15884, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15887 = concatenate(%15885, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15888 = nn.dense(%15886, %15887, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15889 = add(%15888, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15890 = add(%15889, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15891 = split(%15890, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15892 = %15891.3 /* ty=Tensor[(1, 1024), float32] */;
  %15893 = %15891.1 /* ty=Tensor[(1, 1024), float32] */;
  %15894 = sigmoid(%15893) /* ty=Tensor[(1, 1024), float32] */;
  %15895 = %15891.0 /* ty=Tensor[(1, 1024), float32] */;
  %15896 = %15891.2 /* ty=Tensor[(1, 1024), float32] */;
  %15897 = sigmoid(%15895) /* ty=Tensor[(1, 1024), float32] */;
  %15898 = tanh(%15896) /* ty=Tensor[(1, 1024), float32] */;
  %15899 = multiply(%15894, %15837) /* ty=Tensor[(1, 1024), float32] */;
  %15900 = multiply(%15897, %15898) /* ty=Tensor[(1, 1024), float32] */;
  %15901 = add(%15899, %15900) /* ty=Tensor[(1, 1024), float32] */;
  %15902 = sigmoid(%15892) /* ty=Tensor[(1, 1024), float32] */;
  %15903 = tanh(%15901) /* ty=Tensor[(1, 1024), float32] */;
  %15904 = multiply(%15902, %15903) /* ty=Tensor[(1, 1024), float32] */;
  %15905 = (%15904, %15861) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15906 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15907 = concatenate(%15905, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15908 = concatenate(%15906, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15909 = nn.dense(%15907, %15908, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15910 = add(%15909, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15911 = add(%15910, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15912 = split(%15911, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15913 = %15912.3 /* ty=Tensor[(1, 1024), float32] */;
  %15914 = %15912.1 /* ty=Tensor[(1, 1024), float32] */;
  %15915 = sigmoid(%15914) /* ty=Tensor[(1, 1024), float32] */;
  %15916 = %15912.0 /* ty=Tensor[(1, 1024), float32] */;
  %15917 = %15912.2 /* ty=Tensor[(1, 1024), float32] */;
  %15918 = sigmoid(%15916) /* ty=Tensor[(1, 1024), float32] */;
  %15919 = tanh(%15917) /* ty=Tensor[(1, 1024), float32] */;
  %15920 = multiply(%15915, %15858) /* ty=Tensor[(1, 1024), float32] */;
  %15921 = multiply(%15918, %15919) /* ty=Tensor[(1, 1024), float32] */;
  %15922 = add(%15920, %15921) /* ty=Tensor[(1, 1024), float32] */;
  %15923 = sigmoid(%15913) /* ty=Tensor[(1, 1024), float32] */;
  %15924 = tanh(%15922) /* ty=Tensor[(1, 1024), float32] */;
  %15925 = multiply(%15923, %15924) /* ty=Tensor[(1, 1024), float32] */;
  %15926 = multiply(%15881, %15882) /* ty=Tensor[(1, 1024), float32] */;
  %15927 = (%15925, %15926) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15928 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15929 = concatenate(%15927, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15930 = concatenate(%15928, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15931 = nn.dense(%15929, %15930, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15932 = add(%15931, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15933 = add(%15932, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15934 = split(%15933, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15935 = %15934.3 /* ty=Tensor[(1, 1024), float32] */;
  %15936 = %15934.1 /* ty=Tensor[(1, 1024), float32] */;
  %15937 = sigmoid(%15936) /* ty=Tensor[(1, 1024), float32] */;
  %15938 = %15934.0 /* ty=Tensor[(1, 1024), float32] */;
  %15939 = %15934.2 /* ty=Tensor[(1, 1024), float32] */;
  %15940 = sigmoid(%15938) /* ty=Tensor[(1, 1024), float32] */;
  %15941 = tanh(%15939) /* ty=Tensor[(1, 1024), float32] */;
  %15942 = multiply(%15937, %15880) /* ty=Tensor[(1, 1024), float32] */;
  %15943 = multiply(%15940, %15941) /* ty=Tensor[(1, 1024), float32] */;
  %15944 = add(%15942, %15943) /* ty=Tensor[(1, 1024), float32] */;
  %15945 = sigmoid(%15935) /* ty=Tensor[(1, 1024), float32] */;
  %15946 = tanh(%15944) /* ty=Tensor[(1, 1024), float32] */;
  %15947 = %12788.49 /* ty=Tensor[(1, 2048), float32] */;
  %15948 = (%15947, %15904) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %15949 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %15950 = concatenate(%15948, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %15951 = concatenate(%15949, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %15952 = nn.dense(%15950, %15951, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15953 = add(%15952, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15954 = add(%15953, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %15955 = split(%15954, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15956 = %15955.3 /* ty=Tensor[(1, 1024), float32] */;
  %15957 = %15955.1 /* ty=Tensor[(1, 1024), float32] */;
  %15958 = sigmoid(%15957) /* ty=Tensor[(1, 1024), float32] */;
  %15959 = %15955.0 /* ty=Tensor[(1, 1024), float32] */;
  %15960 = %15955.2 /* ty=Tensor[(1, 1024), float32] */;
  %15961 = sigmoid(%15959) /* ty=Tensor[(1, 1024), float32] */;
  %15962 = tanh(%15960) /* ty=Tensor[(1, 1024), float32] */;
  %15963 = multiply(%15958, %15901) /* ty=Tensor[(1, 1024), float32] */;
  %15964 = multiply(%15961, %15962) /* ty=Tensor[(1, 1024), float32] */;
  %15965 = add(%15963, %15964) /* ty=Tensor[(1, 1024), float32] */;
  %15966 = sigmoid(%15956) /* ty=Tensor[(1, 1024), float32] */;
  %15967 = tanh(%15965) /* ty=Tensor[(1, 1024), float32] */;
  %15968 = multiply(%15966, %15967) /* ty=Tensor[(1, 1024), float32] */;
  %15969 = (%15968, %15925) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15970 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15971 = concatenate(%15969, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15972 = concatenate(%15970, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15973 = nn.dense(%15971, %15972, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15974 = add(%15973, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15975 = add(%15974, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %15976 = split(%15975, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15977 = %15976.3 /* ty=Tensor[(1, 1024), float32] */;
  %15978 = %15976.1 /* ty=Tensor[(1, 1024), float32] */;
  %15979 = sigmoid(%15978) /* ty=Tensor[(1, 1024), float32] */;
  %15980 = %15976.0 /* ty=Tensor[(1, 1024), float32] */;
  %15981 = %15976.2 /* ty=Tensor[(1, 1024), float32] */;
  %15982 = sigmoid(%15980) /* ty=Tensor[(1, 1024), float32] */;
  %15983 = tanh(%15981) /* ty=Tensor[(1, 1024), float32] */;
  %15984 = multiply(%15979, %15922) /* ty=Tensor[(1, 1024), float32] */;
  %15985 = multiply(%15982, %15983) /* ty=Tensor[(1, 1024), float32] */;
  %15986 = add(%15984, %15985) /* ty=Tensor[(1, 1024), float32] */;
  %15987 = sigmoid(%15977) /* ty=Tensor[(1, 1024), float32] */;
  %15988 = tanh(%15986) /* ty=Tensor[(1, 1024), float32] */;
  %15989 = multiply(%15987, %15988) /* ty=Tensor[(1, 1024), float32] */;
  %15990 = multiply(%15945, %15946) /* ty=Tensor[(1, 1024), float32] */;
  %15991 = (%15989, %15990) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15992 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %15993 = concatenate(%15991, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %15994 = concatenate(%15992, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %15995 = nn.dense(%15993, %15994, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %15996 = add(%15995, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15997 = add(%15996, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %15998 = split(%15997, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %15999 = %15998.3 /* ty=Tensor[(1, 1024), float32] */;
  %16000 = %15998.1 /* ty=Tensor[(1, 1024), float32] */;
  %16001 = sigmoid(%16000) /* ty=Tensor[(1, 1024), float32] */;
  %16002 = %15998.0 /* ty=Tensor[(1, 1024), float32] */;
  %16003 = %15998.2 /* ty=Tensor[(1, 1024), float32] */;
  %16004 = sigmoid(%16002) /* ty=Tensor[(1, 1024), float32] */;
  %16005 = tanh(%16003) /* ty=Tensor[(1, 1024), float32] */;
  %16006 = multiply(%16001, %15944) /* ty=Tensor[(1, 1024), float32] */;
  %16007 = multiply(%16004, %16005) /* ty=Tensor[(1, 1024), float32] */;
  %16008 = add(%16006, %16007) /* ty=Tensor[(1, 1024), float32] */;
  %16009 = sigmoid(%15999) /* ty=Tensor[(1, 1024), float32] */;
  %16010 = tanh(%16008) /* ty=Tensor[(1, 1024), float32] */;
  %16011 = %12788.50 /* ty=Tensor[(1, 2048), float32] */;
  %16012 = (%16011, %15968) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16013 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16014 = concatenate(%16012, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16015 = concatenate(%16013, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16016 = nn.dense(%16014, %16015, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16017 = add(%16016, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16018 = add(%16017, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16019 = split(%16018, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16020 = %16019.3 /* ty=Tensor[(1, 1024), float32] */;
  %16021 = %16019.1 /* ty=Tensor[(1, 1024), float32] */;
  %16022 = sigmoid(%16021) /* ty=Tensor[(1, 1024), float32] */;
  %16023 = %16019.0 /* ty=Tensor[(1, 1024), float32] */;
  %16024 = %16019.2 /* ty=Tensor[(1, 1024), float32] */;
  %16025 = sigmoid(%16023) /* ty=Tensor[(1, 1024), float32] */;
  %16026 = tanh(%16024) /* ty=Tensor[(1, 1024), float32] */;
  %16027 = multiply(%16022, %15965) /* ty=Tensor[(1, 1024), float32] */;
  %16028 = multiply(%16025, %16026) /* ty=Tensor[(1, 1024), float32] */;
  %16029 = add(%16027, %16028) /* ty=Tensor[(1, 1024), float32] */;
  %16030 = sigmoid(%16020) /* ty=Tensor[(1, 1024), float32] */;
  %16031 = tanh(%16029) /* ty=Tensor[(1, 1024), float32] */;
  %16032 = multiply(%16030, %16031) /* ty=Tensor[(1, 1024), float32] */;
  %16033 = (%16032, %15989) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16034 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16035 = concatenate(%16033, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16036 = concatenate(%16034, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16037 = nn.dense(%16035, %16036, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16038 = add(%16037, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16039 = add(%16038, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16040 = split(%16039, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16041 = %16040.3 /* ty=Tensor[(1, 1024), float32] */;
  %16042 = %16040.1 /* ty=Tensor[(1, 1024), float32] */;
  %16043 = sigmoid(%16042) /* ty=Tensor[(1, 1024), float32] */;
  %16044 = %16040.0 /* ty=Tensor[(1, 1024), float32] */;
  %16045 = %16040.2 /* ty=Tensor[(1, 1024), float32] */;
  %16046 = sigmoid(%16044) /* ty=Tensor[(1, 1024), float32] */;
  %16047 = tanh(%16045) /* ty=Tensor[(1, 1024), float32] */;
  %16048 = multiply(%16043, %15986) /* ty=Tensor[(1, 1024), float32] */;
  %16049 = multiply(%16046, %16047) /* ty=Tensor[(1, 1024), float32] */;
  %16050 = add(%16048, %16049) /* ty=Tensor[(1, 1024), float32] */;
  %16051 = sigmoid(%16041) /* ty=Tensor[(1, 1024), float32] */;
  %16052 = tanh(%16050) /* ty=Tensor[(1, 1024), float32] */;
  %16053 = multiply(%16051, %16052) /* ty=Tensor[(1, 1024), float32] */;
  %16054 = multiply(%16009, %16010) /* ty=Tensor[(1, 1024), float32] */;
  %16055 = (%16053, %16054) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16056 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16057 = concatenate(%16055, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16058 = concatenate(%16056, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16059 = nn.dense(%16057, %16058, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16060 = add(%16059, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16061 = add(%16060, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16062 = split(%16061, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16063 = %16062.3 /* ty=Tensor[(1, 1024), float32] */;
  %16064 = %16062.1 /* ty=Tensor[(1, 1024), float32] */;
  %16065 = sigmoid(%16064) /* ty=Tensor[(1, 1024), float32] */;
  %16066 = %16062.0 /* ty=Tensor[(1, 1024), float32] */;
  %16067 = %16062.2 /* ty=Tensor[(1, 1024), float32] */;
  %16068 = sigmoid(%16066) /* ty=Tensor[(1, 1024), float32] */;
  %16069 = tanh(%16067) /* ty=Tensor[(1, 1024), float32] */;
  %16070 = multiply(%16065, %16008) /* ty=Tensor[(1, 1024), float32] */;
  %16071 = multiply(%16068, %16069) /* ty=Tensor[(1, 1024), float32] */;
  %16072 = add(%16070, %16071) /* ty=Tensor[(1, 1024), float32] */;
  %16073 = sigmoid(%16063) /* ty=Tensor[(1, 1024), float32] */;
  %16074 = tanh(%16072) /* ty=Tensor[(1, 1024), float32] */;
  %16075 = %12788.51 /* ty=Tensor[(1, 2048), float32] */;
  %16076 = (%16075, %16032) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16077 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16078 = concatenate(%16076, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16079 = concatenate(%16077, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16080 = nn.dense(%16078, %16079, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16081 = add(%16080, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16082 = add(%16081, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16083 = split(%16082, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16084 = %16083.3 /* ty=Tensor[(1, 1024), float32] */;
  %16085 = %16083.1 /* ty=Tensor[(1, 1024), float32] */;
  %16086 = sigmoid(%16085) /* ty=Tensor[(1, 1024), float32] */;
  %16087 = %16083.0 /* ty=Tensor[(1, 1024), float32] */;
  %16088 = %16083.2 /* ty=Tensor[(1, 1024), float32] */;
  %16089 = sigmoid(%16087) /* ty=Tensor[(1, 1024), float32] */;
  %16090 = tanh(%16088) /* ty=Tensor[(1, 1024), float32] */;
  %16091 = multiply(%16086, %16029) /* ty=Tensor[(1, 1024), float32] */;
  %16092 = multiply(%16089, %16090) /* ty=Tensor[(1, 1024), float32] */;
  %16093 = add(%16091, %16092) /* ty=Tensor[(1, 1024), float32] */;
  %16094 = sigmoid(%16084) /* ty=Tensor[(1, 1024), float32] */;
  %16095 = tanh(%16093) /* ty=Tensor[(1, 1024), float32] */;
  %16096 = multiply(%16094, %16095) /* ty=Tensor[(1, 1024), float32] */;
  %16097 = (%16096, %16053) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16098 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16099 = concatenate(%16097, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16100 = concatenate(%16098, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16101 = nn.dense(%16099, %16100, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16102 = add(%16101, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16103 = add(%16102, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16104 = split(%16103, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16105 = %16104.3 /* ty=Tensor[(1, 1024), float32] */;
  %16106 = %16104.1 /* ty=Tensor[(1, 1024), float32] */;
  %16107 = sigmoid(%16106) /* ty=Tensor[(1, 1024), float32] */;
  %16108 = %16104.0 /* ty=Tensor[(1, 1024), float32] */;
  %16109 = %16104.2 /* ty=Tensor[(1, 1024), float32] */;
  %16110 = sigmoid(%16108) /* ty=Tensor[(1, 1024), float32] */;
  %16111 = tanh(%16109) /* ty=Tensor[(1, 1024), float32] */;
  %16112 = multiply(%16107, %16050) /* ty=Tensor[(1, 1024), float32] */;
  %16113 = multiply(%16110, %16111) /* ty=Tensor[(1, 1024), float32] */;
  %16114 = add(%16112, %16113) /* ty=Tensor[(1, 1024), float32] */;
  %16115 = sigmoid(%16105) /* ty=Tensor[(1, 1024), float32] */;
  %16116 = tanh(%16114) /* ty=Tensor[(1, 1024), float32] */;
  %16117 = multiply(%16115, %16116) /* ty=Tensor[(1, 1024), float32] */;
  %16118 = multiply(%16073, %16074) /* ty=Tensor[(1, 1024), float32] */;
  %16119 = (%16117, %16118) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16120 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16121 = concatenate(%16119, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16122 = concatenate(%16120, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16123 = nn.dense(%16121, %16122, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16124 = add(%16123, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16125 = add(%16124, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16126 = split(%16125, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16127 = %16126.3 /* ty=Tensor[(1, 1024), float32] */;
  %16128 = %16126.1 /* ty=Tensor[(1, 1024), float32] */;
  %16129 = sigmoid(%16128) /* ty=Tensor[(1, 1024), float32] */;
  %16130 = %16126.0 /* ty=Tensor[(1, 1024), float32] */;
  %16131 = %16126.2 /* ty=Tensor[(1, 1024), float32] */;
  %16132 = sigmoid(%16130) /* ty=Tensor[(1, 1024), float32] */;
  %16133 = tanh(%16131) /* ty=Tensor[(1, 1024), float32] */;
  %16134 = multiply(%16129, %16072) /* ty=Tensor[(1, 1024), float32] */;
  %16135 = multiply(%16132, %16133) /* ty=Tensor[(1, 1024), float32] */;
  %16136 = add(%16134, %16135) /* ty=Tensor[(1, 1024), float32] */;
  %16137 = sigmoid(%16127) /* ty=Tensor[(1, 1024), float32] */;
  %16138 = tanh(%16136) /* ty=Tensor[(1, 1024), float32] */;
  %16139 = %12788.52 /* ty=Tensor[(1, 2048), float32] */;
  %16140 = (%16139, %16096) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16141 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16142 = concatenate(%16140, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16143 = concatenate(%16141, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16144 = nn.dense(%16142, %16143, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16145 = add(%16144, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16146 = add(%16145, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16147 = split(%16146, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16148 = %16147.3 /* ty=Tensor[(1, 1024), float32] */;
  %16149 = %16147.1 /* ty=Tensor[(1, 1024), float32] */;
  %16150 = sigmoid(%16149) /* ty=Tensor[(1, 1024), float32] */;
  %16151 = %16147.0 /* ty=Tensor[(1, 1024), float32] */;
  %16152 = %16147.2 /* ty=Tensor[(1, 1024), float32] */;
  %16153 = sigmoid(%16151) /* ty=Tensor[(1, 1024), float32] */;
  %16154 = tanh(%16152) /* ty=Tensor[(1, 1024), float32] */;
  %16155 = multiply(%16150, %16093) /* ty=Tensor[(1, 1024), float32] */;
  %16156 = multiply(%16153, %16154) /* ty=Tensor[(1, 1024), float32] */;
  %16157 = add(%16155, %16156) /* ty=Tensor[(1, 1024), float32] */;
  %16158 = sigmoid(%16148) /* ty=Tensor[(1, 1024), float32] */;
  %16159 = tanh(%16157) /* ty=Tensor[(1, 1024), float32] */;
  %16160 = multiply(%16158, %16159) /* ty=Tensor[(1, 1024), float32] */;
  %16161 = (%16160, %16117) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16162 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16163 = concatenate(%16161, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16164 = concatenate(%16162, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16165 = nn.dense(%16163, %16164, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16166 = add(%16165, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16167 = add(%16166, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16168 = split(%16167, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16169 = %16168.3 /* ty=Tensor[(1, 1024), float32] */;
  %16170 = %16168.1 /* ty=Tensor[(1, 1024), float32] */;
  %16171 = sigmoid(%16170) /* ty=Tensor[(1, 1024), float32] */;
  %16172 = %16168.0 /* ty=Tensor[(1, 1024), float32] */;
  %16173 = %16168.2 /* ty=Tensor[(1, 1024), float32] */;
  %16174 = sigmoid(%16172) /* ty=Tensor[(1, 1024), float32] */;
  %16175 = tanh(%16173) /* ty=Tensor[(1, 1024), float32] */;
  %16176 = multiply(%16171, %16114) /* ty=Tensor[(1, 1024), float32] */;
  %16177 = multiply(%16174, %16175) /* ty=Tensor[(1, 1024), float32] */;
  %16178 = add(%16176, %16177) /* ty=Tensor[(1, 1024), float32] */;
  %16179 = sigmoid(%16169) /* ty=Tensor[(1, 1024), float32] */;
  %16180 = tanh(%16178) /* ty=Tensor[(1, 1024), float32] */;
  %16181 = multiply(%16179, %16180) /* ty=Tensor[(1, 1024), float32] */;
  %16182 = multiply(%16137, %16138) /* ty=Tensor[(1, 1024), float32] */;
  %16183 = (%16181, %16182) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16184 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16185 = concatenate(%16183, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16186 = concatenate(%16184, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16187 = nn.dense(%16185, %16186, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16188 = add(%16187, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16189 = add(%16188, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16190 = split(%16189, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16191 = %16190.3 /* ty=Tensor[(1, 1024), float32] */;
  %16192 = %16190.1 /* ty=Tensor[(1, 1024), float32] */;
  %16193 = sigmoid(%16192) /* ty=Tensor[(1, 1024), float32] */;
  %16194 = %16190.0 /* ty=Tensor[(1, 1024), float32] */;
  %16195 = %16190.2 /* ty=Tensor[(1, 1024), float32] */;
  %16196 = sigmoid(%16194) /* ty=Tensor[(1, 1024), float32] */;
  %16197 = tanh(%16195) /* ty=Tensor[(1, 1024), float32] */;
  %16198 = multiply(%16193, %16136) /* ty=Tensor[(1, 1024), float32] */;
  %16199 = multiply(%16196, %16197) /* ty=Tensor[(1, 1024), float32] */;
  %16200 = add(%16198, %16199) /* ty=Tensor[(1, 1024), float32] */;
  %16201 = sigmoid(%16191) /* ty=Tensor[(1, 1024), float32] */;
  %16202 = tanh(%16200) /* ty=Tensor[(1, 1024), float32] */;
  %16203 = %12788.53 /* ty=Tensor[(1, 2048), float32] */;
  %16204 = (%16203, %16160) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16205 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16206 = concatenate(%16204, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16207 = concatenate(%16205, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16208 = nn.dense(%16206, %16207, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16209 = add(%16208, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16210 = add(%16209, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16211 = split(%16210, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16212 = %16211.3 /* ty=Tensor[(1, 1024), float32] */;
  %16213 = %16211.1 /* ty=Tensor[(1, 1024), float32] */;
  %16214 = sigmoid(%16213) /* ty=Tensor[(1, 1024), float32] */;
  %16215 = %16211.0 /* ty=Tensor[(1, 1024), float32] */;
  %16216 = %16211.2 /* ty=Tensor[(1, 1024), float32] */;
  %16217 = sigmoid(%16215) /* ty=Tensor[(1, 1024), float32] */;
  %16218 = tanh(%16216) /* ty=Tensor[(1, 1024), float32] */;
  %16219 = multiply(%16214, %16157) /* ty=Tensor[(1, 1024), float32] */;
  %16220 = multiply(%16217, %16218) /* ty=Tensor[(1, 1024), float32] */;
  %16221 = add(%16219, %16220) /* ty=Tensor[(1, 1024), float32] */;
  %16222 = sigmoid(%16212) /* ty=Tensor[(1, 1024), float32] */;
  %16223 = tanh(%16221) /* ty=Tensor[(1, 1024), float32] */;
  %16224 = multiply(%16222, %16223) /* ty=Tensor[(1, 1024), float32] */;
  %16225 = (%16224, %16181) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16226 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16227 = concatenate(%16225, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16228 = concatenate(%16226, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16229 = nn.dense(%16227, %16228, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16230 = add(%16229, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16231 = add(%16230, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16232 = split(%16231, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16233 = %16232.3 /* ty=Tensor[(1, 1024), float32] */;
  %16234 = %16232.1 /* ty=Tensor[(1, 1024), float32] */;
  %16235 = sigmoid(%16234) /* ty=Tensor[(1, 1024), float32] */;
  %16236 = %16232.0 /* ty=Tensor[(1, 1024), float32] */;
  %16237 = %16232.2 /* ty=Tensor[(1, 1024), float32] */;
  %16238 = sigmoid(%16236) /* ty=Tensor[(1, 1024), float32] */;
  %16239 = tanh(%16237) /* ty=Tensor[(1, 1024), float32] */;
  %16240 = multiply(%16235, %16178) /* ty=Tensor[(1, 1024), float32] */;
  %16241 = multiply(%16238, %16239) /* ty=Tensor[(1, 1024), float32] */;
  %16242 = add(%16240, %16241) /* ty=Tensor[(1, 1024), float32] */;
  %16243 = sigmoid(%16233) /* ty=Tensor[(1, 1024), float32] */;
  %16244 = tanh(%16242) /* ty=Tensor[(1, 1024), float32] */;
  %16245 = multiply(%16243, %16244) /* ty=Tensor[(1, 1024), float32] */;
  %16246 = multiply(%16201, %16202) /* ty=Tensor[(1, 1024), float32] */;
  %16247 = (%16245, %16246) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16248 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16249 = concatenate(%16247, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16250 = concatenate(%16248, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16251 = nn.dense(%16249, %16250, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16252 = add(%16251, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16253 = add(%16252, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16254 = split(%16253, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16255 = %16254.3 /* ty=Tensor[(1, 1024), float32] */;
  %16256 = %16254.1 /* ty=Tensor[(1, 1024), float32] */;
  %16257 = sigmoid(%16256) /* ty=Tensor[(1, 1024), float32] */;
  %16258 = %16254.0 /* ty=Tensor[(1, 1024), float32] */;
  %16259 = %16254.2 /* ty=Tensor[(1, 1024), float32] */;
  %16260 = sigmoid(%16258) /* ty=Tensor[(1, 1024), float32] */;
  %16261 = tanh(%16259) /* ty=Tensor[(1, 1024), float32] */;
  %16262 = multiply(%16257, %16200) /* ty=Tensor[(1, 1024), float32] */;
  %16263 = multiply(%16260, %16261) /* ty=Tensor[(1, 1024), float32] */;
  %16264 = add(%16262, %16263) /* ty=Tensor[(1, 1024), float32] */;
  %16265 = sigmoid(%16255) /* ty=Tensor[(1, 1024), float32] */;
  %16266 = tanh(%16264) /* ty=Tensor[(1, 1024), float32] */;
  %16267 = %12788.54 /* ty=Tensor[(1, 2048), float32] */;
  %16268 = (%16267, %16224) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16269 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16270 = concatenate(%16268, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16271 = concatenate(%16269, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16272 = nn.dense(%16270, %16271, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16273 = add(%16272, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16274 = add(%16273, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16275 = split(%16274, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16276 = %16275.3 /* ty=Tensor[(1, 1024), float32] */;
  %16277 = %16275.1 /* ty=Tensor[(1, 1024), float32] */;
  %16278 = sigmoid(%16277) /* ty=Tensor[(1, 1024), float32] */;
  %16279 = %16275.0 /* ty=Tensor[(1, 1024), float32] */;
  %16280 = %16275.2 /* ty=Tensor[(1, 1024), float32] */;
  %16281 = sigmoid(%16279) /* ty=Tensor[(1, 1024), float32] */;
  %16282 = tanh(%16280) /* ty=Tensor[(1, 1024), float32] */;
  %16283 = multiply(%16278, %16221) /* ty=Tensor[(1, 1024), float32] */;
  %16284 = multiply(%16281, %16282) /* ty=Tensor[(1, 1024), float32] */;
  %16285 = add(%16283, %16284) /* ty=Tensor[(1, 1024), float32] */;
  %16286 = sigmoid(%16276) /* ty=Tensor[(1, 1024), float32] */;
  %16287 = tanh(%16285) /* ty=Tensor[(1, 1024), float32] */;
  %16288 = multiply(%16286, %16287) /* ty=Tensor[(1, 1024), float32] */;
  %16289 = (%16288, %16245) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16290 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16291 = concatenate(%16289, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16292 = concatenate(%16290, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16293 = nn.dense(%16291, %16292, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16294 = add(%16293, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16295 = add(%16294, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16296 = split(%16295, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16297 = %16296.3 /* ty=Tensor[(1, 1024), float32] */;
  %16298 = %16296.1 /* ty=Tensor[(1, 1024), float32] */;
  %16299 = sigmoid(%16298) /* ty=Tensor[(1, 1024), float32] */;
  %16300 = %16296.0 /* ty=Tensor[(1, 1024), float32] */;
  %16301 = %16296.2 /* ty=Tensor[(1, 1024), float32] */;
  %16302 = sigmoid(%16300) /* ty=Tensor[(1, 1024), float32] */;
  %16303 = tanh(%16301) /* ty=Tensor[(1, 1024), float32] */;
  %16304 = multiply(%16299, %16242) /* ty=Tensor[(1, 1024), float32] */;
  %16305 = multiply(%16302, %16303) /* ty=Tensor[(1, 1024), float32] */;
  %16306 = add(%16304, %16305) /* ty=Tensor[(1, 1024), float32] */;
  %16307 = sigmoid(%16297) /* ty=Tensor[(1, 1024), float32] */;
  %16308 = tanh(%16306) /* ty=Tensor[(1, 1024), float32] */;
  %16309 = multiply(%16307, %16308) /* ty=Tensor[(1, 1024), float32] */;
  %16310 = multiply(%16265, %16266) /* ty=Tensor[(1, 1024), float32] */;
  %16311 = (%16309, %16310) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16312 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16313 = concatenate(%16311, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16314 = concatenate(%16312, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16315 = nn.dense(%16313, %16314, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16316 = add(%16315, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16317 = add(%16316, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16318 = split(%16317, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16319 = %16318.3 /* ty=Tensor[(1, 1024), float32] */;
  %16320 = %16318.1 /* ty=Tensor[(1, 1024), float32] */;
  %16321 = sigmoid(%16320) /* ty=Tensor[(1, 1024), float32] */;
  %16322 = %16318.0 /* ty=Tensor[(1, 1024), float32] */;
  %16323 = %16318.2 /* ty=Tensor[(1, 1024), float32] */;
  %16324 = sigmoid(%16322) /* ty=Tensor[(1, 1024), float32] */;
  %16325 = tanh(%16323) /* ty=Tensor[(1, 1024), float32] */;
  %16326 = multiply(%16321, %16264) /* ty=Tensor[(1, 1024), float32] */;
  %16327 = multiply(%16324, %16325) /* ty=Tensor[(1, 1024), float32] */;
  %16328 = add(%16326, %16327) /* ty=Tensor[(1, 1024), float32] */;
  %16329 = sigmoid(%16319) /* ty=Tensor[(1, 1024), float32] */;
  %16330 = tanh(%16328) /* ty=Tensor[(1, 1024), float32] */;
  %16331 = %12788.55 /* ty=Tensor[(1, 2048), float32] */;
  %16332 = (%16331, %16288) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16333 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16334 = concatenate(%16332, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16335 = concatenate(%16333, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16336 = nn.dense(%16334, %16335, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16337 = add(%16336, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16338 = add(%16337, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16339 = split(%16338, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16340 = %16339.3 /* ty=Tensor[(1, 1024), float32] */;
  %16341 = %16339.1 /* ty=Tensor[(1, 1024), float32] */;
  %16342 = sigmoid(%16341) /* ty=Tensor[(1, 1024), float32] */;
  %16343 = %16339.0 /* ty=Tensor[(1, 1024), float32] */;
  %16344 = %16339.2 /* ty=Tensor[(1, 1024), float32] */;
  %16345 = sigmoid(%16343) /* ty=Tensor[(1, 1024), float32] */;
  %16346 = tanh(%16344) /* ty=Tensor[(1, 1024), float32] */;
  %16347 = multiply(%16342, %16285) /* ty=Tensor[(1, 1024), float32] */;
  %16348 = multiply(%16345, %16346) /* ty=Tensor[(1, 1024), float32] */;
  %16349 = add(%16347, %16348) /* ty=Tensor[(1, 1024), float32] */;
  %16350 = sigmoid(%16340) /* ty=Tensor[(1, 1024), float32] */;
  %16351 = tanh(%16349) /* ty=Tensor[(1, 1024), float32] */;
  %16352 = multiply(%16350, %16351) /* ty=Tensor[(1, 1024), float32] */;
  %16353 = (%16352, %16309) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16354 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16355 = concatenate(%16353, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16356 = concatenate(%16354, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16357 = nn.dense(%16355, %16356, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16358 = add(%16357, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16359 = add(%16358, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16360 = split(%16359, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16361 = %16360.3 /* ty=Tensor[(1, 1024), float32] */;
  %16362 = %16360.1 /* ty=Tensor[(1, 1024), float32] */;
  %16363 = sigmoid(%16362) /* ty=Tensor[(1, 1024), float32] */;
  %16364 = %16360.0 /* ty=Tensor[(1, 1024), float32] */;
  %16365 = %16360.2 /* ty=Tensor[(1, 1024), float32] */;
  %16366 = sigmoid(%16364) /* ty=Tensor[(1, 1024), float32] */;
  %16367 = tanh(%16365) /* ty=Tensor[(1, 1024), float32] */;
  %16368 = multiply(%16363, %16306) /* ty=Tensor[(1, 1024), float32] */;
  %16369 = multiply(%16366, %16367) /* ty=Tensor[(1, 1024), float32] */;
  %16370 = add(%16368, %16369) /* ty=Tensor[(1, 1024), float32] */;
  %16371 = sigmoid(%16361) /* ty=Tensor[(1, 1024), float32] */;
  %16372 = tanh(%16370) /* ty=Tensor[(1, 1024), float32] */;
  %16373 = multiply(%16371, %16372) /* ty=Tensor[(1, 1024), float32] */;
  %16374 = multiply(%16329, %16330) /* ty=Tensor[(1, 1024), float32] */;
  %16375 = (%16373, %16374) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16376 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16377 = concatenate(%16375, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16378 = concatenate(%16376, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16379 = nn.dense(%16377, %16378, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16380 = add(%16379, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16381 = add(%16380, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16382 = split(%16381, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16383 = %16382.3 /* ty=Tensor[(1, 1024), float32] */;
  %16384 = %16382.1 /* ty=Tensor[(1, 1024), float32] */;
  %16385 = sigmoid(%16384) /* ty=Tensor[(1, 1024), float32] */;
  %16386 = %16382.0 /* ty=Tensor[(1, 1024), float32] */;
  %16387 = %16382.2 /* ty=Tensor[(1, 1024), float32] */;
  %16388 = sigmoid(%16386) /* ty=Tensor[(1, 1024), float32] */;
  %16389 = tanh(%16387) /* ty=Tensor[(1, 1024), float32] */;
  %16390 = multiply(%16385, %16328) /* ty=Tensor[(1, 1024), float32] */;
  %16391 = multiply(%16388, %16389) /* ty=Tensor[(1, 1024), float32] */;
  %16392 = add(%16390, %16391) /* ty=Tensor[(1, 1024), float32] */;
  %16393 = sigmoid(%16383) /* ty=Tensor[(1, 1024), float32] */;
  %16394 = tanh(%16392) /* ty=Tensor[(1, 1024), float32] */;
  %16395 = %12788.56 /* ty=Tensor[(1, 2048), float32] */;
  %16396 = (%16395, %16352) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16397 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16398 = concatenate(%16396, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16399 = concatenate(%16397, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16400 = nn.dense(%16398, %16399, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16401 = add(%16400, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16402 = add(%16401, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16403 = split(%16402, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16404 = %16403.3 /* ty=Tensor[(1, 1024), float32] */;
  %16405 = %16403.1 /* ty=Tensor[(1, 1024), float32] */;
  %16406 = sigmoid(%16405) /* ty=Tensor[(1, 1024), float32] */;
  %16407 = %16403.0 /* ty=Tensor[(1, 1024), float32] */;
  %16408 = %16403.2 /* ty=Tensor[(1, 1024), float32] */;
  %16409 = sigmoid(%16407) /* ty=Tensor[(1, 1024), float32] */;
  %16410 = tanh(%16408) /* ty=Tensor[(1, 1024), float32] */;
  %16411 = multiply(%16406, %16349) /* ty=Tensor[(1, 1024), float32] */;
  %16412 = multiply(%16409, %16410) /* ty=Tensor[(1, 1024), float32] */;
  %16413 = add(%16411, %16412) /* ty=Tensor[(1, 1024), float32] */;
  %16414 = sigmoid(%16404) /* ty=Tensor[(1, 1024), float32] */;
  %16415 = tanh(%16413) /* ty=Tensor[(1, 1024), float32] */;
  %16416 = multiply(%16414, %16415) /* ty=Tensor[(1, 1024), float32] */;
  %16417 = (%16416, %16373) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16418 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16419 = concatenate(%16417, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16420 = concatenate(%16418, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16421 = nn.dense(%16419, %16420, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16422 = add(%16421, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16423 = add(%16422, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16424 = split(%16423, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16425 = %16424.3 /* ty=Tensor[(1, 1024), float32] */;
  %16426 = %16424.1 /* ty=Tensor[(1, 1024), float32] */;
  %16427 = sigmoid(%16426) /* ty=Tensor[(1, 1024), float32] */;
  %16428 = %16424.0 /* ty=Tensor[(1, 1024), float32] */;
  %16429 = %16424.2 /* ty=Tensor[(1, 1024), float32] */;
  %16430 = sigmoid(%16428) /* ty=Tensor[(1, 1024), float32] */;
  %16431 = tanh(%16429) /* ty=Tensor[(1, 1024), float32] */;
  %16432 = multiply(%16427, %16370) /* ty=Tensor[(1, 1024), float32] */;
  %16433 = multiply(%16430, %16431) /* ty=Tensor[(1, 1024), float32] */;
  %16434 = add(%16432, %16433) /* ty=Tensor[(1, 1024), float32] */;
  %16435 = sigmoid(%16425) /* ty=Tensor[(1, 1024), float32] */;
  %16436 = tanh(%16434) /* ty=Tensor[(1, 1024), float32] */;
  %16437 = multiply(%16435, %16436) /* ty=Tensor[(1, 1024), float32] */;
  %16438 = multiply(%16393, %16394) /* ty=Tensor[(1, 1024), float32] */;
  %16439 = (%16437, %16438) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16440 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16441 = concatenate(%16439, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16442 = concatenate(%16440, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16443 = nn.dense(%16441, %16442, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16444 = add(%16443, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16445 = add(%16444, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16446 = split(%16445, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16447 = %16446.3 /* ty=Tensor[(1, 1024), float32] */;
  %16448 = %16446.1 /* ty=Tensor[(1, 1024), float32] */;
  %16449 = sigmoid(%16448) /* ty=Tensor[(1, 1024), float32] */;
  %16450 = %16446.0 /* ty=Tensor[(1, 1024), float32] */;
  %16451 = %16446.2 /* ty=Tensor[(1, 1024), float32] */;
  %16452 = sigmoid(%16450) /* ty=Tensor[(1, 1024), float32] */;
  %16453 = tanh(%16451) /* ty=Tensor[(1, 1024), float32] */;
  %16454 = multiply(%16449, %16392) /* ty=Tensor[(1, 1024), float32] */;
  %16455 = multiply(%16452, %16453) /* ty=Tensor[(1, 1024), float32] */;
  %16456 = add(%16454, %16455) /* ty=Tensor[(1, 1024), float32] */;
  %16457 = sigmoid(%16447) /* ty=Tensor[(1, 1024), float32] */;
  %16458 = tanh(%16456) /* ty=Tensor[(1, 1024), float32] */;
  %16459 = %12788.57 /* ty=Tensor[(1, 2048), float32] */;
  %16460 = (%16459, %16416) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16461 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16462 = concatenate(%16460, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16463 = concatenate(%16461, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16464 = nn.dense(%16462, %16463, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16465 = add(%16464, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16466 = add(%16465, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16467 = split(%16466, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16468 = %16467.3 /* ty=Tensor[(1, 1024), float32] */;
  %16469 = %16467.1 /* ty=Tensor[(1, 1024), float32] */;
  %16470 = sigmoid(%16469) /* ty=Tensor[(1, 1024), float32] */;
  %16471 = %16467.0 /* ty=Tensor[(1, 1024), float32] */;
  %16472 = %16467.2 /* ty=Tensor[(1, 1024), float32] */;
  %16473 = sigmoid(%16471) /* ty=Tensor[(1, 1024), float32] */;
  %16474 = tanh(%16472) /* ty=Tensor[(1, 1024), float32] */;
  %16475 = multiply(%16470, %16413) /* ty=Tensor[(1, 1024), float32] */;
  %16476 = multiply(%16473, %16474) /* ty=Tensor[(1, 1024), float32] */;
  %16477 = add(%16475, %16476) /* ty=Tensor[(1, 1024), float32] */;
  %16478 = sigmoid(%16468) /* ty=Tensor[(1, 1024), float32] */;
  %16479 = tanh(%16477) /* ty=Tensor[(1, 1024), float32] */;
  %16480 = multiply(%16478, %16479) /* ty=Tensor[(1, 1024), float32] */;
  %16481 = (%16480, %16437) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16482 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16483 = concatenate(%16481, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16484 = concatenate(%16482, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16485 = nn.dense(%16483, %16484, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16486 = add(%16485, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16487 = add(%16486, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16488 = split(%16487, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16489 = %16488.3 /* ty=Tensor[(1, 1024), float32] */;
  %16490 = %16488.1 /* ty=Tensor[(1, 1024), float32] */;
  %16491 = sigmoid(%16490) /* ty=Tensor[(1, 1024), float32] */;
  %16492 = %16488.0 /* ty=Tensor[(1, 1024), float32] */;
  %16493 = %16488.2 /* ty=Tensor[(1, 1024), float32] */;
  %16494 = sigmoid(%16492) /* ty=Tensor[(1, 1024), float32] */;
  %16495 = tanh(%16493) /* ty=Tensor[(1, 1024), float32] */;
  %16496 = multiply(%16491, %16434) /* ty=Tensor[(1, 1024), float32] */;
  %16497 = multiply(%16494, %16495) /* ty=Tensor[(1, 1024), float32] */;
  %16498 = add(%16496, %16497) /* ty=Tensor[(1, 1024), float32] */;
  %16499 = sigmoid(%16489) /* ty=Tensor[(1, 1024), float32] */;
  %16500 = tanh(%16498) /* ty=Tensor[(1, 1024), float32] */;
  %16501 = multiply(%16499, %16500) /* ty=Tensor[(1, 1024), float32] */;
  %16502 = multiply(%16457, %16458) /* ty=Tensor[(1, 1024), float32] */;
  %16503 = (%16501, %16502) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16504 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16505 = concatenate(%16503, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16506 = concatenate(%16504, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16507 = nn.dense(%16505, %16506, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16508 = add(%16507, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16509 = add(%16508, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16510 = split(%16509, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16511 = %16510.3 /* ty=Tensor[(1, 1024), float32] */;
  %16512 = %16510.1 /* ty=Tensor[(1, 1024), float32] */;
  %16513 = sigmoid(%16512) /* ty=Tensor[(1, 1024), float32] */;
  %16514 = %16510.0 /* ty=Tensor[(1, 1024), float32] */;
  %16515 = %16510.2 /* ty=Tensor[(1, 1024), float32] */;
  %16516 = sigmoid(%16514) /* ty=Tensor[(1, 1024), float32] */;
  %16517 = tanh(%16515) /* ty=Tensor[(1, 1024), float32] */;
  %16518 = multiply(%16513, %16456) /* ty=Tensor[(1, 1024), float32] */;
  %16519 = multiply(%16516, %16517) /* ty=Tensor[(1, 1024), float32] */;
  %16520 = add(%16518, %16519) /* ty=Tensor[(1, 1024), float32] */;
  %16521 = sigmoid(%16511) /* ty=Tensor[(1, 1024), float32] */;
  %16522 = tanh(%16520) /* ty=Tensor[(1, 1024), float32] */;
  %16523 = %12788.58 /* ty=Tensor[(1, 2048), float32] */;
  %16524 = (%16523, %16480) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16525 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16526 = concatenate(%16524, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16527 = concatenate(%16525, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16528 = nn.dense(%16526, %16527, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16529 = add(%16528, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16530 = add(%16529, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16531 = split(%16530, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16532 = %16531.3 /* ty=Tensor[(1, 1024), float32] */;
  %16533 = %16531.1 /* ty=Tensor[(1, 1024), float32] */;
  %16534 = sigmoid(%16533) /* ty=Tensor[(1, 1024), float32] */;
  %16535 = %16531.0 /* ty=Tensor[(1, 1024), float32] */;
  %16536 = %16531.2 /* ty=Tensor[(1, 1024), float32] */;
  %16537 = sigmoid(%16535) /* ty=Tensor[(1, 1024), float32] */;
  %16538 = tanh(%16536) /* ty=Tensor[(1, 1024), float32] */;
  %16539 = multiply(%16534, %16477) /* ty=Tensor[(1, 1024), float32] */;
  %16540 = multiply(%16537, %16538) /* ty=Tensor[(1, 1024), float32] */;
  %16541 = add(%16539, %16540) /* ty=Tensor[(1, 1024), float32] */;
  %16542 = sigmoid(%16532) /* ty=Tensor[(1, 1024), float32] */;
  %16543 = tanh(%16541) /* ty=Tensor[(1, 1024), float32] */;
  %16544 = multiply(%16542, %16543) /* ty=Tensor[(1, 1024), float32] */;
  %16545 = (%16544, %16501) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16546 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16547 = concatenate(%16545, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16548 = concatenate(%16546, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16549 = nn.dense(%16547, %16548, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16550 = add(%16549, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16551 = add(%16550, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16552 = split(%16551, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16553 = %16552.3 /* ty=Tensor[(1, 1024), float32] */;
  %16554 = %16552.1 /* ty=Tensor[(1, 1024), float32] */;
  %16555 = sigmoid(%16554) /* ty=Tensor[(1, 1024), float32] */;
  %16556 = %16552.0 /* ty=Tensor[(1, 1024), float32] */;
  %16557 = %16552.2 /* ty=Tensor[(1, 1024), float32] */;
  %16558 = sigmoid(%16556) /* ty=Tensor[(1, 1024), float32] */;
  %16559 = tanh(%16557) /* ty=Tensor[(1, 1024), float32] */;
  %16560 = multiply(%16555, %16498) /* ty=Tensor[(1, 1024), float32] */;
  %16561 = multiply(%16558, %16559) /* ty=Tensor[(1, 1024), float32] */;
  %16562 = add(%16560, %16561) /* ty=Tensor[(1, 1024), float32] */;
  %16563 = sigmoid(%16553) /* ty=Tensor[(1, 1024), float32] */;
  %16564 = tanh(%16562) /* ty=Tensor[(1, 1024), float32] */;
  %16565 = multiply(%16563, %16564) /* ty=Tensor[(1, 1024), float32] */;
  %16566 = multiply(%16521, %16522) /* ty=Tensor[(1, 1024), float32] */;
  %16567 = (%16565, %16566) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16568 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16569 = concatenate(%16567, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16570 = concatenate(%16568, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16571 = nn.dense(%16569, %16570, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16572 = add(%16571, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16573 = add(%16572, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16574 = split(%16573, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16575 = %16574.3 /* ty=Tensor[(1, 1024), float32] */;
  %16576 = %16574.1 /* ty=Tensor[(1, 1024), float32] */;
  %16577 = sigmoid(%16576) /* ty=Tensor[(1, 1024), float32] */;
  %16578 = %16574.0 /* ty=Tensor[(1, 1024), float32] */;
  %16579 = %16574.2 /* ty=Tensor[(1, 1024), float32] */;
  %16580 = sigmoid(%16578) /* ty=Tensor[(1, 1024), float32] */;
  %16581 = tanh(%16579) /* ty=Tensor[(1, 1024), float32] */;
  %16582 = multiply(%16577, %16520) /* ty=Tensor[(1, 1024), float32] */;
  %16583 = multiply(%16580, %16581) /* ty=Tensor[(1, 1024), float32] */;
  %16584 = add(%16582, %16583) /* ty=Tensor[(1, 1024), float32] */;
  %16585 = sigmoid(%16575) /* ty=Tensor[(1, 1024), float32] */;
  %16586 = tanh(%16584) /* ty=Tensor[(1, 1024), float32] */;
  %16587 = %12788.59 /* ty=Tensor[(1, 2048), float32] */;
  %16588 = (%16587, %16544) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16589 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16590 = concatenate(%16588, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16591 = concatenate(%16589, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16592 = nn.dense(%16590, %16591, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16593 = add(%16592, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16594 = add(%16593, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16595 = split(%16594, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16596 = %16595.3 /* ty=Tensor[(1, 1024), float32] */;
  %16597 = %16595.1 /* ty=Tensor[(1, 1024), float32] */;
  %16598 = sigmoid(%16597) /* ty=Tensor[(1, 1024), float32] */;
  %16599 = %16595.0 /* ty=Tensor[(1, 1024), float32] */;
  %16600 = %16595.2 /* ty=Tensor[(1, 1024), float32] */;
  %16601 = sigmoid(%16599) /* ty=Tensor[(1, 1024), float32] */;
  %16602 = tanh(%16600) /* ty=Tensor[(1, 1024), float32] */;
  %16603 = multiply(%16598, %16541) /* ty=Tensor[(1, 1024), float32] */;
  %16604 = multiply(%16601, %16602) /* ty=Tensor[(1, 1024), float32] */;
  %16605 = add(%16603, %16604) /* ty=Tensor[(1, 1024), float32] */;
  %16606 = sigmoid(%16596) /* ty=Tensor[(1, 1024), float32] */;
  %16607 = tanh(%16605) /* ty=Tensor[(1, 1024), float32] */;
  %16608 = multiply(%16606, %16607) /* ty=Tensor[(1, 1024), float32] */;
  %16609 = (%16608, %16565) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16610 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16611 = concatenate(%16609, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16612 = concatenate(%16610, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16613 = nn.dense(%16611, %16612, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16614 = add(%16613, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16615 = add(%16614, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16616 = split(%16615, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16617 = %16616.3 /* ty=Tensor[(1, 1024), float32] */;
  %16618 = %16616.1 /* ty=Tensor[(1, 1024), float32] */;
  %16619 = sigmoid(%16618) /* ty=Tensor[(1, 1024), float32] */;
  %16620 = %16616.0 /* ty=Tensor[(1, 1024), float32] */;
  %16621 = %16616.2 /* ty=Tensor[(1, 1024), float32] */;
  %16622 = sigmoid(%16620) /* ty=Tensor[(1, 1024), float32] */;
  %16623 = tanh(%16621) /* ty=Tensor[(1, 1024), float32] */;
  %16624 = multiply(%16619, %16562) /* ty=Tensor[(1, 1024), float32] */;
  %16625 = multiply(%16622, %16623) /* ty=Tensor[(1, 1024), float32] */;
  %16626 = add(%16624, %16625) /* ty=Tensor[(1, 1024), float32] */;
  %16627 = sigmoid(%16617) /* ty=Tensor[(1, 1024), float32] */;
  %16628 = tanh(%16626) /* ty=Tensor[(1, 1024), float32] */;
  %16629 = multiply(%16627, %16628) /* ty=Tensor[(1, 1024), float32] */;
  %16630 = multiply(%16585, %16586) /* ty=Tensor[(1, 1024), float32] */;
  %16631 = (%16629, %16630) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16632 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16633 = concatenate(%16631, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16634 = concatenate(%16632, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16635 = nn.dense(%16633, %16634, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16636 = add(%16635, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16637 = add(%16636, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16638 = split(%16637, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16639 = %16638.3 /* ty=Tensor[(1, 1024), float32] */;
  %16640 = %16638.1 /* ty=Tensor[(1, 1024), float32] */;
  %16641 = sigmoid(%16640) /* ty=Tensor[(1, 1024), float32] */;
  %16642 = %16638.0 /* ty=Tensor[(1, 1024), float32] */;
  %16643 = %16638.2 /* ty=Tensor[(1, 1024), float32] */;
  %16644 = sigmoid(%16642) /* ty=Tensor[(1, 1024), float32] */;
  %16645 = tanh(%16643) /* ty=Tensor[(1, 1024), float32] */;
  %16646 = multiply(%16641, %16584) /* ty=Tensor[(1, 1024), float32] */;
  %16647 = multiply(%16644, %16645) /* ty=Tensor[(1, 1024), float32] */;
  %16648 = add(%16646, %16647) /* ty=Tensor[(1, 1024), float32] */;
  %16649 = sigmoid(%16639) /* ty=Tensor[(1, 1024), float32] */;
  %16650 = tanh(%16648) /* ty=Tensor[(1, 1024), float32] */;
  %16651 = %12788.60 /* ty=Tensor[(1, 2048), float32] */;
  %16652 = (%16651, %16608) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16653 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16654 = concatenate(%16652, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16655 = concatenate(%16653, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16656 = nn.dense(%16654, %16655, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16657 = add(%16656, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16658 = add(%16657, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16659 = split(%16658, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16660 = %16659.3 /* ty=Tensor[(1, 1024), float32] */;
  %16661 = %16659.1 /* ty=Tensor[(1, 1024), float32] */;
  %16662 = sigmoid(%16661) /* ty=Tensor[(1, 1024), float32] */;
  %16663 = %16659.0 /* ty=Tensor[(1, 1024), float32] */;
  %16664 = %16659.2 /* ty=Tensor[(1, 1024), float32] */;
  %16665 = sigmoid(%16663) /* ty=Tensor[(1, 1024), float32] */;
  %16666 = tanh(%16664) /* ty=Tensor[(1, 1024), float32] */;
  %16667 = multiply(%16662, %16605) /* ty=Tensor[(1, 1024), float32] */;
  %16668 = multiply(%16665, %16666) /* ty=Tensor[(1, 1024), float32] */;
  %16669 = add(%16667, %16668) /* ty=Tensor[(1, 1024), float32] */;
  %16670 = sigmoid(%16660) /* ty=Tensor[(1, 1024), float32] */;
  %16671 = tanh(%16669) /* ty=Tensor[(1, 1024), float32] */;
  %16672 = multiply(%16670, %16671) /* ty=Tensor[(1, 1024), float32] */;
  %16673 = (%16672, %16629) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16674 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16675 = concatenate(%16673, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16676 = concatenate(%16674, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16677 = nn.dense(%16675, %16676, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16678 = add(%16677, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16679 = add(%16678, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16680 = split(%16679, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16681 = %16680.3 /* ty=Tensor[(1, 1024), float32] */;
  %16682 = %16680.1 /* ty=Tensor[(1, 1024), float32] */;
  %16683 = sigmoid(%16682) /* ty=Tensor[(1, 1024), float32] */;
  %16684 = %16680.0 /* ty=Tensor[(1, 1024), float32] */;
  %16685 = %16680.2 /* ty=Tensor[(1, 1024), float32] */;
  %16686 = sigmoid(%16684) /* ty=Tensor[(1, 1024), float32] */;
  %16687 = tanh(%16685) /* ty=Tensor[(1, 1024), float32] */;
  %16688 = multiply(%16683, %16626) /* ty=Tensor[(1, 1024), float32] */;
  %16689 = multiply(%16686, %16687) /* ty=Tensor[(1, 1024), float32] */;
  %16690 = add(%16688, %16689) /* ty=Tensor[(1, 1024), float32] */;
  %16691 = sigmoid(%16681) /* ty=Tensor[(1, 1024), float32] */;
  %16692 = tanh(%16690) /* ty=Tensor[(1, 1024), float32] */;
  %16693 = multiply(%16691, %16692) /* ty=Tensor[(1, 1024), float32] */;
  %16694 = multiply(%16649, %16650) /* ty=Tensor[(1, 1024), float32] */;
  %16695 = (%16693, %16694) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16696 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16697 = concatenate(%16695, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16698 = concatenate(%16696, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16699 = nn.dense(%16697, %16698, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16700 = add(%16699, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16701 = add(%16700, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16702 = split(%16701, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16703 = %16702.3 /* ty=Tensor[(1, 1024), float32] */;
  %16704 = %16702.1 /* ty=Tensor[(1, 1024), float32] */;
  %16705 = sigmoid(%16704) /* ty=Tensor[(1, 1024), float32] */;
  %16706 = %16702.0 /* ty=Tensor[(1, 1024), float32] */;
  %16707 = %16702.2 /* ty=Tensor[(1, 1024), float32] */;
  %16708 = sigmoid(%16706) /* ty=Tensor[(1, 1024), float32] */;
  %16709 = tanh(%16707) /* ty=Tensor[(1, 1024), float32] */;
  %16710 = multiply(%16705, %16648) /* ty=Tensor[(1, 1024), float32] */;
  %16711 = multiply(%16708, %16709) /* ty=Tensor[(1, 1024), float32] */;
  %16712 = add(%16710, %16711) /* ty=Tensor[(1, 1024), float32] */;
  %16713 = sigmoid(%16703) /* ty=Tensor[(1, 1024), float32] */;
  %16714 = tanh(%16712) /* ty=Tensor[(1, 1024), float32] */;
  %16715 = %12788.61 /* ty=Tensor[(1, 2048), float32] */;
  %16716 = (%16715, %16672) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16717 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16718 = concatenate(%16716, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16719 = concatenate(%16717, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16720 = nn.dense(%16718, %16719, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16721 = add(%16720, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16722 = add(%16721, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16723 = split(%16722, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16724 = %16723.3 /* ty=Tensor[(1, 1024), float32] */;
  %16725 = %16723.1 /* ty=Tensor[(1, 1024), float32] */;
  %16726 = sigmoid(%16725) /* ty=Tensor[(1, 1024), float32] */;
  %16727 = %16723.0 /* ty=Tensor[(1, 1024), float32] */;
  %16728 = %16723.2 /* ty=Tensor[(1, 1024), float32] */;
  %16729 = sigmoid(%16727) /* ty=Tensor[(1, 1024), float32] */;
  %16730 = tanh(%16728) /* ty=Tensor[(1, 1024), float32] */;
  %16731 = multiply(%16726, %16669) /* ty=Tensor[(1, 1024), float32] */;
  %16732 = multiply(%16729, %16730) /* ty=Tensor[(1, 1024), float32] */;
  %16733 = add(%16731, %16732) /* ty=Tensor[(1, 1024), float32] */;
  %16734 = sigmoid(%16724) /* ty=Tensor[(1, 1024), float32] */;
  %16735 = tanh(%16733) /* ty=Tensor[(1, 1024), float32] */;
  %16736 = multiply(%16734, %16735) /* ty=Tensor[(1, 1024), float32] */;
  %16737 = (%16736, %16693) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16738 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16739 = concatenate(%16737, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16740 = concatenate(%16738, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16741 = nn.dense(%16739, %16740, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16742 = add(%16741, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16743 = add(%16742, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16744 = split(%16743, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16745 = %16744.3 /* ty=Tensor[(1, 1024), float32] */;
  %16746 = %16744.1 /* ty=Tensor[(1, 1024), float32] */;
  %16747 = sigmoid(%16746) /* ty=Tensor[(1, 1024), float32] */;
  %16748 = %16744.0 /* ty=Tensor[(1, 1024), float32] */;
  %16749 = %16744.2 /* ty=Tensor[(1, 1024), float32] */;
  %16750 = sigmoid(%16748) /* ty=Tensor[(1, 1024), float32] */;
  %16751 = tanh(%16749) /* ty=Tensor[(1, 1024), float32] */;
  %16752 = multiply(%16747, %16690) /* ty=Tensor[(1, 1024), float32] */;
  %16753 = multiply(%16750, %16751) /* ty=Tensor[(1, 1024), float32] */;
  %16754 = add(%16752, %16753) /* ty=Tensor[(1, 1024), float32] */;
  %16755 = sigmoid(%16745) /* ty=Tensor[(1, 1024), float32] */;
  %16756 = tanh(%16754) /* ty=Tensor[(1, 1024), float32] */;
  %16757 = multiply(%16755, %16756) /* ty=Tensor[(1, 1024), float32] */;
  %16758 = multiply(%16713, %16714) /* ty=Tensor[(1, 1024), float32] */;
  %16759 = (%16757, %16758) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16760 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16761 = concatenate(%16759, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16762 = concatenate(%16760, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16763 = nn.dense(%16761, %16762, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16764 = add(%16763, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16765 = add(%16764, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16766 = split(%16765, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16767 = %16766.3 /* ty=Tensor[(1, 1024), float32] */;
  %16768 = %16766.1 /* ty=Tensor[(1, 1024), float32] */;
  %16769 = sigmoid(%16768) /* ty=Tensor[(1, 1024), float32] */;
  %16770 = %16766.0 /* ty=Tensor[(1, 1024), float32] */;
  %16771 = %16766.2 /* ty=Tensor[(1, 1024), float32] */;
  %16772 = sigmoid(%16770) /* ty=Tensor[(1, 1024), float32] */;
  %16773 = tanh(%16771) /* ty=Tensor[(1, 1024), float32] */;
  %16774 = multiply(%16769, %16712) /* ty=Tensor[(1, 1024), float32] */;
  %16775 = multiply(%16772, %16773) /* ty=Tensor[(1, 1024), float32] */;
  %16776 = add(%16774, %16775) /* ty=Tensor[(1, 1024), float32] */;
  %16777 = sigmoid(%16767) /* ty=Tensor[(1, 1024), float32] */;
  %16778 = tanh(%16776) /* ty=Tensor[(1, 1024), float32] */;
  %16779 = %12788.62 /* ty=Tensor[(1, 2048), float32] */;
  %16780 = (%16779, %16736) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16781 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16782 = concatenate(%16780, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16783 = concatenate(%16781, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16784 = nn.dense(%16782, %16783, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16785 = add(%16784, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16786 = add(%16785, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16787 = split(%16786, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16788 = %16787.3 /* ty=Tensor[(1, 1024), float32] */;
  %16789 = %16787.1 /* ty=Tensor[(1, 1024), float32] */;
  %16790 = sigmoid(%16789) /* ty=Tensor[(1, 1024), float32] */;
  %16791 = %16787.0 /* ty=Tensor[(1, 1024), float32] */;
  %16792 = %16787.2 /* ty=Tensor[(1, 1024), float32] */;
  %16793 = sigmoid(%16791) /* ty=Tensor[(1, 1024), float32] */;
  %16794 = tanh(%16792) /* ty=Tensor[(1, 1024), float32] */;
  %16795 = multiply(%16790, %16733) /* ty=Tensor[(1, 1024), float32] */;
  %16796 = multiply(%16793, %16794) /* ty=Tensor[(1, 1024), float32] */;
  %16797 = add(%16795, %16796) /* ty=Tensor[(1, 1024), float32] */;
  %16798 = sigmoid(%16788) /* ty=Tensor[(1, 1024), float32] */;
  %16799 = tanh(%16797) /* ty=Tensor[(1, 1024), float32] */;
  %16800 = multiply(%16798, %16799) /* ty=Tensor[(1, 1024), float32] */;
  %16801 = (%16800, %16757) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16802 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16803 = concatenate(%16801, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16804 = concatenate(%16802, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16805 = nn.dense(%16803, %16804, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16806 = add(%16805, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16807 = add(%16806, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16808 = split(%16807, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16809 = %16808.3 /* ty=Tensor[(1, 1024), float32] */;
  %16810 = %16808.1 /* ty=Tensor[(1, 1024), float32] */;
  %16811 = sigmoid(%16810) /* ty=Tensor[(1, 1024), float32] */;
  %16812 = %16808.0 /* ty=Tensor[(1, 1024), float32] */;
  %16813 = %16808.2 /* ty=Tensor[(1, 1024), float32] */;
  %16814 = sigmoid(%16812) /* ty=Tensor[(1, 1024), float32] */;
  %16815 = tanh(%16813) /* ty=Tensor[(1, 1024), float32] */;
  %16816 = multiply(%16811, %16754) /* ty=Tensor[(1, 1024), float32] */;
  %16817 = multiply(%16814, %16815) /* ty=Tensor[(1, 1024), float32] */;
  %16818 = add(%16816, %16817) /* ty=Tensor[(1, 1024), float32] */;
  %16819 = sigmoid(%16809) /* ty=Tensor[(1, 1024), float32] */;
  %16820 = tanh(%16818) /* ty=Tensor[(1, 1024), float32] */;
  %16821 = multiply(%16819, %16820) /* ty=Tensor[(1, 1024), float32] */;
  %16822 = multiply(%16777, %16778) /* ty=Tensor[(1, 1024), float32] */;
  %16823 = (%16821, %16822) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16824 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16825 = concatenate(%16823, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16826 = concatenate(%16824, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16827 = nn.dense(%16825, %16826, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16828 = add(%16827, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16829 = add(%16828, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16830 = split(%16829, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16831 = %16830.3 /* ty=Tensor[(1, 1024), float32] */;
  %16832 = %16830.1 /* ty=Tensor[(1, 1024), float32] */;
  %16833 = sigmoid(%16832) /* ty=Tensor[(1, 1024), float32] */;
  %16834 = %16830.0 /* ty=Tensor[(1, 1024), float32] */;
  %16835 = %16830.2 /* ty=Tensor[(1, 1024), float32] */;
  %16836 = sigmoid(%16834) /* ty=Tensor[(1, 1024), float32] */;
  %16837 = tanh(%16835) /* ty=Tensor[(1, 1024), float32] */;
  %16838 = multiply(%16833, %16776) /* ty=Tensor[(1, 1024), float32] */;
  %16839 = multiply(%16836, %16837) /* ty=Tensor[(1, 1024), float32] */;
  %16840 = add(%16838, %16839) /* ty=Tensor[(1, 1024), float32] */;
  %16841 = sigmoid(%16831) /* ty=Tensor[(1, 1024), float32] */;
  %16842 = tanh(%16840) /* ty=Tensor[(1, 1024), float32] */;
  %16843 = %12788.63 /* ty=Tensor[(1, 2048), float32] */;
  %16844 = (%16843, %16800) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16845 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16846 = concatenate(%16844, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16847 = concatenate(%16845, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16848 = nn.dense(%16846, %16847, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16849 = add(%16848, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16850 = add(%16849, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16851 = split(%16850, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16852 = %16851.3 /* ty=Tensor[(1, 1024), float32] */;
  %16853 = %16851.1 /* ty=Tensor[(1, 1024), float32] */;
  %16854 = sigmoid(%16853) /* ty=Tensor[(1, 1024), float32] */;
  %16855 = %16851.0 /* ty=Tensor[(1, 1024), float32] */;
  %16856 = %16851.2 /* ty=Tensor[(1, 1024), float32] */;
  %16857 = sigmoid(%16855) /* ty=Tensor[(1, 1024), float32] */;
  %16858 = tanh(%16856) /* ty=Tensor[(1, 1024), float32] */;
  %16859 = multiply(%16854, %16797) /* ty=Tensor[(1, 1024), float32] */;
  %16860 = multiply(%16857, %16858) /* ty=Tensor[(1, 1024), float32] */;
  %16861 = add(%16859, %16860) /* ty=Tensor[(1, 1024), float32] */;
  %16862 = sigmoid(%16852) /* ty=Tensor[(1, 1024), float32] */;
  %16863 = tanh(%16861) /* ty=Tensor[(1, 1024), float32] */;
  %16864 = multiply(%16862, %16863) /* ty=Tensor[(1, 1024), float32] */;
  %16865 = (%16864, %16821) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16866 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16867 = concatenate(%16865, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16868 = concatenate(%16866, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16869 = nn.dense(%16867, %16868, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16870 = add(%16869, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16871 = add(%16870, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16872 = split(%16871, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16873 = %16872.3 /* ty=Tensor[(1, 1024), float32] */;
  %16874 = %16872.1 /* ty=Tensor[(1, 1024), float32] */;
  %16875 = sigmoid(%16874) /* ty=Tensor[(1, 1024), float32] */;
  %16876 = %16872.0 /* ty=Tensor[(1, 1024), float32] */;
  %16877 = %16872.2 /* ty=Tensor[(1, 1024), float32] */;
  %16878 = sigmoid(%16876) /* ty=Tensor[(1, 1024), float32] */;
  %16879 = tanh(%16877) /* ty=Tensor[(1, 1024), float32] */;
  %16880 = multiply(%16875, %16818) /* ty=Tensor[(1, 1024), float32] */;
  %16881 = multiply(%16878, %16879) /* ty=Tensor[(1, 1024), float32] */;
  %16882 = add(%16880, %16881) /* ty=Tensor[(1, 1024), float32] */;
  %16883 = sigmoid(%16873) /* ty=Tensor[(1, 1024), float32] */;
  %16884 = tanh(%16882) /* ty=Tensor[(1, 1024), float32] */;
  %16885 = multiply(%16883, %16884) /* ty=Tensor[(1, 1024), float32] */;
  %16886 = multiply(%16841, %16842) /* ty=Tensor[(1, 1024), float32] */;
  %16887 = (%16885, %16886) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16888 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16889 = concatenate(%16887, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16890 = concatenate(%16888, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16891 = nn.dense(%16889, %16890, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16892 = add(%16891, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16893 = add(%16892, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16894 = split(%16893, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16895 = %16894.3 /* ty=Tensor[(1, 1024), float32] */;
  %16896 = %16894.1 /* ty=Tensor[(1, 1024), float32] */;
  %16897 = sigmoid(%16896) /* ty=Tensor[(1, 1024), float32] */;
  %16898 = %16894.0 /* ty=Tensor[(1, 1024), float32] */;
  %16899 = %16894.2 /* ty=Tensor[(1, 1024), float32] */;
  %16900 = sigmoid(%16898) /* ty=Tensor[(1, 1024), float32] */;
  %16901 = tanh(%16899) /* ty=Tensor[(1, 1024), float32] */;
  %16902 = multiply(%16897, %16840) /* ty=Tensor[(1, 1024), float32] */;
  %16903 = multiply(%16900, %16901) /* ty=Tensor[(1, 1024), float32] */;
  %16904 = add(%16902, %16903) /* ty=Tensor[(1, 1024), float32] */;
  %16905 = sigmoid(%16895) /* ty=Tensor[(1, 1024), float32] */;
  %16906 = tanh(%16904) /* ty=Tensor[(1, 1024), float32] */;
  %16907 = %12788.64 /* ty=Tensor[(1, 2048), float32] */;
  %16908 = (%16907, %16864) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16909 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16910 = concatenate(%16908, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16911 = concatenate(%16909, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16912 = nn.dense(%16910, %16911, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16913 = add(%16912, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16914 = add(%16913, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16915 = split(%16914, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16916 = %16915.3 /* ty=Tensor[(1, 1024), float32] */;
  %16917 = %16915.1 /* ty=Tensor[(1, 1024), float32] */;
  %16918 = sigmoid(%16917) /* ty=Tensor[(1, 1024), float32] */;
  %16919 = %16915.0 /* ty=Tensor[(1, 1024), float32] */;
  %16920 = %16915.2 /* ty=Tensor[(1, 1024), float32] */;
  %16921 = sigmoid(%16919) /* ty=Tensor[(1, 1024), float32] */;
  %16922 = tanh(%16920) /* ty=Tensor[(1, 1024), float32] */;
  %16923 = multiply(%16918, %16861) /* ty=Tensor[(1, 1024), float32] */;
  %16924 = multiply(%16921, %16922) /* ty=Tensor[(1, 1024), float32] */;
  %16925 = add(%16923, %16924) /* ty=Tensor[(1, 1024), float32] */;
  %16926 = sigmoid(%16916) /* ty=Tensor[(1, 1024), float32] */;
  %16927 = tanh(%16925) /* ty=Tensor[(1, 1024), float32] */;
  %16928 = multiply(%16926, %16927) /* ty=Tensor[(1, 1024), float32] */;
  %16929 = (%16928, %16885) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16930 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16931 = concatenate(%16929, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16932 = concatenate(%16930, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16933 = nn.dense(%16931, %16932, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16934 = add(%16933, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16935 = add(%16934, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16936 = split(%16935, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16937 = %16936.3 /* ty=Tensor[(1, 1024), float32] */;
  %16938 = %16936.1 /* ty=Tensor[(1, 1024), float32] */;
  %16939 = sigmoid(%16938) /* ty=Tensor[(1, 1024), float32] */;
  %16940 = %16936.0 /* ty=Tensor[(1, 1024), float32] */;
  %16941 = %16936.2 /* ty=Tensor[(1, 1024), float32] */;
  %16942 = sigmoid(%16940) /* ty=Tensor[(1, 1024), float32] */;
  %16943 = tanh(%16941) /* ty=Tensor[(1, 1024), float32] */;
  %16944 = multiply(%16939, %16882) /* ty=Tensor[(1, 1024), float32] */;
  %16945 = multiply(%16942, %16943) /* ty=Tensor[(1, 1024), float32] */;
  %16946 = add(%16944, %16945) /* ty=Tensor[(1, 1024), float32] */;
  %16947 = sigmoid(%16937) /* ty=Tensor[(1, 1024), float32] */;
  %16948 = tanh(%16946) /* ty=Tensor[(1, 1024), float32] */;
  %16949 = multiply(%16947, %16948) /* ty=Tensor[(1, 1024), float32] */;
  %16950 = multiply(%16905, %16906) /* ty=Tensor[(1, 1024), float32] */;
  %16951 = (%16949, %16950) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16952 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16953 = concatenate(%16951, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16954 = concatenate(%16952, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16955 = nn.dense(%16953, %16954, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16956 = add(%16955, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16957 = add(%16956, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %16958 = split(%16957, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16959 = %16958.3 /* ty=Tensor[(1, 1024), float32] */;
  %16960 = %16958.1 /* ty=Tensor[(1, 1024), float32] */;
  %16961 = sigmoid(%16960) /* ty=Tensor[(1, 1024), float32] */;
  %16962 = %16958.0 /* ty=Tensor[(1, 1024), float32] */;
  %16963 = %16958.2 /* ty=Tensor[(1, 1024), float32] */;
  %16964 = sigmoid(%16962) /* ty=Tensor[(1, 1024), float32] */;
  %16965 = tanh(%16963) /* ty=Tensor[(1, 1024), float32] */;
  %16966 = multiply(%16961, %16904) /* ty=Tensor[(1, 1024), float32] */;
  %16967 = multiply(%16964, %16965) /* ty=Tensor[(1, 1024), float32] */;
  %16968 = add(%16966, %16967) /* ty=Tensor[(1, 1024), float32] */;
  %16969 = sigmoid(%16959) /* ty=Tensor[(1, 1024), float32] */;
  %16970 = tanh(%16968) /* ty=Tensor[(1, 1024), float32] */;
  %16971 = %12788.65 /* ty=Tensor[(1, 2048), float32] */;
  %16972 = (%16971, %16928) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %16973 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %16974 = concatenate(%16972, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %16975 = concatenate(%16973, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %16976 = nn.dense(%16974, %16975, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16977 = add(%16976, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16978 = add(%16977, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %16979 = split(%16978, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16980 = %16979.3 /* ty=Tensor[(1, 1024), float32] */;
  %16981 = %16979.1 /* ty=Tensor[(1, 1024), float32] */;
  %16982 = sigmoid(%16981) /* ty=Tensor[(1, 1024), float32] */;
  %16983 = %16979.0 /* ty=Tensor[(1, 1024), float32] */;
  %16984 = %16979.2 /* ty=Tensor[(1, 1024), float32] */;
  %16985 = sigmoid(%16983) /* ty=Tensor[(1, 1024), float32] */;
  %16986 = tanh(%16984) /* ty=Tensor[(1, 1024), float32] */;
  %16987 = multiply(%16982, %16925) /* ty=Tensor[(1, 1024), float32] */;
  %16988 = multiply(%16985, %16986) /* ty=Tensor[(1, 1024), float32] */;
  %16989 = add(%16987, %16988) /* ty=Tensor[(1, 1024), float32] */;
  %16990 = sigmoid(%16980) /* ty=Tensor[(1, 1024), float32] */;
  %16991 = tanh(%16989) /* ty=Tensor[(1, 1024), float32] */;
  %16992 = multiply(%16990, %16991) /* ty=Tensor[(1, 1024), float32] */;
  %16993 = (%16992, %16949) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %16994 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %16995 = concatenate(%16993, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %16996 = concatenate(%16994, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %16997 = nn.dense(%16995, %16996, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %16998 = add(%16997, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %16999 = add(%16998, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17000 = split(%16999, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17001 = %17000.3 /* ty=Tensor[(1, 1024), float32] */;
  %17002 = %17000.1 /* ty=Tensor[(1, 1024), float32] */;
  %17003 = sigmoid(%17002) /* ty=Tensor[(1, 1024), float32] */;
  %17004 = %17000.0 /* ty=Tensor[(1, 1024), float32] */;
  %17005 = %17000.2 /* ty=Tensor[(1, 1024), float32] */;
  %17006 = sigmoid(%17004) /* ty=Tensor[(1, 1024), float32] */;
  %17007 = tanh(%17005) /* ty=Tensor[(1, 1024), float32] */;
  %17008 = multiply(%17003, %16946) /* ty=Tensor[(1, 1024), float32] */;
  %17009 = multiply(%17006, %17007) /* ty=Tensor[(1, 1024), float32] */;
  %17010 = add(%17008, %17009) /* ty=Tensor[(1, 1024), float32] */;
  %17011 = sigmoid(%17001) /* ty=Tensor[(1, 1024), float32] */;
  %17012 = tanh(%17010) /* ty=Tensor[(1, 1024), float32] */;
  %17013 = multiply(%17011, %17012) /* ty=Tensor[(1, 1024), float32] */;
  %17014 = multiply(%16969, %16970) /* ty=Tensor[(1, 1024), float32] */;
  %17015 = (%17013, %17014) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17016 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17017 = concatenate(%17015, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17018 = concatenate(%17016, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17019 = nn.dense(%17017, %17018, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17020 = add(%17019, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17021 = add(%17020, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17022 = split(%17021, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17023 = %17022.3 /* ty=Tensor[(1, 1024), float32] */;
  %17024 = %17022.1 /* ty=Tensor[(1, 1024), float32] */;
  %17025 = sigmoid(%17024) /* ty=Tensor[(1, 1024), float32] */;
  %17026 = %17022.0 /* ty=Tensor[(1, 1024), float32] */;
  %17027 = %17022.2 /* ty=Tensor[(1, 1024), float32] */;
  %17028 = sigmoid(%17026) /* ty=Tensor[(1, 1024), float32] */;
  %17029 = tanh(%17027) /* ty=Tensor[(1, 1024), float32] */;
  %17030 = multiply(%17025, %16968) /* ty=Tensor[(1, 1024), float32] */;
  %17031 = multiply(%17028, %17029) /* ty=Tensor[(1, 1024), float32] */;
  %17032 = add(%17030, %17031) /* ty=Tensor[(1, 1024), float32] */;
  %17033 = sigmoid(%17023) /* ty=Tensor[(1, 1024), float32] */;
  %17034 = tanh(%17032) /* ty=Tensor[(1, 1024), float32] */;
  %17035 = %12788.66 /* ty=Tensor[(1, 2048), float32] */;
  %17036 = (%17035, %16992) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17037 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17038 = concatenate(%17036, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17039 = concatenate(%17037, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17040 = nn.dense(%17038, %17039, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17041 = add(%17040, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17042 = add(%17041, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17043 = split(%17042, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17044 = %17043.3 /* ty=Tensor[(1, 1024), float32] */;
  %17045 = %17043.1 /* ty=Tensor[(1, 1024), float32] */;
  %17046 = sigmoid(%17045) /* ty=Tensor[(1, 1024), float32] */;
  %17047 = %17043.0 /* ty=Tensor[(1, 1024), float32] */;
  %17048 = %17043.2 /* ty=Tensor[(1, 1024), float32] */;
  %17049 = sigmoid(%17047) /* ty=Tensor[(1, 1024), float32] */;
  %17050 = tanh(%17048) /* ty=Tensor[(1, 1024), float32] */;
  %17051 = multiply(%17046, %16989) /* ty=Tensor[(1, 1024), float32] */;
  %17052 = multiply(%17049, %17050) /* ty=Tensor[(1, 1024), float32] */;
  %17053 = add(%17051, %17052) /* ty=Tensor[(1, 1024), float32] */;
  %17054 = sigmoid(%17044) /* ty=Tensor[(1, 1024), float32] */;
  %17055 = tanh(%17053) /* ty=Tensor[(1, 1024), float32] */;
  %17056 = multiply(%17054, %17055) /* ty=Tensor[(1, 1024), float32] */;
  %17057 = (%17056, %17013) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17058 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17059 = concatenate(%17057, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17060 = concatenate(%17058, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17061 = nn.dense(%17059, %17060, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17062 = add(%17061, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17063 = add(%17062, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17064 = split(%17063, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17065 = %17064.3 /* ty=Tensor[(1, 1024), float32] */;
  %17066 = %17064.1 /* ty=Tensor[(1, 1024), float32] */;
  %17067 = sigmoid(%17066) /* ty=Tensor[(1, 1024), float32] */;
  %17068 = %17064.0 /* ty=Tensor[(1, 1024), float32] */;
  %17069 = %17064.2 /* ty=Tensor[(1, 1024), float32] */;
  %17070 = sigmoid(%17068) /* ty=Tensor[(1, 1024), float32] */;
  %17071 = tanh(%17069) /* ty=Tensor[(1, 1024), float32] */;
  %17072 = multiply(%17067, %17010) /* ty=Tensor[(1, 1024), float32] */;
  %17073 = multiply(%17070, %17071) /* ty=Tensor[(1, 1024), float32] */;
  %17074 = add(%17072, %17073) /* ty=Tensor[(1, 1024), float32] */;
  %17075 = sigmoid(%17065) /* ty=Tensor[(1, 1024), float32] */;
  %17076 = tanh(%17074) /* ty=Tensor[(1, 1024), float32] */;
  %17077 = multiply(%17075, %17076) /* ty=Tensor[(1, 1024), float32] */;
  %17078 = multiply(%17033, %17034) /* ty=Tensor[(1, 1024), float32] */;
  %17079 = (%17077, %17078) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17080 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17081 = concatenate(%17079, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17082 = concatenate(%17080, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17083 = nn.dense(%17081, %17082, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17084 = add(%17083, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17085 = add(%17084, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17086 = split(%17085, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17087 = %17086.3 /* ty=Tensor[(1, 1024), float32] */;
  %17088 = %17086.1 /* ty=Tensor[(1, 1024), float32] */;
  %17089 = sigmoid(%17088) /* ty=Tensor[(1, 1024), float32] */;
  %17090 = %17086.0 /* ty=Tensor[(1, 1024), float32] */;
  %17091 = %17086.2 /* ty=Tensor[(1, 1024), float32] */;
  %17092 = sigmoid(%17090) /* ty=Tensor[(1, 1024), float32] */;
  %17093 = tanh(%17091) /* ty=Tensor[(1, 1024), float32] */;
  %17094 = multiply(%17089, %17032) /* ty=Tensor[(1, 1024), float32] */;
  %17095 = multiply(%17092, %17093) /* ty=Tensor[(1, 1024), float32] */;
  %17096 = add(%17094, %17095) /* ty=Tensor[(1, 1024), float32] */;
  %17097 = sigmoid(%17087) /* ty=Tensor[(1, 1024), float32] */;
  %17098 = tanh(%17096) /* ty=Tensor[(1, 1024), float32] */;
  %17099 = %12788.67 /* ty=Tensor[(1, 2048), float32] */;
  %17100 = (%17099, %17056) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17101 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17102 = concatenate(%17100, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17103 = concatenate(%17101, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17104 = nn.dense(%17102, %17103, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17105 = add(%17104, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17106 = add(%17105, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17107 = split(%17106, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17108 = %17107.3 /* ty=Tensor[(1, 1024), float32] */;
  %17109 = %17107.1 /* ty=Tensor[(1, 1024), float32] */;
  %17110 = sigmoid(%17109) /* ty=Tensor[(1, 1024), float32] */;
  %17111 = %17107.0 /* ty=Tensor[(1, 1024), float32] */;
  %17112 = %17107.2 /* ty=Tensor[(1, 1024), float32] */;
  %17113 = sigmoid(%17111) /* ty=Tensor[(1, 1024), float32] */;
  %17114 = tanh(%17112) /* ty=Tensor[(1, 1024), float32] */;
  %17115 = multiply(%17110, %17053) /* ty=Tensor[(1, 1024), float32] */;
  %17116 = multiply(%17113, %17114) /* ty=Tensor[(1, 1024), float32] */;
  %17117 = add(%17115, %17116) /* ty=Tensor[(1, 1024), float32] */;
  %17118 = sigmoid(%17108) /* ty=Tensor[(1, 1024), float32] */;
  %17119 = tanh(%17117) /* ty=Tensor[(1, 1024), float32] */;
  %17120 = multiply(%17118, %17119) /* ty=Tensor[(1, 1024), float32] */;
  %17121 = (%17120, %17077) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17122 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17123 = concatenate(%17121, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17124 = concatenate(%17122, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17125 = nn.dense(%17123, %17124, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17126 = add(%17125, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17127 = add(%17126, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17128 = split(%17127, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17129 = %17128.3 /* ty=Tensor[(1, 1024), float32] */;
  %17130 = %17128.1 /* ty=Tensor[(1, 1024), float32] */;
  %17131 = sigmoid(%17130) /* ty=Tensor[(1, 1024), float32] */;
  %17132 = %17128.0 /* ty=Tensor[(1, 1024), float32] */;
  %17133 = %17128.2 /* ty=Tensor[(1, 1024), float32] */;
  %17134 = sigmoid(%17132) /* ty=Tensor[(1, 1024), float32] */;
  %17135 = tanh(%17133) /* ty=Tensor[(1, 1024), float32] */;
  %17136 = multiply(%17131, %17074) /* ty=Tensor[(1, 1024), float32] */;
  %17137 = multiply(%17134, %17135) /* ty=Tensor[(1, 1024), float32] */;
  %17138 = add(%17136, %17137) /* ty=Tensor[(1, 1024), float32] */;
  %17139 = sigmoid(%17129) /* ty=Tensor[(1, 1024), float32] */;
  %17140 = tanh(%17138) /* ty=Tensor[(1, 1024), float32] */;
  %17141 = multiply(%17139, %17140) /* ty=Tensor[(1, 1024), float32] */;
  %17142 = multiply(%17097, %17098) /* ty=Tensor[(1, 1024), float32] */;
  %17143 = (%17141, %17142) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17144 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17145 = concatenate(%17143, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17146 = concatenate(%17144, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17147 = nn.dense(%17145, %17146, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17148 = add(%17147, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17149 = add(%17148, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17150 = split(%17149, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17151 = %17150.3 /* ty=Tensor[(1, 1024), float32] */;
  %17152 = %17150.1 /* ty=Tensor[(1, 1024), float32] */;
  %17153 = sigmoid(%17152) /* ty=Tensor[(1, 1024), float32] */;
  %17154 = %17150.0 /* ty=Tensor[(1, 1024), float32] */;
  %17155 = %17150.2 /* ty=Tensor[(1, 1024), float32] */;
  %17156 = sigmoid(%17154) /* ty=Tensor[(1, 1024), float32] */;
  %17157 = tanh(%17155) /* ty=Tensor[(1, 1024), float32] */;
  %17158 = multiply(%17153, %17096) /* ty=Tensor[(1, 1024), float32] */;
  %17159 = multiply(%17156, %17157) /* ty=Tensor[(1, 1024), float32] */;
  %17160 = add(%17158, %17159) /* ty=Tensor[(1, 1024), float32] */;
  %17161 = sigmoid(%17151) /* ty=Tensor[(1, 1024), float32] */;
  %17162 = tanh(%17160) /* ty=Tensor[(1, 1024), float32] */;
  %17163 = %12788.68 /* ty=Tensor[(1, 2048), float32] */;
  %17164 = (%17163, %17120) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17165 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17166 = concatenate(%17164, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17167 = concatenate(%17165, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17168 = nn.dense(%17166, %17167, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17169 = add(%17168, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17170 = add(%17169, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17171 = split(%17170, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17172 = %17171.3 /* ty=Tensor[(1, 1024), float32] */;
  %17173 = %17171.1 /* ty=Tensor[(1, 1024), float32] */;
  %17174 = sigmoid(%17173) /* ty=Tensor[(1, 1024), float32] */;
  %17175 = %17171.0 /* ty=Tensor[(1, 1024), float32] */;
  %17176 = %17171.2 /* ty=Tensor[(1, 1024), float32] */;
  %17177 = sigmoid(%17175) /* ty=Tensor[(1, 1024), float32] */;
  %17178 = tanh(%17176) /* ty=Tensor[(1, 1024), float32] */;
  %17179 = multiply(%17174, %17117) /* ty=Tensor[(1, 1024), float32] */;
  %17180 = multiply(%17177, %17178) /* ty=Tensor[(1, 1024), float32] */;
  %17181 = add(%17179, %17180) /* ty=Tensor[(1, 1024), float32] */;
  %17182 = sigmoid(%17172) /* ty=Tensor[(1, 1024), float32] */;
  %17183 = tanh(%17181) /* ty=Tensor[(1, 1024), float32] */;
  %17184 = multiply(%17182, %17183) /* ty=Tensor[(1, 1024), float32] */;
  %17185 = (%17184, %17141) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17186 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17187 = concatenate(%17185, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17188 = concatenate(%17186, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17189 = nn.dense(%17187, %17188, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17190 = add(%17189, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17191 = add(%17190, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17192 = split(%17191, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17193 = %17192.3 /* ty=Tensor[(1, 1024), float32] */;
  %17194 = %17192.1 /* ty=Tensor[(1, 1024), float32] */;
  %17195 = sigmoid(%17194) /* ty=Tensor[(1, 1024), float32] */;
  %17196 = %17192.0 /* ty=Tensor[(1, 1024), float32] */;
  %17197 = %17192.2 /* ty=Tensor[(1, 1024), float32] */;
  %17198 = sigmoid(%17196) /* ty=Tensor[(1, 1024), float32] */;
  %17199 = tanh(%17197) /* ty=Tensor[(1, 1024), float32] */;
  %17200 = multiply(%17195, %17138) /* ty=Tensor[(1, 1024), float32] */;
  %17201 = multiply(%17198, %17199) /* ty=Tensor[(1, 1024), float32] */;
  %17202 = add(%17200, %17201) /* ty=Tensor[(1, 1024), float32] */;
  %17203 = sigmoid(%17193) /* ty=Tensor[(1, 1024), float32] */;
  %17204 = tanh(%17202) /* ty=Tensor[(1, 1024), float32] */;
  %17205 = multiply(%17203, %17204) /* ty=Tensor[(1, 1024), float32] */;
  %17206 = multiply(%17161, %17162) /* ty=Tensor[(1, 1024), float32] */;
  %17207 = (%17205, %17206) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17208 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17209 = concatenate(%17207, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17210 = concatenate(%17208, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17211 = nn.dense(%17209, %17210, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17212 = add(%17211, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17213 = add(%17212, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17214 = split(%17213, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17215 = %17214.3 /* ty=Tensor[(1, 1024), float32] */;
  %17216 = %17214.1 /* ty=Tensor[(1, 1024), float32] */;
  %17217 = sigmoid(%17216) /* ty=Tensor[(1, 1024), float32] */;
  %17218 = %17214.0 /* ty=Tensor[(1, 1024), float32] */;
  %17219 = %17214.2 /* ty=Tensor[(1, 1024), float32] */;
  %17220 = sigmoid(%17218) /* ty=Tensor[(1, 1024), float32] */;
  %17221 = tanh(%17219) /* ty=Tensor[(1, 1024), float32] */;
  %17222 = multiply(%17217, %17160) /* ty=Tensor[(1, 1024), float32] */;
  %17223 = multiply(%17220, %17221) /* ty=Tensor[(1, 1024), float32] */;
  %17224 = add(%17222, %17223) /* ty=Tensor[(1, 1024), float32] */;
  %17225 = sigmoid(%17215) /* ty=Tensor[(1, 1024), float32] */;
  %17226 = tanh(%17224) /* ty=Tensor[(1, 1024), float32] */;
  %17227 = %12788.69 /* ty=Tensor[(1, 2048), float32] */;
  %17228 = (%17227, %17184) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17229 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17230 = concatenate(%17228, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17231 = concatenate(%17229, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17232 = nn.dense(%17230, %17231, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17233 = add(%17232, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17234 = add(%17233, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17235 = split(%17234, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17236 = %17235.3 /* ty=Tensor[(1, 1024), float32] */;
  %17237 = %17235.1 /* ty=Tensor[(1, 1024), float32] */;
  %17238 = sigmoid(%17237) /* ty=Tensor[(1, 1024), float32] */;
  %17239 = %17235.0 /* ty=Tensor[(1, 1024), float32] */;
  %17240 = %17235.2 /* ty=Tensor[(1, 1024), float32] */;
  %17241 = sigmoid(%17239) /* ty=Tensor[(1, 1024), float32] */;
  %17242 = tanh(%17240) /* ty=Tensor[(1, 1024), float32] */;
  %17243 = multiply(%17238, %17181) /* ty=Tensor[(1, 1024), float32] */;
  %17244 = multiply(%17241, %17242) /* ty=Tensor[(1, 1024), float32] */;
  %17245 = add(%17243, %17244) /* ty=Tensor[(1, 1024), float32] */;
  %17246 = sigmoid(%17236) /* ty=Tensor[(1, 1024), float32] */;
  %17247 = tanh(%17245) /* ty=Tensor[(1, 1024), float32] */;
  %17248 = multiply(%17246, %17247) /* ty=Tensor[(1, 1024), float32] */;
  %17249 = (%17248, %17205) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17250 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17251 = concatenate(%17249, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17252 = concatenate(%17250, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17253 = nn.dense(%17251, %17252, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17254 = add(%17253, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17255 = add(%17254, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17256 = split(%17255, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17257 = %17256.3 /* ty=Tensor[(1, 1024), float32] */;
  %17258 = %17256.1 /* ty=Tensor[(1, 1024), float32] */;
  %17259 = sigmoid(%17258) /* ty=Tensor[(1, 1024), float32] */;
  %17260 = %17256.0 /* ty=Tensor[(1, 1024), float32] */;
  %17261 = %17256.2 /* ty=Tensor[(1, 1024), float32] */;
  %17262 = sigmoid(%17260) /* ty=Tensor[(1, 1024), float32] */;
  %17263 = tanh(%17261) /* ty=Tensor[(1, 1024), float32] */;
  %17264 = multiply(%17259, %17202) /* ty=Tensor[(1, 1024), float32] */;
  %17265 = multiply(%17262, %17263) /* ty=Tensor[(1, 1024), float32] */;
  %17266 = add(%17264, %17265) /* ty=Tensor[(1, 1024), float32] */;
  %17267 = sigmoid(%17257) /* ty=Tensor[(1, 1024), float32] */;
  %17268 = tanh(%17266) /* ty=Tensor[(1, 1024), float32] */;
  %17269 = multiply(%17267, %17268) /* ty=Tensor[(1, 1024), float32] */;
  %17270 = multiply(%17225, %17226) /* ty=Tensor[(1, 1024), float32] */;
  %17271 = (%17269, %17270) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17272 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17273 = concatenate(%17271, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17274 = concatenate(%17272, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17275 = nn.dense(%17273, %17274, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17276 = add(%17275, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17277 = add(%17276, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17278 = split(%17277, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17279 = %17278.3 /* ty=Tensor[(1, 1024), float32] */;
  %17280 = %17278.1 /* ty=Tensor[(1, 1024), float32] */;
  %17281 = sigmoid(%17280) /* ty=Tensor[(1, 1024), float32] */;
  %17282 = %17278.0 /* ty=Tensor[(1, 1024), float32] */;
  %17283 = %17278.2 /* ty=Tensor[(1, 1024), float32] */;
  %17284 = sigmoid(%17282) /* ty=Tensor[(1, 1024), float32] */;
  %17285 = tanh(%17283) /* ty=Tensor[(1, 1024), float32] */;
  %17286 = multiply(%17281, %17224) /* ty=Tensor[(1, 1024), float32] */;
  %17287 = multiply(%17284, %17285) /* ty=Tensor[(1, 1024), float32] */;
  %17288 = add(%17286, %17287) /* ty=Tensor[(1, 1024), float32] */;
  %17289 = sigmoid(%17279) /* ty=Tensor[(1, 1024), float32] */;
  %17290 = tanh(%17288) /* ty=Tensor[(1, 1024), float32] */;
  %17291 = %12788.70 /* ty=Tensor[(1, 2048), float32] */;
  %17292 = (%17291, %17248) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17293 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17294 = concatenate(%17292, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17295 = concatenate(%17293, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17296 = nn.dense(%17294, %17295, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17297 = add(%17296, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17298 = add(%17297, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17299 = split(%17298, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17300 = %17299.3 /* ty=Tensor[(1, 1024), float32] */;
  %17301 = %17299.1 /* ty=Tensor[(1, 1024), float32] */;
  %17302 = sigmoid(%17301) /* ty=Tensor[(1, 1024), float32] */;
  %17303 = %17299.0 /* ty=Tensor[(1, 1024), float32] */;
  %17304 = %17299.2 /* ty=Tensor[(1, 1024), float32] */;
  %17305 = sigmoid(%17303) /* ty=Tensor[(1, 1024), float32] */;
  %17306 = tanh(%17304) /* ty=Tensor[(1, 1024), float32] */;
  %17307 = multiply(%17302, %17245) /* ty=Tensor[(1, 1024), float32] */;
  %17308 = multiply(%17305, %17306) /* ty=Tensor[(1, 1024), float32] */;
  %17309 = add(%17307, %17308) /* ty=Tensor[(1, 1024), float32] */;
  %17310 = sigmoid(%17300) /* ty=Tensor[(1, 1024), float32] */;
  %17311 = tanh(%17309) /* ty=Tensor[(1, 1024), float32] */;
  %17312 = multiply(%17310, %17311) /* ty=Tensor[(1, 1024), float32] */;
  %17313 = (%17312, %17269) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17314 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17315 = concatenate(%17313, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17316 = concatenate(%17314, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17317 = nn.dense(%17315, %17316, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17318 = add(%17317, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17319 = add(%17318, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17320 = split(%17319, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17321 = %17320.3 /* ty=Tensor[(1, 1024), float32] */;
  %17322 = %17320.1 /* ty=Tensor[(1, 1024), float32] */;
  %17323 = sigmoid(%17322) /* ty=Tensor[(1, 1024), float32] */;
  %17324 = %17320.0 /* ty=Tensor[(1, 1024), float32] */;
  %17325 = %17320.2 /* ty=Tensor[(1, 1024), float32] */;
  %17326 = sigmoid(%17324) /* ty=Tensor[(1, 1024), float32] */;
  %17327 = tanh(%17325) /* ty=Tensor[(1, 1024), float32] */;
  %17328 = multiply(%17323, %17266) /* ty=Tensor[(1, 1024), float32] */;
  %17329 = multiply(%17326, %17327) /* ty=Tensor[(1, 1024), float32] */;
  %17330 = add(%17328, %17329) /* ty=Tensor[(1, 1024), float32] */;
  %17331 = sigmoid(%17321) /* ty=Tensor[(1, 1024), float32] */;
  %17332 = tanh(%17330) /* ty=Tensor[(1, 1024), float32] */;
  %17333 = multiply(%17331, %17332) /* ty=Tensor[(1, 1024), float32] */;
  %17334 = multiply(%17289, %17290) /* ty=Tensor[(1, 1024), float32] */;
  %17335 = (%17333, %17334) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17336 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17337 = concatenate(%17335, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17338 = concatenate(%17336, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17339 = nn.dense(%17337, %17338, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17340 = add(%17339, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17341 = add(%17340, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17342 = split(%17341, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17343 = %17342.3 /* ty=Tensor[(1, 1024), float32] */;
  %17344 = %17342.1 /* ty=Tensor[(1, 1024), float32] */;
  %17345 = sigmoid(%17344) /* ty=Tensor[(1, 1024), float32] */;
  %17346 = %17342.0 /* ty=Tensor[(1, 1024), float32] */;
  %17347 = %17342.2 /* ty=Tensor[(1, 1024), float32] */;
  %17348 = sigmoid(%17346) /* ty=Tensor[(1, 1024), float32] */;
  %17349 = tanh(%17347) /* ty=Tensor[(1, 1024), float32] */;
  %17350 = multiply(%17345, %17288) /* ty=Tensor[(1, 1024), float32] */;
  %17351 = multiply(%17348, %17349) /* ty=Tensor[(1, 1024), float32] */;
  %17352 = add(%17350, %17351) /* ty=Tensor[(1, 1024), float32] */;
  %17353 = sigmoid(%17343) /* ty=Tensor[(1, 1024), float32] */;
  %17354 = tanh(%17352) /* ty=Tensor[(1, 1024), float32] */;
  %17355 = %12788.71 /* ty=Tensor[(1, 2048), float32] */;
  %17356 = (%17355, %17312) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17357 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17358 = concatenate(%17356, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17359 = concatenate(%17357, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17360 = nn.dense(%17358, %17359, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17361 = add(%17360, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17362 = add(%17361, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17363 = split(%17362, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17364 = %17363.3 /* ty=Tensor[(1, 1024), float32] */;
  %17365 = %17363.1 /* ty=Tensor[(1, 1024), float32] */;
  %17366 = sigmoid(%17365) /* ty=Tensor[(1, 1024), float32] */;
  %17367 = %17363.0 /* ty=Tensor[(1, 1024), float32] */;
  %17368 = %17363.2 /* ty=Tensor[(1, 1024), float32] */;
  %17369 = sigmoid(%17367) /* ty=Tensor[(1, 1024), float32] */;
  %17370 = tanh(%17368) /* ty=Tensor[(1, 1024), float32] */;
  %17371 = multiply(%17366, %17309) /* ty=Tensor[(1, 1024), float32] */;
  %17372 = multiply(%17369, %17370) /* ty=Tensor[(1, 1024), float32] */;
  %17373 = add(%17371, %17372) /* ty=Tensor[(1, 1024), float32] */;
  %17374 = sigmoid(%17364) /* ty=Tensor[(1, 1024), float32] */;
  %17375 = tanh(%17373) /* ty=Tensor[(1, 1024), float32] */;
  %17376 = multiply(%17374, %17375) /* ty=Tensor[(1, 1024), float32] */;
  %17377 = (%17376, %17333) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17378 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17379 = concatenate(%17377, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17380 = concatenate(%17378, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17381 = nn.dense(%17379, %17380, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17382 = add(%17381, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17383 = add(%17382, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17384 = split(%17383, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17385 = %17384.3 /* ty=Tensor[(1, 1024), float32] */;
  %17386 = %17384.1 /* ty=Tensor[(1, 1024), float32] */;
  %17387 = sigmoid(%17386) /* ty=Tensor[(1, 1024), float32] */;
  %17388 = %17384.0 /* ty=Tensor[(1, 1024), float32] */;
  %17389 = %17384.2 /* ty=Tensor[(1, 1024), float32] */;
  %17390 = sigmoid(%17388) /* ty=Tensor[(1, 1024), float32] */;
  %17391 = tanh(%17389) /* ty=Tensor[(1, 1024), float32] */;
  %17392 = multiply(%17387, %17330) /* ty=Tensor[(1, 1024), float32] */;
  %17393 = multiply(%17390, %17391) /* ty=Tensor[(1, 1024), float32] */;
  %17394 = add(%17392, %17393) /* ty=Tensor[(1, 1024), float32] */;
  %17395 = sigmoid(%17385) /* ty=Tensor[(1, 1024), float32] */;
  %17396 = tanh(%17394) /* ty=Tensor[(1, 1024), float32] */;
  %17397 = multiply(%17395, %17396) /* ty=Tensor[(1, 1024), float32] */;
  %17398 = multiply(%17353, %17354) /* ty=Tensor[(1, 1024), float32] */;
  %17399 = (%17397, %17398) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17400 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17401 = concatenate(%17399, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17402 = concatenate(%17400, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17403 = nn.dense(%17401, %17402, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17404 = add(%17403, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17405 = add(%17404, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17406 = split(%17405, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17407 = %17406.3 /* ty=Tensor[(1, 1024), float32] */;
  %17408 = %17406.1 /* ty=Tensor[(1, 1024), float32] */;
  %17409 = sigmoid(%17408) /* ty=Tensor[(1, 1024), float32] */;
  %17410 = %17406.0 /* ty=Tensor[(1, 1024), float32] */;
  %17411 = %17406.2 /* ty=Tensor[(1, 1024), float32] */;
  %17412 = sigmoid(%17410) /* ty=Tensor[(1, 1024), float32] */;
  %17413 = tanh(%17411) /* ty=Tensor[(1, 1024), float32] */;
  %17414 = multiply(%17409, %17352) /* ty=Tensor[(1, 1024), float32] */;
  %17415 = multiply(%17412, %17413) /* ty=Tensor[(1, 1024), float32] */;
  %17416 = add(%17414, %17415) /* ty=Tensor[(1, 1024), float32] */;
  %17417 = sigmoid(%17407) /* ty=Tensor[(1, 1024), float32] */;
  %17418 = tanh(%17416) /* ty=Tensor[(1, 1024), float32] */;
  %17419 = %12788.72 /* ty=Tensor[(1, 2048), float32] */;
  %17420 = (%17419, %17376) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17421 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17422 = concatenate(%17420, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17423 = concatenate(%17421, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17424 = nn.dense(%17422, %17423, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17425 = add(%17424, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17426 = add(%17425, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17427 = split(%17426, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17428 = %17427.3 /* ty=Tensor[(1, 1024), float32] */;
  %17429 = %17427.1 /* ty=Tensor[(1, 1024), float32] */;
  %17430 = sigmoid(%17429) /* ty=Tensor[(1, 1024), float32] */;
  %17431 = %17427.0 /* ty=Tensor[(1, 1024), float32] */;
  %17432 = %17427.2 /* ty=Tensor[(1, 1024), float32] */;
  %17433 = sigmoid(%17431) /* ty=Tensor[(1, 1024), float32] */;
  %17434 = tanh(%17432) /* ty=Tensor[(1, 1024), float32] */;
  %17435 = multiply(%17430, %17373) /* ty=Tensor[(1, 1024), float32] */;
  %17436 = multiply(%17433, %17434) /* ty=Tensor[(1, 1024), float32] */;
  %17437 = add(%17435, %17436) /* ty=Tensor[(1, 1024), float32] */;
  %17438 = sigmoid(%17428) /* ty=Tensor[(1, 1024), float32] */;
  %17439 = tanh(%17437) /* ty=Tensor[(1, 1024), float32] */;
  %17440 = multiply(%17438, %17439) /* ty=Tensor[(1, 1024), float32] */;
  %17441 = (%17440, %17397) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17442 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17443 = concatenate(%17441, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17444 = concatenate(%17442, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17445 = nn.dense(%17443, %17444, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17446 = add(%17445, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17447 = add(%17446, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17448 = split(%17447, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17449 = %17448.3 /* ty=Tensor[(1, 1024), float32] */;
  %17450 = %17448.1 /* ty=Tensor[(1, 1024), float32] */;
  %17451 = sigmoid(%17450) /* ty=Tensor[(1, 1024), float32] */;
  %17452 = %17448.0 /* ty=Tensor[(1, 1024), float32] */;
  %17453 = %17448.2 /* ty=Tensor[(1, 1024), float32] */;
  %17454 = sigmoid(%17452) /* ty=Tensor[(1, 1024), float32] */;
  %17455 = tanh(%17453) /* ty=Tensor[(1, 1024), float32] */;
  %17456 = multiply(%17451, %17394) /* ty=Tensor[(1, 1024), float32] */;
  %17457 = multiply(%17454, %17455) /* ty=Tensor[(1, 1024), float32] */;
  %17458 = add(%17456, %17457) /* ty=Tensor[(1, 1024), float32] */;
  %17459 = sigmoid(%17449) /* ty=Tensor[(1, 1024), float32] */;
  %17460 = tanh(%17458) /* ty=Tensor[(1, 1024), float32] */;
  %17461 = multiply(%17459, %17460) /* ty=Tensor[(1, 1024), float32] */;
  %17462 = multiply(%17417, %17418) /* ty=Tensor[(1, 1024), float32] */;
  %17463 = (%17461, %17462) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17464 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17465 = concatenate(%17463, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17466 = concatenate(%17464, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17467 = nn.dense(%17465, %17466, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17468 = add(%17467, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17469 = add(%17468, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17470 = split(%17469, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17471 = %17470.3 /* ty=Tensor[(1, 1024), float32] */;
  %17472 = %17470.1 /* ty=Tensor[(1, 1024), float32] */;
  %17473 = sigmoid(%17472) /* ty=Tensor[(1, 1024), float32] */;
  %17474 = %17470.0 /* ty=Tensor[(1, 1024), float32] */;
  %17475 = %17470.2 /* ty=Tensor[(1, 1024), float32] */;
  %17476 = sigmoid(%17474) /* ty=Tensor[(1, 1024), float32] */;
  %17477 = tanh(%17475) /* ty=Tensor[(1, 1024), float32] */;
  %17478 = multiply(%17473, %17416) /* ty=Tensor[(1, 1024), float32] */;
  %17479 = multiply(%17476, %17477) /* ty=Tensor[(1, 1024), float32] */;
  %17480 = add(%17478, %17479) /* ty=Tensor[(1, 1024), float32] */;
  %17481 = sigmoid(%17471) /* ty=Tensor[(1, 1024), float32] */;
  %17482 = tanh(%17480) /* ty=Tensor[(1, 1024), float32] */;
  %17483 = %12788.73 /* ty=Tensor[(1, 2048), float32] */;
  %17484 = (%17483, %17440) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17485 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17486 = concatenate(%17484, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17487 = concatenate(%17485, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17488 = nn.dense(%17486, %17487, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17489 = add(%17488, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17490 = add(%17489, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17491 = split(%17490, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17492 = %17491.3 /* ty=Tensor[(1, 1024), float32] */;
  %17493 = %17491.1 /* ty=Tensor[(1, 1024), float32] */;
  %17494 = sigmoid(%17493) /* ty=Tensor[(1, 1024), float32] */;
  %17495 = %17491.0 /* ty=Tensor[(1, 1024), float32] */;
  %17496 = %17491.2 /* ty=Tensor[(1, 1024), float32] */;
  %17497 = sigmoid(%17495) /* ty=Tensor[(1, 1024), float32] */;
  %17498 = tanh(%17496) /* ty=Tensor[(1, 1024), float32] */;
  %17499 = multiply(%17494, %17437) /* ty=Tensor[(1, 1024), float32] */;
  %17500 = multiply(%17497, %17498) /* ty=Tensor[(1, 1024), float32] */;
  %17501 = add(%17499, %17500) /* ty=Tensor[(1, 1024), float32] */;
  %17502 = sigmoid(%17492) /* ty=Tensor[(1, 1024), float32] */;
  %17503 = tanh(%17501) /* ty=Tensor[(1, 1024), float32] */;
  %17504 = multiply(%17502, %17503) /* ty=Tensor[(1, 1024), float32] */;
  %17505 = (%17504, %17461) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17506 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17507 = concatenate(%17505, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17508 = concatenate(%17506, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17509 = nn.dense(%17507, %17508, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17510 = add(%17509, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17511 = add(%17510, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17512 = split(%17511, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17513 = %17512.3 /* ty=Tensor[(1, 1024), float32] */;
  %17514 = %17512.1 /* ty=Tensor[(1, 1024), float32] */;
  %17515 = sigmoid(%17514) /* ty=Tensor[(1, 1024), float32] */;
  %17516 = %17512.0 /* ty=Tensor[(1, 1024), float32] */;
  %17517 = %17512.2 /* ty=Tensor[(1, 1024), float32] */;
  %17518 = sigmoid(%17516) /* ty=Tensor[(1, 1024), float32] */;
  %17519 = tanh(%17517) /* ty=Tensor[(1, 1024), float32] */;
  %17520 = multiply(%17515, %17458) /* ty=Tensor[(1, 1024), float32] */;
  %17521 = multiply(%17518, %17519) /* ty=Tensor[(1, 1024), float32] */;
  %17522 = add(%17520, %17521) /* ty=Tensor[(1, 1024), float32] */;
  %17523 = sigmoid(%17513) /* ty=Tensor[(1, 1024), float32] */;
  %17524 = tanh(%17522) /* ty=Tensor[(1, 1024), float32] */;
  %17525 = multiply(%17523, %17524) /* ty=Tensor[(1, 1024), float32] */;
  %17526 = multiply(%17481, %17482) /* ty=Tensor[(1, 1024), float32] */;
  %17527 = (%17525, %17526) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17528 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17529 = concatenate(%17527, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17530 = concatenate(%17528, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17531 = nn.dense(%17529, %17530, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17532 = add(%17531, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17533 = add(%17532, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17534 = split(%17533, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17535 = %17534.3 /* ty=Tensor[(1, 1024), float32] */;
  %17536 = %17534.1 /* ty=Tensor[(1, 1024), float32] */;
  %17537 = sigmoid(%17536) /* ty=Tensor[(1, 1024), float32] */;
  %17538 = %17534.0 /* ty=Tensor[(1, 1024), float32] */;
  %17539 = %17534.2 /* ty=Tensor[(1, 1024), float32] */;
  %17540 = sigmoid(%17538) /* ty=Tensor[(1, 1024), float32] */;
  %17541 = tanh(%17539) /* ty=Tensor[(1, 1024), float32] */;
  %17542 = multiply(%17537, %17480) /* ty=Tensor[(1, 1024), float32] */;
  %17543 = multiply(%17540, %17541) /* ty=Tensor[(1, 1024), float32] */;
  %17544 = add(%17542, %17543) /* ty=Tensor[(1, 1024), float32] */;
  %17545 = sigmoid(%17535) /* ty=Tensor[(1, 1024), float32] */;
  %17546 = tanh(%17544) /* ty=Tensor[(1, 1024), float32] */;
  %17547 = %12788.74 /* ty=Tensor[(1, 2048), float32] */;
  %17548 = (%17547, %17504) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17549 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17550 = concatenate(%17548, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17551 = concatenate(%17549, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17552 = nn.dense(%17550, %17551, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17553 = add(%17552, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17554 = add(%17553, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17555 = split(%17554, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17556 = %17555.3 /* ty=Tensor[(1, 1024), float32] */;
  %17557 = %17555.1 /* ty=Tensor[(1, 1024), float32] */;
  %17558 = sigmoid(%17557) /* ty=Tensor[(1, 1024), float32] */;
  %17559 = %17555.0 /* ty=Tensor[(1, 1024), float32] */;
  %17560 = %17555.2 /* ty=Tensor[(1, 1024), float32] */;
  %17561 = sigmoid(%17559) /* ty=Tensor[(1, 1024), float32] */;
  %17562 = tanh(%17560) /* ty=Tensor[(1, 1024), float32] */;
  %17563 = multiply(%17558, %17501) /* ty=Tensor[(1, 1024), float32] */;
  %17564 = multiply(%17561, %17562) /* ty=Tensor[(1, 1024), float32] */;
  %17565 = add(%17563, %17564) /* ty=Tensor[(1, 1024), float32] */;
  %17566 = sigmoid(%17556) /* ty=Tensor[(1, 1024), float32] */;
  %17567 = tanh(%17565) /* ty=Tensor[(1, 1024), float32] */;
  %17568 = multiply(%17566, %17567) /* ty=Tensor[(1, 1024), float32] */;
  %17569 = (%17568, %17525) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17570 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17571 = concatenate(%17569, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17572 = concatenate(%17570, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17573 = nn.dense(%17571, %17572, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17574 = add(%17573, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17575 = add(%17574, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17576 = split(%17575, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17577 = %17576.3 /* ty=Tensor[(1, 1024), float32] */;
  %17578 = %17576.1 /* ty=Tensor[(1, 1024), float32] */;
  %17579 = sigmoid(%17578) /* ty=Tensor[(1, 1024), float32] */;
  %17580 = %17576.0 /* ty=Tensor[(1, 1024), float32] */;
  %17581 = %17576.2 /* ty=Tensor[(1, 1024), float32] */;
  %17582 = sigmoid(%17580) /* ty=Tensor[(1, 1024), float32] */;
  %17583 = tanh(%17581) /* ty=Tensor[(1, 1024), float32] */;
  %17584 = multiply(%17579, %17522) /* ty=Tensor[(1, 1024), float32] */;
  %17585 = multiply(%17582, %17583) /* ty=Tensor[(1, 1024), float32] */;
  %17586 = add(%17584, %17585) /* ty=Tensor[(1, 1024), float32] */;
  %17587 = sigmoid(%17577) /* ty=Tensor[(1, 1024), float32] */;
  %17588 = tanh(%17586) /* ty=Tensor[(1, 1024), float32] */;
  %17589 = multiply(%17587, %17588) /* ty=Tensor[(1, 1024), float32] */;
  %17590 = multiply(%17545, %17546) /* ty=Tensor[(1, 1024), float32] */;
  %17591 = (%17589, %17590) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17592 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17593 = concatenate(%17591, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17594 = concatenate(%17592, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17595 = nn.dense(%17593, %17594, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17596 = add(%17595, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17597 = add(%17596, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17598 = split(%17597, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17599 = %17598.3 /* ty=Tensor[(1, 1024), float32] */;
  %17600 = %17598.1 /* ty=Tensor[(1, 1024), float32] */;
  %17601 = sigmoid(%17600) /* ty=Tensor[(1, 1024), float32] */;
  %17602 = %17598.0 /* ty=Tensor[(1, 1024), float32] */;
  %17603 = %17598.2 /* ty=Tensor[(1, 1024), float32] */;
  %17604 = sigmoid(%17602) /* ty=Tensor[(1, 1024), float32] */;
  %17605 = tanh(%17603) /* ty=Tensor[(1, 1024), float32] */;
  %17606 = multiply(%17601, %17544) /* ty=Tensor[(1, 1024), float32] */;
  %17607 = multiply(%17604, %17605) /* ty=Tensor[(1, 1024), float32] */;
  %17608 = add(%17606, %17607) /* ty=Tensor[(1, 1024), float32] */;
  %17609 = sigmoid(%17599) /* ty=Tensor[(1, 1024), float32] */;
  %17610 = tanh(%17608) /* ty=Tensor[(1, 1024), float32] */;
  %17611 = %12788.75 /* ty=Tensor[(1, 2048), float32] */;
  %17612 = (%17611, %17568) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17613 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17614 = concatenate(%17612, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17615 = concatenate(%17613, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17616 = nn.dense(%17614, %17615, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17617 = add(%17616, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17618 = add(%17617, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17619 = split(%17618, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17620 = %17619.3 /* ty=Tensor[(1, 1024), float32] */;
  %17621 = %17619.1 /* ty=Tensor[(1, 1024), float32] */;
  %17622 = sigmoid(%17621) /* ty=Tensor[(1, 1024), float32] */;
  %17623 = %17619.0 /* ty=Tensor[(1, 1024), float32] */;
  %17624 = %17619.2 /* ty=Tensor[(1, 1024), float32] */;
  %17625 = sigmoid(%17623) /* ty=Tensor[(1, 1024), float32] */;
  %17626 = tanh(%17624) /* ty=Tensor[(1, 1024), float32] */;
  %17627 = multiply(%17622, %17565) /* ty=Tensor[(1, 1024), float32] */;
  %17628 = multiply(%17625, %17626) /* ty=Tensor[(1, 1024), float32] */;
  %17629 = add(%17627, %17628) /* ty=Tensor[(1, 1024), float32] */;
  %17630 = sigmoid(%17620) /* ty=Tensor[(1, 1024), float32] */;
  %17631 = tanh(%17629) /* ty=Tensor[(1, 1024), float32] */;
  %17632 = multiply(%17630, %17631) /* ty=Tensor[(1, 1024), float32] */;
  %17633 = (%17632, %17589) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17634 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17635 = concatenate(%17633, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17636 = concatenate(%17634, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17637 = nn.dense(%17635, %17636, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17638 = add(%17637, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17639 = add(%17638, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17640 = split(%17639, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17641 = %17640.3 /* ty=Tensor[(1, 1024), float32] */;
  %17642 = %17640.1 /* ty=Tensor[(1, 1024), float32] */;
  %17643 = sigmoid(%17642) /* ty=Tensor[(1, 1024), float32] */;
  %17644 = %17640.0 /* ty=Tensor[(1, 1024), float32] */;
  %17645 = %17640.2 /* ty=Tensor[(1, 1024), float32] */;
  %17646 = sigmoid(%17644) /* ty=Tensor[(1, 1024), float32] */;
  %17647 = tanh(%17645) /* ty=Tensor[(1, 1024), float32] */;
  %17648 = multiply(%17643, %17586) /* ty=Tensor[(1, 1024), float32] */;
  %17649 = multiply(%17646, %17647) /* ty=Tensor[(1, 1024), float32] */;
  %17650 = add(%17648, %17649) /* ty=Tensor[(1, 1024), float32] */;
  %17651 = sigmoid(%17641) /* ty=Tensor[(1, 1024), float32] */;
  %17652 = tanh(%17650) /* ty=Tensor[(1, 1024), float32] */;
  %17653 = multiply(%17651, %17652) /* ty=Tensor[(1, 1024), float32] */;
  %17654 = multiply(%17609, %17610) /* ty=Tensor[(1, 1024), float32] */;
  %17655 = (%17653, %17654) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17656 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17657 = concatenate(%17655, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17658 = concatenate(%17656, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17659 = nn.dense(%17657, %17658, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17660 = add(%17659, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17661 = add(%17660, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17662 = split(%17661, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17663 = %17662.3 /* ty=Tensor[(1, 1024), float32] */;
  %17664 = %17662.1 /* ty=Tensor[(1, 1024), float32] */;
  %17665 = sigmoid(%17664) /* ty=Tensor[(1, 1024), float32] */;
  %17666 = %17662.0 /* ty=Tensor[(1, 1024), float32] */;
  %17667 = %17662.2 /* ty=Tensor[(1, 1024), float32] */;
  %17668 = sigmoid(%17666) /* ty=Tensor[(1, 1024), float32] */;
  %17669 = tanh(%17667) /* ty=Tensor[(1, 1024), float32] */;
  %17670 = multiply(%17665, %17608) /* ty=Tensor[(1, 1024), float32] */;
  %17671 = multiply(%17668, %17669) /* ty=Tensor[(1, 1024), float32] */;
  %17672 = add(%17670, %17671) /* ty=Tensor[(1, 1024), float32] */;
  %17673 = sigmoid(%17663) /* ty=Tensor[(1, 1024), float32] */;
  %17674 = tanh(%17672) /* ty=Tensor[(1, 1024), float32] */;
  %17675 = %12788.76 /* ty=Tensor[(1, 2048), float32] */;
  %17676 = (%17675, %17632) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17677 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17678 = concatenate(%17676, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17679 = concatenate(%17677, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17680 = nn.dense(%17678, %17679, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17681 = add(%17680, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17682 = add(%17681, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17683 = split(%17682, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17684 = %17683.3 /* ty=Tensor[(1, 1024), float32] */;
  %17685 = %17683.1 /* ty=Tensor[(1, 1024), float32] */;
  %17686 = sigmoid(%17685) /* ty=Tensor[(1, 1024), float32] */;
  %17687 = %17683.0 /* ty=Tensor[(1, 1024), float32] */;
  %17688 = %17683.2 /* ty=Tensor[(1, 1024), float32] */;
  %17689 = sigmoid(%17687) /* ty=Tensor[(1, 1024), float32] */;
  %17690 = tanh(%17688) /* ty=Tensor[(1, 1024), float32] */;
  %17691 = multiply(%17686, %17629) /* ty=Tensor[(1, 1024), float32] */;
  %17692 = multiply(%17689, %17690) /* ty=Tensor[(1, 1024), float32] */;
  %17693 = add(%17691, %17692) /* ty=Tensor[(1, 1024), float32] */;
  %17694 = sigmoid(%17684) /* ty=Tensor[(1, 1024), float32] */;
  %17695 = tanh(%17693) /* ty=Tensor[(1, 1024), float32] */;
  %17696 = multiply(%17694, %17695) /* ty=Tensor[(1, 1024), float32] */;
  %17697 = (%17696, %17653) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17698 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17699 = concatenate(%17697, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17700 = concatenate(%17698, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17701 = nn.dense(%17699, %17700, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17702 = add(%17701, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17703 = add(%17702, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17704 = split(%17703, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17705 = %17704.3 /* ty=Tensor[(1, 1024), float32] */;
  %17706 = %17704.1 /* ty=Tensor[(1, 1024), float32] */;
  %17707 = sigmoid(%17706) /* ty=Tensor[(1, 1024), float32] */;
  %17708 = %17704.0 /* ty=Tensor[(1, 1024), float32] */;
  %17709 = %17704.2 /* ty=Tensor[(1, 1024), float32] */;
  %17710 = sigmoid(%17708) /* ty=Tensor[(1, 1024), float32] */;
  %17711 = tanh(%17709) /* ty=Tensor[(1, 1024), float32] */;
  %17712 = multiply(%17707, %17650) /* ty=Tensor[(1, 1024), float32] */;
  %17713 = multiply(%17710, %17711) /* ty=Tensor[(1, 1024), float32] */;
  %17714 = add(%17712, %17713) /* ty=Tensor[(1, 1024), float32] */;
  %17715 = sigmoid(%17705) /* ty=Tensor[(1, 1024), float32] */;
  %17716 = tanh(%17714) /* ty=Tensor[(1, 1024), float32] */;
  %17717 = multiply(%17715, %17716) /* ty=Tensor[(1, 1024), float32] */;
  %17718 = multiply(%17673, %17674) /* ty=Tensor[(1, 1024), float32] */;
  %17719 = (%17717, %17718) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17720 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17721 = concatenate(%17719, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17722 = concatenate(%17720, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17723 = nn.dense(%17721, %17722, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17724 = add(%17723, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17725 = add(%17724, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17726 = split(%17725, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17727 = %17726.3 /* ty=Tensor[(1, 1024), float32] */;
  %17728 = %17726.1 /* ty=Tensor[(1, 1024), float32] */;
  %17729 = sigmoid(%17728) /* ty=Tensor[(1, 1024), float32] */;
  %17730 = %17726.0 /* ty=Tensor[(1, 1024), float32] */;
  %17731 = %17726.2 /* ty=Tensor[(1, 1024), float32] */;
  %17732 = sigmoid(%17730) /* ty=Tensor[(1, 1024), float32] */;
  %17733 = tanh(%17731) /* ty=Tensor[(1, 1024), float32] */;
  %17734 = multiply(%17729, %17672) /* ty=Tensor[(1, 1024), float32] */;
  %17735 = multiply(%17732, %17733) /* ty=Tensor[(1, 1024), float32] */;
  %17736 = add(%17734, %17735) /* ty=Tensor[(1, 1024), float32] */;
  %17737 = sigmoid(%17727) /* ty=Tensor[(1, 1024), float32] */;
  %17738 = tanh(%17736) /* ty=Tensor[(1, 1024), float32] */;
  %17739 = %12788.77 /* ty=Tensor[(1, 2048), float32] */;
  %17740 = (%17739, %17696) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17741 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17742 = concatenate(%17740, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17743 = concatenate(%17741, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17744 = nn.dense(%17742, %17743, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17745 = add(%17744, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17746 = add(%17745, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17747 = split(%17746, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17748 = %17747.3 /* ty=Tensor[(1, 1024), float32] */;
  %17749 = %17747.1 /* ty=Tensor[(1, 1024), float32] */;
  %17750 = sigmoid(%17749) /* ty=Tensor[(1, 1024), float32] */;
  %17751 = %17747.0 /* ty=Tensor[(1, 1024), float32] */;
  %17752 = %17747.2 /* ty=Tensor[(1, 1024), float32] */;
  %17753 = sigmoid(%17751) /* ty=Tensor[(1, 1024), float32] */;
  %17754 = tanh(%17752) /* ty=Tensor[(1, 1024), float32] */;
  %17755 = multiply(%17750, %17693) /* ty=Tensor[(1, 1024), float32] */;
  %17756 = multiply(%17753, %17754) /* ty=Tensor[(1, 1024), float32] */;
  %17757 = add(%17755, %17756) /* ty=Tensor[(1, 1024), float32] */;
  %17758 = sigmoid(%17748) /* ty=Tensor[(1, 1024), float32] */;
  %17759 = tanh(%17757) /* ty=Tensor[(1, 1024), float32] */;
  %17760 = multiply(%17758, %17759) /* ty=Tensor[(1, 1024), float32] */;
  %17761 = (%17760, %17717) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17762 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17763 = concatenate(%17761, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17764 = concatenate(%17762, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17765 = nn.dense(%17763, %17764, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17766 = add(%17765, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17767 = add(%17766, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17768 = split(%17767, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17769 = %17768.3 /* ty=Tensor[(1, 1024), float32] */;
  %17770 = %17768.1 /* ty=Tensor[(1, 1024), float32] */;
  %17771 = sigmoid(%17770) /* ty=Tensor[(1, 1024), float32] */;
  %17772 = %17768.0 /* ty=Tensor[(1, 1024), float32] */;
  %17773 = %17768.2 /* ty=Tensor[(1, 1024), float32] */;
  %17774 = sigmoid(%17772) /* ty=Tensor[(1, 1024), float32] */;
  %17775 = tanh(%17773) /* ty=Tensor[(1, 1024), float32] */;
  %17776 = multiply(%17771, %17714) /* ty=Tensor[(1, 1024), float32] */;
  %17777 = multiply(%17774, %17775) /* ty=Tensor[(1, 1024), float32] */;
  %17778 = add(%17776, %17777) /* ty=Tensor[(1, 1024), float32] */;
  %17779 = sigmoid(%17769) /* ty=Tensor[(1, 1024), float32] */;
  %17780 = tanh(%17778) /* ty=Tensor[(1, 1024), float32] */;
  %17781 = multiply(%17779, %17780) /* ty=Tensor[(1, 1024), float32] */;
  %17782 = multiply(%17737, %17738) /* ty=Tensor[(1, 1024), float32] */;
  %17783 = (%17781, %17782) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17784 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17785 = concatenate(%17783, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17786 = concatenate(%17784, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17787 = nn.dense(%17785, %17786, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17788 = add(%17787, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17789 = add(%17788, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17790 = split(%17789, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17791 = %17790.3 /* ty=Tensor[(1, 1024), float32] */;
  %17792 = %17790.1 /* ty=Tensor[(1, 1024), float32] */;
  %17793 = sigmoid(%17792) /* ty=Tensor[(1, 1024), float32] */;
  %17794 = %17790.0 /* ty=Tensor[(1, 1024), float32] */;
  %17795 = %17790.2 /* ty=Tensor[(1, 1024), float32] */;
  %17796 = sigmoid(%17794) /* ty=Tensor[(1, 1024), float32] */;
  %17797 = tanh(%17795) /* ty=Tensor[(1, 1024), float32] */;
  %17798 = multiply(%17793, %17736) /* ty=Tensor[(1, 1024), float32] */;
  %17799 = multiply(%17796, %17797) /* ty=Tensor[(1, 1024), float32] */;
  %17800 = add(%17798, %17799) /* ty=Tensor[(1, 1024), float32] */;
  %17801 = sigmoid(%17791) /* ty=Tensor[(1, 1024), float32] */;
  %17802 = tanh(%17800) /* ty=Tensor[(1, 1024), float32] */;
  %17803 = %12788.78 /* ty=Tensor[(1, 2048), float32] */;
  %17804 = (%17803, %17760) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17805 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17806 = concatenate(%17804, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17807 = concatenate(%17805, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17808 = nn.dense(%17806, %17807, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17809 = add(%17808, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17810 = add(%17809, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17811 = split(%17810, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17812 = %17811.3 /* ty=Tensor[(1, 1024), float32] */;
  %17813 = %17811.1 /* ty=Tensor[(1, 1024), float32] */;
  %17814 = sigmoid(%17813) /* ty=Tensor[(1, 1024), float32] */;
  %17815 = %17811.0 /* ty=Tensor[(1, 1024), float32] */;
  %17816 = %17811.2 /* ty=Tensor[(1, 1024), float32] */;
  %17817 = sigmoid(%17815) /* ty=Tensor[(1, 1024), float32] */;
  %17818 = tanh(%17816) /* ty=Tensor[(1, 1024), float32] */;
  %17819 = multiply(%17814, %17757) /* ty=Tensor[(1, 1024), float32] */;
  %17820 = multiply(%17817, %17818) /* ty=Tensor[(1, 1024), float32] */;
  %17821 = add(%17819, %17820) /* ty=Tensor[(1, 1024), float32] */;
  %17822 = sigmoid(%17812) /* ty=Tensor[(1, 1024), float32] */;
  %17823 = tanh(%17821) /* ty=Tensor[(1, 1024), float32] */;
  %17824 = multiply(%17822, %17823) /* ty=Tensor[(1, 1024), float32] */;
  %17825 = (%17824, %17781) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17826 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17827 = concatenate(%17825, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17828 = concatenate(%17826, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17829 = nn.dense(%17827, %17828, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17830 = add(%17829, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17831 = add(%17830, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17832 = split(%17831, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17833 = %17832.3 /* ty=Tensor[(1, 1024), float32] */;
  %17834 = %17832.1 /* ty=Tensor[(1, 1024), float32] */;
  %17835 = sigmoid(%17834) /* ty=Tensor[(1, 1024), float32] */;
  %17836 = %17832.0 /* ty=Tensor[(1, 1024), float32] */;
  %17837 = %17832.2 /* ty=Tensor[(1, 1024), float32] */;
  %17838 = sigmoid(%17836) /* ty=Tensor[(1, 1024), float32] */;
  %17839 = tanh(%17837) /* ty=Tensor[(1, 1024), float32] */;
  %17840 = multiply(%17835, %17778) /* ty=Tensor[(1, 1024), float32] */;
  %17841 = multiply(%17838, %17839) /* ty=Tensor[(1, 1024), float32] */;
  %17842 = add(%17840, %17841) /* ty=Tensor[(1, 1024), float32] */;
  %17843 = sigmoid(%17833) /* ty=Tensor[(1, 1024), float32] */;
  %17844 = tanh(%17842) /* ty=Tensor[(1, 1024), float32] */;
  %17845 = multiply(%17843, %17844) /* ty=Tensor[(1, 1024), float32] */;
  %17846 = multiply(%17801, %17802) /* ty=Tensor[(1, 1024), float32] */;
  %17847 = (%17845, %17846) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17848 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17849 = concatenate(%17847, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17850 = concatenate(%17848, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17851 = nn.dense(%17849, %17850, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17852 = add(%17851, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17853 = add(%17852, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17854 = split(%17853, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17855 = %17854.3 /* ty=Tensor[(1, 1024), float32] */;
  %17856 = %17854.1 /* ty=Tensor[(1, 1024), float32] */;
  %17857 = sigmoid(%17856) /* ty=Tensor[(1, 1024), float32] */;
  %17858 = %17854.0 /* ty=Tensor[(1, 1024), float32] */;
  %17859 = %17854.2 /* ty=Tensor[(1, 1024), float32] */;
  %17860 = sigmoid(%17858) /* ty=Tensor[(1, 1024), float32] */;
  %17861 = tanh(%17859) /* ty=Tensor[(1, 1024), float32] */;
  %17862 = multiply(%17857, %17800) /* ty=Tensor[(1, 1024), float32] */;
  %17863 = multiply(%17860, %17861) /* ty=Tensor[(1, 1024), float32] */;
  %17864 = add(%17862, %17863) /* ty=Tensor[(1, 1024), float32] */;
  %17865 = sigmoid(%17855) /* ty=Tensor[(1, 1024), float32] */;
  %17866 = tanh(%17864) /* ty=Tensor[(1, 1024), float32] */;
  %17867 = %12788.79 /* ty=Tensor[(1, 2048), float32] */;
  %17868 = (%17867, %17824) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17869 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17870 = concatenate(%17868, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17871 = concatenate(%17869, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17872 = nn.dense(%17870, %17871, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17873 = add(%17872, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17874 = add(%17873, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17875 = split(%17874, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17876 = %17875.3 /* ty=Tensor[(1, 1024), float32] */;
  %17877 = %17875.1 /* ty=Tensor[(1, 1024), float32] */;
  %17878 = sigmoid(%17877) /* ty=Tensor[(1, 1024), float32] */;
  %17879 = %17875.0 /* ty=Tensor[(1, 1024), float32] */;
  %17880 = %17875.2 /* ty=Tensor[(1, 1024), float32] */;
  %17881 = sigmoid(%17879) /* ty=Tensor[(1, 1024), float32] */;
  %17882 = tanh(%17880) /* ty=Tensor[(1, 1024), float32] */;
  %17883 = multiply(%17878, %17821) /* ty=Tensor[(1, 1024), float32] */;
  %17884 = multiply(%17881, %17882) /* ty=Tensor[(1, 1024), float32] */;
  %17885 = add(%17883, %17884) /* ty=Tensor[(1, 1024), float32] */;
  %17886 = sigmoid(%17876) /* ty=Tensor[(1, 1024), float32] */;
  %17887 = tanh(%17885) /* ty=Tensor[(1, 1024), float32] */;
  %17888 = multiply(%17886, %17887) /* ty=Tensor[(1, 1024), float32] */;
  %17889 = (%17888, %17845) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17890 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17891 = concatenate(%17889, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17892 = concatenate(%17890, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17893 = nn.dense(%17891, %17892, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17894 = add(%17893, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17895 = add(%17894, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17896 = split(%17895, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17897 = %17896.3 /* ty=Tensor[(1, 1024), float32] */;
  %17898 = %17896.1 /* ty=Tensor[(1, 1024), float32] */;
  %17899 = sigmoid(%17898) /* ty=Tensor[(1, 1024), float32] */;
  %17900 = %17896.0 /* ty=Tensor[(1, 1024), float32] */;
  %17901 = %17896.2 /* ty=Tensor[(1, 1024), float32] */;
  %17902 = sigmoid(%17900) /* ty=Tensor[(1, 1024), float32] */;
  %17903 = tanh(%17901) /* ty=Tensor[(1, 1024), float32] */;
  %17904 = multiply(%17899, %17842) /* ty=Tensor[(1, 1024), float32] */;
  %17905 = multiply(%17902, %17903) /* ty=Tensor[(1, 1024), float32] */;
  %17906 = add(%17904, %17905) /* ty=Tensor[(1, 1024), float32] */;
  %17907 = sigmoid(%17897) /* ty=Tensor[(1, 1024), float32] */;
  %17908 = tanh(%17906) /* ty=Tensor[(1, 1024), float32] */;
  %17909 = multiply(%17907, %17908) /* ty=Tensor[(1, 1024), float32] */;
  %17910 = multiply(%17865, %17866) /* ty=Tensor[(1, 1024), float32] */;
  %17911 = (%17909, %17910) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17912 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17913 = concatenate(%17911, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17914 = concatenate(%17912, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17915 = nn.dense(%17913, %17914, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17916 = add(%17915, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17917 = add(%17916, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17918 = split(%17917, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17919 = %17918.3 /* ty=Tensor[(1, 1024), float32] */;
  %17920 = %17918.1 /* ty=Tensor[(1, 1024), float32] */;
  %17921 = sigmoid(%17920) /* ty=Tensor[(1, 1024), float32] */;
  %17922 = %17918.0 /* ty=Tensor[(1, 1024), float32] */;
  %17923 = %17918.2 /* ty=Tensor[(1, 1024), float32] */;
  %17924 = sigmoid(%17922) /* ty=Tensor[(1, 1024), float32] */;
  %17925 = tanh(%17923) /* ty=Tensor[(1, 1024), float32] */;
  %17926 = multiply(%17921, %17864) /* ty=Tensor[(1, 1024), float32] */;
  %17927 = multiply(%17924, %17925) /* ty=Tensor[(1, 1024), float32] */;
  %17928 = add(%17926, %17927) /* ty=Tensor[(1, 1024), float32] */;
  %17929 = sigmoid(%17919) /* ty=Tensor[(1, 1024), float32] */;
  %17930 = tanh(%17928) /* ty=Tensor[(1, 1024), float32] */;
  %17931 = %12788.80 /* ty=Tensor[(1, 2048), float32] */;
  %17932 = (%17931, %17888) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17933 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17934 = concatenate(%17932, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17935 = concatenate(%17933, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %17936 = nn.dense(%17934, %17935, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17937 = add(%17936, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17938 = add(%17937, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %17939 = split(%17938, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17940 = %17939.3 /* ty=Tensor[(1, 1024), float32] */;
  %17941 = %17939.1 /* ty=Tensor[(1, 1024), float32] */;
  %17942 = sigmoid(%17941) /* ty=Tensor[(1, 1024), float32] */;
  %17943 = %17939.0 /* ty=Tensor[(1, 1024), float32] */;
  %17944 = %17939.2 /* ty=Tensor[(1, 1024), float32] */;
  %17945 = sigmoid(%17943) /* ty=Tensor[(1, 1024), float32] */;
  %17946 = tanh(%17944) /* ty=Tensor[(1, 1024), float32] */;
  %17947 = multiply(%17942, %17885) /* ty=Tensor[(1, 1024), float32] */;
  %17948 = multiply(%17945, %17946) /* ty=Tensor[(1, 1024), float32] */;
  %17949 = add(%17947, %17948) /* ty=Tensor[(1, 1024), float32] */;
  %17950 = sigmoid(%17940) /* ty=Tensor[(1, 1024), float32] */;
  %17951 = tanh(%17949) /* ty=Tensor[(1, 1024), float32] */;
  %17952 = multiply(%17950, %17951) /* ty=Tensor[(1, 1024), float32] */;
  %17953 = (%17952, %17909) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17954 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17955 = concatenate(%17953, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17956 = concatenate(%17954, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17957 = nn.dense(%17955, %17956, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17958 = add(%17957, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17959 = add(%17958, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %17960 = split(%17959, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17961 = %17960.3 /* ty=Tensor[(1, 1024), float32] */;
  %17962 = %17960.1 /* ty=Tensor[(1, 1024), float32] */;
  %17963 = sigmoid(%17962) /* ty=Tensor[(1, 1024), float32] */;
  %17964 = %17960.0 /* ty=Tensor[(1, 1024), float32] */;
  %17965 = %17960.2 /* ty=Tensor[(1, 1024), float32] */;
  %17966 = sigmoid(%17964) /* ty=Tensor[(1, 1024), float32] */;
  %17967 = tanh(%17965) /* ty=Tensor[(1, 1024), float32] */;
  %17968 = multiply(%17963, %17906) /* ty=Tensor[(1, 1024), float32] */;
  %17969 = multiply(%17966, %17967) /* ty=Tensor[(1, 1024), float32] */;
  %17970 = add(%17968, %17969) /* ty=Tensor[(1, 1024), float32] */;
  %17971 = sigmoid(%17961) /* ty=Tensor[(1, 1024), float32] */;
  %17972 = tanh(%17970) /* ty=Tensor[(1, 1024), float32] */;
  %17973 = multiply(%17971, %17972) /* ty=Tensor[(1, 1024), float32] */;
  %17974 = multiply(%17929, %17930) /* ty=Tensor[(1, 1024), float32] */;
  %17975 = (%17973, %17974) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17976 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %17977 = concatenate(%17975, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %17978 = concatenate(%17976, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %17979 = nn.dense(%17977, %17978, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %17980 = add(%17979, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17981 = add(%17980, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %17982 = split(%17981, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %17983 = %17982.3 /* ty=Tensor[(1, 1024), float32] */;
  %17984 = %17982.1 /* ty=Tensor[(1, 1024), float32] */;
  %17985 = sigmoid(%17984) /* ty=Tensor[(1, 1024), float32] */;
  %17986 = %17982.0 /* ty=Tensor[(1, 1024), float32] */;
  %17987 = %17982.2 /* ty=Tensor[(1, 1024), float32] */;
  %17988 = sigmoid(%17986) /* ty=Tensor[(1, 1024), float32] */;
  %17989 = tanh(%17987) /* ty=Tensor[(1, 1024), float32] */;
  %17990 = multiply(%17985, %17928) /* ty=Tensor[(1, 1024), float32] */;
  %17991 = multiply(%17988, %17989) /* ty=Tensor[(1, 1024), float32] */;
  %17992 = add(%17990, %17991) /* ty=Tensor[(1, 1024), float32] */;
  %17993 = sigmoid(%17983) /* ty=Tensor[(1, 1024), float32] */;
  %17994 = tanh(%17992) /* ty=Tensor[(1, 1024), float32] */;
  %17995 = %12788.81 /* ty=Tensor[(1, 2048), float32] */;
  %17996 = (%17995, %17952) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %17997 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %17998 = concatenate(%17996, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %17999 = concatenate(%17997, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18000 = nn.dense(%17998, %17999, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18001 = add(%18000, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18002 = add(%18001, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18003 = split(%18002, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18004 = %18003.3 /* ty=Tensor[(1, 1024), float32] */;
  %18005 = %18003.1 /* ty=Tensor[(1, 1024), float32] */;
  %18006 = sigmoid(%18005) /* ty=Tensor[(1, 1024), float32] */;
  %18007 = %18003.0 /* ty=Tensor[(1, 1024), float32] */;
  %18008 = %18003.2 /* ty=Tensor[(1, 1024), float32] */;
  %18009 = sigmoid(%18007) /* ty=Tensor[(1, 1024), float32] */;
  %18010 = tanh(%18008) /* ty=Tensor[(1, 1024), float32] */;
  %18011 = multiply(%18006, %17949) /* ty=Tensor[(1, 1024), float32] */;
  %18012 = multiply(%18009, %18010) /* ty=Tensor[(1, 1024), float32] */;
  %18013 = add(%18011, %18012) /* ty=Tensor[(1, 1024), float32] */;
  %18014 = sigmoid(%18004) /* ty=Tensor[(1, 1024), float32] */;
  %18015 = tanh(%18013) /* ty=Tensor[(1, 1024), float32] */;
  %18016 = multiply(%18014, %18015) /* ty=Tensor[(1, 1024), float32] */;
  %18017 = (%18016, %17973) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18018 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18019 = concatenate(%18017, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18020 = concatenate(%18018, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18021 = nn.dense(%18019, %18020, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18022 = add(%18021, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18023 = add(%18022, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18024 = split(%18023, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18025 = %18024.3 /* ty=Tensor[(1, 1024), float32] */;
  %18026 = %18024.1 /* ty=Tensor[(1, 1024), float32] */;
  %18027 = sigmoid(%18026) /* ty=Tensor[(1, 1024), float32] */;
  %18028 = %18024.0 /* ty=Tensor[(1, 1024), float32] */;
  %18029 = %18024.2 /* ty=Tensor[(1, 1024), float32] */;
  %18030 = sigmoid(%18028) /* ty=Tensor[(1, 1024), float32] */;
  %18031 = tanh(%18029) /* ty=Tensor[(1, 1024), float32] */;
  %18032 = multiply(%18027, %17970) /* ty=Tensor[(1, 1024), float32] */;
  %18033 = multiply(%18030, %18031) /* ty=Tensor[(1, 1024), float32] */;
  %18034 = add(%18032, %18033) /* ty=Tensor[(1, 1024), float32] */;
  %18035 = sigmoid(%18025) /* ty=Tensor[(1, 1024), float32] */;
  %18036 = tanh(%18034) /* ty=Tensor[(1, 1024), float32] */;
  %18037 = multiply(%18035, %18036) /* ty=Tensor[(1, 1024), float32] */;
  %18038 = multiply(%17993, %17994) /* ty=Tensor[(1, 1024), float32] */;
  %18039 = (%18037, %18038) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18040 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18041 = concatenate(%18039, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18042 = concatenate(%18040, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18043 = nn.dense(%18041, %18042, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18044 = add(%18043, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18045 = add(%18044, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18046 = split(%18045, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18047 = %18046.3 /* ty=Tensor[(1, 1024), float32] */;
  %18048 = %18046.1 /* ty=Tensor[(1, 1024), float32] */;
  %18049 = sigmoid(%18048) /* ty=Tensor[(1, 1024), float32] */;
  %18050 = %18046.0 /* ty=Tensor[(1, 1024), float32] */;
  %18051 = %18046.2 /* ty=Tensor[(1, 1024), float32] */;
  %18052 = sigmoid(%18050) /* ty=Tensor[(1, 1024), float32] */;
  %18053 = tanh(%18051) /* ty=Tensor[(1, 1024), float32] */;
  %18054 = multiply(%18049, %17992) /* ty=Tensor[(1, 1024), float32] */;
  %18055 = multiply(%18052, %18053) /* ty=Tensor[(1, 1024), float32] */;
  %18056 = add(%18054, %18055) /* ty=Tensor[(1, 1024), float32] */;
  %18057 = sigmoid(%18047) /* ty=Tensor[(1, 1024), float32] */;
  %18058 = tanh(%18056) /* ty=Tensor[(1, 1024), float32] */;
  %18059 = %12788.82 /* ty=Tensor[(1, 2048), float32] */;
  %18060 = (%18059, %18016) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18061 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18062 = concatenate(%18060, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18063 = concatenate(%18061, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18064 = nn.dense(%18062, %18063, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18065 = add(%18064, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18066 = add(%18065, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18067 = split(%18066, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18068 = %18067.3 /* ty=Tensor[(1, 1024), float32] */;
  %18069 = %18067.1 /* ty=Tensor[(1, 1024), float32] */;
  %18070 = sigmoid(%18069) /* ty=Tensor[(1, 1024), float32] */;
  %18071 = %18067.0 /* ty=Tensor[(1, 1024), float32] */;
  %18072 = %18067.2 /* ty=Tensor[(1, 1024), float32] */;
  %18073 = sigmoid(%18071) /* ty=Tensor[(1, 1024), float32] */;
  %18074 = tanh(%18072) /* ty=Tensor[(1, 1024), float32] */;
  %18075 = multiply(%18070, %18013) /* ty=Tensor[(1, 1024), float32] */;
  %18076 = multiply(%18073, %18074) /* ty=Tensor[(1, 1024), float32] */;
  %18077 = add(%18075, %18076) /* ty=Tensor[(1, 1024), float32] */;
  %18078 = sigmoid(%18068) /* ty=Tensor[(1, 1024), float32] */;
  %18079 = tanh(%18077) /* ty=Tensor[(1, 1024), float32] */;
  %18080 = multiply(%18078, %18079) /* ty=Tensor[(1, 1024), float32] */;
  %18081 = (%18080, %18037) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18082 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18083 = concatenate(%18081, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18084 = concatenate(%18082, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18085 = nn.dense(%18083, %18084, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18086 = add(%18085, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18087 = add(%18086, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18088 = split(%18087, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18089 = %18088.3 /* ty=Tensor[(1, 1024), float32] */;
  %18090 = %18088.1 /* ty=Tensor[(1, 1024), float32] */;
  %18091 = sigmoid(%18090) /* ty=Tensor[(1, 1024), float32] */;
  %18092 = %18088.0 /* ty=Tensor[(1, 1024), float32] */;
  %18093 = %18088.2 /* ty=Tensor[(1, 1024), float32] */;
  %18094 = sigmoid(%18092) /* ty=Tensor[(1, 1024), float32] */;
  %18095 = tanh(%18093) /* ty=Tensor[(1, 1024), float32] */;
  %18096 = multiply(%18091, %18034) /* ty=Tensor[(1, 1024), float32] */;
  %18097 = multiply(%18094, %18095) /* ty=Tensor[(1, 1024), float32] */;
  %18098 = add(%18096, %18097) /* ty=Tensor[(1, 1024), float32] */;
  %18099 = sigmoid(%18089) /* ty=Tensor[(1, 1024), float32] */;
  %18100 = tanh(%18098) /* ty=Tensor[(1, 1024), float32] */;
  %18101 = multiply(%18099, %18100) /* ty=Tensor[(1, 1024), float32] */;
  %18102 = multiply(%18057, %18058) /* ty=Tensor[(1, 1024), float32] */;
  %18103 = (%18101, %18102) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18104 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18105 = concatenate(%18103, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18106 = concatenate(%18104, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18107 = nn.dense(%18105, %18106, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18108 = add(%18107, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18109 = add(%18108, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18110 = split(%18109, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18111 = %18110.3 /* ty=Tensor[(1, 1024), float32] */;
  %18112 = %18110.1 /* ty=Tensor[(1, 1024), float32] */;
  %18113 = sigmoid(%18112) /* ty=Tensor[(1, 1024), float32] */;
  %18114 = %18110.0 /* ty=Tensor[(1, 1024), float32] */;
  %18115 = %18110.2 /* ty=Tensor[(1, 1024), float32] */;
  %18116 = sigmoid(%18114) /* ty=Tensor[(1, 1024), float32] */;
  %18117 = tanh(%18115) /* ty=Tensor[(1, 1024), float32] */;
  %18118 = multiply(%18113, %18056) /* ty=Tensor[(1, 1024), float32] */;
  %18119 = multiply(%18116, %18117) /* ty=Tensor[(1, 1024), float32] */;
  %18120 = add(%18118, %18119) /* ty=Tensor[(1, 1024), float32] */;
  %18121 = sigmoid(%18111) /* ty=Tensor[(1, 1024), float32] */;
  %18122 = tanh(%18120) /* ty=Tensor[(1, 1024), float32] */;
  %18123 = %12788.83 /* ty=Tensor[(1, 2048), float32] */;
  %18124 = (%18123, %18080) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18125 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18126 = concatenate(%18124, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18127 = concatenate(%18125, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18128 = nn.dense(%18126, %18127, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18129 = add(%18128, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18130 = add(%18129, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18131 = split(%18130, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18132 = %18131.3 /* ty=Tensor[(1, 1024), float32] */;
  %18133 = %18131.1 /* ty=Tensor[(1, 1024), float32] */;
  %18134 = sigmoid(%18133) /* ty=Tensor[(1, 1024), float32] */;
  %18135 = %18131.0 /* ty=Tensor[(1, 1024), float32] */;
  %18136 = %18131.2 /* ty=Tensor[(1, 1024), float32] */;
  %18137 = sigmoid(%18135) /* ty=Tensor[(1, 1024), float32] */;
  %18138 = tanh(%18136) /* ty=Tensor[(1, 1024), float32] */;
  %18139 = multiply(%18134, %18077) /* ty=Tensor[(1, 1024), float32] */;
  %18140 = multiply(%18137, %18138) /* ty=Tensor[(1, 1024), float32] */;
  %18141 = add(%18139, %18140) /* ty=Tensor[(1, 1024), float32] */;
  %18142 = sigmoid(%18132) /* ty=Tensor[(1, 1024), float32] */;
  %18143 = tanh(%18141) /* ty=Tensor[(1, 1024), float32] */;
  %18144 = multiply(%18142, %18143) /* ty=Tensor[(1, 1024), float32] */;
  %18145 = (%18144, %18101) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18146 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18147 = concatenate(%18145, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18148 = concatenate(%18146, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18149 = nn.dense(%18147, %18148, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18150 = add(%18149, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18151 = add(%18150, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18152 = split(%18151, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18153 = %18152.3 /* ty=Tensor[(1, 1024), float32] */;
  %18154 = %18152.1 /* ty=Tensor[(1, 1024), float32] */;
  %18155 = sigmoid(%18154) /* ty=Tensor[(1, 1024), float32] */;
  %18156 = %18152.0 /* ty=Tensor[(1, 1024), float32] */;
  %18157 = %18152.2 /* ty=Tensor[(1, 1024), float32] */;
  %18158 = sigmoid(%18156) /* ty=Tensor[(1, 1024), float32] */;
  %18159 = tanh(%18157) /* ty=Tensor[(1, 1024), float32] */;
  %18160 = multiply(%18155, %18098) /* ty=Tensor[(1, 1024), float32] */;
  %18161 = multiply(%18158, %18159) /* ty=Tensor[(1, 1024), float32] */;
  %18162 = add(%18160, %18161) /* ty=Tensor[(1, 1024), float32] */;
  %18163 = sigmoid(%18153) /* ty=Tensor[(1, 1024), float32] */;
  %18164 = tanh(%18162) /* ty=Tensor[(1, 1024), float32] */;
  %18165 = multiply(%18163, %18164) /* ty=Tensor[(1, 1024), float32] */;
  %18166 = multiply(%18121, %18122) /* ty=Tensor[(1, 1024), float32] */;
  %18167 = (%18165, %18166) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18168 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18169 = concatenate(%18167, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18170 = concatenate(%18168, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18171 = nn.dense(%18169, %18170, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18172 = add(%18171, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18173 = add(%18172, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18174 = split(%18173, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18175 = %18174.3 /* ty=Tensor[(1, 1024), float32] */;
  %18176 = %18174.1 /* ty=Tensor[(1, 1024), float32] */;
  %18177 = sigmoid(%18176) /* ty=Tensor[(1, 1024), float32] */;
  %18178 = %18174.0 /* ty=Tensor[(1, 1024), float32] */;
  %18179 = %18174.2 /* ty=Tensor[(1, 1024), float32] */;
  %18180 = sigmoid(%18178) /* ty=Tensor[(1, 1024), float32] */;
  %18181 = tanh(%18179) /* ty=Tensor[(1, 1024), float32] */;
  %18182 = multiply(%18177, %18120) /* ty=Tensor[(1, 1024), float32] */;
  %18183 = multiply(%18180, %18181) /* ty=Tensor[(1, 1024), float32] */;
  %18184 = add(%18182, %18183) /* ty=Tensor[(1, 1024), float32] */;
  %18185 = sigmoid(%18175) /* ty=Tensor[(1, 1024), float32] */;
  %18186 = tanh(%18184) /* ty=Tensor[(1, 1024), float32] */;
  %18187 = %12788.84 /* ty=Tensor[(1, 2048), float32] */;
  %18188 = (%18187, %18144) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18189 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18190 = concatenate(%18188, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18191 = concatenate(%18189, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18192 = nn.dense(%18190, %18191, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18193 = add(%18192, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18194 = add(%18193, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18195 = split(%18194, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18196 = %18195.3 /* ty=Tensor[(1, 1024), float32] */;
  %18197 = %18195.1 /* ty=Tensor[(1, 1024), float32] */;
  %18198 = sigmoid(%18197) /* ty=Tensor[(1, 1024), float32] */;
  %18199 = %18195.0 /* ty=Tensor[(1, 1024), float32] */;
  %18200 = %18195.2 /* ty=Tensor[(1, 1024), float32] */;
  %18201 = sigmoid(%18199) /* ty=Tensor[(1, 1024), float32] */;
  %18202 = tanh(%18200) /* ty=Tensor[(1, 1024), float32] */;
  %18203 = multiply(%18198, %18141) /* ty=Tensor[(1, 1024), float32] */;
  %18204 = multiply(%18201, %18202) /* ty=Tensor[(1, 1024), float32] */;
  %18205 = add(%18203, %18204) /* ty=Tensor[(1, 1024), float32] */;
  %18206 = sigmoid(%18196) /* ty=Tensor[(1, 1024), float32] */;
  %18207 = tanh(%18205) /* ty=Tensor[(1, 1024), float32] */;
  %18208 = multiply(%18206, %18207) /* ty=Tensor[(1, 1024), float32] */;
  %18209 = (%18208, %18165) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18210 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18211 = concatenate(%18209, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18212 = concatenate(%18210, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18213 = nn.dense(%18211, %18212, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18214 = add(%18213, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18215 = add(%18214, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18216 = split(%18215, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18217 = %18216.3 /* ty=Tensor[(1, 1024), float32] */;
  %18218 = %18216.1 /* ty=Tensor[(1, 1024), float32] */;
  %18219 = sigmoid(%18218) /* ty=Tensor[(1, 1024), float32] */;
  %18220 = %18216.0 /* ty=Tensor[(1, 1024), float32] */;
  %18221 = %18216.2 /* ty=Tensor[(1, 1024), float32] */;
  %18222 = sigmoid(%18220) /* ty=Tensor[(1, 1024), float32] */;
  %18223 = tanh(%18221) /* ty=Tensor[(1, 1024), float32] */;
  %18224 = multiply(%18219, %18162) /* ty=Tensor[(1, 1024), float32] */;
  %18225 = multiply(%18222, %18223) /* ty=Tensor[(1, 1024), float32] */;
  %18226 = add(%18224, %18225) /* ty=Tensor[(1, 1024), float32] */;
  %18227 = sigmoid(%18217) /* ty=Tensor[(1, 1024), float32] */;
  %18228 = tanh(%18226) /* ty=Tensor[(1, 1024), float32] */;
  %18229 = multiply(%18227, %18228) /* ty=Tensor[(1, 1024), float32] */;
  %18230 = multiply(%18185, %18186) /* ty=Tensor[(1, 1024), float32] */;
  %18231 = (%18229, %18230) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18232 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18233 = concatenate(%18231, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18234 = concatenate(%18232, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18235 = nn.dense(%18233, %18234, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18236 = add(%18235, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18237 = add(%18236, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18238 = split(%18237, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18239 = %18238.3 /* ty=Tensor[(1, 1024), float32] */;
  %18240 = %18238.1 /* ty=Tensor[(1, 1024), float32] */;
  %18241 = sigmoid(%18240) /* ty=Tensor[(1, 1024), float32] */;
  %18242 = %18238.0 /* ty=Tensor[(1, 1024), float32] */;
  %18243 = %18238.2 /* ty=Tensor[(1, 1024), float32] */;
  %18244 = sigmoid(%18242) /* ty=Tensor[(1, 1024), float32] */;
  %18245 = tanh(%18243) /* ty=Tensor[(1, 1024), float32] */;
  %18246 = multiply(%18241, %18184) /* ty=Tensor[(1, 1024), float32] */;
  %18247 = multiply(%18244, %18245) /* ty=Tensor[(1, 1024), float32] */;
  %18248 = add(%18246, %18247) /* ty=Tensor[(1, 1024), float32] */;
  %18249 = sigmoid(%18239) /* ty=Tensor[(1, 1024), float32] */;
  %18250 = tanh(%18248) /* ty=Tensor[(1, 1024), float32] */;
  %18251 = %12788.85 /* ty=Tensor[(1, 2048), float32] */;
  %18252 = (%18251, %18208) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18253 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18254 = concatenate(%18252, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18255 = concatenate(%18253, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18256 = nn.dense(%18254, %18255, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18257 = add(%18256, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18258 = add(%18257, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18259 = split(%18258, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18260 = %18259.3 /* ty=Tensor[(1, 1024), float32] */;
  %18261 = %18259.1 /* ty=Tensor[(1, 1024), float32] */;
  %18262 = sigmoid(%18261) /* ty=Tensor[(1, 1024), float32] */;
  %18263 = %18259.0 /* ty=Tensor[(1, 1024), float32] */;
  %18264 = %18259.2 /* ty=Tensor[(1, 1024), float32] */;
  %18265 = sigmoid(%18263) /* ty=Tensor[(1, 1024), float32] */;
  %18266 = tanh(%18264) /* ty=Tensor[(1, 1024), float32] */;
  %18267 = multiply(%18262, %18205) /* ty=Tensor[(1, 1024), float32] */;
  %18268 = multiply(%18265, %18266) /* ty=Tensor[(1, 1024), float32] */;
  %18269 = add(%18267, %18268) /* ty=Tensor[(1, 1024), float32] */;
  %18270 = sigmoid(%18260) /* ty=Tensor[(1, 1024), float32] */;
  %18271 = tanh(%18269) /* ty=Tensor[(1, 1024), float32] */;
  %18272 = multiply(%18270, %18271) /* ty=Tensor[(1, 1024), float32] */;
  %18273 = (%18272, %18229) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18274 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18275 = concatenate(%18273, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18276 = concatenate(%18274, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18277 = nn.dense(%18275, %18276, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18278 = add(%18277, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18279 = add(%18278, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18280 = split(%18279, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18281 = %18280.3 /* ty=Tensor[(1, 1024), float32] */;
  %18282 = %18280.1 /* ty=Tensor[(1, 1024), float32] */;
  %18283 = sigmoid(%18282) /* ty=Tensor[(1, 1024), float32] */;
  %18284 = %18280.0 /* ty=Tensor[(1, 1024), float32] */;
  %18285 = %18280.2 /* ty=Tensor[(1, 1024), float32] */;
  %18286 = sigmoid(%18284) /* ty=Tensor[(1, 1024), float32] */;
  %18287 = tanh(%18285) /* ty=Tensor[(1, 1024), float32] */;
  %18288 = multiply(%18283, %18226) /* ty=Tensor[(1, 1024), float32] */;
  %18289 = multiply(%18286, %18287) /* ty=Tensor[(1, 1024), float32] */;
  %18290 = add(%18288, %18289) /* ty=Tensor[(1, 1024), float32] */;
  %18291 = sigmoid(%18281) /* ty=Tensor[(1, 1024), float32] */;
  %18292 = tanh(%18290) /* ty=Tensor[(1, 1024), float32] */;
  %18293 = multiply(%18291, %18292) /* ty=Tensor[(1, 1024), float32] */;
  %18294 = multiply(%18249, %18250) /* ty=Tensor[(1, 1024), float32] */;
  %18295 = (%18293, %18294) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18296 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18297 = concatenate(%18295, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18298 = concatenate(%18296, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18299 = nn.dense(%18297, %18298, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18300 = add(%18299, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18301 = add(%18300, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18302 = split(%18301, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18303 = %18302.3 /* ty=Tensor[(1, 1024), float32] */;
  %18304 = %18302.1 /* ty=Tensor[(1, 1024), float32] */;
  %18305 = sigmoid(%18304) /* ty=Tensor[(1, 1024), float32] */;
  %18306 = %18302.0 /* ty=Tensor[(1, 1024), float32] */;
  %18307 = %18302.2 /* ty=Tensor[(1, 1024), float32] */;
  %18308 = sigmoid(%18306) /* ty=Tensor[(1, 1024), float32] */;
  %18309 = tanh(%18307) /* ty=Tensor[(1, 1024), float32] */;
  %18310 = multiply(%18305, %18248) /* ty=Tensor[(1, 1024), float32] */;
  %18311 = multiply(%18308, %18309) /* ty=Tensor[(1, 1024), float32] */;
  %18312 = add(%18310, %18311) /* ty=Tensor[(1, 1024), float32] */;
  %18313 = sigmoid(%18303) /* ty=Tensor[(1, 1024), float32] */;
  %18314 = tanh(%18312) /* ty=Tensor[(1, 1024), float32] */;
  %18315 = %12788.86 /* ty=Tensor[(1, 2048), float32] */;
  %18316 = (%18315, %18272) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18317 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18318 = concatenate(%18316, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18319 = concatenate(%18317, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18320 = nn.dense(%18318, %18319, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18321 = add(%18320, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18322 = add(%18321, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18323 = split(%18322, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18324 = %18323.3 /* ty=Tensor[(1, 1024), float32] */;
  %18325 = %18323.1 /* ty=Tensor[(1, 1024), float32] */;
  %18326 = sigmoid(%18325) /* ty=Tensor[(1, 1024), float32] */;
  %18327 = %18323.0 /* ty=Tensor[(1, 1024), float32] */;
  %18328 = %18323.2 /* ty=Tensor[(1, 1024), float32] */;
  %18329 = sigmoid(%18327) /* ty=Tensor[(1, 1024), float32] */;
  %18330 = tanh(%18328) /* ty=Tensor[(1, 1024), float32] */;
  %18331 = multiply(%18326, %18269) /* ty=Tensor[(1, 1024), float32] */;
  %18332 = multiply(%18329, %18330) /* ty=Tensor[(1, 1024), float32] */;
  %18333 = add(%18331, %18332) /* ty=Tensor[(1, 1024), float32] */;
  %18334 = sigmoid(%18324) /* ty=Tensor[(1, 1024), float32] */;
  %18335 = tanh(%18333) /* ty=Tensor[(1, 1024), float32] */;
  %18336 = multiply(%18334, %18335) /* ty=Tensor[(1, 1024), float32] */;
  %18337 = (%18336, %18293) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18338 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18339 = concatenate(%18337, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18340 = concatenate(%18338, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18341 = nn.dense(%18339, %18340, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18342 = add(%18341, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18343 = add(%18342, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18344 = split(%18343, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18345 = %18344.3 /* ty=Tensor[(1, 1024), float32] */;
  %18346 = %18344.1 /* ty=Tensor[(1, 1024), float32] */;
  %18347 = sigmoid(%18346) /* ty=Tensor[(1, 1024), float32] */;
  %18348 = %18344.0 /* ty=Tensor[(1, 1024), float32] */;
  %18349 = %18344.2 /* ty=Tensor[(1, 1024), float32] */;
  %18350 = sigmoid(%18348) /* ty=Tensor[(1, 1024), float32] */;
  %18351 = tanh(%18349) /* ty=Tensor[(1, 1024), float32] */;
  %18352 = multiply(%18347, %18290) /* ty=Tensor[(1, 1024), float32] */;
  %18353 = multiply(%18350, %18351) /* ty=Tensor[(1, 1024), float32] */;
  %18354 = add(%18352, %18353) /* ty=Tensor[(1, 1024), float32] */;
  %18355 = sigmoid(%18345) /* ty=Tensor[(1, 1024), float32] */;
  %18356 = tanh(%18354) /* ty=Tensor[(1, 1024), float32] */;
  %18357 = multiply(%18355, %18356) /* ty=Tensor[(1, 1024), float32] */;
  %18358 = multiply(%18313, %18314) /* ty=Tensor[(1, 1024), float32] */;
  %18359 = (%18357, %18358) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18360 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18361 = concatenate(%18359, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18362 = concatenate(%18360, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18363 = nn.dense(%18361, %18362, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18364 = add(%18363, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18365 = add(%18364, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18366 = split(%18365, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18367 = %18366.3 /* ty=Tensor[(1, 1024), float32] */;
  %18368 = %18366.1 /* ty=Tensor[(1, 1024), float32] */;
  %18369 = sigmoid(%18368) /* ty=Tensor[(1, 1024), float32] */;
  %18370 = %18366.0 /* ty=Tensor[(1, 1024), float32] */;
  %18371 = %18366.2 /* ty=Tensor[(1, 1024), float32] */;
  %18372 = sigmoid(%18370) /* ty=Tensor[(1, 1024), float32] */;
  %18373 = tanh(%18371) /* ty=Tensor[(1, 1024), float32] */;
  %18374 = multiply(%18369, %18312) /* ty=Tensor[(1, 1024), float32] */;
  %18375 = multiply(%18372, %18373) /* ty=Tensor[(1, 1024), float32] */;
  %18376 = add(%18374, %18375) /* ty=Tensor[(1, 1024), float32] */;
  %18377 = sigmoid(%18367) /* ty=Tensor[(1, 1024), float32] */;
  %18378 = tanh(%18376) /* ty=Tensor[(1, 1024), float32] */;
  %18379 = %12788.87 /* ty=Tensor[(1, 2048), float32] */;
  %18380 = (%18379, %18336) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18381 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18382 = concatenate(%18380, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18383 = concatenate(%18381, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18384 = nn.dense(%18382, %18383, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18385 = add(%18384, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18386 = add(%18385, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18387 = split(%18386, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18388 = %18387.3 /* ty=Tensor[(1, 1024), float32] */;
  %18389 = %18387.1 /* ty=Tensor[(1, 1024), float32] */;
  %18390 = sigmoid(%18389) /* ty=Tensor[(1, 1024), float32] */;
  %18391 = %18387.0 /* ty=Tensor[(1, 1024), float32] */;
  %18392 = %18387.2 /* ty=Tensor[(1, 1024), float32] */;
  %18393 = sigmoid(%18391) /* ty=Tensor[(1, 1024), float32] */;
  %18394 = tanh(%18392) /* ty=Tensor[(1, 1024), float32] */;
  %18395 = multiply(%18390, %18333) /* ty=Tensor[(1, 1024), float32] */;
  %18396 = multiply(%18393, %18394) /* ty=Tensor[(1, 1024), float32] */;
  %18397 = add(%18395, %18396) /* ty=Tensor[(1, 1024), float32] */;
  %18398 = sigmoid(%18388) /* ty=Tensor[(1, 1024), float32] */;
  %18399 = tanh(%18397) /* ty=Tensor[(1, 1024), float32] */;
  %18400 = multiply(%18398, %18399) /* ty=Tensor[(1, 1024), float32] */;
  %18401 = (%18400, %18357) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18402 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18403 = concatenate(%18401, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18404 = concatenate(%18402, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18405 = nn.dense(%18403, %18404, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18406 = add(%18405, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18407 = add(%18406, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18408 = split(%18407, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18409 = %18408.3 /* ty=Tensor[(1, 1024), float32] */;
  %18410 = %18408.1 /* ty=Tensor[(1, 1024), float32] */;
  %18411 = sigmoid(%18410) /* ty=Tensor[(1, 1024), float32] */;
  %18412 = %18408.0 /* ty=Tensor[(1, 1024), float32] */;
  %18413 = %18408.2 /* ty=Tensor[(1, 1024), float32] */;
  %18414 = sigmoid(%18412) /* ty=Tensor[(1, 1024), float32] */;
  %18415 = tanh(%18413) /* ty=Tensor[(1, 1024), float32] */;
  %18416 = multiply(%18411, %18354) /* ty=Tensor[(1, 1024), float32] */;
  %18417 = multiply(%18414, %18415) /* ty=Tensor[(1, 1024), float32] */;
  %18418 = add(%18416, %18417) /* ty=Tensor[(1, 1024), float32] */;
  %18419 = sigmoid(%18409) /* ty=Tensor[(1, 1024), float32] */;
  %18420 = tanh(%18418) /* ty=Tensor[(1, 1024), float32] */;
  %18421 = multiply(%18419, %18420) /* ty=Tensor[(1, 1024), float32] */;
  %18422 = multiply(%18377, %18378) /* ty=Tensor[(1, 1024), float32] */;
  %18423 = (%18421, %18422) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18424 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18425 = concatenate(%18423, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18426 = concatenate(%18424, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18427 = nn.dense(%18425, %18426, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18428 = add(%18427, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18429 = add(%18428, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18430 = split(%18429, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18431 = %18430.3 /* ty=Tensor[(1, 1024), float32] */;
  %18432 = %18430.1 /* ty=Tensor[(1, 1024), float32] */;
  %18433 = sigmoid(%18432) /* ty=Tensor[(1, 1024), float32] */;
  %18434 = %18430.0 /* ty=Tensor[(1, 1024), float32] */;
  %18435 = %18430.2 /* ty=Tensor[(1, 1024), float32] */;
  %18436 = sigmoid(%18434) /* ty=Tensor[(1, 1024), float32] */;
  %18437 = tanh(%18435) /* ty=Tensor[(1, 1024), float32] */;
  %18438 = multiply(%18433, %18376) /* ty=Tensor[(1, 1024), float32] */;
  %18439 = multiply(%18436, %18437) /* ty=Tensor[(1, 1024), float32] */;
  %18440 = add(%18438, %18439) /* ty=Tensor[(1, 1024), float32] */;
  %18441 = sigmoid(%18431) /* ty=Tensor[(1, 1024), float32] */;
  %18442 = tanh(%18440) /* ty=Tensor[(1, 1024), float32] */;
  %18443 = %12788.88 /* ty=Tensor[(1, 2048), float32] */;
  %18444 = (%18443, %18400) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18445 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18446 = concatenate(%18444, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18447 = concatenate(%18445, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18448 = nn.dense(%18446, %18447, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18449 = add(%18448, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18450 = add(%18449, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18451 = split(%18450, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18452 = %18451.3 /* ty=Tensor[(1, 1024), float32] */;
  %18453 = %18451.1 /* ty=Tensor[(1, 1024), float32] */;
  %18454 = sigmoid(%18453) /* ty=Tensor[(1, 1024), float32] */;
  %18455 = %18451.0 /* ty=Tensor[(1, 1024), float32] */;
  %18456 = %18451.2 /* ty=Tensor[(1, 1024), float32] */;
  %18457 = sigmoid(%18455) /* ty=Tensor[(1, 1024), float32] */;
  %18458 = tanh(%18456) /* ty=Tensor[(1, 1024), float32] */;
  %18459 = multiply(%18454, %18397) /* ty=Tensor[(1, 1024), float32] */;
  %18460 = multiply(%18457, %18458) /* ty=Tensor[(1, 1024), float32] */;
  %18461 = add(%18459, %18460) /* ty=Tensor[(1, 1024), float32] */;
  %18462 = sigmoid(%18452) /* ty=Tensor[(1, 1024), float32] */;
  %18463 = tanh(%18461) /* ty=Tensor[(1, 1024), float32] */;
  %18464 = multiply(%18462, %18463) /* ty=Tensor[(1, 1024), float32] */;
  %18465 = (%18464, %18421) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18466 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18467 = concatenate(%18465, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18468 = concatenate(%18466, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18469 = nn.dense(%18467, %18468, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18470 = add(%18469, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18471 = add(%18470, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18472 = split(%18471, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18473 = %18472.3 /* ty=Tensor[(1, 1024), float32] */;
  %18474 = %18472.1 /* ty=Tensor[(1, 1024), float32] */;
  %18475 = sigmoid(%18474) /* ty=Tensor[(1, 1024), float32] */;
  %18476 = %18472.0 /* ty=Tensor[(1, 1024), float32] */;
  %18477 = %18472.2 /* ty=Tensor[(1, 1024), float32] */;
  %18478 = sigmoid(%18476) /* ty=Tensor[(1, 1024), float32] */;
  %18479 = tanh(%18477) /* ty=Tensor[(1, 1024), float32] */;
  %18480 = multiply(%18475, %18418) /* ty=Tensor[(1, 1024), float32] */;
  %18481 = multiply(%18478, %18479) /* ty=Tensor[(1, 1024), float32] */;
  %18482 = add(%18480, %18481) /* ty=Tensor[(1, 1024), float32] */;
  %18483 = sigmoid(%18473) /* ty=Tensor[(1, 1024), float32] */;
  %18484 = tanh(%18482) /* ty=Tensor[(1, 1024), float32] */;
  %18485 = multiply(%18483, %18484) /* ty=Tensor[(1, 1024), float32] */;
  %18486 = multiply(%18441, %18442) /* ty=Tensor[(1, 1024), float32] */;
  %18487 = (%18485, %18486) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18488 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18489 = concatenate(%18487, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18490 = concatenate(%18488, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18491 = nn.dense(%18489, %18490, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18492 = add(%18491, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18493 = add(%18492, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18494 = split(%18493, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18495 = %18494.3 /* ty=Tensor[(1, 1024), float32] */;
  %18496 = %18494.1 /* ty=Tensor[(1, 1024), float32] */;
  %18497 = sigmoid(%18496) /* ty=Tensor[(1, 1024), float32] */;
  %18498 = %18494.0 /* ty=Tensor[(1, 1024), float32] */;
  %18499 = %18494.2 /* ty=Tensor[(1, 1024), float32] */;
  %18500 = sigmoid(%18498) /* ty=Tensor[(1, 1024), float32] */;
  %18501 = tanh(%18499) /* ty=Tensor[(1, 1024), float32] */;
  %18502 = multiply(%18497, %18440) /* ty=Tensor[(1, 1024), float32] */;
  %18503 = multiply(%18500, %18501) /* ty=Tensor[(1, 1024), float32] */;
  %18504 = add(%18502, %18503) /* ty=Tensor[(1, 1024), float32] */;
  %18505 = sigmoid(%18495) /* ty=Tensor[(1, 1024), float32] */;
  %18506 = tanh(%18504) /* ty=Tensor[(1, 1024), float32] */;
  %18507 = %12788.89 /* ty=Tensor[(1, 2048), float32] */;
  %18508 = (%18507, %18464) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18509 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18510 = concatenate(%18508, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18511 = concatenate(%18509, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18512 = nn.dense(%18510, %18511, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18513 = add(%18512, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18514 = add(%18513, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18515 = split(%18514, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18516 = %18515.3 /* ty=Tensor[(1, 1024), float32] */;
  %18517 = %18515.1 /* ty=Tensor[(1, 1024), float32] */;
  %18518 = sigmoid(%18517) /* ty=Tensor[(1, 1024), float32] */;
  %18519 = %18515.0 /* ty=Tensor[(1, 1024), float32] */;
  %18520 = %18515.2 /* ty=Tensor[(1, 1024), float32] */;
  %18521 = sigmoid(%18519) /* ty=Tensor[(1, 1024), float32] */;
  %18522 = tanh(%18520) /* ty=Tensor[(1, 1024), float32] */;
  %18523 = multiply(%18518, %18461) /* ty=Tensor[(1, 1024), float32] */;
  %18524 = multiply(%18521, %18522) /* ty=Tensor[(1, 1024), float32] */;
  %18525 = add(%18523, %18524) /* ty=Tensor[(1, 1024), float32] */;
  %18526 = sigmoid(%18516) /* ty=Tensor[(1, 1024), float32] */;
  %18527 = tanh(%18525) /* ty=Tensor[(1, 1024), float32] */;
  %18528 = multiply(%18526, %18527) /* ty=Tensor[(1, 1024), float32] */;
  %18529 = (%18528, %18485) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18530 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18531 = concatenate(%18529, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18532 = concatenate(%18530, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18533 = nn.dense(%18531, %18532, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18534 = add(%18533, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18535 = add(%18534, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18536 = split(%18535, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18537 = %18536.3 /* ty=Tensor[(1, 1024), float32] */;
  %18538 = %18536.1 /* ty=Tensor[(1, 1024), float32] */;
  %18539 = sigmoid(%18538) /* ty=Tensor[(1, 1024), float32] */;
  %18540 = %18536.0 /* ty=Tensor[(1, 1024), float32] */;
  %18541 = %18536.2 /* ty=Tensor[(1, 1024), float32] */;
  %18542 = sigmoid(%18540) /* ty=Tensor[(1, 1024), float32] */;
  %18543 = tanh(%18541) /* ty=Tensor[(1, 1024), float32] */;
  %18544 = multiply(%18539, %18482) /* ty=Tensor[(1, 1024), float32] */;
  %18545 = multiply(%18542, %18543) /* ty=Tensor[(1, 1024), float32] */;
  %18546 = add(%18544, %18545) /* ty=Tensor[(1, 1024), float32] */;
  %18547 = sigmoid(%18537) /* ty=Tensor[(1, 1024), float32] */;
  %18548 = tanh(%18546) /* ty=Tensor[(1, 1024), float32] */;
  %18549 = multiply(%18547, %18548) /* ty=Tensor[(1, 1024), float32] */;
  %18550 = multiply(%18505, %18506) /* ty=Tensor[(1, 1024), float32] */;
  %18551 = (%18549, %18550) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18552 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18553 = concatenate(%18551, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18554 = concatenate(%18552, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18555 = nn.dense(%18553, %18554, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18556 = add(%18555, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18557 = add(%18556, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18558 = split(%18557, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18559 = %18558.3 /* ty=Tensor[(1, 1024), float32] */;
  %18560 = %18558.1 /* ty=Tensor[(1, 1024), float32] */;
  %18561 = sigmoid(%18560) /* ty=Tensor[(1, 1024), float32] */;
  %18562 = %18558.0 /* ty=Tensor[(1, 1024), float32] */;
  %18563 = %18558.2 /* ty=Tensor[(1, 1024), float32] */;
  %18564 = sigmoid(%18562) /* ty=Tensor[(1, 1024), float32] */;
  %18565 = tanh(%18563) /* ty=Tensor[(1, 1024), float32] */;
  %18566 = multiply(%18561, %18504) /* ty=Tensor[(1, 1024), float32] */;
  %18567 = multiply(%18564, %18565) /* ty=Tensor[(1, 1024), float32] */;
  %18568 = add(%18566, %18567) /* ty=Tensor[(1, 1024), float32] */;
  %18569 = sigmoid(%18559) /* ty=Tensor[(1, 1024), float32] */;
  %18570 = tanh(%18568) /* ty=Tensor[(1, 1024), float32] */;
  %18571 = %12788.90 /* ty=Tensor[(1, 2048), float32] */;
  %18572 = (%18571, %18528) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18573 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18574 = concatenate(%18572, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18575 = concatenate(%18573, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18576 = nn.dense(%18574, %18575, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18577 = add(%18576, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18578 = add(%18577, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18579 = split(%18578, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18580 = %18579.3 /* ty=Tensor[(1, 1024), float32] */;
  %18581 = %18579.1 /* ty=Tensor[(1, 1024), float32] */;
  %18582 = sigmoid(%18581) /* ty=Tensor[(1, 1024), float32] */;
  %18583 = %18579.0 /* ty=Tensor[(1, 1024), float32] */;
  %18584 = %18579.2 /* ty=Tensor[(1, 1024), float32] */;
  %18585 = sigmoid(%18583) /* ty=Tensor[(1, 1024), float32] */;
  %18586 = tanh(%18584) /* ty=Tensor[(1, 1024), float32] */;
  %18587 = multiply(%18582, %18525) /* ty=Tensor[(1, 1024), float32] */;
  %18588 = multiply(%18585, %18586) /* ty=Tensor[(1, 1024), float32] */;
  %18589 = add(%18587, %18588) /* ty=Tensor[(1, 1024), float32] */;
  %18590 = sigmoid(%18580) /* ty=Tensor[(1, 1024), float32] */;
  %18591 = tanh(%18589) /* ty=Tensor[(1, 1024), float32] */;
  %18592 = multiply(%18590, %18591) /* ty=Tensor[(1, 1024), float32] */;
  %18593 = (%18592, %18549) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18594 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18595 = concatenate(%18593, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18596 = concatenate(%18594, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18597 = nn.dense(%18595, %18596, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18598 = add(%18597, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18599 = add(%18598, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18600 = split(%18599, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18601 = %18600.3 /* ty=Tensor[(1, 1024), float32] */;
  %18602 = %18600.1 /* ty=Tensor[(1, 1024), float32] */;
  %18603 = sigmoid(%18602) /* ty=Tensor[(1, 1024), float32] */;
  %18604 = %18600.0 /* ty=Tensor[(1, 1024), float32] */;
  %18605 = %18600.2 /* ty=Tensor[(1, 1024), float32] */;
  %18606 = sigmoid(%18604) /* ty=Tensor[(1, 1024), float32] */;
  %18607 = tanh(%18605) /* ty=Tensor[(1, 1024), float32] */;
  %18608 = multiply(%18603, %18546) /* ty=Tensor[(1, 1024), float32] */;
  %18609 = multiply(%18606, %18607) /* ty=Tensor[(1, 1024), float32] */;
  %18610 = add(%18608, %18609) /* ty=Tensor[(1, 1024), float32] */;
  %18611 = sigmoid(%18601) /* ty=Tensor[(1, 1024), float32] */;
  %18612 = tanh(%18610) /* ty=Tensor[(1, 1024), float32] */;
  %18613 = multiply(%18611, %18612) /* ty=Tensor[(1, 1024), float32] */;
  %18614 = multiply(%18569, %18570) /* ty=Tensor[(1, 1024), float32] */;
  %18615 = (%18613, %18614) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18616 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18617 = concatenate(%18615, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18618 = concatenate(%18616, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18619 = nn.dense(%18617, %18618, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18620 = add(%18619, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18621 = add(%18620, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18622 = split(%18621, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18623 = %18622.3 /* ty=Tensor[(1, 1024), float32] */;
  %18624 = %18622.1 /* ty=Tensor[(1, 1024), float32] */;
  %18625 = sigmoid(%18624) /* ty=Tensor[(1, 1024), float32] */;
  %18626 = %18622.0 /* ty=Tensor[(1, 1024), float32] */;
  %18627 = %18622.2 /* ty=Tensor[(1, 1024), float32] */;
  %18628 = sigmoid(%18626) /* ty=Tensor[(1, 1024), float32] */;
  %18629 = tanh(%18627) /* ty=Tensor[(1, 1024), float32] */;
  %18630 = multiply(%18625, %18568) /* ty=Tensor[(1, 1024), float32] */;
  %18631 = multiply(%18628, %18629) /* ty=Tensor[(1, 1024), float32] */;
  %18632 = add(%18630, %18631) /* ty=Tensor[(1, 1024), float32] */;
  %18633 = sigmoid(%18623) /* ty=Tensor[(1, 1024), float32] */;
  %18634 = tanh(%18632) /* ty=Tensor[(1, 1024), float32] */;
  %18635 = %12788.91 /* ty=Tensor[(1, 2048), float32] */;
  %18636 = (%18635, %18592) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18637 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18638 = concatenate(%18636, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18639 = concatenate(%18637, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18640 = nn.dense(%18638, %18639, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18641 = add(%18640, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18642 = add(%18641, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18643 = split(%18642, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18644 = %18643.3 /* ty=Tensor[(1, 1024), float32] */;
  %18645 = %18643.1 /* ty=Tensor[(1, 1024), float32] */;
  %18646 = sigmoid(%18645) /* ty=Tensor[(1, 1024), float32] */;
  %18647 = %18643.0 /* ty=Tensor[(1, 1024), float32] */;
  %18648 = %18643.2 /* ty=Tensor[(1, 1024), float32] */;
  %18649 = sigmoid(%18647) /* ty=Tensor[(1, 1024), float32] */;
  %18650 = tanh(%18648) /* ty=Tensor[(1, 1024), float32] */;
  %18651 = multiply(%18646, %18589) /* ty=Tensor[(1, 1024), float32] */;
  %18652 = multiply(%18649, %18650) /* ty=Tensor[(1, 1024), float32] */;
  %18653 = add(%18651, %18652) /* ty=Tensor[(1, 1024), float32] */;
  %18654 = sigmoid(%18644) /* ty=Tensor[(1, 1024), float32] */;
  %18655 = tanh(%18653) /* ty=Tensor[(1, 1024), float32] */;
  %18656 = multiply(%18654, %18655) /* ty=Tensor[(1, 1024), float32] */;
  %18657 = (%18656, %18613) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18658 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18659 = concatenate(%18657, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18660 = concatenate(%18658, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18661 = nn.dense(%18659, %18660, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18662 = add(%18661, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18663 = add(%18662, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18664 = split(%18663, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18665 = %18664.3 /* ty=Tensor[(1, 1024), float32] */;
  %18666 = %18664.1 /* ty=Tensor[(1, 1024), float32] */;
  %18667 = sigmoid(%18666) /* ty=Tensor[(1, 1024), float32] */;
  %18668 = %18664.0 /* ty=Tensor[(1, 1024), float32] */;
  %18669 = %18664.2 /* ty=Tensor[(1, 1024), float32] */;
  %18670 = sigmoid(%18668) /* ty=Tensor[(1, 1024), float32] */;
  %18671 = tanh(%18669) /* ty=Tensor[(1, 1024), float32] */;
  %18672 = multiply(%18667, %18610) /* ty=Tensor[(1, 1024), float32] */;
  %18673 = multiply(%18670, %18671) /* ty=Tensor[(1, 1024), float32] */;
  %18674 = add(%18672, %18673) /* ty=Tensor[(1, 1024), float32] */;
  %18675 = sigmoid(%18665) /* ty=Tensor[(1, 1024), float32] */;
  %18676 = tanh(%18674) /* ty=Tensor[(1, 1024), float32] */;
  %18677 = multiply(%18675, %18676) /* ty=Tensor[(1, 1024), float32] */;
  %18678 = multiply(%18633, %18634) /* ty=Tensor[(1, 1024), float32] */;
  %18679 = (%18677, %18678) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18680 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18681 = concatenate(%18679, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18682 = concatenate(%18680, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18683 = nn.dense(%18681, %18682, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18684 = add(%18683, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18685 = add(%18684, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18686 = split(%18685, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18687 = %18686.3 /* ty=Tensor[(1, 1024), float32] */;
  %18688 = %18686.1 /* ty=Tensor[(1, 1024), float32] */;
  %18689 = sigmoid(%18688) /* ty=Tensor[(1, 1024), float32] */;
  %18690 = %18686.0 /* ty=Tensor[(1, 1024), float32] */;
  %18691 = %18686.2 /* ty=Tensor[(1, 1024), float32] */;
  %18692 = sigmoid(%18690) /* ty=Tensor[(1, 1024), float32] */;
  %18693 = tanh(%18691) /* ty=Tensor[(1, 1024), float32] */;
  %18694 = multiply(%18689, %18632) /* ty=Tensor[(1, 1024), float32] */;
  %18695 = multiply(%18692, %18693) /* ty=Tensor[(1, 1024), float32] */;
  %18696 = add(%18694, %18695) /* ty=Tensor[(1, 1024), float32] */;
  %18697 = sigmoid(%18687) /* ty=Tensor[(1, 1024), float32] */;
  %18698 = tanh(%18696) /* ty=Tensor[(1, 1024), float32] */;
  %18699 = %12788.92 /* ty=Tensor[(1, 2048), float32] */;
  %18700 = (%18699, %18656) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18701 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18702 = concatenate(%18700, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18703 = concatenate(%18701, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18704 = nn.dense(%18702, %18703, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18705 = add(%18704, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18706 = add(%18705, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18707 = split(%18706, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18708 = %18707.3 /* ty=Tensor[(1, 1024), float32] */;
  %18709 = %18707.1 /* ty=Tensor[(1, 1024), float32] */;
  %18710 = sigmoid(%18709) /* ty=Tensor[(1, 1024), float32] */;
  %18711 = %18707.0 /* ty=Tensor[(1, 1024), float32] */;
  %18712 = %18707.2 /* ty=Tensor[(1, 1024), float32] */;
  %18713 = sigmoid(%18711) /* ty=Tensor[(1, 1024), float32] */;
  %18714 = tanh(%18712) /* ty=Tensor[(1, 1024), float32] */;
  %18715 = multiply(%18710, %18653) /* ty=Tensor[(1, 1024), float32] */;
  %18716 = multiply(%18713, %18714) /* ty=Tensor[(1, 1024), float32] */;
  %18717 = add(%18715, %18716) /* ty=Tensor[(1, 1024), float32] */;
  %18718 = sigmoid(%18708) /* ty=Tensor[(1, 1024), float32] */;
  %18719 = tanh(%18717) /* ty=Tensor[(1, 1024), float32] */;
  %18720 = multiply(%18718, %18719) /* ty=Tensor[(1, 1024), float32] */;
  %18721 = (%18720, %18677) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18722 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18723 = concatenate(%18721, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18724 = concatenate(%18722, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18725 = nn.dense(%18723, %18724, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18726 = add(%18725, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18727 = add(%18726, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18728 = split(%18727, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18729 = %18728.3 /* ty=Tensor[(1, 1024), float32] */;
  %18730 = %18728.1 /* ty=Tensor[(1, 1024), float32] */;
  %18731 = sigmoid(%18730) /* ty=Tensor[(1, 1024), float32] */;
  %18732 = %18728.0 /* ty=Tensor[(1, 1024), float32] */;
  %18733 = %18728.2 /* ty=Tensor[(1, 1024), float32] */;
  %18734 = sigmoid(%18732) /* ty=Tensor[(1, 1024), float32] */;
  %18735 = tanh(%18733) /* ty=Tensor[(1, 1024), float32] */;
  %18736 = multiply(%18731, %18674) /* ty=Tensor[(1, 1024), float32] */;
  %18737 = multiply(%18734, %18735) /* ty=Tensor[(1, 1024), float32] */;
  %18738 = add(%18736, %18737) /* ty=Tensor[(1, 1024), float32] */;
  %18739 = sigmoid(%18729) /* ty=Tensor[(1, 1024), float32] */;
  %18740 = tanh(%18738) /* ty=Tensor[(1, 1024), float32] */;
  %18741 = multiply(%18739, %18740) /* ty=Tensor[(1, 1024), float32] */;
  %18742 = multiply(%18697, %18698) /* ty=Tensor[(1, 1024), float32] */;
  %18743 = (%18741, %18742) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18744 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18745 = concatenate(%18743, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18746 = concatenate(%18744, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18747 = nn.dense(%18745, %18746, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18748 = add(%18747, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18749 = add(%18748, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18750 = split(%18749, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18751 = %18750.3 /* ty=Tensor[(1, 1024), float32] */;
  %18752 = %18750.1 /* ty=Tensor[(1, 1024), float32] */;
  %18753 = sigmoid(%18752) /* ty=Tensor[(1, 1024), float32] */;
  %18754 = %18750.0 /* ty=Tensor[(1, 1024), float32] */;
  %18755 = %18750.2 /* ty=Tensor[(1, 1024), float32] */;
  %18756 = sigmoid(%18754) /* ty=Tensor[(1, 1024), float32] */;
  %18757 = tanh(%18755) /* ty=Tensor[(1, 1024), float32] */;
  %18758 = multiply(%18753, %18696) /* ty=Tensor[(1, 1024), float32] */;
  %18759 = multiply(%18756, %18757) /* ty=Tensor[(1, 1024), float32] */;
  %18760 = add(%18758, %18759) /* ty=Tensor[(1, 1024), float32] */;
  %18761 = sigmoid(%18751) /* ty=Tensor[(1, 1024), float32] */;
  %18762 = tanh(%18760) /* ty=Tensor[(1, 1024), float32] */;
  %18763 = %12788.93 /* ty=Tensor[(1, 2048), float32] */;
  %18764 = (%18763, %18720) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18765 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18766 = concatenate(%18764, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18767 = concatenate(%18765, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18768 = nn.dense(%18766, %18767, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18769 = add(%18768, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18770 = add(%18769, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18771 = split(%18770, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18772 = %18771.3 /* ty=Tensor[(1, 1024), float32] */;
  %18773 = %18771.1 /* ty=Tensor[(1, 1024), float32] */;
  %18774 = sigmoid(%18773) /* ty=Tensor[(1, 1024), float32] */;
  %18775 = %18771.0 /* ty=Tensor[(1, 1024), float32] */;
  %18776 = %18771.2 /* ty=Tensor[(1, 1024), float32] */;
  %18777 = sigmoid(%18775) /* ty=Tensor[(1, 1024), float32] */;
  %18778 = tanh(%18776) /* ty=Tensor[(1, 1024), float32] */;
  %18779 = multiply(%18774, %18717) /* ty=Tensor[(1, 1024), float32] */;
  %18780 = multiply(%18777, %18778) /* ty=Tensor[(1, 1024), float32] */;
  %18781 = add(%18779, %18780) /* ty=Tensor[(1, 1024), float32] */;
  %18782 = sigmoid(%18772) /* ty=Tensor[(1, 1024), float32] */;
  %18783 = tanh(%18781) /* ty=Tensor[(1, 1024), float32] */;
  %18784 = multiply(%18782, %18783) /* ty=Tensor[(1, 1024), float32] */;
  %18785 = (%18784, %18741) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18786 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18787 = concatenate(%18785, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18788 = concatenate(%18786, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18789 = nn.dense(%18787, %18788, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18790 = add(%18789, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18791 = add(%18790, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18792 = split(%18791, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18793 = %18792.3 /* ty=Tensor[(1, 1024), float32] */;
  %18794 = %18792.1 /* ty=Tensor[(1, 1024), float32] */;
  %18795 = sigmoid(%18794) /* ty=Tensor[(1, 1024), float32] */;
  %18796 = %18792.0 /* ty=Tensor[(1, 1024), float32] */;
  %18797 = %18792.2 /* ty=Tensor[(1, 1024), float32] */;
  %18798 = sigmoid(%18796) /* ty=Tensor[(1, 1024), float32] */;
  %18799 = tanh(%18797) /* ty=Tensor[(1, 1024), float32] */;
  %18800 = multiply(%18795, %18738) /* ty=Tensor[(1, 1024), float32] */;
  %18801 = multiply(%18798, %18799) /* ty=Tensor[(1, 1024), float32] */;
  %18802 = add(%18800, %18801) /* ty=Tensor[(1, 1024), float32] */;
  %18803 = sigmoid(%18793) /* ty=Tensor[(1, 1024), float32] */;
  %18804 = tanh(%18802) /* ty=Tensor[(1, 1024), float32] */;
  %18805 = multiply(%18803, %18804) /* ty=Tensor[(1, 1024), float32] */;
  %18806 = multiply(%18761, %18762) /* ty=Tensor[(1, 1024), float32] */;
  %18807 = (%18805, %18806) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18808 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18809 = concatenate(%18807, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18810 = concatenate(%18808, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18811 = nn.dense(%18809, %18810, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18812 = add(%18811, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18813 = add(%18812, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18814 = split(%18813, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18815 = %18814.3 /* ty=Tensor[(1, 1024), float32] */;
  %18816 = %18814.1 /* ty=Tensor[(1, 1024), float32] */;
  %18817 = sigmoid(%18816) /* ty=Tensor[(1, 1024), float32] */;
  %18818 = %18814.0 /* ty=Tensor[(1, 1024), float32] */;
  %18819 = %18814.2 /* ty=Tensor[(1, 1024), float32] */;
  %18820 = sigmoid(%18818) /* ty=Tensor[(1, 1024), float32] */;
  %18821 = tanh(%18819) /* ty=Tensor[(1, 1024), float32] */;
  %18822 = multiply(%18817, %18760) /* ty=Tensor[(1, 1024), float32] */;
  %18823 = multiply(%18820, %18821) /* ty=Tensor[(1, 1024), float32] */;
  %18824 = add(%18822, %18823) /* ty=Tensor[(1, 1024), float32] */;
  %18825 = sigmoid(%18815) /* ty=Tensor[(1, 1024), float32] */;
  %18826 = tanh(%18824) /* ty=Tensor[(1, 1024), float32] */;
  %18827 = %12788.94 /* ty=Tensor[(1, 2048), float32] */;
  %18828 = (%18827, %18784) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18829 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18830 = concatenate(%18828, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18831 = concatenate(%18829, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18832 = nn.dense(%18830, %18831, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18833 = add(%18832, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18834 = add(%18833, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18835 = split(%18834, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18836 = %18835.3 /* ty=Tensor[(1, 1024), float32] */;
  %18837 = %18835.1 /* ty=Tensor[(1, 1024), float32] */;
  %18838 = sigmoid(%18837) /* ty=Tensor[(1, 1024), float32] */;
  %18839 = %18835.0 /* ty=Tensor[(1, 1024), float32] */;
  %18840 = %18835.2 /* ty=Tensor[(1, 1024), float32] */;
  %18841 = sigmoid(%18839) /* ty=Tensor[(1, 1024), float32] */;
  %18842 = tanh(%18840) /* ty=Tensor[(1, 1024), float32] */;
  %18843 = multiply(%18838, %18781) /* ty=Tensor[(1, 1024), float32] */;
  %18844 = multiply(%18841, %18842) /* ty=Tensor[(1, 1024), float32] */;
  %18845 = add(%18843, %18844) /* ty=Tensor[(1, 1024), float32] */;
  %18846 = sigmoid(%18836) /* ty=Tensor[(1, 1024), float32] */;
  %18847 = tanh(%18845) /* ty=Tensor[(1, 1024), float32] */;
  %18848 = multiply(%18846, %18847) /* ty=Tensor[(1, 1024), float32] */;
  %18849 = (%18848, %18805) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18850 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18851 = concatenate(%18849, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18852 = concatenate(%18850, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18853 = nn.dense(%18851, %18852, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18854 = add(%18853, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18855 = add(%18854, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18856 = split(%18855, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18857 = %18856.3 /* ty=Tensor[(1, 1024), float32] */;
  %18858 = %18856.1 /* ty=Tensor[(1, 1024), float32] */;
  %18859 = sigmoid(%18858) /* ty=Tensor[(1, 1024), float32] */;
  %18860 = %18856.0 /* ty=Tensor[(1, 1024), float32] */;
  %18861 = %18856.2 /* ty=Tensor[(1, 1024), float32] */;
  %18862 = sigmoid(%18860) /* ty=Tensor[(1, 1024), float32] */;
  %18863 = tanh(%18861) /* ty=Tensor[(1, 1024), float32] */;
  %18864 = multiply(%18859, %18802) /* ty=Tensor[(1, 1024), float32] */;
  %18865 = multiply(%18862, %18863) /* ty=Tensor[(1, 1024), float32] */;
  %18866 = add(%18864, %18865) /* ty=Tensor[(1, 1024), float32] */;
  %18867 = sigmoid(%18857) /* ty=Tensor[(1, 1024), float32] */;
  %18868 = tanh(%18866) /* ty=Tensor[(1, 1024), float32] */;
  %18869 = multiply(%18867, %18868) /* ty=Tensor[(1, 1024), float32] */;
  %18870 = multiply(%18825, %18826) /* ty=Tensor[(1, 1024), float32] */;
  %18871 = (%18869, %18870) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18872 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18873 = concatenate(%18871, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18874 = concatenate(%18872, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18875 = nn.dense(%18873, %18874, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18876 = add(%18875, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18877 = add(%18876, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18878 = split(%18877, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18879 = %18878.3 /* ty=Tensor[(1, 1024), float32] */;
  %18880 = %18878.1 /* ty=Tensor[(1, 1024), float32] */;
  %18881 = sigmoid(%18880) /* ty=Tensor[(1, 1024), float32] */;
  %18882 = %18878.0 /* ty=Tensor[(1, 1024), float32] */;
  %18883 = %18878.2 /* ty=Tensor[(1, 1024), float32] */;
  %18884 = sigmoid(%18882) /* ty=Tensor[(1, 1024), float32] */;
  %18885 = tanh(%18883) /* ty=Tensor[(1, 1024), float32] */;
  %18886 = multiply(%18881, %18824) /* ty=Tensor[(1, 1024), float32] */;
  %18887 = multiply(%18884, %18885) /* ty=Tensor[(1, 1024), float32] */;
  %18888 = add(%18886, %18887) /* ty=Tensor[(1, 1024), float32] */;
  %18889 = sigmoid(%18879) /* ty=Tensor[(1, 1024), float32] */;
  %18890 = tanh(%18888) /* ty=Tensor[(1, 1024), float32] */;
  %18891 = %12788.95 /* ty=Tensor[(1, 2048), float32] */;
  %18892 = (%18891, %18848) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18893 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18894 = concatenate(%18892, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18895 = concatenate(%18893, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18896 = nn.dense(%18894, %18895, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18897 = add(%18896, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18898 = add(%18897, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18899 = split(%18898, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18900 = %18899.3 /* ty=Tensor[(1, 1024), float32] */;
  %18901 = %18899.1 /* ty=Tensor[(1, 1024), float32] */;
  %18902 = sigmoid(%18901) /* ty=Tensor[(1, 1024), float32] */;
  %18903 = %18899.0 /* ty=Tensor[(1, 1024), float32] */;
  %18904 = %18899.2 /* ty=Tensor[(1, 1024), float32] */;
  %18905 = sigmoid(%18903) /* ty=Tensor[(1, 1024), float32] */;
  %18906 = tanh(%18904) /* ty=Tensor[(1, 1024), float32] */;
  %18907 = multiply(%18902, %18845) /* ty=Tensor[(1, 1024), float32] */;
  %18908 = multiply(%18905, %18906) /* ty=Tensor[(1, 1024), float32] */;
  %18909 = add(%18907, %18908) /* ty=Tensor[(1, 1024), float32] */;
  %18910 = sigmoid(%18900) /* ty=Tensor[(1, 1024), float32] */;
  %18911 = tanh(%18909) /* ty=Tensor[(1, 1024), float32] */;
  %18912 = multiply(%18910, %18911) /* ty=Tensor[(1, 1024), float32] */;
  %18913 = (%18912, %18869) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18914 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18915 = concatenate(%18913, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18916 = concatenate(%18914, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18917 = nn.dense(%18915, %18916, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18918 = add(%18917, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18919 = add(%18918, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18920 = split(%18919, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18921 = %18920.3 /* ty=Tensor[(1, 1024), float32] */;
  %18922 = %18920.1 /* ty=Tensor[(1, 1024), float32] */;
  %18923 = sigmoid(%18922) /* ty=Tensor[(1, 1024), float32] */;
  %18924 = %18920.0 /* ty=Tensor[(1, 1024), float32] */;
  %18925 = %18920.2 /* ty=Tensor[(1, 1024), float32] */;
  %18926 = sigmoid(%18924) /* ty=Tensor[(1, 1024), float32] */;
  %18927 = tanh(%18925) /* ty=Tensor[(1, 1024), float32] */;
  %18928 = multiply(%18923, %18866) /* ty=Tensor[(1, 1024), float32] */;
  %18929 = multiply(%18926, %18927) /* ty=Tensor[(1, 1024), float32] */;
  %18930 = add(%18928, %18929) /* ty=Tensor[(1, 1024), float32] */;
  %18931 = sigmoid(%18921) /* ty=Tensor[(1, 1024), float32] */;
  %18932 = tanh(%18930) /* ty=Tensor[(1, 1024), float32] */;
  %18933 = multiply(%18931, %18932) /* ty=Tensor[(1, 1024), float32] */;
  %18934 = multiply(%18889, %18890) /* ty=Tensor[(1, 1024), float32] */;
  %18935 = (%18933, %18934) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18936 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18937 = concatenate(%18935, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18938 = concatenate(%18936, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18939 = nn.dense(%18937, %18938, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18940 = add(%18939, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18941 = add(%18940, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %18942 = split(%18941, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18943 = %18942.3 /* ty=Tensor[(1, 1024), float32] */;
  %18944 = %18942.1 /* ty=Tensor[(1, 1024), float32] */;
  %18945 = sigmoid(%18944) /* ty=Tensor[(1, 1024), float32] */;
  %18946 = %18942.0 /* ty=Tensor[(1, 1024), float32] */;
  %18947 = %18942.2 /* ty=Tensor[(1, 1024), float32] */;
  %18948 = sigmoid(%18946) /* ty=Tensor[(1, 1024), float32] */;
  %18949 = tanh(%18947) /* ty=Tensor[(1, 1024), float32] */;
  %18950 = multiply(%18945, %18888) /* ty=Tensor[(1, 1024), float32] */;
  %18951 = multiply(%18948, %18949) /* ty=Tensor[(1, 1024), float32] */;
  %18952 = add(%18950, %18951) /* ty=Tensor[(1, 1024), float32] */;
  %18953 = sigmoid(%18943) /* ty=Tensor[(1, 1024), float32] */;
  %18954 = tanh(%18952) /* ty=Tensor[(1, 1024), float32] */;
  %18955 = %12788.96 /* ty=Tensor[(1, 2048), float32] */;
  %18956 = (%18955, %18912) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %18957 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %18958 = concatenate(%18956, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %18959 = concatenate(%18957, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %18960 = nn.dense(%18958, %18959, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18961 = add(%18960, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18962 = add(%18961, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %18963 = split(%18962, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18964 = %18963.3 /* ty=Tensor[(1, 1024), float32] */;
  %18965 = %18963.1 /* ty=Tensor[(1, 1024), float32] */;
  %18966 = sigmoid(%18965) /* ty=Tensor[(1, 1024), float32] */;
  %18967 = %18963.0 /* ty=Tensor[(1, 1024), float32] */;
  %18968 = %18963.2 /* ty=Tensor[(1, 1024), float32] */;
  %18969 = sigmoid(%18967) /* ty=Tensor[(1, 1024), float32] */;
  %18970 = tanh(%18968) /* ty=Tensor[(1, 1024), float32] */;
  %18971 = multiply(%18966, %18909) /* ty=Tensor[(1, 1024), float32] */;
  %18972 = multiply(%18969, %18970) /* ty=Tensor[(1, 1024), float32] */;
  %18973 = add(%18971, %18972) /* ty=Tensor[(1, 1024), float32] */;
  %18974 = sigmoid(%18964) /* ty=Tensor[(1, 1024), float32] */;
  %18975 = tanh(%18973) /* ty=Tensor[(1, 1024), float32] */;
  %18976 = multiply(%18974, %18975) /* ty=Tensor[(1, 1024), float32] */;
  %18977 = (%18976, %18933) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18978 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %18979 = concatenate(%18977, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %18980 = concatenate(%18978, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %18981 = nn.dense(%18979, %18980, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %18982 = add(%18981, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18983 = add(%18982, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %18984 = split(%18983, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %18985 = %18984.3 /* ty=Tensor[(1, 1024), float32] */;
  %18986 = %18984.1 /* ty=Tensor[(1, 1024), float32] */;
  %18987 = sigmoid(%18986) /* ty=Tensor[(1, 1024), float32] */;
  %18988 = %18984.0 /* ty=Tensor[(1, 1024), float32] */;
  %18989 = %18984.2 /* ty=Tensor[(1, 1024), float32] */;
  %18990 = sigmoid(%18988) /* ty=Tensor[(1, 1024), float32] */;
  %18991 = tanh(%18989) /* ty=Tensor[(1, 1024), float32] */;
  %18992 = multiply(%18987, %18930) /* ty=Tensor[(1, 1024), float32] */;
  %18993 = multiply(%18990, %18991) /* ty=Tensor[(1, 1024), float32] */;
  %18994 = add(%18992, %18993) /* ty=Tensor[(1, 1024), float32] */;
  %18995 = sigmoid(%18985) /* ty=Tensor[(1, 1024), float32] */;
  %18996 = tanh(%18994) /* ty=Tensor[(1, 1024), float32] */;
  %18997 = multiply(%18995, %18996) /* ty=Tensor[(1, 1024), float32] */;
  %18998 = multiply(%18953, %18954) /* ty=Tensor[(1, 1024), float32] */;
  %18999 = (%18997, %18998) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19000 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19001 = concatenate(%18999, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19002 = concatenate(%19000, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19003 = nn.dense(%19001, %19002, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19004 = add(%19003, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19005 = add(%19004, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19006 = split(%19005, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19007 = %19006.3 /* ty=Tensor[(1, 1024), float32] */;
  %19008 = %19006.1 /* ty=Tensor[(1, 1024), float32] */;
  %19009 = sigmoid(%19008) /* ty=Tensor[(1, 1024), float32] */;
  %19010 = %19006.0 /* ty=Tensor[(1, 1024), float32] */;
  %19011 = %19006.2 /* ty=Tensor[(1, 1024), float32] */;
  %19012 = sigmoid(%19010) /* ty=Tensor[(1, 1024), float32] */;
  %19013 = tanh(%19011) /* ty=Tensor[(1, 1024), float32] */;
  %19014 = multiply(%19009, %18952) /* ty=Tensor[(1, 1024), float32] */;
  %19015 = multiply(%19012, %19013) /* ty=Tensor[(1, 1024), float32] */;
  %19016 = add(%19014, %19015) /* ty=Tensor[(1, 1024), float32] */;
  %19017 = sigmoid(%19007) /* ty=Tensor[(1, 1024), float32] */;
  %19018 = tanh(%19016) /* ty=Tensor[(1, 1024), float32] */;
  %19019 = %12788.97 /* ty=Tensor[(1, 2048), float32] */;
  %19020 = (%19019, %18976) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19021 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19022 = concatenate(%19020, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19023 = concatenate(%19021, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19024 = nn.dense(%19022, %19023, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19025 = add(%19024, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19026 = add(%19025, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19027 = split(%19026, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19028 = %19027.3 /* ty=Tensor[(1, 1024), float32] */;
  %19029 = %19027.1 /* ty=Tensor[(1, 1024), float32] */;
  %19030 = sigmoid(%19029) /* ty=Tensor[(1, 1024), float32] */;
  %19031 = %19027.0 /* ty=Tensor[(1, 1024), float32] */;
  %19032 = %19027.2 /* ty=Tensor[(1, 1024), float32] */;
  %19033 = sigmoid(%19031) /* ty=Tensor[(1, 1024), float32] */;
  %19034 = tanh(%19032) /* ty=Tensor[(1, 1024), float32] */;
  %19035 = multiply(%19030, %18973) /* ty=Tensor[(1, 1024), float32] */;
  %19036 = multiply(%19033, %19034) /* ty=Tensor[(1, 1024), float32] */;
  %19037 = add(%19035, %19036) /* ty=Tensor[(1, 1024), float32] */;
  %19038 = sigmoid(%19028) /* ty=Tensor[(1, 1024), float32] */;
  %19039 = tanh(%19037) /* ty=Tensor[(1, 1024), float32] */;
  %19040 = multiply(%19038, %19039) /* ty=Tensor[(1, 1024), float32] */;
  %19041 = (%19040, %18997) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19042 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19043 = concatenate(%19041, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19044 = concatenate(%19042, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19045 = nn.dense(%19043, %19044, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19046 = add(%19045, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19047 = add(%19046, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19048 = split(%19047, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19049 = %19048.3 /* ty=Tensor[(1, 1024), float32] */;
  %19050 = %19048.1 /* ty=Tensor[(1, 1024), float32] */;
  %19051 = sigmoid(%19050) /* ty=Tensor[(1, 1024), float32] */;
  %19052 = %19048.0 /* ty=Tensor[(1, 1024), float32] */;
  %19053 = %19048.2 /* ty=Tensor[(1, 1024), float32] */;
  %19054 = sigmoid(%19052) /* ty=Tensor[(1, 1024), float32] */;
  %19055 = tanh(%19053) /* ty=Tensor[(1, 1024), float32] */;
  %19056 = multiply(%19051, %18994) /* ty=Tensor[(1, 1024), float32] */;
  %19057 = multiply(%19054, %19055) /* ty=Tensor[(1, 1024), float32] */;
  %19058 = add(%19056, %19057) /* ty=Tensor[(1, 1024), float32] */;
  %19059 = sigmoid(%19049) /* ty=Tensor[(1, 1024), float32] */;
  %19060 = tanh(%19058) /* ty=Tensor[(1, 1024), float32] */;
  %19061 = multiply(%19059, %19060) /* ty=Tensor[(1, 1024), float32] */;
  %19062 = multiply(%19017, %19018) /* ty=Tensor[(1, 1024), float32] */;
  %19063 = (%19061, %19062) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19064 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19065 = concatenate(%19063, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19066 = concatenate(%19064, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19067 = nn.dense(%19065, %19066, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19068 = add(%19067, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19069 = add(%19068, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19070 = split(%19069, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19071 = %19070.3 /* ty=Tensor[(1, 1024), float32] */;
  %19072 = %19070.1 /* ty=Tensor[(1, 1024), float32] */;
  %19073 = sigmoid(%19072) /* ty=Tensor[(1, 1024), float32] */;
  %19074 = %19070.0 /* ty=Tensor[(1, 1024), float32] */;
  %19075 = %19070.2 /* ty=Tensor[(1, 1024), float32] */;
  %19076 = sigmoid(%19074) /* ty=Tensor[(1, 1024), float32] */;
  %19077 = tanh(%19075) /* ty=Tensor[(1, 1024), float32] */;
  %19078 = multiply(%19073, %19016) /* ty=Tensor[(1, 1024), float32] */;
  %19079 = multiply(%19076, %19077) /* ty=Tensor[(1, 1024), float32] */;
  %19080 = add(%19078, %19079) /* ty=Tensor[(1, 1024), float32] */;
  %19081 = sigmoid(%19071) /* ty=Tensor[(1, 1024), float32] */;
  %19082 = tanh(%19080) /* ty=Tensor[(1, 1024), float32] */;
  %19083 = %12788.98 /* ty=Tensor[(1, 2048), float32] */;
  %19084 = (%19083, %19040) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19085 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19086 = concatenate(%19084, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19087 = concatenate(%19085, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19088 = nn.dense(%19086, %19087, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19089 = add(%19088, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19090 = add(%19089, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19091 = split(%19090, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19092 = %19091.3 /* ty=Tensor[(1, 1024), float32] */;
  %19093 = %19091.1 /* ty=Tensor[(1, 1024), float32] */;
  %19094 = sigmoid(%19093) /* ty=Tensor[(1, 1024), float32] */;
  %19095 = %19091.0 /* ty=Tensor[(1, 1024), float32] */;
  %19096 = %19091.2 /* ty=Tensor[(1, 1024), float32] */;
  %19097 = sigmoid(%19095) /* ty=Tensor[(1, 1024), float32] */;
  %19098 = tanh(%19096) /* ty=Tensor[(1, 1024), float32] */;
  %19099 = multiply(%19094, %19037) /* ty=Tensor[(1, 1024), float32] */;
  %19100 = multiply(%19097, %19098) /* ty=Tensor[(1, 1024), float32] */;
  %19101 = add(%19099, %19100) /* ty=Tensor[(1, 1024), float32] */;
  %19102 = sigmoid(%19092) /* ty=Tensor[(1, 1024), float32] */;
  %19103 = tanh(%19101) /* ty=Tensor[(1, 1024), float32] */;
  %19104 = multiply(%19102, %19103) /* ty=Tensor[(1, 1024), float32] */;
  %19105 = (%19104, %19061) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19106 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19107 = concatenate(%19105, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19108 = concatenate(%19106, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19109 = nn.dense(%19107, %19108, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19110 = add(%19109, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19111 = add(%19110, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19112 = split(%19111, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19113 = %19112.3 /* ty=Tensor[(1, 1024), float32] */;
  %19114 = %19112.1 /* ty=Tensor[(1, 1024), float32] */;
  %19115 = sigmoid(%19114) /* ty=Tensor[(1, 1024), float32] */;
  %19116 = %19112.0 /* ty=Tensor[(1, 1024), float32] */;
  %19117 = %19112.2 /* ty=Tensor[(1, 1024), float32] */;
  %19118 = sigmoid(%19116) /* ty=Tensor[(1, 1024), float32] */;
  %19119 = tanh(%19117) /* ty=Tensor[(1, 1024), float32] */;
  %19120 = multiply(%19115, %19058) /* ty=Tensor[(1, 1024), float32] */;
  %19121 = multiply(%19118, %19119) /* ty=Tensor[(1, 1024), float32] */;
  %19122 = add(%19120, %19121) /* ty=Tensor[(1, 1024), float32] */;
  %19123 = sigmoid(%19113) /* ty=Tensor[(1, 1024), float32] */;
  %19124 = tanh(%19122) /* ty=Tensor[(1, 1024), float32] */;
  %19125 = multiply(%19123, %19124) /* ty=Tensor[(1, 1024), float32] */;
  %19126 = multiply(%19081, %19082) /* ty=Tensor[(1, 1024), float32] */;
  %19127 = (%19125, %19126) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19128 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19129 = concatenate(%19127, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19130 = concatenate(%19128, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19131 = nn.dense(%19129, %19130, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19132 = add(%19131, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19133 = add(%19132, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19134 = split(%19133, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19135 = %19134.3 /* ty=Tensor[(1, 1024), float32] */;
  %19136 = %19134.1 /* ty=Tensor[(1, 1024), float32] */;
  %19137 = sigmoid(%19136) /* ty=Tensor[(1, 1024), float32] */;
  %19138 = %19134.0 /* ty=Tensor[(1, 1024), float32] */;
  %19139 = %19134.2 /* ty=Tensor[(1, 1024), float32] */;
  %19140 = sigmoid(%19138) /* ty=Tensor[(1, 1024), float32] */;
  %19141 = tanh(%19139) /* ty=Tensor[(1, 1024), float32] */;
  %19142 = multiply(%19137, %19080) /* ty=Tensor[(1, 1024), float32] */;
  %19143 = multiply(%19140, %19141) /* ty=Tensor[(1, 1024), float32] */;
  %19144 = add(%19142, %19143) /* ty=Tensor[(1, 1024), float32] */;
  %19145 = sigmoid(%19135) /* ty=Tensor[(1, 1024), float32] */;
  %19146 = tanh(%19144) /* ty=Tensor[(1, 1024), float32] */;
  %19147 = %12788.99 /* ty=Tensor[(1, 2048), float32] */;
  %19148 = (%19147, %19104) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19149 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19150 = concatenate(%19148, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19151 = concatenate(%19149, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19152 = nn.dense(%19150, %19151, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19153 = add(%19152, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19154 = add(%19153, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19155 = split(%19154, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19156 = %19155.3 /* ty=Tensor[(1, 1024), float32] */;
  %19157 = %19155.1 /* ty=Tensor[(1, 1024), float32] */;
  %19158 = sigmoid(%19157) /* ty=Tensor[(1, 1024), float32] */;
  %19159 = %19155.0 /* ty=Tensor[(1, 1024), float32] */;
  %19160 = %19155.2 /* ty=Tensor[(1, 1024), float32] */;
  %19161 = sigmoid(%19159) /* ty=Tensor[(1, 1024), float32] */;
  %19162 = tanh(%19160) /* ty=Tensor[(1, 1024), float32] */;
  %19163 = multiply(%19158, %19101) /* ty=Tensor[(1, 1024), float32] */;
  %19164 = multiply(%19161, %19162) /* ty=Tensor[(1, 1024), float32] */;
  %19165 = add(%19163, %19164) /* ty=Tensor[(1, 1024), float32] */;
  %19166 = sigmoid(%19156) /* ty=Tensor[(1, 1024), float32] */;
  %19167 = tanh(%19165) /* ty=Tensor[(1, 1024), float32] */;
  %19168 = multiply(%19166, %19167) /* ty=Tensor[(1, 1024), float32] */;
  %19169 = (%19168, %19125) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19170 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19171 = concatenate(%19169, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19172 = concatenate(%19170, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19173 = nn.dense(%19171, %19172, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19174 = add(%19173, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19175 = add(%19174, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19176 = split(%19175, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19177 = %19176.3 /* ty=Tensor[(1, 1024), float32] */;
  %19178 = %19176.1 /* ty=Tensor[(1, 1024), float32] */;
  %19179 = sigmoid(%19178) /* ty=Tensor[(1, 1024), float32] */;
  %19180 = %19176.0 /* ty=Tensor[(1, 1024), float32] */;
  %19181 = %19176.2 /* ty=Tensor[(1, 1024), float32] */;
  %19182 = sigmoid(%19180) /* ty=Tensor[(1, 1024), float32] */;
  %19183 = tanh(%19181) /* ty=Tensor[(1, 1024), float32] */;
  %19184 = multiply(%19179, %19122) /* ty=Tensor[(1, 1024), float32] */;
  %19185 = multiply(%19182, %19183) /* ty=Tensor[(1, 1024), float32] */;
  %19186 = add(%19184, %19185) /* ty=Tensor[(1, 1024), float32] */;
  %19187 = sigmoid(%19177) /* ty=Tensor[(1, 1024), float32] */;
  %19188 = tanh(%19186) /* ty=Tensor[(1, 1024), float32] */;
  %19189 = multiply(%19187, %19188) /* ty=Tensor[(1, 1024), float32] */;
  %19190 = multiply(%19145, %19146) /* ty=Tensor[(1, 1024), float32] */;
  %19191 = (%19189, %19190) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19192 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19193 = concatenate(%19191, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19194 = concatenate(%19192, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19195 = nn.dense(%19193, %19194, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19196 = add(%19195, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19197 = add(%19196, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19198 = split(%19197, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19199 = %19198.3 /* ty=Tensor[(1, 1024), float32] */;
  %19200 = %19198.1 /* ty=Tensor[(1, 1024), float32] */;
  %19201 = sigmoid(%19200) /* ty=Tensor[(1, 1024), float32] */;
  %19202 = %19198.0 /* ty=Tensor[(1, 1024), float32] */;
  %19203 = %19198.2 /* ty=Tensor[(1, 1024), float32] */;
  %19204 = sigmoid(%19202) /* ty=Tensor[(1, 1024), float32] */;
  %19205 = tanh(%19203) /* ty=Tensor[(1, 1024), float32] */;
  %19206 = multiply(%19201, %19144) /* ty=Tensor[(1, 1024), float32] */;
  %19207 = multiply(%19204, %19205) /* ty=Tensor[(1, 1024), float32] */;
  %19208 = add(%19206, %19207) /* ty=Tensor[(1, 1024), float32] */;
  %19209 = sigmoid(%19199) /* ty=Tensor[(1, 1024), float32] */;
  %19210 = tanh(%19208) /* ty=Tensor[(1, 1024), float32] */;
  %19211 = %12788.100 /* ty=Tensor[(1, 2048), float32] */;
  %19212 = (%19211, %19168) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19213 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19214 = concatenate(%19212, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19215 = concatenate(%19213, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19216 = nn.dense(%19214, %19215, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19217 = add(%19216, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19218 = add(%19217, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19219 = split(%19218, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19220 = %19219.3 /* ty=Tensor[(1, 1024), float32] */;
  %19221 = %19219.1 /* ty=Tensor[(1, 1024), float32] */;
  %19222 = sigmoid(%19221) /* ty=Tensor[(1, 1024), float32] */;
  %19223 = %19219.0 /* ty=Tensor[(1, 1024), float32] */;
  %19224 = %19219.2 /* ty=Tensor[(1, 1024), float32] */;
  %19225 = sigmoid(%19223) /* ty=Tensor[(1, 1024), float32] */;
  %19226 = tanh(%19224) /* ty=Tensor[(1, 1024), float32] */;
  %19227 = multiply(%19222, %19165) /* ty=Tensor[(1, 1024), float32] */;
  %19228 = multiply(%19225, %19226) /* ty=Tensor[(1, 1024), float32] */;
  %19229 = add(%19227, %19228) /* ty=Tensor[(1, 1024), float32] */;
  %19230 = sigmoid(%19220) /* ty=Tensor[(1, 1024), float32] */;
  %19231 = tanh(%19229) /* ty=Tensor[(1, 1024), float32] */;
  %19232 = multiply(%19230, %19231) /* ty=Tensor[(1, 1024), float32] */;
  %19233 = (%19232, %19189) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19234 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19235 = concatenate(%19233, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19236 = concatenate(%19234, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19237 = nn.dense(%19235, %19236, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19238 = add(%19237, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19239 = add(%19238, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19240 = split(%19239, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19241 = %19240.3 /* ty=Tensor[(1, 1024), float32] */;
  %19242 = %19240.1 /* ty=Tensor[(1, 1024), float32] */;
  %19243 = sigmoid(%19242) /* ty=Tensor[(1, 1024), float32] */;
  %19244 = %19240.0 /* ty=Tensor[(1, 1024), float32] */;
  %19245 = %19240.2 /* ty=Tensor[(1, 1024), float32] */;
  %19246 = sigmoid(%19244) /* ty=Tensor[(1, 1024), float32] */;
  %19247 = tanh(%19245) /* ty=Tensor[(1, 1024), float32] */;
  %19248 = multiply(%19243, %19186) /* ty=Tensor[(1, 1024), float32] */;
  %19249 = multiply(%19246, %19247) /* ty=Tensor[(1, 1024), float32] */;
  %19250 = add(%19248, %19249) /* ty=Tensor[(1, 1024), float32] */;
  %19251 = sigmoid(%19241) /* ty=Tensor[(1, 1024), float32] */;
  %19252 = tanh(%19250) /* ty=Tensor[(1, 1024), float32] */;
  %19253 = multiply(%19251, %19252) /* ty=Tensor[(1, 1024), float32] */;
  %19254 = multiply(%19209, %19210) /* ty=Tensor[(1, 1024), float32] */;
  %19255 = (%19253, %19254) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19256 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19257 = concatenate(%19255, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19258 = concatenate(%19256, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19259 = nn.dense(%19257, %19258, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19260 = add(%19259, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19261 = add(%19260, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19262 = split(%19261, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19263 = %19262.3 /* ty=Tensor[(1, 1024), float32] */;
  %19264 = %19262.1 /* ty=Tensor[(1, 1024), float32] */;
  %19265 = sigmoid(%19264) /* ty=Tensor[(1, 1024), float32] */;
  %19266 = %19262.0 /* ty=Tensor[(1, 1024), float32] */;
  %19267 = %19262.2 /* ty=Tensor[(1, 1024), float32] */;
  %19268 = sigmoid(%19266) /* ty=Tensor[(1, 1024), float32] */;
  %19269 = tanh(%19267) /* ty=Tensor[(1, 1024), float32] */;
  %19270 = multiply(%19265, %19208) /* ty=Tensor[(1, 1024), float32] */;
  %19271 = multiply(%19268, %19269) /* ty=Tensor[(1, 1024), float32] */;
  %19272 = add(%19270, %19271) /* ty=Tensor[(1, 1024), float32] */;
  %19273 = sigmoid(%19263) /* ty=Tensor[(1, 1024), float32] */;
  %19274 = tanh(%19272) /* ty=Tensor[(1, 1024), float32] */;
  %19275 = %12788.101 /* ty=Tensor[(1, 2048), float32] */;
  %19276 = (%19275, %19232) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19277 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19278 = concatenate(%19276, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19279 = concatenate(%19277, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19280 = nn.dense(%19278, %19279, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19281 = add(%19280, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19282 = add(%19281, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19283 = split(%19282, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19284 = %19283.3 /* ty=Tensor[(1, 1024), float32] */;
  %19285 = %19283.1 /* ty=Tensor[(1, 1024), float32] */;
  %19286 = sigmoid(%19285) /* ty=Tensor[(1, 1024), float32] */;
  %19287 = %19283.0 /* ty=Tensor[(1, 1024), float32] */;
  %19288 = %19283.2 /* ty=Tensor[(1, 1024), float32] */;
  %19289 = sigmoid(%19287) /* ty=Tensor[(1, 1024), float32] */;
  %19290 = tanh(%19288) /* ty=Tensor[(1, 1024), float32] */;
  %19291 = multiply(%19286, %19229) /* ty=Tensor[(1, 1024), float32] */;
  %19292 = multiply(%19289, %19290) /* ty=Tensor[(1, 1024), float32] */;
  %19293 = add(%19291, %19292) /* ty=Tensor[(1, 1024), float32] */;
  %19294 = sigmoid(%19284) /* ty=Tensor[(1, 1024), float32] */;
  %19295 = tanh(%19293) /* ty=Tensor[(1, 1024), float32] */;
  %19296 = multiply(%19294, %19295) /* ty=Tensor[(1, 1024), float32] */;
  %19297 = (%19296, %19253) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19298 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19299 = concatenate(%19297, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19300 = concatenate(%19298, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19301 = nn.dense(%19299, %19300, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19302 = add(%19301, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19303 = add(%19302, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19304 = split(%19303, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19305 = %19304.3 /* ty=Tensor[(1, 1024), float32] */;
  %19306 = %19304.1 /* ty=Tensor[(1, 1024), float32] */;
  %19307 = sigmoid(%19306) /* ty=Tensor[(1, 1024), float32] */;
  %19308 = %19304.0 /* ty=Tensor[(1, 1024), float32] */;
  %19309 = %19304.2 /* ty=Tensor[(1, 1024), float32] */;
  %19310 = sigmoid(%19308) /* ty=Tensor[(1, 1024), float32] */;
  %19311 = tanh(%19309) /* ty=Tensor[(1, 1024), float32] */;
  %19312 = multiply(%19307, %19250) /* ty=Tensor[(1, 1024), float32] */;
  %19313 = multiply(%19310, %19311) /* ty=Tensor[(1, 1024), float32] */;
  %19314 = add(%19312, %19313) /* ty=Tensor[(1, 1024), float32] */;
  %19315 = sigmoid(%19305) /* ty=Tensor[(1, 1024), float32] */;
  %19316 = tanh(%19314) /* ty=Tensor[(1, 1024), float32] */;
  %19317 = multiply(%19315, %19316) /* ty=Tensor[(1, 1024), float32] */;
  %19318 = multiply(%19273, %19274) /* ty=Tensor[(1, 1024), float32] */;
  %19319 = (%19317, %19318) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19320 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19321 = concatenate(%19319, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19322 = concatenate(%19320, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19323 = nn.dense(%19321, %19322, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19324 = add(%19323, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19325 = add(%19324, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19326 = split(%19325, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19327 = %19326.3 /* ty=Tensor[(1, 1024), float32] */;
  %19328 = %19326.1 /* ty=Tensor[(1, 1024), float32] */;
  %19329 = sigmoid(%19328) /* ty=Tensor[(1, 1024), float32] */;
  %19330 = %19326.0 /* ty=Tensor[(1, 1024), float32] */;
  %19331 = %19326.2 /* ty=Tensor[(1, 1024), float32] */;
  %19332 = sigmoid(%19330) /* ty=Tensor[(1, 1024), float32] */;
  %19333 = tanh(%19331) /* ty=Tensor[(1, 1024), float32] */;
  %19334 = multiply(%19329, %19272) /* ty=Tensor[(1, 1024), float32] */;
  %19335 = multiply(%19332, %19333) /* ty=Tensor[(1, 1024), float32] */;
  %19336 = add(%19334, %19335) /* ty=Tensor[(1, 1024), float32] */;
  %19337 = sigmoid(%19327) /* ty=Tensor[(1, 1024), float32] */;
  %19338 = tanh(%19336) /* ty=Tensor[(1, 1024), float32] */;
  %19339 = %12788.102 /* ty=Tensor[(1, 2048), float32] */;
  %19340 = (%19339, %19296) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19341 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19342 = concatenate(%19340, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19343 = concatenate(%19341, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19344 = nn.dense(%19342, %19343, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19345 = add(%19344, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19346 = add(%19345, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19347 = split(%19346, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19348 = %19347.3 /* ty=Tensor[(1, 1024), float32] */;
  %19349 = %19347.1 /* ty=Tensor[(1, 1024), float32] */;
  %19350 = sigmoid(%19349) /* ty=Tensor[(1, 1024), float32] */;
  %19351 = %19347.0 /* ty=Tensor[(1, 1024), float32] */;
  %19352 = %19347.2 /* ty=Tensor[(1, 1024), float32] */;
  %19353 = sigmoid(%19351) /* ty=Tensor[(1, 1024), float32] */;
  %19354 = tanh(%19352) /* ty=Tensor[(1, 1024), float32] */;
  %19355 = multiply(%19350, %19293) /* ty=Tensor[(1, 1024), float32] */;
  %19356 = multiply(%19353, %19354) /* ty=Tensor[(1, 1024), float32] */;
  %19357 = add(%19355, %19356) /* ty=Tensor[(1, 1024), float32] */;
  %19358 = sigmoid(%19348) /* ty=Tensor[(1, 1024), float32] */;
  %19359 = tanh(%19357) /* ty=Tensor[(1, 1024), float32] */;
  %19360 = multiply(%19358, %19359) /* ty=Tensor[(1, 1024), float32] */;
  %19361 = (%19360, %19317) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19362 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19363 = concatenate(%19361, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19364 = concatenate(%19362, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19365 = nn.dense(%19363, %19364, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19366 = add(%19365, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19367 = add(%19366, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19368 = split(%19367, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19369 = %19368.3 /* ty=Tensor[(1, 1024), float32] */;
  %19370 = %19368.1 /* ty=Tensor[(1, 1024), float32] */;
  %19371 = sigmoid(%19370) /* ty=Tensor[(1, 1024), float32] */;
  %19372 = %19368.0 /* ty=Tensor[(1, 1024), float32] */;
  %19373 = %19368.2 /* ty=Tensor[(1, 1024), float32] */;
  %19374 = sigmoid(%19372) /* ty=Tensor[(1, 1024), float32] */;
  %19375 = tanh(%19373) /* ty=Tensor[(1, 1024), float32] */;
  %19376 = multiply(%19371, %19314) /* ty=Tensor[(1, 1024), float32] */;
  %19377 = multiply(%19374, %19375) /* ty=Tensor[(1, 1024), float32] */;
  %19378 = add(%19376, %19377) /* ty=Tensor[(1, 1024), float32] */;
  %19379 = sigmoid(%19369) /* ty=Tensor[(1, 1024), float32] */;
  %19380 = tanh(%19378) /* ty=Tensor[(1, 1024), float32] */;
  %19381 = multiply(%19379, %19380) /* ty=Tensor[(1, 1024), float32] */;
  %19382 = multiply(%19337, %19338) /* ty=Tensor[(1, 1024), float32] */;
  %19383 = (%19381, %19382) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19384 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19385 = concatenate(%19383, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19386 = concatenate(%19384, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19387 = nn.dense(%19385, %19386, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19388 = add(%19387, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19389 = add(%19388, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19390 = split(%19389, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19391 = %19390.3 /* ty=Tensor[(1, 1024), float32] */;
  %19392 = %19390.1 /* ty=Tensor[(1, 1024), float32] */;
  %19393 = sigmoid(%19392) /* ty=Tensor[(1, 1024), float32] */;
  %19394 = %19390.0 /* ty=Tensor[(1, 1024), float32] */;
  %19395 = %19390.2 /* ty=Tensor[(1, 1024), float32] */;
  %19396 = sigmoid(%19394) /* ty=Tensor[(1, 1024), float32] */;
  %19397 = tanh(%19395) /* ty=Tensor[(1, 1024), float32] */;
  %19398 = multiply(%19393, %19336) /* ty=Tensor[(1, 1024), float32] */;
  %19399 = multiply(%19396, %19397) /* ty=Tensor[(1, 1024), float32] */;
  %19400 = add(%19398, %19399) /* ty=Tensor[(1, 1024), float32] */;
  %19401 = sigmoid(%19391) /* ty=Tensor[(1, 1024), float32] */;
  %19402 = tanh(%19400) /* ty=Tensor[(1, 1024), float32] */;
  %19403 = %12788.103 /* ty=Tensor[(1, 2048), float32] */;
  %19404 = (%19403, %19360) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19405 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19406 = concatenate(%19404, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19407 = concatenate(%19405, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19408 = nn.dense(%19406, %19407, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19409 = add(%19408, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19410 = add(%19409, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19411 = split(%19410, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19412 = %19411.3 /* ty=Tensor[(1, 1024), float32] */;
  %19413 = %19411.1 /* ty=Tensor[(1, 1024), float32] */;
  %19414 = sigmoid(%19413) /* ty=Tensor[(1, 1024), float32] */;
  %19415 = %19411.0 /* ty=Tensor[(1, 1024), float32] */;
  %19416 = %19411.2 /* ty=Tensor[(1, 1024), float32] */;
  %19417 = sigmoid(%19415) /* ty=Tensor[(1, 1024), float32] */;
  %19418 = tanh(%19416) /* ty=Tensor[(1, 1024), float32] */;
  %19419 = multiply(%19414, %19357) /* ty=Tensor[(1, 1024), float32] */;
  %19420 = multiply(%19417, %19418) /* ty=Tensor[(1, 1024), float32] */;
  %19421 = add(%19419, %19420) /* ty=Tensor[(1, 1024), float32] */;
  %19422 = sigmoid(%19412) /* ty=Tensor[(1, 1024), float32] */;
  %19423 = tanh(%19421) /* ty=Tensor[(1, 1024), float32] */;
  %19424 = multiply(%19422, %19423) /* ty=Tensor[(1, 1024), float32] */;
  %19425 = (%19424, %19381) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19426 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19427 = concatenate(%19425, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19428 = concatenate(%19426, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19429 = nn.dense(%19427, %19428, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19430 = add(%19429, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19431 = add(%19430, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19432 = split(%19431, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19433 = %19432.3 /* ty=Tensor[(1, 1024), float32] */;
  %19434 = %19432.1 /* ty=Tensor[(1, 1024), float32] */;
  %19435 = sigmoid(%19434) /* ty=Tensor[(1, 1024), float32] */;
  %19436 = %19432.0 /* ty=Tensor[(1, 1024), float32] */;
  %19437 = %19432.2 /* ty=Tensor[(1, 1024), float32] */;
  %19438 = sigmoid(%19436) /* ty=Tensor[(1, 1024), float32] */;
  %19439 = tanh(%19437) /* ty=Tensor[(1, 1024), float32] */;
  %19440 = multiply(%19435, %19378) /* ty=Tensor[(1, 1024), float32] */;
  %19441 = multiply(%19438, %19439) /* ty=Tensor[(1, 1024), float32] */;
  %19442 = add(%19440, %19441) /* ty=Tensor[(1, 1024), float32] */;
  %19443 = sigmoid(%19433) /* ty=Tensor[(1, 1024), float32] */;
  %19444 = tanh(%19442) /* ty=Tensor[(1, 1024), float32] */;
  %19445 = multiply(%19443, %19444) /* ty=Tensor[(1, 1024), float32] */;
  %19446 = multiply(%19401, %19402) /* ty=Tensor[(1, 1024), float32] */;
  %19447 = (%19445, %19446) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19448 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19449 = concatenate(%19447, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19450 = concatenate(%19448, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19451 = nn.dense(%19449, %19450, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19452 = add(%19451, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19453 = add(%19452, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19454 = split(%19453, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19455 = %19454.3 /* ty=Tensor[(1, 1024), float32] */;
  %19456 = %19454.1 /* ty=Tensor[(1, 1024), float32] */;
  %19457 = sigmoid(%19456) /* ty=Tensor[(1, 1024), float32] */;
  %19458 = %19454.0 /* ty=Tensor[(1, 1024), float32] */;
  %19459 = %19454.2 /* ty=Tensor[(1, 1024), float32] */;
  %19460 = sigmoid(%19458) /* ty=Tensor[(1, 1024), float32] */;
  %19461 = tanh(%19459) /* ty=Tensor[(1, 1024), float32] */;
  %19462 = multiply(%19457, %19400) /* ty=Tensor[(1, 1024), float32] */;
  %19463 = multiply(%19460, %19461) /* ty=Tensor[(1, 1024), float32] */;
  %19464 = add(%19462, %19463) /* ty=Tensor[(1, 1024), float32] */;
  %19465 = sigmoid(%19455) /* ty=Tensor[(1, 1024), float32] */;
  %19466 = tanh(%19464) /* ty=Tensor[(1, 1024), float32] */;
  %19467 = %12788.104 /* ty=Tensor[(1, 2048), float32] */;
  %19468 = (%19467, %19424) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19469 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19470 = concatenate(%19468, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19471 = concatenate(%19469, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19472 = nn.dense(%19470, %19471, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19473 = add(%19472, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19474 = add(%19473, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19475 = split(%19474, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19476 = %19475.3 /* ty=Tensor[(1, 1024), float32] */;
  %19477 = %19475.1 /* ty=Tensor[(1, 1024), float32] */;
  %19478 = sigmoid(%19477) /* ty=Tensor[(1, 1024), float32] */;
  %19479 = %19475.0 /* ty=Tensor[(1, 1024), float32] */;
  %19480 = %19475.2 /* ty=Tensor[(1, 1024), float32] */;
  %19481 = sigmoid(%19479) /* ty=Tensor[(1, 1024), float32] */;
  %19482 = tanh(%19480) /* ty=Tensor[(1, 1024), float32] */;
  %19483 = multiply(%19478, %19421) /* ty=Tensor[(1, 1024), float32] */;
  %19484 = multiply(%19481, %19482) /* ty=Tensor[(1, 1024), float32] */;
  %19485 = add(%19483, %19484) /* ty=Tensor[(1, 1024), float32] */;
  %19486 = sigmoid(%19476) /* ty=Tensor[(1, 1024), float32] */;
  %19487 = tanh(%19485) /* ty=Tensor[(1, 1024), float32] */;
  %19488 = multiply(%19486, %19487) /* ty=Tensor[(1, 1024), float32] */;
  %19489 = (%19488, %19445) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19490 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19491 = concatenate(%19489, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19492 = concatenate(%19490, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19493 = nn.dense(%19491, %19492, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19494 = add(%19493, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19495 = add(%19494, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19496 = split(%19495, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19497 = %19496.3 /* ty=Tensor[(1, 1024), float32] */;
  %19498 = %19496.1 /* ty=Tensor[(1, 1024), float32] */;
  %19499 = sigmoid(%19498) /* ty=Tensor[(1, 1024), float32] */;
  %19500 = %19496.0 /* ty=Tensor[(1, 1024), float32] */;
  %19501 = %19496.2 /* ty=Tensor[(1, 1024), float32] */;
  %19502 = sigmoid(%19500) /* ty=Tensor[(1, 1024), float32] */;
  %19503 = tanh(%19501) /* ty=Tensor[(1, 1024), float32] */;
  %19504 = multiply(%19499, %19442) /* ty=Tensor[(1, 1024), float32] */;
  %19505 = multiply(%19502, %19503) /* ty=Tensor[(1, 1024), float32] */;
  %19506 = add(%19504, %19505) /* ty=Tensor[(1, 1024), float32] */;
  %19507 = sigmoid(%19497) /* ty=Tensor[(1, 1024), float32] */;
  %19508 = tanh(%19506) /* ty=Tensor[(1, 1024), float32] */;
  %19509 = multiply(%19507, %19508) /* ty=Tensor[(1, 1024), float32] */;
  %19510 = multiply(%19465, %19466) /* ty=Tensor[(1, 1024), float32] */;
  %19511 = (%19509, %19510) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19512 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19513 = concatenate(%19511, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19514 = concatenate(%19512, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19515 = nn.dense(%19513, %19514, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19516 = add(%19515, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19517 = add(%19516, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19518 = split(%19517, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19519 = %19518.3 /* ty=Tensor[(1, 1024), float32] */;
  %19520 = %19518.1 /* ty=Tensor[(1, 1024), float32] */;
  %19521 = sigmoid(%19520) /* ty=Tensor[(1, 1024), float32] */;
  %19522 = %19518.0 /* ty=Tensor[(1, 1024), float32] */;
  %19523 = %19518.2 /* ty=Tensor[(1, 1024), float32] */;
  %19524 = sigmoid(%19522) /* ty=Tensor[(1, 1024), float32] */;
  %19525 = tanh(%19523) /* ty=Tensor[(1, 1024), float32] */;
  %19526 = multiply(%19521, %19464) /* ty=Tensor[(1, 1024), float32] */;
  %19527 = multiply(%19524, %19525) /* ty=Tensor[(1, 1024), float32] */;
  %19528 = add(%19526, %19527) /* ty=Tensor[(1, 1024), float32] */;
  %19529 = sigmoid(%19519) /* ty=Tensor[(1, 1024), float32] */;
  %19530 = tanh(%19528) /* ty=Tensor[(1, 1024), float32] */;
  %19531 = %12788.105 /* ty=Tensor[(1, 2048), float32] */;
  %19532 = (%19531, %19488) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19533 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19534 = concatenate(%19532, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19535 = concatenate(%19533, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19536 = nn.dense(%19534, %19535, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19537 = add(%19536, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19538 = add(%19537, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19539 = split(%19538, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19540 = %19539.3 /* ty=Tensor[(1, 1024), float32] */;
  %19541 = %19539.1 /* ty=Tensor[(1, 1024), float32] */;
  %19542 = sigmoid(%19541) /* ty=Tensor[(1, 1024), float32] */;
  %19543 = %19539.0 /* ty=Tensor[(1, 1024), float32] */;
  %19544 = %19539.2 /* ty=Tensor[(1, 1024), float32] */;
  %19545 = sigmoid(%19543) /* ty=Tensor[(1, 1024), float32] */;
  %19546 = tanh(%19544) /* ty=Tensor[(1, 1024), float32] */;
  %19547 = multiply(%19542, %19485) /* ty=Tensor[(1, 1024), float32] */;
  %19548 = multiply(%19545, %19546) /* ty=Tensor[(1, 1024), float32] */;
  %19549 = add(%19547, %19548) /* ty=Tensor[(1, 1024), float32] */;
  %19550 = sigmoid(%19540) /* ty=Tensor[(1, 1024), float32] */;
  %19551 = tanh(%19549) /* ty=Tensor[(1, 1024), float32] */;
  %19552 = multiply(%19550, %19551) /* ty=Tensor[(1, 1024), float32] */;
  %19553 = (%19552, %19509) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19554 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19555 = concatenate(%19553, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19556 = concatenate(%19554, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19557 = nn.dense(%19555, %19556, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19558 = add(%19557, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19559 = add(%19558, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19560 = split(%19559, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19561 = %19560.3 /* ty=Tensor[(1, 1024), float32] */;
  %19562 = %19560.1 /* ty=Tensor[(1, 1024), float32] */;
  %19563 = sigmoid(%19562) /* ty=Tensor[(1, 1024), float32] */;
  %19564 = %19560.0 /* ty=Tensor[(1, 1024), float32] */;
  %19565 = %19560.2 /* ty=Tensor[(1, 1024), float32] */;
  %19566 = sigmoid(%19564) /* ty=Tensor[(1, 1024), float32] */;
  %19567 = tanh(%19565) /* ty=Tensor[(1, 1024), float32] */;
  %19568 = multiply(%19563, %19506) /* ty=Tensor[(1, 1024), float32] */;
  %19569 = multiply(%19566, %19567) /* ty=Tensor[(1, 1024), float32] */;
  %19570 = add(%19568, %19569) /* ty=Tensor[(1, 1024), float32] */;
  %19571 = sigmoid(%19561) /* ty=Tensor[(1, 1024), float32] */;
  %19572 = tanh(%19570) /* ty=Tensor[(1, 1024), float32] */;
  %19573 = multiply(%19571, %19572) /* ty=Tensor[(1, 1024), float32] */;
  %19574 = multiply(%19529, %19530) /* ty=Tensor[(1, 1024), float32] */;
  %19575 = (%19573, %19574) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19576 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19577 = concatenate(%19575, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19578 = concatenate(%19576, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19579 = nn.dense(%19577, %19578, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19580 = add(%19579, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19581 = add(%19580, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19582 = split(%19581, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19583 = %19582.3 /* ty=Tensor[(1, 1024), float32] */;
  %19584 = %19582.1 /* ty=Tensor[(1, 1024), float32] */;
  %19585 = sigmoid(%19584) /* ty=Tensor[(1, 1024), float32] */;
  %19586 = %19582.0 /* ty=Tensor[(1, 1024), float32] */;
  %19587 = %19582.2 /* ty=Tensor[(1, 1024), float32] */;
  %19588 = sigmoid(%19586) /* ty=Tensor[(1, 1024), float32] */;
  %19589 = tanh(%19587) /* ty=Tensor[(1, 1024), float32] */;
  %19590 = multiply(%19585, %19528) /* ty=Tensor[(1, 1024), float32] */;
  %19591 = multiply(%19588, %19589) /* ty=Tensor[(1, 1024), float32] */;
  %19592 = add(%19590, %19591) /* ty=Tensor[(1, 1024), float32] */;
  %19593 = sigmoid(%19583) /* ty=Tensor[(1, 1024), float32] */;
  %19594 = tanh(%19592) /* ty=Tensor[(1, 1024), float32] */;
  %19595 = %12788.106 /* ty=Tensor[(1, 2048), float32] */;
  %19596 = (%19595, %19552) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19597 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19598 = concatenate(%19596, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19599 = concatenate(%19597, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19600 = nn.dense(%19598, %19599, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19601 = add(%19600, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19602 = add(%19601, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19603 = split(%19602, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19604 = %19603.3 /* ty=Tensor[(1, 1024), float32] */;
  %19605 = %19603.1 /* ty=Tensor[(1, 1024), float32] */;
  %19606 = sigmoid(%19605) /* ty=Tensor[(1, 1024), float32] */;
  %19607 = %19603.0 /* ty=Tensor[(1, 1024), float32] */;
  %19608 = %19603.2 /* ty=Tensor[(1, 1024), float32] */;
  %19609 = sigmoid(%19607) /* ty=Tensor[(1, 1024), float32] */;
  %19610 = tanh(%19608) /* ty=Tensor[(1, 1024), float32] */;
  %19611 = multiply(%19606, %19549) /* ty=Tensor[(1, 1024), float32] */;
  %19612 = multiply(%19609, %19610) /* ty=Tensor[(1, 1024), float32] */;
  %19613 = add(%19611, %19612) /* ty=Tensor[(1, 1024), float32] */;
  %19614 = sigmoid(%19604) /* ty=Tensor[(1, 1024), float32] */;
  %19615 = tanh(%19613) /* ty=Tensor[(1, 1024), float32] */;
  %19616 = multiply(%19614, %19615) /* ty=Tensor[(1, 1024), float32] */;
  %19617 = (%19616, %19573) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19618 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19619 = concatenate(%19617, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19620 = concatenate(%19618, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19621 = nn.dense(%19619, %19620, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19622 = add(%19621, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19623 = add(%19622, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19624 = split(%19623, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19625 = %19624.3 /* ty=Tensor[(1, 1024), float32] */;
  %19626 = %19624.1 /* ty=Tensor[(1, 1024), float32] */;
  %19627 = sigmoid(%19626) /* ty=Tensor[(1, 1024), float32] */;
  %19628 = %19624.0 /* ty=Tensor[(1, 1024), float32] */;
  %19629 = %19624.2 /* ty=Tensor[(1, 1024), float32] */;
  %19630 = sigmoid(%19628) /* ty=Tensor[(1, 1024), float32] */;
  %19631 = tanh(%19629) /* ty=Tensor[(1, 1024), float32] */;
  %19632 = multiply(%19627, %19570) /* ty=Tensor[(1, 1024), float32] */;
  %19633 = multiply(%19630, %19631) /* ty=Tensor[(1, 1024), float32] */;
  %19634 = add(%19632, %19633) /* ty=Tensor[(1, 1024), float32] */;
  %19635 = sigmoid(%19625) /* ty=Tensor[(1, 1024), float32] */;
  %19636 = tanh(%19634) /* ty=Tensor[(1, 1024), float32] */;
  %19637 = multiply(%19635, %19636) /* ty=Tensor[(1, 1024), float32] */;
  %19638 = multiply(%19593, %19594) /* ty=Tensor[(1, 1024), float32] */;
  %19639 = (%19637, %19638) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19640 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19641 = concatenate(%19639, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19642 = concatenate(%19640, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19643 = nn.dense(%19641, %19642, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19644 = add(%19643, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19645 = add(%19644, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19646 = split(%19645, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19647 = %19646.3 /* ty=Tensor[(1, 1024), float32] */;
  %19648 = %19646.1 /* ty=Tensor[(1, 1024), float32] */;
  %19649 = sigmoid(%19648) /* ty=Tensor[(1, 1024), float32] */;
  %19650 = %19646.0 /* ty=Tensor[(1, 1024), float32] */;
  %19651 = %19646.2 /* ty=Tensor[(1, 1024), float32] */;
  %19652 = sigmoid(%19650) /* ty=Tensor[(1, 1024), float32] */;
  %19653 = tanh(%19651) /* ty=Tensor[(1, 1024), float32] */;
  %19654 = multiply(%19649, %19592) /* ty=Tensor[(1, 1024), float32] */;
  %19655 = multiply(%19652, %19653) /* ty=Tensor[(1, 1024), float32] */;
  %19656 = add(%19654, %19655) /* ty=Tensor[(1, 1024), float32] */;
  %19657 = sigmoid(%19647) /* ty=Tensor[(1, 1024), float32] */;
  %19658 = tanh(%19656) /* ty=Tensor[(1, 1024), float32] */;
  %19659 = %12788.107 /* ty=Tensor[(1, 2048), float32] */;
  %19660 = (%19659, %19616) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19661 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19662 = concatenate(%19660, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19663 = concatenate(%19661, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19664 = nn.dense(%19662, %19663, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19665 = add(%19664, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19666 = add(%19665, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19667 = split(%19666, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19668 = %19667.3 /* ty=Tensor[(1, 1024), float32] */;
  %19669 = %19667.1 /* ty=Tensor[(1, 1024), float32] */;
  %19670 = sigmoid(%19669) /* ty=Tensor[(1, 1024), float32] */;
  %19671 = %19667.0 /* ty=Tensor[(1, 1024), float32] */;
  %19672 = %19667.2 /* ty=Tensor[(1, 1024), float32] */;
  %19673 = sigmoid(%19671) /* ty=Tensor[(1, 1024), float32] */;
  %19674 = tanh(%19672) /* ty=Tensor[(1, 1024), float32] */;
  %19675 = multiply(%19670, %19613) /* ty=Tensor[(1, 1024), float32] */;
  %19676 = multiply(%19673, %19674) /* ty=Tensor[(1, 1024), float32] */;
  %19677 = add(%19675, %19676) /* ty=Tensor[(1, 1024), float32] */;
  %19678 = sigmoid(%19668) /* ty=Tensor[(1, 1024), float32] */;
  %19679 = tanh(%19677) /* ty=Tensor[(1, 1024), float32] */;
  %19680 = multiply(%19678, %19679) /* ty=Tensor[(1, 1024), float32] */;
  %19681 = (%19680, %19637) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19682 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19683 = concatenate(%19681, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19684 = concatenate(%19682, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19685 = nn.dense(%19683, %19684, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19686 = add(%19685, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19687 = add(%19686, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19688 = split(%19687, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19689 = %19688.3 /* ty=Tensor[(1, 1024), float32] */;
  %19690 = %19688.1 /* ty=Tensor[(1, 1024), float32] */;
  %19691 = sigmoid(%19690) /* ty=Tensor[(1, 1024), float32] */;
  %19692 = %19688.0 /* ty=Tensor[(1, 1024), float32] */;
  %19693 = %19688.2 /* ty=Tensor[(1, 1024), float32] */;
  %19694 = sigmoid(%19692) /* ty=Tensor[(1, 1024), float32] */;
  %19695 = tanh(%19693) /* ty=Tensor[(1, 1024), float32] */;
  %19696 = multiply(%19691, %19634) /* ty=Tensor[(1, 1024), float32] */;
  %19697 = multiply(%19694, %19695) /* ty=Tensor[(1, 1024), float32] */;
  %19698 = add(%19696, %19697) /* ty=Tensor[(1, 1024), float32] */;
  %19699 = sigmoid(%19689) /* ty=Tensor[(1, 1024), float32] */;
  %19700 = tanh(%19698) /* ty=Tensor[(1, 1024), float32] */;
  %19701 = multiply(%19699, %19700) /* ty=Tensor[(1, 1024), float32] */;
  %19702 = multiply(%19657, %19658) /* ty=Tensor[(1, 1024), float32] */;
  %19703 = (%19701, %19702) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19704 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19705 = concatenate(%19703, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19706 = concatenate(%19704, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19707 = nn.dense(%19705, %19706, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19708 = add(%19707, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19709 = add(%19708, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19710 = split(%19709, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19711 = %19710.3 /* ty=Tensor[(1, 1024), float32] */;
  %19712 = %19710.1 /* ty=Tensor[(1, 1024), float32] */;
  %19713 = sigmoid(%19712) /* ty=Tensor[(1, 1024), float32] */;
  %19714 = %19710.0 /* ty=Tensor[(1, 1024), float32] */;
  %19715 = %19710.2 /* ty=Tensor[(1, 1024), float32] */;
  %19716 = sigmoid(%19714) /* ty=Tensor[(1, 1024), float32] */;
  %19717 = tanh(%19715) /* ty=Tensor[(1, 1024), float32] */;
  %19718 = multiply(%19713, %19656) /* ty=Tensor[(1, 1024), float32] */;
  %19719 = multiply(%19716, %19717) /* ty=Tensor[(1, 1024), float32] */;
  %19720 = add(%19718, %19719) /* ty=Tensor[(1, 1024), float32] */;
  %19721 = sigmoid(%19711) /* ty=Tensor[(1, 1024), float32] */;
  %19722 = tanh(%19720) /* ty=Tensor[(1, 1024), float32] */;
  %19723 = %12788.108 /* ty=Tensor[(1, 2048), float32] */;
  %19724 = (%19723, %19680) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19725 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19726 = concatenate(%19724, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19727 = concatenate(%19725, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19728 = nn.dense(%19726, %19727, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19729 = add(%19728, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19730 = add(%19729, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19731 = split(%19730, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19732 = %19731.3 /* ty=Tensor[(1, 1024), float32] */;
  %19733 = %19731.1 /* ty=Tensor[(1, 1024), float32] */;
  %19734 = sigmoid(%19733) /* ty=Tensor[(1, 1024), float32] */;
  %19735 = %19731.0 /* ty=Tensor[(1, 1024), float32] */;
  %19736 = %19731.2 /* ty=Tensor[(1, 1024), float32] */;
  %19737 = sigmoid(%19735) /* ty=Tensor[(1, 1024), float32] */;
  %19738 = tanh(%19736) /* ty=Tensor[(1, 1024), float32] */;
  %19739 = multiply(%19734, %19677) /* ty=Tensor[(1, 1024), float32] */;
  %19740 = multiply(%19737, %19738) /* ty=Tensor[(1, 1024), float32] */;
  %19741 = add(%19739, %19740) /* ty=Tensor[(1, 1024), float32] */;
  %19742 = sigmoid(%19732) /* ty=Tensor[(1, 1024), float32] */;
  %19743 = tanh(%19741) /* ty=Tensor[(1, 1024), float32] */;
  %19744 = multiply(%19742, %19743) /* ty=Tensor[(1, 1024), float32] */;
  %19745 = (%19744, %19701) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19746 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19747 = concatenate(%19745, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19748 = concatenate(%19746, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19749 = nn.dense(%19747, %19748, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19750 = add(%19749, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19751 = add(%19750, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19752 = split(%19751, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19753 = %19752.3 /* ty=Tensor[(1, 1024), float32] */;
  %19754 = %19752.1 /* ty=Tensor[(1, 1024), float32] */;
  %19755 = sigmoid(%19754) /* ty=Tensor[(1, 1024), float32] */;
  %19756 = %19752.0 /* ty=Tensor[(1, 1024), float32] */;
  %19757 = %19752.2 /* ty=Tensor[(1, 1024), float32] */;
  %19758 = sigmoid(%19756) /* ty=Tensor[(1, 1024), float32] */;
  %19759 = tanh(%19757) /* ty=Tensor[(1, 1024), float32] */;
  %19760 = multiply(%19755, %19698) /* ty=Tensor[(1, 1024), float32] */;
  %19761 = multiply(%19758, %19759) /* ty=Tensor[(1, 1024), float32] */;
  %19762 = add(%19760, %19761) /* ty=Tensor[(1, 1024), float32] */;
  %19763 = sigmoid(%19753) /* ty=Tensor[(1, 1024), float32] */;
  %19764 = tanh(%19762) /* ty=Tensor[(1, 1024), float32] */;
  %19765 = multiply(%19763, %19764) /* ty=Tensor[(1, 1024), float32] */;
  %19766 = multiply(%19721, %19722) /* ty=Tensor[(1, 1024), float32] */;
  %19767 = (%19765, %19766) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19768 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19769 = concatenate(%19767, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19770 = concatenate(%19768, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19771 = nn.dense(%19769, %19770, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19772 = add(%19771, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19773 = add(%19772, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19774 = split(%19773, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19775 = %19774.3 /* ty=Tensor[(1, 1024), float32] */;
  %19776 = %19774.1 /* ty=Tensor[(1, 1024), float32] */;
  %19777 = sigmoid(%19776) /* ty=Tensor[(1, 1024), float32] */;
  %19778 = %19774.0 /* ty=Tensor[(1, 1024), float32] */;
  %19779 = %19774.2 /* ty=Tensor[(1, 1024), float32] */;
  %19780 = sigmoid(%19778) /* ty=Tensor[(1, 1024), float32] */;
  %19781 = tanh(%19779) /* ty=Tensor[(1, 1024), float32] */;
  %19782 = multiply(%19777, %19720) /* ty=Tensor[(1, 1024), float32] */;
  %19783 = multiply(%19780, %19781) /* ty=Tensor[(1, 1024), float32] */;
  %19784 = add(%19782, %19783) /* ty=Tensor[(1, 1024), float32] */;
  %19785 = sigmoid(%19775) /* ty=Tensor[(1, 1024), float32] */;
  %19786 = tanh(%19784) /* ty=Tensor[(1, 1024), float32] */;
  %19787 = %12788.109 /* ty=Tensor[(1, 2048), float32] */;
  %19788 = (%19787, %19744) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19789 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19790 = concatenate(%19788, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19791 = concatenate(%19789, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19792 = nn.dense(%19790, %19791, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19793 = add(%19792, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19794 = add(%19793, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19795 = split(%19794, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19796 = %19795.3 /* ty=Tensor[(1, 1024), float32] */;
  %19797 = %19795.1 /* ty=Tensor[(1, 1024), float32] */;
  %19798 = sigmoid(%19797) /* ty=Tensor[(1, 1024), float32] */;
  %19799 = %19795.0 /* ty=Tensor[(1, 1024), float32] */;
  %19800 = %19795.2 /* ty=Tensor[(1, 1024), float32] */;
  %19801 = sigmoid(%19799) /* ty=Tensor[(1, 1024), float32] */;
  %19802 = tanh(%19800) /* ty=Tensor[(1, 1024), float32] */;
  %19803 = multiply(%19798, %19741) /* ty=Tensor[(1, 1024), float32] */;
  %19804 = multiply(%19801, %19802) /* ty=Tensor[(1, 1024), float32] */;
  %19805 = add(%19803, %19804) /* ty=Tensor[(1, 1024), float32] */;
  %19806 = sigmoid(%19796) /* ty=Tensor[(1, 1024), float32] */;
  %19807 = tanh(%19805) /* ty=Tensor[(1, 1024), float32] */;
  %19808 = multiply(%19806, %19807) /* ty=Tensor[(1, 1024), float32] */;
  %19809 = (%19808, %19765) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19810 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19811 = concatenate(%19809, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19812 = concatenate(%19810, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19813 = nn.dense(%19811, %19812, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19814 = add(%19813, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19815 = add(%19814, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19816 = split(%19815, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19817 = %19816.3 /* ty=Tensor[(1, 1024), float32] */;
  %19818 = %19816.1 /* ty=Tensor[(1, 1024), float32] */;
  %19819 = sigmoid(%19818) /* ty=Tensor[(1, 1024), float32] */;
  %19820 = %19816.0 /* ty=Tensor[(1, 1024), float32] */;
  %19821 = %19816.2 /* ty=Tensor[(1, 1024), float32] */;
  %19822 = sigmoid(%19820) /* ty=Tensor[(1, 1024), float32] */;
  %19823 = tanh(%19821) /* ty=Tensor[(1, 1024), float32] */;
  %19824 = multiply(%19819, %19762) /* ty=Tensor[(1, 1024), float32] */;
  %19825 = multiply(%19822, %19823) /* ty=Tensor[(1, 1024), float32] */;
  %19826 = add(%19824, %19825) /* ty=Tensor[(1, 1024), float32] */;
  %19827 = sigmoid(%19817) /* ty=Tensor[(1, 1024), float32] */;
  %19828 = tanh(%19826) /* ty=Tensor[(1, 1024), float32] */;
  %19829 = multiply(%19827, %19828) /* ty=Tensor[(1, 1024), float32] */;
  %19830 = multiply(%19785, %19786) /* ty=Tensor[(1, 1024), float32] */;
  %19831 = (%19829, %19830) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19832 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19833 = concatenate(%19831, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19834 = concatenate(%19832, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19835 = nn.dense(%19833, %19834, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19836 = add(%19835, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19837 = add(%19836, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19838 = split(%19837, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19839 = %19838.3 /* ty=Tensor[(1, 1024), float32] */;
  %19840 = %19838.1 /* ty=Tensor[(1, 1024), float32] */;
  %19841 = sigmoid(%19840) /* ty=Tensor[(1, 1024), float32] */;
  %19842 = %19838.0 /* ty=Tensor[(1, 1024), float32] */;
  %19843 = %19838.2 /* ty=Tensor[(1, 1024), float32] */;
  %19844 = sigmoid(%19842) /* ty=Tensor[(1, 1024), float32] */;
  %19845 = tanh(%19843) /* ty=Tensor[(1, 1024), float32] */;
  %19846 = multiply(%19841, %19784) /* ty=Tensor[(1, 1024), float32] */;
  %19847 = multiply(%19844, %19845) /* ty=Tensor[(1, 1024), float32] */;
  %19848 = add(%19846, %19847) /* ty=Tensor[(1, 1024), float32] */;
  %19849 = sigmoid(%19839) /* ty=Tensor[(1, 1024), float32] */;
  %19850 = tanh(%19848) /* ty=Tensor[(1, 1024), float32] */;
  %19851 = %12788.110 /* ty=Tensor[(1, 2048), float32] */;
  %19852 = (%19851, %19808) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19853 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19854 = concatenate(%19852, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19855 = concatenate(%19853, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19856 = nn.dense(%19854, %19855, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19857 = add(%19856, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19858 = add(%19857, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19859 = split(%19858, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19860 = %19859.3 /* ty=Tensor[(1, 1024), float32] */;
  %19861 = %19859.1 /* ty=Tensor[(1, 1024), float32] */;
  %19862 = sigmoid(%19861) /* ty=Tensor[(1, 1024), float32] */;
  %19863 = %19859.0 /* ty=Tensor[(1, 1024), float32] */;
  %19864 = %19859.2 /* ty=Tensor[(1, 1024), float32] */;
  %19865 = sigmoid(%19863) /* ty=Tensor[(1, 1024), float32] */;
  %19866 = tanh(%19864) /* ty=Tensor[(1, 1024), float32] */;
  %19867 = multiply(%19862, %19805) /* ty=Tensor[(1, 1024), float32] */;
  %19868 = multiply(%19865, %19866) /* ty=Tensor[(1, 1024), float32] */;
  %19869 = add(%19867, %19868) /* ty=Tensor[(1, 1024), float32] */;
  %19870 = sigmoid(%19860) /* ty=Tensor[(1, 1024), float32] */;
  %19871 = tanh(%19869) /* ty=Tensor[(1, 1024), float32] */;
  %19872 = multiply(%19870, %19871) /* ty=Tensor[(1, 1024), float32] */;
  %19873 = (%19872, %19829) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19874 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19875 = concatenate(%19873, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19876 = concatenate(%19874, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19877 = nn.dense(%19875, %19876, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19878 = add(%19877, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19879 = add(%19878, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19880 = split(%19879, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19881 = %19880.3 /* ty=Tensor[(1, 1024), float32] */;
  %19882 = %19880.1 /* ty=Tensor[(1, 1024), float32] */;
  %19883 = sigmoid(%19882) /* ty=Tensor[(1, 1024), float32] */;
  %19884 = %19880.0 /* ty=Tensor[(1, 1024), float32] */;
  %19885 = %19880.2 /* ty=Tensor[(1, 1024), float32] */;
  %19886 = sigmoid(%19884) /* ty=Tensor[(1, 1024), float32] */;
  %19887 = tanh(%19885) /* ty=Tensor[(1, 1024), float32] */;
  %19888 = multiply(%19883, %19826) /* ty=Tensor[(1, 1024), float32] */;
  %19889 = multiply(%19886, %19887) /* ty=Tensor[(1, 1024), float32] */;
  %19890 = add(%19888, %19889) /* ty=Tensor[(1, 1024), float32] */;
  %19891 = sigmoid(%19881) /* ty=Tensor[(1, 1024), float32] */;
  %19892 = tanh(%19890) /* ty=Tensor[(1, 1024), float32] */;
  %19893 = multiply(%19891, %19892) /* ty=Tensor[(1, 1024), float32] */;
  %19894 = multiply(%19849, %19850) /* ty=Tensor[(1, 1024), float32] */;
  %19895 = (%19893, %19894) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19896 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19897 = concatenate(%19895, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19898 = concatenate(%19896, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19899 = nn.dense(%19897, %19898, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19900 = add(%19899, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19901 = add(%19900, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19902 = split(%19901, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19903 = %19902.3 /* ty=Tensor[(1, 1024), float32] */;
  %19904 = %19902.1 /* ty=Tensor[(1, 1024), float32] */;
  %19905 = sigmoid(%19904) /* ty=Tensor[(1, 1024), float32] */;
  %19906 = %19902.0 /* ty=Tensor[(1, 1024), float32] */;
  %19907 = %19902.2 /* ty=Tensor[(1, 1024), float32] */;
  %19908 = sigmoid(%19906) /* ty=Tensor[(1, 1024), float32] */;
  %19909 = tanh(%19907) /* ty=Tensor[(1, 1024), float32] */;
  %19910 = multiply(%19905, %19848) /* ty=Tensor[(1, 1024), float32] */;
  %19911 = multiply(%19908, %19909) /* ty=Tensor[(1, 1024), float32] */;
  %19912 = add(%19910, %19911) /* ty=Tensor[(1, 1024), float32] */;
  %19913 = sigmoid(%19903) /* ty=Tensor[(1, 1024), float32] */;
  %19914 = tanh(%19912) /* ty=Tensor[(1, 1024), float32] */;
  %19915 = %12788.111 /* ty=Tensor[(1, 2048), float32] */;
  %19916 = (%19915, %19872) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19917 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19918 = concatenate(%19916, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19919 = concatenate(%19917, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19920 = nn.dense(%19918, %19919, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19921 = add(%19920, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19922 = add(%19921, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19923 = split(%19922, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19924 = %19923.3 /* ty=Tensor[(1, 1024), float32] */;
  %19925 = %19923.1 /* ty=Tensor[(1, 1024), float32] */;
  %19926 = sigmoid(%19925) /* ty=Tensor[(1, 1024), float32] */;
  %19927 = %19923.0 /* ty=Tensor[(1, 1024), float32] */;
  %19928 = %19923.2 /* ty=Tensor[(1, 1024), float32] */;
  %19929 = sigmoid(%19927) /* ty=Tensor[(1, 1024), float32] */;
  %19930 = tanh(%19928) /* ty=Tensor[(1, 1024), float32] */;
  %19931 = multiply(%19926, %19869) /* ty=Tensor[(1, 1024), float32] */;
  %19932 = multiply(%19929, %19930) /* ty=Tensor[(1, 1024), float32] */;
  %19933 = add(%19931, %19932) /* ty=Tensor[(1, 1024), float32] */;
  %19934 = sigmoid(%19924) /* ty=Tensor[(1, 1024), float32] */;
  %19935 = tanh(%19933) /* ty=Tensor[(1, 1024), float32] */;
  %19936 = multiply(%19934, %19935) /* ty=Tensor[(1, 1024), float32] */;
  %19937 = (%19936, %19893) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19938 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19939 = concatenate(%19937, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19940 = concatenate(%19938, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19941 = nn.dense(%19939, %19940, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19942 = add(%19941, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19943 = add(%19942, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %19944 = split(%19943, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19945 = %19944.3 /* ty=Tensor[(1, 1024), float32] */;
  %19946 = %19944.1 /* ty=Tensor[(1, 1024), float32] */;
  %19947 = sigmoid(%19946) /* ty=Tensor[(1, 1024), float32] */;
  %19948 = %19944.0 /* ty=Tensor[(1, 1024), float32] */;
  %19949 = %19944.2 /* ty=Tensor[(1, 1024), float32] */;
  %19950 = sigmoid(%19948) /* ty=Tensor[(1, 1024), float32] */;
  %19951 = tanh(%19949) /* ty=Tensor[(1, 1024), float32] */;
  %19952 = multiply(%19947, %19890) /* ty=Tensor[(1, 1024), float32] */;
  %19953 = multiply(%19950, %19951) /* ty=Tensor[(1, 1024), float32] */;
  %19954 = add(%19952, %19953) /* ty=Tensor[(1, 1024), float32] */;
  %19955 = sigmoid(%19945) /* ty=Tensor[(1, 1024), float32] */;
  %19956 = tanh(%19954) /* ty=Tensor[(1, 1024), float32] */;
  %19957 = multiply(%19955, %19956) /* ty=Tensor[(1, 1024), float32] */;
  %19958 = multiply(%19913, %19914) /* ty=Tensor[(1, 1024), float32] */;
  %19959 = (%19957, %19958) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19960 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %19961 = concatenate(%19959, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %19962 = concatenate(%19960, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %19963 = nn.dense(%19961, %19962, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19964 = add(%19963, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19965 = add(%19964, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %19966 = split(%19965, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19967 = %19966.3 /* ty=Tensor[(1, 1024), float32] */;
  %19968 = %19966.1 /* ty=Tensor[(1, 1024), float32] */;
  %19969 = sigmoid(%19968) /* ty=Tensor[(1, 1024), float32] */;
  %19970 = %19966.0 /* ty=Tensor[(1, 1024), float32] */;
  %19971 = %19966.2 /* ty=Tensor[(1, 1024), float32] */;
  %19972 = sigmoid(%19970) /* ty=Tensor[(1, 1024), float32] */;
  %19973 = tanh(%19971) /* ty=Tensor[(1, 1024), float32] */;
  %19974 = multiply(%19969, %19912) /* ty=Tensor[(1, 1024), float32] */;
  %19975 = multiply(%19972, %19973) /* ty=Tensor[(1, 1024), float32] */;
  %19976 = add(%19974, %19975) /* ty=Tensor[(1, 1024), float32] */;
  %19977 = sigmoid(%19967) /* ty=Tensor[(1, 1024), float32] */;
  %19978 = tanh(%19976) /* ty=Tensor[(1, 1024), float32] */;
  %19979 = %12788.112 /* ty=Tensor[(1, 2048), float32] */;
  %19980 = (%19979, %19936) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %19981 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %19982 = concatenate(%19980, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %19983 = concatenate(%19981, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %19984 = nn.dense(%19982, %19983, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %19985 = add(%19984, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19986 = add(%19985, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %19987 = split(%19986, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %19988 = %19987.3 /* ty=Tensor[(1, 1024), float32] */;
  %19989 = %19987.1 /* ty=Tensor[(1, 1024), float32] */;
  %19990 = sigmoid(%19989) /* ty=Tensor[(1, 1024), float32] */;
  %19991 = %19987.0 /* ty=Tensor[(1, 1024), float32] */;
  %19992 = %19987.2 /* ty=Tensor[(1, 1024), float32] */;
  %19993 = sigmoid(%19991) /* ty=Tensor[(1, 1024), float32] */;
  %19994 = tanh(%19992) /* ty=Tensor[(1, 1024), float32] */;
  %19995 = multiply(%19990, %19933) /* ty=Tensor[(1, 1024), float32] */;
  %19996 = multiply(%19993, %19994) /* ty=Tensor[(1, 1024), float32] */;
  %19997 = add(%19995, %19996) /* ty=Tensor[(1, 1024), float32] */;
  %19998 = sigmoid(%19988) /* ty=Tensor[(1, 1024), float32] */;
  %19999 = tanh(%19997) /* ty=Tensor[(1, 1024), float32] */;
  %20000 = multiply(%19998, %19999) /* ty=Tensor[(1, 1024), float32] */;
  %20001 = (%20000, %19957) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20002 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20003 = concatenate(%20001, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20004 = concatenate(%20002, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20005 = nn.dense(%20003, %20004, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20006 = add(%20005, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20007 = add(%20006, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20008 = split(%20007, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20009 = %20008.3 /* ty=Tensor[(1, 1024), float32] */;
  %20010 = %20008.1 /* ty=Tensor[(1, 1024), float32] */;
  %20011 = sigmoid(%20010) /* ty=Tensor[(1, 1024), float32] */;
  %20012 = %20008.0 /* ty=Tensor[(1, 1024), float32] */;
  %20013 = %20008.2 /* ty=Tensor[(1, 1024), float32] */;
  %20014 = sigmoid(%20012) /* ty=Tensor[(1, 1024), float32] */;
  %20015 = tanh(%20013) /* ty=Tensor[(1, 1024), float32] */;
  %20016 = multiply(%20011, %19954) /* ty=Tensor[(1, 1024), float32] */;
  %20017 = multiply(%20014, %20015) /* ty=Tensor[(1, 1024), float32] */;
  %20018 = add(%20016, %20017) /* ty=Tensor[(1, 1024), float32] */;
  %20019 = sigmoid(%20009) /* ty=Tensor[(1, 1024), float32] */;
  %20020 = tanh(%20018) /* ty=Tensor[(1, 1024), float32] */;
  %20021 = multiply(%20019, %20020) /* ty=Tensor[(1, 1024), float32] */;
  %20022 = multiply(%19977, %19978) /* ty=Tensor[(1, 1024), float32] */;
  %20023 = (%20021, %20022) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20024 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20025 = concatenate(%20023, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20026 = concatenate(%20024, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20027 = nn.dense(%20025, %20026, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20028 = add(%20027, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20029 = add(%20028, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20030 = split(%20029, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20031 = %20030.3 /* ty=Tensor[(1, 1024), float32] */;
  %20032 = %20030.1 /* ty=Tensor[(1, 1024), float32] */;
  %20033 = sigmoid(%20032) /* ty=Tensor[(1, 1024), float32] */;
  %20034 = %20030.0 /* ty=Tensor[(1, 1024), float32] */;
  %20035 = %20030.2 /* ty=Tensor[(1, 1024), float32] */;
  %20036 = sigmoid(%20034) /* ty=Tensor[(1, 1024), float32] */;
  %20037 = tanh(%20035) /* ty=Tensor[(1, 1024), float32] */;
  %20038 = multiply(%20033, %19976) /* ty=Tensor[(1, 1024), float32] */;
  %20039 = multiply(%20036, %20037) /* ty=Tensor[(1, 1024), float32] */;
  %20040 = add(%20038, %20039) /* ty=Tensor[(1, 1024), float32] */;
  %20041 = sigmoid(%20031) /* ty=Tensor[(1, 1024), float32] */;
  %20042 = tanh(%20040) /* ty=Tensor[(1, 1024), float32] */;
  %20043 = %12788.113 /* ty=Tensor[(1, 2048), float32] */;
  %20044 = (%20043, %20000) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20045 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20046 = concatenate(%20044, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20047 = concatenate(%20045, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20048 = nn.dense(%20046, %20047, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20049 = add(%20048, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20050 = add(%20049, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20051 = split(%20050, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20052 = %20051.3 /* ty=Tensor[(1, 1024), float32] */;
  %20053 = %20051.1 /* ty=Tensor[(1, 1024), float32] */;
  %20054 = sigmoid(%20053) /* ty=Tensor[(1, 1024), float32] */;
  %20055 = %20051.0 /* ty=Tensor[(1, 1024), float32] */;
  %20056 = %20051.2 /* ty=Tensor[(1, 1024), float32] */;
  %20057 = sigmoid(%20055) /* ty=Tensor[(1, 1024), float32] */;
  %20058 = tanh(%20056) /* ty=Tensor[(1, 1024), float32] */;
  %20059 = multiply(%20054, %19997) /* ty=Tensor[(1, 1024), float32] */;
  %20060 = multiply(%20057, %20058) /* ty=Tensor[(1, 1024), float32] */;
  %20061 = add(%20059, %20060) /* ty=Tensor[(1, 1024), float32] */;
  %20062 = sigmoid(%20052) /* ty=Tensor[(1, 1024), float32] */;
  %20063 = tanh(%20061) /* ty=Tensor[(1, 1024), float32] */;
  %20064 = multiply(%20062, %20063) /* ty=Tensor[(1, 1024), float32] */;
  %20065 = (%20064, %20021) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20066 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20067 = concatenate(%20065, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20068 = concatenate(%20066, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20069 = nn.dense(%20067, %20068, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20070 = add(%20069, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20071 = add(%20070, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20072 = split(%20071, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20073 = %20072.3 /* ty=Tensor[(1, 1024), float32] */;
  %20074 = %20072.1 /* ty=Tensor[(1, 1024), float32] */;
  %20075 = sigmoid(%20074) /* ty=Tensor[(1, 1024), float32] */;
  %20076 = %20072.0 /* ty=Tensor[(1, 1024), float32] */;
  %20077 = %20072.2 /* ty=Tensor[(1, 1024), float32] */;
  %20078 = sigmoid(%20076) /* ty=Tensor[(1, 1024), float32] */;
  %20079 = tanh(%20077) /* ty=Tensor[(1, 1024), float32] */;
  %20080 = multiply(%20075, %20018) /* ty=Tensor[(1, 1024), float32] */;
  %20081 = multiply(%20078, %20079) /* ty=Tensor[(1, 1024), float32] */;
  %20082 = add(%20080, %20081) /* ty=Tensor[(1, 1024), float32] */;
  %20083 = sigmoid(%20073) /* ty=Tensor[(1, 1024), float32] */;
  %20084 = tanh(%20082) /* ty=Tensor[(1, 1024), float32] */;
  %20085 = multiply(%20083, %20084) /* ty=Tensor[(1, 1024), float32] */;
  %20086 = multiply(%20041, %20042) /* ty=Tensor[(1, 1024), float32] */;
  %20087 = (%20085, %20086) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20088 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20089 = concatenate(%20087, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20090 = concatenate(%20088, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20091 = nn.dense(%20089, %20090, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20092 = add(%20091, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20093 = add(%20092, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20094 = split(%20093, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20095 = %20094.3 /* ty=Tensor[(1, 1024), float32] */;
  %20096 = %20094.1 /* ty=Tensor[(1, 1024), float32] */;
  %20097 = sigmoid(%20096) /* ty=Tensor[(1, 1024), float32] */;
  %20098 = %20094.0 /* ty=Tensor[(1, 1024), float32] */;
  %20099 = %20094.2 /* ty=Tensor[(1, 1024), float32] */;
  %20100 = sigmoid(%20098) /* ty=Tensor[(1, 1024), float32] */;
  %20101 = tanh(%20099) /* ty=Tensor[(1, 1024), float32] */;
  %20102 = multiply(%20097, %20040) /* ty=Tensor[(1, 1024), float32] */;
  %20103 = multiply(%20100, %20101) /* ty=Tensor[(1, 1024), float32] */;
  %20104 = add(%20102, %20103) /* ty=Tensor[(1, 1024), float32] */;
  %20105 = sigmoid(%20095) /* ty=Tensor[(1, 1024), float32] */;
  %20106 = tanh(%20104) /* ty=Tensor[(1, 1024), float32] */;
  %20107 = %12788.114 /* ty=Tensor[(1, 2048), float32] */;
  %20108 = (%20107, %20064) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20109 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20110 = concatenate(%20108, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20111 = concatenate(%20109, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20112 = nn.dense(%20110, %20111, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20113 = add(%20112, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20114 = add(%20113, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20115 = split(%20114, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20116 = %20115.3 /* ty=Tensor[(1, 1024), float32] */;
  %20117 = %20115.1 /* ty=Tensor[(1, 1024), float32] */;
  %20118 = sigmoid(%20117) /* ty=Tensor[(1, 1024), float32] */;
  %20119 = %20115.0 /* ty=Tensor[(1, 1024), float32] */;
  %20120 = %20115.2 /* ty=Tensor[(1, 1024), float32] */;
  %20121 = sigmoid(%20119) /* ty=Tensor[(1, 1024), float32] */;
  %20122 = tanh(%20120) /* ty=Tensor[(1, 1024), float32] */;
  %20123 = multiply(%20118, %20061) /* ty=Tensor[(1, 1024), float32] */;
  %20124 = multiply(%20121, %20122) /* ty=Tensor[(1, 1024), float32] */;
  %20125 = add(%20123, %20124) /* ty=Tensor[(1, 1024), float32] */;
  %20126 = sigmoid(%20116) /* ty=Tensor[(1, 1024), float32] */;
  %20127 = tanh(%20125) /* ty=Tensor[(1, 1024), float32] */;
  %20128 = multiply(%20126, %20127) /* ty=Tensor[(1, 1024), float32] */;
  %20129 = (%20128, %20085) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20130 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20131 = concatenate(%20129, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20132 = concatenate(%20130, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20133 = nn.dense(%20131, %20132, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20134 = add(%20133, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20135 = add(%20134, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20136 = split(%20135, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20137 = %20136.3 /* ty=Tensor[(1, 1024), float32] */;
  %20138 = %20136.1 /* ty=Tensor[(1, 1024), float32] */;
  %20139 = sigmoid(%20138) /* ty=Tensor[(1, 1024), float32] */;
  %20140 = %20136.0 /* ty=Tensor[(1, 1024), float32] */;
  %20141 = %20136.2 /* ty=Tensor[(1, 1024), float32] */;
  %20142 = sigmoid(%20140) /* ty=Tensor[(1, 1024), float32] */;
  %20143 = tanh(%20141) /* ty=Tensor[(1, 1024), float32] */;
  %20144 = multiply(%20139, %20082) /* ty=Tensor[(1, 1024), float32] */;
  %20145 = multiply(%20142, %20143) /* ty=Tensor[(1, 1024), float32] */;
  %20146 = add(%20144, %20145) /* ty=Tensor[(1, 1024), float32] */;
  %20147 = sigmoid(%20137) /* ty=Tensor[(1, 1024), float32] */;
  %20148 = tanh(%20146) /* ty=Tensor[(1, 1024), float32] */;
  %20149 = multiply(%20147, %20148) /* ty=Tensor[(1, 1024), float32] */;
  %20150 = multiply(%20105, %20106) /* ty=Tensor[(1, 1024), float32] */;
  %20151 = (%20149, %20150) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20152 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20153 = concatenate(%20151, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20154 = concatenate(%20152, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20155 = nn.dense(%20153, %20154, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20156 = add(%20155, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20157 = add(%20156, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20158 = split(%20157, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20159 = %20158.3 /* ty=Tensor[(1, 1024), float32] */;
  %20160 = %20158.1 /* ty=Tensor[(1, 1024), float32] */;
  %20161 = sigmoid(%20160) /* ty=Tensor[(1, 1024), float32] */;
  %20162 = %20158.0 /* ty=Tensor[(1, 1024), float32] */;
  %20163 = %20158.2 /* ty=Tensor[(1, 1024), float32] */;
  %20164 = sigmoid(%20162) /* ty=Tensor[(1, 1024), float32] */;
  %20165 = tanh(%20163) /* ty=Tensor[(1, 1024), float32] */;
  %20166 = multiply(%20161, %20104) /* ty=Tensor[(1, 1024), float32] */;
  %20167 = multiply(%20164, %20165) /* ty=Tensor[(1, 1024), float32] */;
  %20168 = add(%20166, %20167) /* ty=Tensor[(1, 1024), float32] */;
  %20169 = sigmoid(%20159) /* ty=Tensor[(1, 1024), float32] */;
  %20170 = tanh(%20168) /* ty=Tensor[(1, 1024), float32] */;
  %20171 = %12788.115 /* ty=Tensor[(1, 2048), float32] */;
  %20172 = (%20171, %20128) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20173 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20174 = concatenate(%20172, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20175 = concatenate(%20173, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20176 = nn.dense(%20174, %20175, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20177 = add(%20176, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20178 = add(%20177, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20179 = split(%20178, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20180 = %20179.3 /* ty=Tensor[(1, 1024), float32] */;
  %20181 = %20179.1 /* ty=Tensor[(1, 1024), float32] */;
  %20182 = sigmoid(%20181) /* ty=Tensor[(1, 1024), float32] */;
  %20183 = %20179.0 /* ty=Tensor[(1, 1024), float32] */;
  %20184 = %20179.2 /* ty=Tensor[(1, 1024), float32] */;
  %20185 = sigmoid(%20183) /* ty=Tensor[(1, 1024), float32] */;
  %20186 = tanh(%20184) /* ty=Tensor[(1, 1024), float32] */;
  %20187 = multiply(%20182, %20125) /* ty=Tensor[(1, 1024), float32] */;
  %20188 = multiply(%20185, %20186) /* ty=Tensor[(1, 1024), float32] */;
  %20189 = add(%20187, %20188) /* ty=Tensor[(1, 1024), float32] */;
  %20190 = sigmoid(%20180) /* ty=Tensor[(1, 1024), float32] */;
  %20191 = tanh(%20189) /* ty=Tensor[(1, 1024), float32] */;
  %20192 = multiply(%20190, %20191) /* ty=Tensor[(1, 1024), float32] */;
  %20193 = (%20192, %20149) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20194 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20195 = concatenate(%20193, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20196 = concatenate(%20194, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20197 = nn.dense(%20195, %20196, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20198 = add(%20197, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20199 = add(%20198, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20200 = split(%20199, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20201 = %20200.3 /* ty=Tensor[(1, 1024), float32] */;
  %20202 = %20200.1 /* ty=Tensor[(1, 1024), float32] */;
  %20203 = sigmoid(%20202) /* ty=Tensor[(1, 1024), float32] */;
  %20204 = %20200.0 /* ty=Tensor[(1, 1024), float32] */;
  %20205 = %20200.2 /* ty=Tensor[(1, 1024), float32] */;
  %20206 = sigmoid(%20204) /* ty=Tensor[(1, 1024), float32] */;
  %20207 = tanh(%20205) /* ty=Tensor[(1, 1024), float32] */;
  %20208 = multiply(%20203, %20146) /* ty=Tensor[(1, 1024), float32] */;
  %20209 = multiply(%20206, %20207) /* ty=Tensor[(1, 1024), float32] */;
  %20210 = add(%20208, %20209) /* ty=Tensor[(1, 1024), float32] */;
  %20211 = sigmoid(%20201) /* ty=Tensor[(1, 1024), float32] */;
  %20212 = tanh(%20210) /* ty=Tensor[(1, 1024), float32] */;
  %20213 = multiply(%20211, %20212) /* ty=Tensor[(1, 1024), float32] */;
  %20214 = multiply(%20169, %20170) /* ty=Tensor[(1, 1024), float32] */;
  %20215 = (%20213, %20214) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20216 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20217 = concatenate(%20215, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20218 = concatenate(%20216, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20219 = nn.dense(%20217, %20218, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20220 = add(%20219, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20221 = add(%20220, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20222 = split(%20221, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20223 = %20222.3 /* ty=Tensor[(1, 1024), float32] */;
  %20224 = %20222.1 /* ty=Tensor[(1, 1024), float32] */;
  %20225 = sigmoid(%20224) /* ty=Tensor[(1, 1024), float32] */;
  %20226 = %20222.0 /* ty=Tensor[(1, 1024), float32] */;
  %20227 = %20222.2 /* ty=Tensor[(1, 1024), float32] */;
  %20228 = sigmoid(%20226) /* ty=Tensor[(1, 1024), float32] */;
  %20229 = tanh(%20227) /* ty=Tensor[(1, 1024), float32] */;
  %20230 = multiply(%20225, %20168) /* ty=Tensor[(1, 1024), float32] */;
  %20231 = multiply(%20228, %20229) /* ty=Tensor[(1, 1024), float32] */;
  %20232 = add(%20230, %20231) /* ty=Tensor[(1, 1024), float32] */;
  %20233 = sigmoid(%20223) /* ty=Tensor[(1, 1024), float32] */;
  %20234 = tanh(%20232) /* ty=Tensor[(1, 1024), float32] */;
  %20235 = %12788.116 /* ty=Tensor[(1, 2048), float32] */;
  %20236 = (%20235, %20192) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20237 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20238 = concatenate(%20236, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20239 = concatenate(%20237, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20240 = nn.dense(%20238, %20239, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20241 = add(%20240, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20242 = add(%20241, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20243 = split(%20242, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20244 = %20243.3 /* ty=Tensor[(1, 1024), float32] */;
  %20245 = %20243.1 /* ty=Tensor[(1, 1024), float32] */;
  %20246 = sigmoid(%20245) /* ty=Tensor[(1, 1024), float32] */;
  %20247 = %20243.0 /* ty=Tensor[(1, 1024), float32] */;
  %20248 = %20243.2 /* ty=Tensor[(1, 1024), float32] */;
  %20249 = sigmoid(%20247) /* ty=Tensor[(1, 1024), float32] */;
  %20250 = tanh(%20248) /* ty=Tensor[(1, 1024), float32] */;
  %20251 = multiply(%20246, %20189) /* ty=Tensor[(1, 1024), float32] */;
  %20252 = multiply(%20249, %20250) /* ty=Tensor[(1, 1024), float32] */;
  %20253 = add(%20251, %20252) /* ty=Tensor[(1, 1024), float32] */;
  %20254 = sigmoid(%20244) /* ty=Tensor[(1, 1024), float32] */;
  %20255 = tanh(%20253) /* ty=Tensor[(1, 1024), float32] */;
  %20256 = multiply(%20254, %20255) /* ty=Tensor[(1, 1024), float32] */;
  %20257 = (%20256, %20213) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20258 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20259 = concatenate(%20257, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20260 = concatenate(%20258, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20261 = nn.dense(%20259, %20260, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20262 = add(%20261, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20263 = add(%20262, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20264 = split(%20263, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20265 = %20264.3 /* ty=Tensor[(1, 1024), float32] */;
  %20266 = %20264.1 /* ty=Tensor[(1, 1024), float32] */;
  %20267 = sigmoid(%20266) /* ty=Tensor[(1, 1024), float32] */;
  %20268 = %20264.0 /* ty=Tensor[(1, 1024), float32] */;
  %20269 = %20264.2 /* ty=Tensor[(1, 1024), float32] */;
  %20270 = sigmoid(%20268) /* ty=Tensor[(1, 1024), float32] */;
  %20271 = tanh(%20269) /* ty=Tensor[(1, 1024), float32] */;
  %20272 = multiply(%20267, %20210) /* ty=Tensor[(1, 1024), float32] */;
  %20273 = multiply(%20270, %20271) /* ty=Tensor[(1, 1024), float32] */;
  %20274 = add(%20272, %20273) /* ty=Tensor[(1, 1024), float32] */;
  %20275 = sigmoid(%20265) /* ty=Tensor[(1, 1024), float32] */;
  %20276 = tanh(%20274) /* ty=Tensor[(1, 1024), float32] */;
  %20277 = multiply(%20275, %20276) /* ty=Tensor[(1, 1024), float32] */;
  %20278 = multiply(%20233, %20234) /* ty=Tensor[(1, 1024), float32] */;
  %20279 = (%20277, %20278) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20280 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20281 = concatenate(%20279, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20282 = concatenate(%20280, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20283 = nn.dense(%20281, %20282, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20284 = add(%20283, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20285 = add(%20284, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20286 = split(%20285, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20287 = %20286.3 /* ty=Tensor[(1, 1024), float32] */;
  %20288 = %20286.1 /* ty=Tensor[(1, 1024), float32] */;
  %20289 = sigmoid(%20288) /* ty=Tensor[(1, 1024), float32] */;
  %20290 = %20286.0 /* ty=Tensor[(1, 1024), float32] */;
  %20291 = %20286.2 /* ty=Tensor[(1, 1024), float32] */;
  %20292 = sigmoid(%20290) /* ty=Tensor[(1, 1024), float32] */;
  %20293 = tanh(%20291) /* ty=Tensor[(1, 1024), float32] */;
  %20294 = multiply(%20289, %20232) /* ty=Tensor[(1, 1024), float32] */;
  %20295 = multiply(%20292, %20293) /* ty=Tensor[(1, 1024), float32] */;
  %20296 = add(%20294, %20295) /* ty=Tensor[(1, 1024), float32] */;
  %20297 = sigmoid(%20287) /* ty=Tensor[(1, 1024), float32] */;
  %20298 = tanh(%20296) /* ty=Tensor[(1, 1024), float32] */;
  %20299 = %12788.117 /* ty=Tensor[(1, 2048), float32] */;
  %20300 = (%20299, %20256) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20301 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20302 = concatenate(%20300, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20303 = concatenate(%20301, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20304 = nn.dense(%20302, %20303, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20305 = add(%20304, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20306 = add(%20305, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20307 = split(%20306, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20308 = %20307.3 /* ty=Tensor[(1, 1024), float32] */;
  %20309 = %20307.1 /* ty=Tensor[(1, 1024), float32] */;
  %20310 = sigmoid(%20309) /* ty=Tensor[(1, 1024), float32] */;
  %20311 = %20307.0 /* ty=Tensor[(1, 1024), float32] */;
  %20312 = %20307.2 /* ty=Tensor[(1, 1024), float32] */;
  %20313 = sigmoid(%20311) /* ty=Tensor[(1, 1024), float32] */;
  %20314 = tanh(%20312) /* ty=Tensor[(1, 1024), float32] */;
  %20315 = multiply(%20310, %20253) /* ty=Tensor[(1, 1024), float32] */;
  %20316 = multiply(%20313, %20314) /* ty=Tensor[(1, 1024), float32] */;
  %20317 = add(%20315, %20316) /* ty=Tensor[(1, 1024), float32] */;
  %20318 = sigmoid(%20308) /* ty=Tensor[(1, 1024), float32] */;
  %20319 = tanh(%20317) /* ty=Tensor[(1, 1024), float32] */;
  %20320 = multiply(%20318, %20319) /* ty=Tensor[(1, 1024), float32] */;
  %20321 = (%20320, %20277) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20322 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20323 = concatenate(%20321, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20324 = concatenate(%20322, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20325 = nn.dense(%20323, %20324, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20326 = add(%20325, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20327 = add(%20326, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20328 = split(%20327, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20329 = %20328.3 /* ty=Tensor[(1, 1024), float32] */;
  %20330 = %20328.1 /* ty=Tensor[(1, 1024), float32] */;
  %20331 = sigmoid(%20330) /* ty=Tensor[(1, 1024), float32] */;
  %20332 = %20328.0 /* ty=Tensor[(1, 1024), float32] */;
  %20333 = %20328.2 /* ty=Tensor[(1, 1024), float32] */;
  %20334 = sigmoid(%20332) /* ty=Tensor[(1, 1024), float32] */;
  %20335 = tanh(%20333) /* ty=Tensor[(1, 1024), float32] */;
  %20336 = multiply(%20331, %20274) /* ty=Tensor[(1, 1024), float32] */;
  %20337 = multiply(%20334, %20335) /* ty=Tensor[(1, 1024), float32] */;
  %20338 = add(%20336, %20337) /* ty=Tensor[(1, 1024), float32] */;
  %20339 = sigmoid(%20329) /* ty=Tensor[(1, 1024), float32] */;
  %20340 = tanh(%20338) /* ty=Tensor[(1, 1024), float32] */;
  %20341 = multiply(%20339, %20340) /* ty=Tensor[(1, 1024), float32] */;
  %20342 = multiply(%20297, %20298) /* ty=Tensor[(1, 1024), float32] */;
  %20343 = (%20341, %20342) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20344 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20345 = concatenate(%20343, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20346 = concatenate(%20344, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20347 = nn.dense(%20345, %20346, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20348 = add(%20347, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20349 = add(%20348, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20350 = split(%20349, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20351 = %20350.3 /* ty=Tensor[(1, 1024), float32] */;
  %20352 = %20350.1 /* ty=Tensor[(1, 1024), float32] */;
  %20353 = sigmoid(%20352) /* ty=Tensor[(1, 1024), float32] */;
  %20354 = %20350.0 /* ty=Tensor[(1, 1024), float32] */;
  %20355 = %20350.2 /* ty=Tensor[(1, 1024), float32] */;
  %20356 = sigmoid(%20354) /* ty=Tensor[(1, 1024), float32] */;
  %20357 = tanh(%20355) /* ty=Tensor[(1, 1024), float32] */;
  %20358 = multiply(%20353, %20296) /* ty=Tensor[(1, 1024), float32] */;
  %20359 = multiply(%20356, %20357) /* ty=Tensor[(1, 1024), float32] */;
  %20360 = add(%20358, %20359) /* ty=Tensor[(1, 1024), float32] */;
  %20361 = sigmoid(%20351) /* ty=Tensor[(1, 1024), float32] */;
  %20362 = tanh(%20360) /* ty=Tensor[(1, 1024), float32] */;
  %20363 = %12788.118 /* ty=Tensor[(1, 2048), float32] */;
  %20364 = (%20363, %20320) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20365 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20366 = concatenate(%20364, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20367 = concatenate(%20365, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20368 = nn.dense(%20366, %20367, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20369 = add(%20368, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20370 = add(%20369, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20371 = split(%20370, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20372 = %20371.3 /* ty=Tensor[(1, 1024), float32] */;
  %20373 = %20371.1 /* ty=Tensor[(1, 1024), float32] */;
  %20374 = sigmoid(%20373) /* ty=Tensor[(1, 1024), float32] */;
  %20375 = %20371.0 /* ty=Tensor[(1, 1024), float32] */;
  %20376 = %20371.2 /* ty=Tensor[(1, 1024), float32] */;
  %20377 = sigmoid(%20375) /* ty=Tensor[(1, 1024), float32] */;
  %20378 = tanh(%20376) /* ty=Tensor[(1, 1024), float32] */;
  %20379 = multiply(%20374, %20317) /* ty=Tensor[(1, 1024), float32] */;
  %20380 = multiply(%20377, %20378) /* ty=Tensor[(1, 1024), float32] */;
  %20381 = add(%20379, %20380) /* ty=Tensor[(1, 1024), float32] */;
  %20382 = sigmoid(%20372) /* ty=Tensor[(1, 1024), float32] */;
  %20383 = tanh(%20381) /* ty=Tensor[(1, 1024), float32] */;
  %20384 = multiply(%20382, %20383) /* ty=Tensor[(1, 1024), float32] */;
  %20385 = (%20384, %20341) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20386 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20387 = concatenate(%20385, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20388 = concatenate(%20386, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20389 = nn.dense(%20387, %20388, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20390 = add(%20389, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20391 = add(%20390, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20392 = split(%20391, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20393 = %20392.3 /* ty=Tensor[(1, 1024), float32] */;
  %20394 = %20392.1 /* ty=Tensor[(1, 1024), float32] */;
  %20395 = sigmoid(%20394) /* ty=Tensor[(1, 1024), float32] */;
  %20396 = %20392.0 /* ty=Tensor[(1, 1024), float32] */;
  %20397 = %20392.2 /* ty=Tensor[(1, 1024), float32] */;
  %20398 = sigmoid(%20396) /* ty=Tensor[(1, 1024), float32] */;
  %20399 = tanh(%20397) /* ty=Tensor[(1, 1024), float32] */;
  %20400 = multiply(%20395, %20338) /* ty=Tensor[(1, 1024), float32] */;
  %20401 = multiply(%20398, %20399) /* ty=Tensor[(1, 1024), float32] */;
  %20402 = add(%20400, %20401) /* ty=Tensor[(1, 1024), float32] */;
  %20403 = sigmoid(%20393) /* ty=Tensor[(1, 1024), float32] */;
  %20404 = tanh(%20402) /* ty=Tensor[(1, 1024), float32] */;
  %20405 = multiply(%20403, %20404) /* ty=Tensor[(1, 1024), float32] */;
  %20406 = multiply(%20361, %20362) /* ty=Tensor[(1, 1024), float32] */;
  %20407 = (%20405, %20406) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20408 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20409 = concatenate(%20407, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20410 = concatenate(%20408, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20411 = nn.dense(%20409, %20410, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20412 = add(%20411, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20413 = add(%20412, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20414 = split(%20413, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20415 = %20414.3 /* ty=Tensor[(1, 1024), float32] */;
  %20416 = %20414.1 /* ty=Tensor[(1, 1024), float32] */;
  %20417 = sigmoid(%20416) /* ty=Tensor[(1, 1024), float32] */;
  %20418 = %20414.0 /* ty=Tensor[(1, 1024), float32] */;
  %20419 = %20414.2 /* ty=Tensor[(1, 1024), float32] */;
  %20420 = sigmoid(%20418) /* ty=Tensor[(1, 1024), float32] */;
  %20421 = tanh(%20419) /* ty=Tensor[(1, 1024), float32] */;
  %20422 = multiply(%20417, %20360) /* ty=Tensor[(1, 1024), float32] */;
  %20423 = multiply(%20420, %20421) /* ty=Tensor[(1, 1024), float32] */;
  %20424 = add(%20422, %20423) /* ty=Tensor[(1, 1024), float32] */;
  %20425 = sigmoid(%20415) /* ty=Tensor[(1, 1024), float32] */;
  %20426 = tanh(%20424) /* ty=Tensor[(1, 1024), float32] */;
  %20427 = %12788.119 /* ty=Tensor[(1, 2048), float32] */;
  %20428 = (%20427, %20384) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20429 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20430 = concatenate(%20428, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20431 = concatenate(%20429, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20432 = nn.dense(%20430, %20431, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20433 = add(%20432, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20434 = add(%20433, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20435 = split(%20434, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20436 = %20435.3 /* ty=Tensor[(1, 1024), float32] */;
  %20437 = %20435.1 /* ty=Tensor[(1, 1024), float32] */;
  %20438 = sigmoid(%20437) /* ty=Tensor[(1, 1024), float32] */;
  %20439 = %20435.0 /* ty=Tensor[(1, 1024), float32] */;
  %20440 = %20435.2 /* ty=Tensor[(1, 1024), float32] */;
  %20441 = sigmoid(%20439) /* ty=Tensor[(1, 1024), float32] */;
  %20442 = tanh(%20440) /* ty=Tensor[(1, 1024), float32] */;
  %20443 = multiply(%20438, %20381) /* ty=Tensor[(1, 1024), float32] */;
  %20444 = multiply(%20441, %20442) /* ty=Tensor[(1, 1024), float32] */;
  %20445 = add(%20443, %20444) /* ty=Tensor[(1, 1024), float32] */;
  %20446 = sigmoid(%20436) /* ty=Tensor[(1, 1024), float32] */;
  %20447 = tanh(%20445) /* ty=Tensor[(1, 1024), float32] */;
  %20448 = multiply(%20446, %20447) /* ty=Tensor[(1, 1024), float32] */;
  %20449 = (%20448, %20405) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20450 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20451 = concatenate(%20449, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20452 = concatenate(%20450, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20453 = nn.dense(%20451, %20452, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20454 = add(%20453, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20455 = add(%20454, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20456 = split(%20455, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20457 = %20456.3 /* ty=Tensor[(1, 1024), float32] */;
  %20458 = %20456.1 /* ty=Tensor[(1, 1024), float32] */;
  %20459 = sigmoid(%20458) /* ty=Tensor[(1, 1024), float32] */;
  %20460 = %20456.0 /* ty=Tensor[(1, 1024), float32] */;
  %20461 = %20456.2 /* ty=Tensor[(1, 1024), float32] */;
  %20462 = sigmoid(%20460) /* ty=Tensor[(1, 1024), float32] */;
  %20463 = tanh(%20461) /* ty=Tensor[(1, 1024), float32] */;
  %20464 = multiply(%20459, %20402) /* ty=Tensor[(1, 1024), float32] */;
  %20465 = multiply(%20462, %20463) /* ty=Tensor[(1, 1024), float32] */;
  %20466 = add(%20464, %20465) /* ty=Tensor[(1, 1024), float32] */;
  %20467 = sigmoid(%20457) /* ty=Tensor[(1, 1024), float32] */;
  %20468 = tanh(%20466) /* ty=Tensor[(1, 1024), float32] */;
  %20469 = multiply(%20467, %20468) /* ty=Tensor[(1, 1024), float32] */;
  %20470 = multiply(%20425, %20426) /* ty=Tensor[(1, 1024), float32] */;
  %20471 = (%20469, %20470) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20472 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20473 = concatenate(%20471, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20474 = concatenate(%20472, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20475 = nn.dense(%20473, %20474, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20476 = add(%20475, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20477 = add(%20476, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20478 = split(%20477, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20479 = %20478.3 /* ty=Tensor[(1, 1024), float32] */;
  %20480 = %20478.1 /* ty=Tensor[(1, 1024), float32] */;
  %20481 = sigmoid(%20480) /* ty=Tensor[(1, 1024), float32] */;
  %20482 = %20478.0 /* ty=Tensor[(1, 1024), float32] */;
  %20483 = %20478.2 /* ty=Tensor[(1, 1024), float32] */;
  %20484 = sigmoid(%20482) /* ty=Tensor[(1, 1024), float32] */;
  %20485 = tanh(%20483) /* ty=Tensor[(1, 1024), float32] */;
  %20486 = multiply(%20481, %20424) /* ty=Tensor[(1, 1024), float32] */;
  %20487 = multiply(%20484, %20485) /* ty=Tensor[(1, 1024), float32] */;
  %20488 = add(%20486, %20487) /* ty=Tensor[(1, 1024), float32] */;
  %20489 = sigmoid(%20479) /* ty=Tensor[(1, 1024), float32] */;
  %20490 = tanh(%20488) /* ty=Tensor[(1, 1024), float32] */;
  %20491 = %12788.120 /* ty=Tensor[(1, 2048), float32] */;
  %20492 = (%20491, %20448) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20493 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20494 = concatenate(%20492, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20495 = concatenate(%20493, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20496 = nn.dense(%20494, %20495, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20497 = add(%20496, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20498 = add(%20497, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20499 = split(%20498, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20500 = %20499.3 /* ty=Tensor[(1, 1024), float32] */;
  %20501 = %20499.1 /* ty=Tensor[(1, 1024), float32] */;
  %20502 = sigmoid(%20501) /* ty=Tensor[(1, 1024), float32] */;
  %20503 = %20499.0 /* ty=Tensor[(1, 1024), float32] */;
  %20504 = %20499.2 /* ty=Tensor[(1, 1024), float32] */;
  %20505 = sigmoid(%20503) /* ty=Tensor[(1, 1024), float32] */;
  %20506 = tanh(%20504) /* ty=Tensor[(1, 1024), float32] */;
  %20507 = multiply(%20502, %20445) /* ty=Tensor[(1, 1024), float32] */;
  %20508 = multiply(%20505, %20506) /* ty=Tensor[(1, 1024), float32] */;
  %20509 = add(%20507, %20508) /* ty=Tensor[(1, 1024), float32] */;
  %20510 = sigmoid(%20500) /* ty=Tensor[(1, 1024), float32] */;
  %20511 = tanh(%20509) /* ty=Tensor[(1, 1024), float32] */;
  %20512 = multiply(%20510, %20511) /* ty=Tensor[(1, 1024), float32] */;
  %20513 = (%20512, %20469) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20514 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20515 = concatenate(%20513, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20516 = concatenate(%20514, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20517 = nn.dense(%20515, %20516, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20518 = add(%20517, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20519 = add(%20518, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20520 = split(%20519, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20521 = %20520.3 /* ty=Tensor[(1, 1024), float32] */;
  %20522 = %20520.1 /* ty=Tensor[(1, 1024), float32] */;
  %20523 = sigmoid(%20522) /* ty=Tensor[(1, 1024), float32] */;
  %20524 = %20520.0 /* ty=Tensor[(1, 1024), float32] */;
  %20525 = %20520.2 /* ty=Tensor[(1, 1024), float32] */;
  %20526 = sigmoid(%20524) /* ty=Tensor[(1, 1024), float32] */;
  %20527 = tanh(%20525) /* ty=Tensor[(1, 1024), float32] */;
  %20528 = multiply(%20523, %20466) /* ty=Tensor[(1, 1024), float32] */;
  %20529 = multiply(%20526, %20527) /* ty=Tensor[(1, 1024), float32] */;
  %20530 = add(%20528, %20529) /* ty=Tensor[(1, 1024), float32] */;
  %20531 = sigmoid(%20521) /* ty=Tensor[(1, 1024), float32] */;
  %20532 = tanh(%20530) /* ty=Tensor[(1, 1024), float32] */;
  %20533 = multiply(%20531, %20532) /* ty=Tensor[(1, 1024), float32] */;
  %20534 = multiply(%20489, %20490) /* ty=Tensor[(1, 1024), float32] */;
  %20535 = (%20533, %20534) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20536 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20537 = concatenate(%20535, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20538 = concatenate(%20536, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20539 = nn.dense(%20537, %20538, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20540 = add(%20539, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20541 = add(%20540, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20542 = split(%20541, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20543 = %20542.3 /* ty=Tensor[(1, 1024), float32] */;
  %20544 = %20542.1 /* ty=Tensor[(1, 1024), float32] */;
  %20545 = sigmoid(%20544) /* ty=Tensor[(1, 1024), float32] */;
  %20546 = %20542.0 /* ty=Tensor[(1, 1024), float32] */;
  %20547 = %20542.2 /* ty=Tensor[(1, 1024), float32] */;
  %20548 = sigmoid(%20546) /* ty=Tensor[(1, 1024), float32] */;
  %20549 = tanh(%20547) /* ty=Tensor[(1, 1024), float32] */;
  %20550 = multiply(%20545, %20488) /* ty=Tensor[(1, 1024), float32] */;
  %20551 = multiply(%20548, %20549) /* ty=Tensor[(1, 1024), float32] */;
  %20552 = add(%20550, %20551) /* ty=Tensor[(1, 1024), float32] */;
  %20553 = sigmoid(%20543) /* ty=Tensor[(1, 1024), float32] */;
  %20554 = tanh(%20552) /* ty=Tensor[(1, 1024), float32] */;
  %20555 = %12788.121 /* ty=Tensor[(1, 2048), float32] */;
  %20556 = (%20555, %20512) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20557 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20558 = concatenate(%20556, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20559 = concatenate(%20557, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20560 = nn.dense(%20558, %20559, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20561 = add(%20560, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20562 = add(%20561, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20563 = split(%20562, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20564 = %20563.3 /* ty=Tensor[(1, 1024), float32] */;
  %20565 = %20563.1 /* ty=Tensor[(1, 1024), float32] */;
  %20566 = sigmoid(%20565) /* ty=Tensor[(1, 1024), float32] */;
  %20567 = %20563.0 /* ty=Tensor[(1, 1024), float32] */;
  %20568 = %20563.2 /* ty=Tensor[(1, 1024), float32] */;
  %20569 = sigmoid(%20567) /* ty=Tensor[(1, 1024), float32] */;
  %20570 = tanh(%20568) /* ty=Tensor[(1, 1024), float32] */;
  %20571 = multiply(%20566, %20509) /* ty=Tensor[(1, 1024), float32] */;
  %20572 = multiply(%20569, %20570) /* ty=Tensor[(1, 1024), float32] */;
  %20573 = add(%20571, %20572) /* ty=Tensor[(1, 1024), float32] */;
  %20574 = sigmoid(%20564) /* ty=Tensor[(1, 1024), float32] */;
  %20575 = tanh(%20573) /* ty=Tensor[(1, 1024), float32] */;
  %20576 = multiply(%20574, %20575) /* ty=Tensor[(1, 1024), float32] */;
  %20577 = (%20576, %20533) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20578 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20579 = concatenate(%20577, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20580 = concatenate(%20578, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20581 = nn.dense(%20579, %20580, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20582 = add(%20581, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20583 = add(%20582, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20584 = split(%20583, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20585 = %20584.3 /* ty=Tensor[(1, 1024), float32] */;
  %20586 = %20584.1 /* ty=Tensor[(1, 1024), float32] */;
  %20587 = sigmoid(%20586) /* ty=Tensor[(1, 1024), float32] */;
  %20588 = %20584.0 /* ty=Tensor[(1, 1024), float32] */;
  %20589 = %20584.2 /* ty=Tensor[(1, 1024), float32] */;
  %20590 = sigmoid(%20588) /* ty=Tensor[(1, 1024), float32] */;
  %20591 = tanh(%20589) /* ty=Tensor[(1, 1024), float32] */;
  %20592 = multiply(%20587, %20530) /* ty=Tensor[(1, 1024), float32] */;
  %20593 = multiply(%20590, %20591) /* ty=Tensor[(1, 1024), float32] */;
  %20594 = add(%20592, %20593) /* ty=Tensor[(1, 1024), float32] */;
  %20595 = sigmoid(%20585) /* ty=Tensor[(1, 1024), float32] */;
  %20596 = tanh(%20594) /* ty=Tensor[(1, 1024), float32] */;
  %20597 = multiply(%20595, %20596) /* ty=Tensor[(1, 1024), float32] */;
  %20598 = multiply(%20553, %20554) /* ty=Tensor[(1, 1024), float32] */;
  %20599 = (%20597, %20598) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20600 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20601 = concatenate(%20599, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20602 = concatenate(%20600, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20603 = nn.dense(%20601, %20602, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20604 = add(%20603, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20605 = add(%20604, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20606 = split(%20605, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20607 = %20606.3 /* ty=Tensor[(1, 1024), float32] */;
  %20608 = %20606.1 /* ty=Tensor[(1, 1024), float32] */;
  %20609 = sigmoid(%20608) /* ty=Tensor[(1, 1024), float32] */;
  %20610 = %20606.0 /* ty=Tensor[(1, 1024), float32] */;
  %20611 = %20606.2 /* ty=Tensor[(1, 1024), float32] */;
  %20612 = sigmoid(%20610) /* ty=Tensor[(1, 1024), float32] */;
  %20613 = tanh(%20611) /* ty=Tensor[(1, 1024), float32] */;
  %20614 = multiply(%20609, %20552) /* ty=Tensor[(1, 1024), float32] */;
  %20615 = multiply(%20612, %20613) /* ty=Tensor[(1, 1024), float32] */;
  %20616 = add(%20614, %20615) /* ty=Tensor[(1, 1024), float32] */;
  %20617 = sigmoid(%20607) /* ty=Tensor[(1, 1024), float32] */;
  %20618 = tanh(%20616) /* ty=Tensor[(1, 1024), float32] */;
  %20619 = %12788.122 /* ty=Tensor[(1, 2048), float32] */;
  %20620 = (%20619, %20576) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20621 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20622 = concatenate(%20620, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20623 = concatenate(%20621, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20624 = nn.dense(%20622, %20623, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20625 = add(%20624, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20626 = add(%20625, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20627 = split(%20626, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20628 = %20627.3 /* ty=Tensor[(1, 1024), float32] */;
  %20629 = %20627.1 /* ty=Tensor[(1, 1024), float32] */;
  %20630 = sigmoid(%20629) /* ty=Tensor[(1, 1024), float32] */;
  %20631 = %20627.0 /* ty=Tensor[(1, 1024), float32] */;
  %20632 = %20627.2 /* ty=Tensor[(1, 1024), float32] */;
  %20633 = sigmoid(%20631) /* ty=Tensor[(1, 1024), float32] */;
  %20634 = tanh(%20632) /* ty=Tensor[(1, 1024), float32] */;
  %20635 = multiply(%20630, %20573) /* ty=Tensor[(1, 1024), float32] */;
  %20636 = multiply(%20633, %20634) /* ty=Tensor[(1, 1024), float32] */;
  %20637 = add(%20635, %20636) /* ty=Tensor[(1, 1024), float32] */;
  %20638 = sigmoid(%20628) /* ty=Tensor[(1, 1024), float32] */;
  %20639 = tanh(%20637) /* ty=Tensor[(1, 1024), float32] */;
  %20640 = multiply(%20638, %20639) /* ty=Tensor[(1, 1024), float32] */;
  %20641 = (%20640, %20597) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20642 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20643 = concatenate(%20641, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20644 = concatenate(%20642, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20645 = nn.dense(%20643, %20644, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20646 = add(%20645, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20647 = add(%20646, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20648 = split(%20647, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20649 = %20648.3 /* ty=Tensor[(1, 1024), float32] */;
  %20650 = %20648.1 /* ty=Tensor[(1, 1024), float32] */;
  %20651 = sigmoid(%20650) /* ty=Tensor[(1, 1024), float32] */;
  %20652 = %20648.0 /* ty=Tensor[(1, 1024), float32] */;
  %20653 = %20648.2 /* ty=Tensor[(1, 1024), float32] */;
  %20654 = sigmoid(%20652) /* ty=Tensor[(1, 1024), float32] */;
  %20655 = tanh(%20653) /* ty=Tensor[(1, 1024), float32] */;
  %20656 = multiply(%20651, %20594) /* ty=Tensor[(1, 1024), float32] */;
  %20657 = multiply(%20654, %20655) /* ty=Tensor[(1, 1024), float32] */;
  %20658 = add(%20656, %20657) /* ty=Tensor[(1, 1024), float32] */;
  %20659 = sigmoid(%20649) /* ty=Tensor[(1, 1024), float32] */;
  %20660 = tanh(%20658) /* ty=Tensor[(1, 1024), float32] */;
  %20661 = multiply(%20659, %20660) /* ty=Tensor[(1, 1024), float32] */;
  %20662 = multiply(%20617, %20618) /* ty=Tensor[(1, 1024), float32] */;
  %20663 = (%20661, %20662) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20664 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20665 = concatenate(%20663, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20666 = concatenate(%20664, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20667 = nn.dense(%20665, %20666, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20668 = add(%20667, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20669 = add(%20668, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20670 = split(%20669, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20671 = %20670.3 /* ty=Tensor[(1, 1024), float32] */;
  %20672 = %20670.1 /* ty=Tensor[(1, 1024), float32] */;
  %20673 = sigmoid(%20672) /* ty=Tensor[(1, 1024), float32] */;
  %20674 = %20670.0 /* ty=Tensor[(1, 1024), float32] */;
  %20675 = %20670.2 /* ty=Tensor[(1, 1024), float32] */;
  %20676 = sigmoid(%20674) /* ty=Tensor[(1, 1024), float32] */;
  %20677 = tanh(%20675) /* ty=Tensor[(1, 1024), float32] */;
  %20678 = multiply(%20673, %20616) /* ty=Tensor[(1, 1024), float32] */;
  %20679 = multiply(%20676, %20677) /* ty=Tensor[(1, 1024), float32] */;
  %20680 = add(%20678, %20679) /* ty=Tensor[(1, 1024), float32] */;
  %20681 = sigmoid(%20671) /* ty=Tensor[(1, 1024), float32] */;
  %20682 = tanh(%20680) /* ty=Tensor[(1, 1024), float32] */;
  %20683 = %12788.123 /* ty=Tensor[(1, 2048), float32] */;
  %20684 = (%20683, %20640) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20685 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20686 = concatenate(%20684, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20687 = concatenate(%20685, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20688 = nn.dense(%20686, %20687, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20689 = add(%20688, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20690 = add(%20689, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20691 = split(%20690, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20692 = %20691.3 /* ty=Tensor[(1, 1024), float32] */;
  %20693 = %20691.1 /* ty=Tensor[(1, 1024), float32] */;
  %20694 = sigmoid(%20693) /* ty=Tensor[(1, 1024), float32] */;
  %20695 = %20691.0 /* ty=Tensor[(1, 1024), float32] */;
  %20696 = %20691.2 /* ty=Tensor[(1, 1024), float32] */;
  %20697 = sigmoid(%20695) /* ty=Tensor[(1, 1024), float32] */;
  %20698 = tanh(%20696) /* ty=Tensor[(1, 1024), float32] */;
  %20699 = multiply(%20694, %20637) /* ty=Tensor[(1, 1024), float32] */;
  %20700 = multiply(%20697, %20698) /* ty=Tensor[(1, 1024), float32] */;
  %20701 = add(%20699, %20700) /* ty=Tensor[(1, 1024), float32] */;
  %20702 = sigmoid(%20692) /* ty=Tensor[(1, 1024), float32] */;
  %20703 = tanh(%20701) /* ty=Tensor[(1, 1024), float32] */;
  %20704 = multiply(%20702, %20703) /* ty=Tensor[(1, 1024), float32] */;
  %20705 = (%20704, %20661) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20706 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20707 = concatenate(%20705, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20708 = concatenate(%20706, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20709 = nn.dense(%20707, %20708, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20710 = add(%20709, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20711 = add(%20710, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20712 = split(%20711, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20713 = %20712.3 /* ty=Tensor[(1, 1024), float32] */;
  %20714 = %20712.1 /* ty=Tensor[(1, 1024), float32] */;
  %20715 = sigmoid(%20714) /* ty=Tensor[(1, 1024), float32] */;
  %20716 = %20712.0 /* ty=Tensor[(1, 1024), float32] */;
  %20717 = %20712.2 /* ty=Tensor[(1, 1024), float32] */;
  %20718 = sigmoid(%20716) /* ty=Tensor[(1, 1024), float32] */;
  %20719 = tanh(%20717) /* ty=Tensor[(1, 1024), float32] */;
  %20720 = multiply(%20715, %20658) /* ty=Tensor[(1, 1024), float32] */;
  %20721 = multiply(%20718, %20719) /* ty=Tensor[(1, 1024), float32] */;
  %20722 = add(%20720, %20721) /* ty=Tensor[(1, 1024), float32] */;
  %20723 = sigmoid(%20713) /* ty=Tensor[(1, 1024), float32] */;
  %20724 = tanh(%20722) /* ty=Tensor[(1, 1024), float32] */;
  %20725 = multiply(%20723, %20724) /* ty=Tensor[(1, 1024), float32] */;
  %20726 = multiply(%20681, %20682) /* ty=Tensor[(1, 1024), float32] */;
  %20727 = (%20725, %20726) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20728 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20729 = concatenate(%20727, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20730 = concatenate(%20728, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20731 = nn.dense(%20729, %20730, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20732 = add(%20731, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20733 = add(%20732, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20734 = split(%20733, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20735 = %20734.3 /* ty=Tensor[(1, 1024), float32] */;
  %20736 = %20734.1 /* ty=Tensor[(1, 1024), float32] */;
  %20737 = sigmoid(%20736) /* ty=Tensor[(1, 1024), float32] */;
  %20738 = %20734.0 /* ty=Tensor[(1, 1024), float32] */;
  %20739 = %20734.2 /* ty=Tensor[(1, 1024), float32] */;
  %20740 = sigmoid(%20738) /* ty=Tensor[(1, 1024), float32] */;
  %20741 = tanh(%20739) /* ty=Tensor[(1, 1024), float32] */;
  %20742 = multiply(%20737, %20680) /* ty=Tensor[(1, 1024), float32] */;
  %20743 = multiply(%20740, %20741) /* ty=Tensor[(1, 1024), float32] */;
  %20744 = add(%20742, %20743) /* ty=Tensor[(1, 1024), float32] */;
  %20745 = sigmoid(%20735) /* ty=Tensor[(1, 1024), float32] */;
  %20746 = tanh(%20744) /* ty=Tensor[(1, 1024), float32] */;
  %20747 = %12788.124 /* ty=Tensor[(1, 2048), float32] */;
  %20748 = (%20747, %20704) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20749 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20750 = concatenate(%20748, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20751 = concatenate(%20749, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20752 = nn.dense(%20750, %20751, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20753 = add(%20752, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20754 = add(%20753, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20755 = split(%20754, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20756 = %20755.3 /* ty=Tensor[(1, 1024), float32] */;
  %20757 = %20755.1 /* ty=Tensor[(1, 1024), float32] */;
  %20758 = sigmoid(%20757) /* ty=Tensor[(1, 1024), float32] */;
  %20759 = %20755.0 /* ty=Tensor[(1, 1024), float32] */;
  %20760 = %20755.2 /* ty=Tensor[(1, 1024), float32] */;
  %20761 = sigmoid(%20759) /* ty=Tensor[(1, 1024), float32] */;
  %20762 = tanh(%20760) /* ty=Tensor[(1, 1024), float32] */;
  %20763 = multiply(%20758, %20701) /* ty=Tensor[(1, 1024), float32] */;
  %20764 = multiply(%20761, %20762) /* ty=Tensor[(1, 1024), float32] */;
  %20765 = add(%20763, %20764) /* ty=Tensor[(1, 1024), float32] */;
  %20766 = sigmoid(%20756) /* ty=Tensor[(1, 1024), float32] */;
  %20767 = tanh(%20765) /* ty=Tensor[(1, 1024), float32] */;
  %20768 = multiply(%20766, %20767) /* ty=Tensor[(1, 1024), float32] */;
  %20769 = (%20768, %20725) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20770 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20771 = concatenate(%20769, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20772 = concatenate(%20770, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20773 = nn.dense(%20771, %20772, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20774 = add(%20773, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20775 = add(%20774, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20776 = split(%20775, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20777 = %20776.3 /* ty=Tensor[(1, 1024), float32] */;
  %20778 = %20776.1 /* ty=Tensor[(1, 1024), float32] */;
  %20779 = sigmoid(%20778) /* ty=Tensor[(1, 1024), float32] */;
  %20780 = %20776.0 /* ty=Tensor[(1, 1024), float32] */;
  %20781 = %20776.2 /* ty=Tensor[(1, 1024), float32] */;
  %20782 = sigmoid(%20780) /* ty=Tensor[(1, 1024), float32] */;
  %20783 = tanh(%20781) /* ty=Tensor[(1, 1024), float32] */;
  %20784 = multiply(%20779, %20722) /* ty=Tensor[(1, 1024), float32] */;
  %20785 = multiply(%20782, %20783) /* ty=Tensor[(1, 1024), float32] */;
  %20786 = add(%20784, %20785) /* ty=Tensor[(1, 1024), float32] */;
  %20787 = sigmoid(%20777) /* ty=Tensor[(1, 1024), float32] */;
  %20788 = tanh(%20786) /* ty=Tensor[(1, 1024), float32] */;
  %20789 = multiply(%20787, %20788) /* ty=Tensor[(1, 1024), float32] */;
  %20790 = multiply(%20745, %20746) /* ty=Tensor[(1, 1024), float32] */;
  %20791 = (%20789, %20790) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20792 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20793 = concatenate(%20791, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20794 = concatenate(%20792, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20795 = nn.dense(%20793, %20794, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20796 = add(%20795, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20797 = add(%20796, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20798 = split(%20797, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20799 = %20798.3 /* ty=Tensor[(1, 1024), float32] */;
  %20800 = %20798.1 /* ty=Tensor[(1, 1024), float32] */;
  %20801 = sigmoid(%20800) /* ty=Tensor[(1, 1024), float32] */;
  %20802 = %20798.0 /* ty=Tensor[(1, 1024), float32] */;
  %20803 = %20798.2 /* ty=Tensor[(1, 1024), float32] */;
  %20804 = sigmoid(%20802) /* ty=Tensor[(1, 1024), float32] */;
  %20805 = tanh(%20803) /* ty=Tensor[(1, 1024), float32] */;
  %20806 = multiply(%20801, %20744) /* ty=Tensor[(1, 1024), float32] */;
  %20807 = multiply(%20804, %20805) /* ty=Tensor[(1, 1024), float32] */;
  %20808 = add(%20806, %20807) /* ty=Tensor[(1, 1024), float32] */;
  %20809 = sigmoid(%20799) /* ty=Tensor[(1, 1024), float32] */;
  %20810 = tanh(%20808) /* ty=Tensor[(1, 1024), float32] */;
  %20811 = %12788.125 /* ty=Tensor[(1, 2048), float32] */;
  %20812 = (%20811, %20768) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20813 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20814 = concatenate(%20812, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20815 = concatenate(%20813, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20816 = nn.dense(%20814, %20815, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20817 = add(%20816, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20818 = add(%20817, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20819 = split(%20818, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20820 = %20819.3 /* ty=Tensor[(1, 1024), float32] */;
  %20821 = %20819.1 /* ty=Tensor[(1, 1024), float32] */;
  %20822 = sigmoid(%20821) /* ty=Tensor[(1, 1024), float32] */;
  %20823 = %20819.0 /* ty=Tensor[(1, 1024), float32] */;
  %20824 = %20819.2 /* ty=Tensor[(1, 1024), float32] */;
  %20825 = sigmoid(%20823) /* ty=Tensor[(1, 1024), float32] */;
  %20826 = tanh(%20824) /* ty=Tensor[(1, 1024), float32] */;
  %20827 = multiply(%20822, %20765) /* ty=Tensor[(1, 1024), float32] */;
  %20828 = multiply(%20825, %20826) /* ty=Tensor[(1, 1024), float32] */;
  %20829 = add(%20827, %20828) /* ty=Tensor[(1, 1024), float32] */;
  %20830 = sigmoid(%20820) /* ty=Tensor[(1, 1024), float32] */;
  %20831 = tanh(%20829) /* ty=Tensor[(1, 1024), float32] */;
  %20832 = multiply(%20830, %20831) /* ty=Tensor[(1, 1024), float32] */;
  %20833 = (%20832, %20789) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20834 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20835 = concatenate(%20833, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20836 = concatenate(%20834, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20837 = nn.dense(%20835, %20836, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20838 = add(%20837, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20839 = add(%20838, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20840 = split(%20839, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20841 = %20840.3 /* ty=Tensor[(1, 1024), float32] */;
  %20842 = %20840.1 /* ty=Tensor[(1, 1024), float32] */;
  %20843 = sigmoid(%20842) /* ty=Tensor[(1, 1024), float32] */;
  %20844 = %20840.0 /* ty=Tensor[(1, 1024), float32] */;
  %20845 = %20840.2 /* ty=Tensor[(1, 1024), float32] */;
  %20846 = sigmoid(%20844) /* ty=Tensor[(1, 1024), float32] */;
  %20847 = tanh(%20845) /* ty=Tensor[(1, 1024), float32] */;
  %20848 = multiply(%20843, %20786) /* ty=Tensor[(1, 1024), float32] */;
  %20849 = multiply(%20846, %20847) /* ty=Tensor[(1, 1024), float32] */;
  %20850 = add(%20848, %20849) /* ty=Tensor[(1, 1024), float32] */;
  %20851 = sigmoid(%20841) /* ty=Tensor[(1, 1024), float32] */;
  %20852 = tanh(%20850) /* ty=Tensor[(1, 1024), float32] */;
  %20853 = multiply(%20851, %20852) /* ty=Tensor[(1, 1024), float32] */;
  %20854 = multiply(%20809, %20810) /* ty=Tensor[(1, 1024), float32] */;
  %20855 = (%20853, %20854) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20856 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20857 = concatenate(%20855, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20858 = concatenate(%20856, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20859 = nn.dense(%20857, %20858, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20860 = add(%20859, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20861 = add(%20860, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20862 = split(%20861, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20863 = %20862.3 /* ty=Tensor[(1, 1024), float32] */;
  %20864 = %20862.1 /* ty=Tensor[(1, 1024), float32] */;
  %20865 = sigmoid(%20864) /* ty=Tensor[(1, 1024), float32] */;
  %20866 = %20862.0 /* ty=Tensor[(1, 1024), float32] */;
  %20867 = %20862.2 /* ty=Tensor[(1, 1024), float32] */;
  %20868 = sigmoid(%20866) /* ty=Tensor[(1, 1024), float32] */;
  %20869 = tanh(%20867) /* ty=Tensor[(1, 1024), float32] */;
  %20870 = multiply(%20865, %20808) /* ty=Tensor[(1, 1024), float32] */;
  %20871 = multiply(%20868, %20869) /* ty=Tensor[(1, 1024), float32] */;
  %20872 = add(%20870, %20871) /* ty=Tensor[(1, 1024), float32] */;
  %20873 = sigmoid(%20863) /* ty=Tensor[(1, 1024), float32] */;
  %20874 = tanh(%20872) /* ty=Tensor[(1, 1024), float32] */;
  %20875 = %12788.126 /* ty=Tensor[(1, 2048), float32] */;
  %20876 = (%20875, %20832) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20877 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20878 = concatenate(%20876, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20879 = concatenate(%20877, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20880 = nn.dense(%20878, %20879, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20881 = add(%20880, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20882 = add(%20881, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20883 = split(%20882, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20884 = %20883.3 /* ty=Tensor[(1, 1024), float32] */;
  %20885 = %20883.1 /* ty=Tensor[(1, 1024), float32] */;
  %20886 = sigmoid(%20885) /* ty=Tensor[(1, 1024), float32] */;
  %20887 = %20883.0 /* ty=Tensor[(1, 1024), float32] */;
  %20888 = %20883.2 /* ty=Tensor[(1, 1024), float32] */;
  %20889 = sigmoid(%20887) /* ty=Tensor[(1, 1024), float32] */;
  %20890 = tanh(%20888) /* ty=Tensor[(1, 1024), float32] */;
  %20891 = multiply(%20886, %20829) /* ty=Tensor[(1, 1024), float32] */;
  %20892 = multiply(%20889, %20890) /* ty=Tensor[(1, 1024), float32] */;
  %20893 = add(%20891, %20892) /* ty=Tensor[(1, 1024), float32] */;
  %20894 = sigmoid(%20884) /* ty=Tensor[(1, 1024), float32] */;
  %20895 = tanh(%20893) /* ty=Tensor[(1, 1024), float32] */;
  %20896 = multiply(%20894, %20895) /* ty=Tensor[(1, 1024), float32] */;
  %20897 = (%20896, %20853) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20898 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20899 = concatenate(%20897, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20900 = concatenate(%20898, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20901 = nn.dense(%20899, %20900, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20902 = add(%20901, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20903 = add(%20902, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20904 = split(%20903, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20905 = %20904.3 /* ty=Tensor[(1, 1024), float32] */;
  %20906 = %20904.1 /* ty=Tensor[(1, 1024), float32] */;
  %20907 = sigmoid(%20906) /* ty=Tensor[(1, 1024), float32] */;
  %20908 = %20904.0 /* ty=Tensor[(1, 1024), float32] */;
  %20909 = %20904.2 /* ty=Tensor[(1, 1024), float32] */;
  %20910 = sigmoid(%20908) /* ty=Tensor[(1, 1024), float32] */;
  %20911 = tanh(%20909) /* ty=Tensor[(1, 1024), float32] */;
  %20912 = multiply(%20907, %20850) /* ty=Tensor[(1, 1024), float32] */;
  %20913 = multiply(%20910, %20911) /* ty=Tensor[(1, 1024), float32] */;
  %20914 = add(%20912, %20913) /* ty=Tensor[(1, 1024), float32] */;
  %20915 = sigmoid(%20905) /* ty=Tensor[(1, 1024), float32] */;
  %20916 = tanh(%20914) /* ty=Tensor[(1, 1024), float32] */;
  %20917 = multiply(%20915, %20916) /* ty=Tensor[(1, 1024), float32] */;
  %20918 = multiply(%20873, %20874) /* ty=Tensor[(1, 1024), float32] */;
  %20919 = (%20917, %20918) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20920 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20921 = concatenate(%20919, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20922 = concatenate(%20920, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20923 = nn.dense(%20921, %20922, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20924 = add(%20923, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20925 = add(%20924, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20926 = split(%20925, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20927 = %20926.3 /* ty=Tensor[(1, 1024), float32] */;
  %20928 = %20926.1 /* ty=Tensor[(1, 1024), float32] */;
  %20929 = sigmoid(%20928) /* ty=Tensor[(1, 1024), float32] */;
  %20930 = %20926.0 /* ty=Tensor[(1, 1024), float32] */;
  %20931 = %20926.2 /* ty=Tensor[(1, 1024), float32] */;
  %20932 = sigmoid(%20930) /* ty=Tensor[(1, 1024), float32] */;
  %20933 = tanh(%20931) /* ty=Tensor[(1, 1024), float32] */;
  %20934 = multiply(%20929, %20872) /* ty=Tensor[(1, 1024), float32] */;
  %20935 = multiply(%20932, %20933) /* ty=Tensor[(1, 1024), float32] */;
  %20936 = add(%20934, %20935) /* ty=Tensor[(1, 1024), float32] */;
  %20937 = sigmoid(%20927) /* ty=Tensor[(1, 1024), float32] */;
  %20938 = tanh(%20936) /* ty=Tensor[(1, 1024), float32] */;
  %20939 = %12788.127 /* ty=Tensor[(1, 2048), float32] */;
  %20940 = (%20939, %20896) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %20941 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %20942 = concatenate(%20940, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %20943 = concatenate(%20941, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %20944 = nn.dense(%20942, %20943, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20945 = add(%20944, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20946 = add(%20945, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %20947 = split(%20946, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20948 = %20947.3 /* ty=Tensor[(1, 1024), float32] */;
  %20949 = %20947.1 /* ty=Tensor[(1, 1024), float32] */;
  %20950 = sigmoid(%20949) /* ty=Tensor[(1, 1024), float32] */;
  %20951 = %20947.0 /* ty=Tensor[(1, 1024), float32] */;
  %20952 = %20947.2 /* ty=Tensor[(1, 1024), float32] */;
  %20953 = sigmoid(%20951) /* ty=Tensor[(1, 1024), float32] */;
  %20954 = tanh(%20952) /* ty=Tensor[(1, 1024), float32] */;
  %20955 = multiply(%20950, %20893) /* ty=Tensor[(1, 1024), float32] */;
  %20956 = multiply(%20953, %20954) /* ty=Tensor[(1, 1024), float32] */;
  %20957 = add(%20955, %20956) /* ty=Tensor[(1, 1024), float32] */;
  %20958 = sigmoid(%20948) /* ty=Tensor[(1, 1024), float32] */;
  %20959 = tanh(%20957) /* ty=Tensor[(1, 1024), float32] */;
  %20960 = multiply(%20958, %20959) /* ty=Tensor[(1, 1024), float32] */;
  %20961 = (%20960, %20917) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20962 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20963 = concatenate(%20961, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20964 = concatenate(%20962, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20965 = nn.dense(%20963, %20964, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20966 = add(%20965, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20967 = add(%20966, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %20968 = split(%20967, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20969 = %20968.3 /* ty=Tensor[(1, 1024), float32] */;
  %20970 = %20968.1 /* ty=Tensor[(1, 1024), float32] */;
  %20971 = sigmoid(%20970) /* ty=Tensor[(1, 1024), float32] */;
  %20972 = %20968.0 /* ty=Tensor[(1, 1024), float32] */;
  %20973 = %20968.2 /* ty=Tensor[(1, 1024), float32] */;
  %20974 = sigmoid(%20972) /* ty=Tensor[(1, 1024), float32] */;
  %20975 = tanh(%20973) /* ty=Tensor[(1, 1024), float32] */;
  %20976 = multiply(%20971, %20914) /* ty=Tensor[(1, 1024), float32] */;
  %20977 = multiply(%20974, %20975) /* ty=Tensor[(1, 1024), float32] */;
  %20978 = add(%20976, %20977) /* ty=Tensor[(1, 1024), float32] */;
  %20979 = sigmoid(%20969) /* ty=Tensor[(1, 1024), float32] */;
  %20980 = tanh(%20978) /* ty=Tensor[(1, 1024), float32] */;
  %20981 = multiply(%20979, %20980) /* ty=Tensor[(1, 1024), float32] */;
  %20982 = multiply(%20937, %20938) /* ty=Tensor[(1, 1024), float32] */;
  %20983 = (%20981, %20982) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20984 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %20985 = concatenate(%20983, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %20986 = concatenate(%20984, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %20987 = nn.dense(%20985, %20986, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %20988 = add(%20987, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20989 = add(%20988, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %20990 = split(%20989, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %20991 = %20990.3 /* ty=Tensor[(1, 1024), float32] */;
  %20992 = %20990.1 /* ty=Tensor[(1, 1024), float32] */;
  %20993 = sigmoid(%20992) /* ty=Tensor[(1, 1024), float32] */;
  %20994 = %20990.0 /* ty=Tensor[(1, 1024), float32] */;
  %20995 = %20990.2 /* ty=Tensor[(1, 1024), float32] */;
  %20996 = sigmoid(%20994) /* ty=Tensor[(1, 1024), float32] */;
  %20997 = tanh(%20995) /* ty=Tensor[(1, 1024), float32] */;
  %20998 = multiply(%20993, %20936) /* ty=Tensor[(1, 1024), float32] */;
  %20999 = multiply(%20996, %20997) /* ty=Tensor[(1, 1024), float32] */;
  %21000 = add(%20998, %20999) /* ty=Tensor[(1, 1024), float32] */;
  %21001 = sigmoid(%20991) /* ty=Tensor[(1, 1024), float32] */;
  %21002 = tanh(%21000) /* ty=Tensor[(1, 1024), float32] */;
  %21003 = %12788.128 /* ty=Tensor[(1, 2048), float32] */;
  %21004 = (%21003, %20960) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21005 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21006 = concatenate(%21004, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21007 = concatenate(%21005, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21008 = nn.dense(%21006, %21007, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21009 = add(%21008, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21010 = add(%21009, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21011 = split(%21010, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21012 = %21011.3 /* ty=Tensor[(1, 1024), float32] */;
  %21013 = %21011.1 /* ty=Tensor[(1, 1024), float32] */;
  %21014 = sigmoid(%21013) /* ty=Tensor[(1, 1024), float32] */;
  %21015 = %21011.0 /* ty=Tensor[(1, 1024), float32] */;
  %21016 = %21011.2 /* ty=Tensor[(1, 1024), float32] */;
  %21017 = sigmoid(%21015) /* ty=Tensor[(1, 1024), float32] */;
  %21018 = tanh(%21016) /* ty=Tensor[(1, 1024), float32] */;
  %21019 = multiply(%21014, %20957) /* ty=Tensor[(1, 1024), float32] */;
  %21020 = multiply(%21017, %21018) /* ty=Tensor[(1, 1024), float32] */;
  %21021 = add(%21019, %21020) /* ty=Tensor[(1, 1024), float32] */;
  %21022 = sigmoid(%21012) /* ty=Tensor[(1, 1024), float32] */;
  %21023 = tanh(%21021) /* ty=Tensor[(1, 1024), float32] */;
  %21024 = multiply(%21022, %21023) /* ty=Tensor[(1, 1024), float32] */;
  %21025 = (%21024, %20981) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21026 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21027 = concatenate(%21025, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21028 = concatenate(%21026, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21029 = nn.dense(%21027, %21028, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21030 = add(%21029, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21031 = add(%21030, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21032 = split(%21031, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21033 = %21032.3 /* ty=Tensor[(1, 1024), float32] */;
  %21034 = %21032.1 /* ty=Tensor[(1, 1024), float32] */;
  %21035 = sigmoid(%21034) /* ty=Tensor[(1, 1024), float32] */;
  %21036 = %21032.0 /* ty=Tensor[(1, 1024), float32] */;
  %21037 = %21032.2 /* ty=Tensor[(1, 1024), float32] */;
  %21038 = sigmoid(%21036) /* ty=Tensor[(1, 1024), float32] */;
  %21039 = tanh(%21037) /* ty=Tensor[(1, 1024), float32] */;
  %21040 = multiply(%21035, %20978) /* ty=Tensor[(1, 1024), float32] */;
  %21041 = multiply(%21038, %21039) /* ty=Tensor[(1, 1024), float32] */;
  %21042 = add(%21040, %21041) /* ty=Tensor[(1, 1024), float32] */;
  %21043 = sigmoid(%21033) /* ty=Tensor[(1, 1024), float32] */;
  %21044 = tanh(%21042) /* ty=Tensor[(1, 1024), float32] */;
  %21045 = multiply(%21043, %21044) /* ty=Tensor[(1, 1024), float32] */;
  %21046 = multiply(%21001, %21002) /* ty=Tensor[(1, 1024), float32] */;
  %21047 = (%21045, %21046) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21048 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21049 = concatenate(%21047, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21050 = concatenate(%21048, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21051 = nn.dense(%21049, %21050, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21052 = add(%21051, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21053 = add(%21052, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21054 = split(%21053, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21055 = %21054.3 /* ty=Tensor[(1, 1024), float32] */;
  %21056 = %21054.1 /* ty=Tensor[(1, 1024), float32] */;
  %21057 = sigmoid(%21056) /* ty=Tensor[(1, 1024), float32] */;
  %21058 = %21054.0 /* ty=Tensor[(1, 1024), float32] */;
  %21059 = %21054.2 /* ty=Tensor[(1, 1024), float32] */;
  %21060 = sigmoid(%21058) /* ty=Tensor[(1, 1024), float32] */;
  %21061 = tanh(%21059) /* ty=Tensor[(1, 1024), float32] */;
  %21062 = multiply(%21057, %21000) /* ty=Tensor[(1, 1024), float32] */;
  %21063 = multiply(%21060, %21061) /* ty=Tensor[(1, 1024), float32] */;
  %21064 = add(%21062, %21063) /* ty=Tensor[(1, 1024), float32] */;
  %21065 = sigmoid(%21055) /* ty=Tensor[(1, 1024), float32] */;
  %21066 = tanh(%21064) /* ty=Tensor[(1, 1024), float32] */;
  %21067 = %12788.129 /* ty=Tensor[(1, 2048), float32] */;
  %21068 = (%21067, %21024) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21069 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21070 = concatenate(%21068, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21071 = concatenate(%21069, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21072 = nn.dense(%21070, %21071, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21073 = add(%21072, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21074 = add(%21073, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21075 = split(%21074, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21076 = %21075.3 /* ty=Tensor[(1, 1024), float32] */;
  %21077 = %21075.1 /* ty=Tensor[(1, 1024), float32] */;
  %21078 = sigmoid(%21077) /* ty=Tensor[(1, 1024), float32] */;
  %21079 = %21075.0 /* ty=Tensor[(1, 1024), float32] */;
  %21080 = %21075.2 /* ty=Tensor[(1, 1024), float32] */;
  %21081 = sigmoid(%21079) /* ty=Tensor[(1, 1024), float32] */;
  %21082 = tanh(%21080) /* ty=Tensor[(1, 1024), float32] */;
  %21083 = multiply(%21078, %21021) /* ty=Tensor[(1, 1024), float32] */;
  %21084 = multiply(%21081, %21082) /* ty=Tensor[(1, 1024), float32] */;
  %21085 = add(%21083, %21084) /* ty=Tensor[(1, 1024), float32] */;
  %21086 = sigmoid(%21076) /* ty=Tensor[(1, 1024), float32] */;
  %21087 = tanh(%21085) /* ty=Tensor[(1, 1024), float32] */;
  %21088 = multiply(%21086, %21087) /* ty=Tensor[(1, 1024), float32] */;
  %21089 = (%21088, %21045) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21090 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21091 = concatenate(%21089, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21092 = concatenate(%21090, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21093 = nn.dense(%21091, %21092, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21094 = add(%21093, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21095 = add(%21094, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21096 = split(%21095, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21097 = %21096.3 /* ty=Tensor[(1, 1024), float32] */;
  %21098 = %21096.1 /* ty=Tensor[(1, 1024), float32] */;
  %21099 = sigmoid(%21098) /* ty=Tensor[(1, 1024), float32] */;
  %21100 = %21096.0 /* ty=Tensor[(1, 1024), float32] */;
  %21101 = %21096.2 /* ty=Tensor[(1, 1024), float32] */;
  %21102 = sigmoid(%21100) /* ty=Tensor[(1, 1024), float32] */;
  %21103 = tanh(%21101) /* ty=Tensor[(1, 1024), float32] */;
  %21104 = multiply(%21099, %21042) /* ty=Tensor[(1, 1024), float32] */;
  %21105 = multiply(%21102, %21103) /* ty=Tensor[(1, 1024), float32] */;
  %21106 = add(%21104, %21105) /* ty=Tensor[(1, 1024), float32] */;
  %21107 = sigmoid(%21097) /* ty=Tensor[(1, 1024), float32] */;
  %21108 = tanh(%21106) /* ty=Tensor[(1, 1024), float32] */;
  %21109 = multiply(%21107, %21108) /* ty=Tensor[(1, 1024), float32] */;
  %21110 = multiply(%21065, %21066) /* ty=Tensor[(1, 1024), float32] */;
  %21111 = (%21109, %21110) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21112 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21113 = concatenate(%21111, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21114 = concatenate(%21112, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21115 = nn.dense(%21113, %21114, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21116 = add(%21115, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21117 = add(%21116, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21118 = split(%21117, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21119 = %21118.3 /* ty=Tensor[(1, 1024), float32] */;
  %21120 = %21118.1 /* ty=Tensor[(1, 1024), float32] */;
  %21121 = sigmoid(%21120) /* ty=Tensor[(1, 1024), float32] */;
  %21122 = %21118.0 /* ty=Tensor[(1, 1024), float32] */;
  %21123 = %21118.2 /* ty=Tensor[(1, 1024), float32] */;
  %21124 = sigmoid(%21122) /* ty=Tensor[(1, 1024), float32] */;
  %21125 = tanh(%21123) /* ty=Tensor[(1, 1024), float32] */;
  %21126 = multiply(%21121, %21064) /* ty=Tensor[(1, 1024), float32] */;
  %21127 = multiply(%21124, %21125) /* ty=Tensor[(1, 1024), float32] */;
  %21128 = add(%21126, %21127) /* ty=Tensor[(1, 1024), float32] */;
  %21129 = sigmoid(%21119) /* ty=Tensor[(1, 1024), float32] */;
  %21130 = tanh(%21128) /* ty=Tensor[(1, 1024), float32] */;
  %21131 = %12788.130 /* ty=Tensor[(1, 2048), float32] */;
  %21132 = (%21131, %21088) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21133 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21134 = concatenate(%21132, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21135 = concatenate(%21133, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21136 = nn.dense(%21134, %21135, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21137 = add(%21136, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21138 = add(%21137, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21139 = split(%21138, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21140 = %21139.3 /* ty=Tensor[(1, 1024), float32] */;
  %21141 = %21139.1 /* ty=Tensor[(1, 1024), float32] */;
  %21142 = sigmoid(%21141) /* ty=Tensor[(1, 1024), float32] */;
  %21143 = %21139.0 /* ty=Tensor[(1, 1024), float32] */;
  %21144 = %21139.2 /* ty=Tensor[(1, 1024), float32] */;
  %21145 = sigmoid(%21143) /* ty=Tensor[(1, 1024), float32] */;
  %21146 = tanh(%21144) /* ty=Tensor[(1, 1024), float32] */;
  %21147 = multiply(%21142, %21085) /* ty=Tensor[(1, 1024), float32] */;
  %21148 = multiply(%21145, %21146) /* ty=Tensor[(1, 1024), float32] */;
  %21149 = add(%21147, %21148) /* ty=Tensor[(1, 1024), float32] */;
  %21150 = sigmoid(%21140) /* ty=Tensor[(1, 1024), float32] */;
  %21151 = tanh(%21149) /* ty=Tensor[(1, 1024), float32] */;
  %21152 = multiply(%21150, %21151) /* ty=Tensor[(1, 1024), float32] */;
  %21153 = (%21152, %21109) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21154 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21155 = concatenate(%21153, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21156 = concatenate(%21154, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21157 = nn.dense(%21155, %21156, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21158 = add(%21157, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21159 = add(%21158, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21160 = split(%21159, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21161 = %21160.3 /* ty=Tensor[(1, 1024), float32] */;
  %21162 = %21160.1 /* ty=Tensor[(1, 1024), float32] */;
  %21163 = sigmoid(%21162) /* ty=Tensor[(1, 1024), float32] */;
  %21164 = %21160.0 /* ty=Tensor[(1, 1024), float32] */;
  %21165 = %21160.2 /* ty=Tensor[(1, 1024), float32] */;
  %21166 = sigmoid(%21164) /* ty=Tensor[(1, 1024), float32] */;
  %21167 = tanh(%21165) /* ty=Tensor[(1, 1024), float32] */;
  %21168 = multiply(%21163, %21106) /* ty=Tensor[(1, 1024), float32] */;
  %21169 = multiply(%21166, %21167) /* ty=Tensor[(1, 1024), float32] */;
  %21170 = add(%21168, %21169) /* ty=Tensor[(1, 1024), float32] */;
  %21171 = sigmoid(%21161) /* ty=Tensor[(1, 1024), float32] */;
  %21172 = tanh(%21170) /* ty=Tensor[(1, 1024), float32] */;
  %21173 = multiply(%21171, %21172) /* ty=Tensor[(1, 1024), float32] */;
  %21174 = multiply(%21129, %21130) /* ty=Tensor[(1, 1024), float32] */;
  %21175 = (%21173, %21174) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21176 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21177 = concatenate(%21175, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21178 = concatenate(%21176, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21179 = nn.dense(%21177, %21178, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21180 = add(%21179, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21181 = add(%21180, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21182 = split(%21181, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21183 = %21182.3 /* ty=Tensor[(1, 1024), float32] */;
  %21184 = %21182.1 /* ty=Tensor[(1, 1024), float32] */;
  %21185 = sigmoid(%21184) /* ty=Tensor[(1, 1024), float32] */;
  %21186 = %21182.0 /* ty=Tensor[(1, 1024), float32] */;
  %21187 = %21182.2 /* ty=Tensor[(1, 1024), float32] */;
  %21188 = sigmoid(%21186) /* ty=Tensor[(1, 1024), float32] */;
  %21189 = tanh(%21187) /* ty=Tensor[(1, 1024), float32] */;
  %21190 = multiply(%21185, %21128) /* ty=Tensor[(1, 1024), float32] */;
  %21191 = multiply(%21188, %21189) /* ty=Tensor[(1, 1024), float32] */;
  %21192 = add(%21190, %21191) /* ty=Tensor[(1, 1024), float32] */;
  %21193 = sigmoid(%21183) /* ty=Tensor[(1, 1024), float32] */;
  %21194 = tanh(%21192) /* ty=Tensor[(1, 1024), float32] */;
  %21195 = %12788.131 /* ty=Tensor[(1, 2048), float32] */;
  %21196 = (%21195, %21152) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21197 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21198 = concatenate(%21196, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21199 = concatenate(%21197, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21200 = nn.dense(%21198, %21199, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21201 = add(%21200, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21202 = add(%21201, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21203 = split(%21202, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21204 = %21203.3 /* ty=Tensor[(1, 1024), float32] */;
  %21205 = %21203.1 /* ty=Tensor[(1, 1024), float32] */;
  %21206 = sigmoid(%21205) /* ty=Tensor[(1, 1024), float32] */;
  %21207 = %21203.0 /* ty=Tensor[(1, 1024), float32] */;
  %21208 = %21203.2 /* ty=Tensor[(1, 1024), float32] */;
  %21209 = sigmoid(%21207) /* ty=Tensor[(1, 1024), float32] */;
  %21210 = tanh(%21208) /* ty=Tensor[(1, 1024), float32] */;
  %21211 = multiply(%21206, %21149) /* ty=Tensor[(1, 1024), float32] */;
  %21212 = multiply(%21209, %21210) /* ty=Tensor[(1, 1024), float32] */;
  %21213 = add(%21211, %21212) /* ty=Tensor[(1, 1024), float32] */;
  %21214 = sigmoid(%21204) /* ty=Tensor[(1, 1024), float32] */;
  %21215 = tanh(%21213) /* ty=Tensor[(1, 1024), float32] */;
  %21216 = multiply(%21214, %21215) /* ty=Tensor[(1, 1024), float32] */;
  %21217 = (%21216, %21173) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21218 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21219 = concatenate(%21217, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21220 = concatenate(%21218, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21221 = nn.dense(%21219, %21220, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21222 = add(%21221, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21223 = add(%21222, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21224 = split(%21223, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21225 = %21224.3 /* ty=Tensor[(1, 1024), float32] */;
  %21226 = %21224.1 /* ty=Tensor[(1, 1024), float32] */;
  %21227 = sigmoid(%21226) /* ty=Tensor[(1, 1024), float32] */;
  %21228 = %21224.0 /* ty=Tensor[(1, 1024), float32] */;
  %21229 = %21224.2 /* ty=Tensor[(1, 1024), float32] */;
  %21230 = sigmoid(%21228) /* ty=Tensor[(1, 1024), float32] */;
  %21231 = tanh(%21229) /* ty=Tensor[(1, 1024), float32] */;
  %21232 = multiply(%21227, %21170) /* ty=Tensor[(1, 1024), float32] */;
  %21233 = multiply(%21230, %21231) /* ty=Tensor[(1, 1024), float32] */;
  %21234 = add(%21232, %21233) /* ty=Tensor[(1, 1024), float32] */;
  %21235 = sigmoid(%21225) /* ty=Tensor[(1, 1024), float32] */;
  %21236 = tanh(%21234) /* ty=Tensor[(1, 1024), float32] */;
  %21237 = multiply(%21235, %21236) /* ty=Tensor[(1, 1024), float32] */;
  %21238 = multiply(%21193, %21194) /* ty=Tensor[(1, 1024), float32] */;
  %21239 = (%21237, %21238) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21240 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21241 = concatenate(%21239, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21242 = concatenate(%21240, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21243 = nn.dense(%21241, %21242, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21244 = add(%21243, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21245 = add(%21244, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21246 = split(%21245, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21247 = %21246.3 /* ty=Tensor[(1, 1024), float32] */;
  %21248 = %21246.1 /* ty=Tensor[(1, 1024), float32] */;
  %21249 = sigmoid(%21248) /* ty=Tensor[(1, 1024), float32] */;
  %21250 = %21246.0 /* ty=Tensor[(1, 1024), float32] */;
  %21251 = %21246.2 /* ty=Tensor[(1, 1024), float32] */;
  %21252 = sigmoid(%21250) /* ty=Tensor[(1, 1024), float32] */;
  %21253 = tanh(%21251) /* ty=Tensor[(1, 1024), float32] */;
  %21254 = multiply(%21249, %21192) /* ty=Tensor[(1, 1024), float32] */;
  %21255 = multiply(%21252, %21253) /* ty=Tensor[(1, 1024), float32] */;
  %21256 = add(%21254, %21255) /* ty=Tensor[(1, 1024), float32] */;
  %21257 = sigmoid(%21247) /* ty=Tensor[(1, 1024), float32] */;
  %21258 = tanh(%21256) /* ty=Tensor[(1, 1024), float32] */;
  %21259 = %12788.132 /* ty=Tensor[(1, 2048), float32] */;
  %21260 = (%21259, %21216) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21261 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21262 = concatenate(%21260, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21263 = concatenate(%21261, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21264 = nn.dense(%21262, %21263, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21265 = add(%21264, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21266 = add(%21265, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21267 = split(%21266, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21268 = %21267.3 /* ty=Tensor[(1, 1024), float32] */;
  %21269 = %21267.1 /* ty=Tensor[(1, 1024), float32] */;
  %21270 = sigmoid(%21269) /* ty=Tensor[(1, 1024), float32] */;
  %21271 = %21267.0 /* ty=Tensor[(1, 1024), float32] */;
  %21272 = %21267.2 /* ty=Tensor[(1, 1024), float32] */;
  %21273 = sigmoid(%21271) /* ty=Tensor[(1, 1024), float32] */;
  %21274 = tanh(%21272) /* ty=Tensor[(1, 1024), float32] */;
  %21275 = multiply(%21270, %21213) /* ty=Tensor[(1, 1024), float32] */;
  %21276 = multiply(%21273, %21274) /* ty=Tensor[(1, 1024), float32] */;
  %21277 = add(%21275, %21276) /* ty=Tensor[(1, 1024), float32] */;
  %21278 = sigmoid(%21268) /* ty=Tensor[(1, 1024), float32] */;
  %21279 = tanh(%21277) /* ty=Tensor[(1, 1024), float32] */;
  %21280 = multiply(%21278, %21279) /* ty=Tensor[(1, 1024), float32] */;
  %21281 = (%21280, %21237) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21282 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21283 = concatenate(%21281, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21284 = concatenate(%21282, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21285 = nn.dense(%21283, %21284, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21286 = add(%21285, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21287 = add(%21286, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21288 = split(%21287, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21289 = %21288.3 /* ty=Tensor[(1, 1024), float32] */;
  %21290 = %21288.1 /* ty=Tensor[(1, 1024), float32] */;
  %21291 = sigmoid(%21290) /* ty=Tensor[(1, 1024), float32] */;
  %21292 = %21288.0 /* ty=Tensor[(1, 1024), float32] */;
  %21293 = %21288.2 /* ty=Tensor[(1, 1024), float32] */;
  %21294 = sigmoid(%21292) /* ty=Tensor[(1, 1024), float32] */;
  %21295 = tanh(%21293) /* ty=Tensor[(1, 1024), float32] */;
  %21296 = multiply(%21291, %21234) /* ty=Tensor[(1, 1024), float32] */;
  %21297 = multiply(%21294, %21295) /* ty=Tensor[(1, 1024), float32] */;
  %21298 = add(%21296, %21297) /* ty=Tensor[(1, 1024), float32] */;
  %21299 = sigmoid(%21289) /* ty=Tensor[(1, 1024), float32] */;
  %21300 = tanh(%21298) /* ty=Tensor[(1, 1024), float32] */;
  %21301 = multiply(%21299, %21300) /* ty=Tensor[(1, 1024), float32] */;
  %21302 = multiply(%21257, %21258) /* ty=Tensor[(1, 1024), float32] */;
  %21303 = (%21301, %21302) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21304 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21305 = concatenate(%21303, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21306 = concatenate(%21304, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21307 = nn.dense(%21305, %21306, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21308 = add(%21307, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21309 = add(%21308, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21310 = split(%21309, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21311 = %21310.3 /* ty=Tensor[(1, 1024), float32] */;
  %21312 = %21310.1 /* ty=Tensor[(1, 1024), float32] */;
  %21313 = sigmoid(%21312) /* ty=Tensor[(1, 1024), float32] */;
  %21314 = %21310.0 /* ty=Tensor[(1, 1024), float32] */;
  %21315 = %21310.2 /* ty=Tensor[(1, 1024), float32] */;
  %21316 = sigmoid(%21314) /* ty=Tensor[(1, 1024), float32] */;
  %21317 = tanh(%21315) /* ty=Tensor[(1, 1024), float32] */;
  %21318 = multiply(%21313, %21256) /* ty=Tensor[(1, 1024), float32] */;
  %21319 = multiply(%21316, %21317) /* ty=Tensor[(1, 1024), float32] */;
  %21320 = add(%21318, %21319) /* ty=Tensor[(1, 1024), float32] */;
  %21321 = sigmoid(%21311) /* ty=Tensor[(1, 1024), float32] */;
  %21322 = tanh(%21320) /* ty=Tensor[(1, 1024), float32] */;
  %21323 = %12788.133 /* ty=Tensor[(1, 2048), float32] */;
  %21324 = (%21323, %21280) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21325 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21326 = concatenate(%21324, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21327 = concatenate(%21325, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21328 = nn.dense(%21326, %21327, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21329 = add(%21328, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21330 = add(%21329, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21331 = split(%21330, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21332 = %21331.3 /* ty=Tensor[(1, 1024), float32] */;
  %21333 = %21331.1 /* ty=Tensor[(1, 1024), float32] */;
  %21334 = sigmoid(%21333) /* ty=Tensor[(1, 1024), float32] */;
  %21335 = %21331.0 /* ty=Tensor[(1, 1024), float32] */;
  %21336 = %21331.2 /* ty=Tensor[(1, 1024), float32] */;
  %21337 = sigmoid(%21335) /* ty=Tensor[(1, 1024), float32] */;
  %21338 = tanh(%21336) /* ty=Tensor[(1, 1024), float32] */;
  %21339 = multiply(%21334, %21277) /* ty=Tensor[(1, 1024), float32] */;
  %21340 = multiply(%21337, %21338) /* ty=Tensor[(1, 1024), float32] */;
  %21341 = add(%21339, %21340) /* ty=Tensor[(1, 1024), float32] */;
  %21342 = sigmoid(%21332) /* ty=Tensor[(1, 1024), float32] */;
  %21343 = tanh(%21341) /* ty=Tensor[(1, 1024), float32] */;
  %21344 = multiply(%21342, %21343) /* ty=Tensor[(1, 1024), float32] */;
  %21345 = (%21344, %21301) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21346 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21347 = concatenate(%21345, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21348 = concatenate(%21346, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21349 = nn.dense(%21347, %21348, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21350 = add(%21349, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21351 = add(%21350, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21352 = split(%21351, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21353 = %21352.3 /* ty=Tensor[(1, 1024), float32] */;
  %21354 = %21352.1 /* ty=Tensor[(1, 1024), float32] */;
  %21355 = sigmoid(%21354) /* ty=Tensor[(1, 1024), float32] */;
  %21356 = %21352.0 /* ty=Tensor[(1, 1024), float32] */;
  %21357 = %21352.2 /* ty=Tensor[(1, 1024), float32] */;
  %21358 = sigmoid(%21356) /* ty=Tensor[(1, 1024), float32] */;
  %21359 = tanh(%21357) /* ty=Tensor[(1, 1024), float32] */;
  %21360 = multiply(%21355, %21298) /* ty=Tensor[(1, 1024), float32] */;
  %21361 = multiply(%21358, %21359) /* ty=Tensor[(1, 1024), float32] */;
  %21362 = add(%21360, %21361) /* ty=Tensor[(1, 1024), float32] */;
  %21363 = sigmoid(%21353) /* ty=Tensor[(1, 1024), float32] */;
  %21364 = tanh(%21362) /* ty=Tensor[(1, 1024), float32] */;
  %21365 = multiply(%21363, %21364) /* ty=Tensor[(1, 1024), float32] */;
  %21366 = multiply(%21321, %21322) /* ty=Tensor[(1, 1024), float32] */;
  %21367 = (%21365, %21366) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21368 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21369 = concatenate(%21367, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21370 = concatenate(%21368, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21371 = nn.dense(%21369, %21370, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21372 = add(%21371, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21373 = add(%21372, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21374 = split(%21373, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21375 = %21374.3 /* ty=Tensor[(1, 1024), float32] */;
  %21376 = %21374.1 /* ty=Tensor[(1, 1024), float32] */;
  %21377 = sigmoid(%21376) /* ty=Tensor[(1, 1024), float32] */;
  %21378 = %21374.0 /* ty=Tensor[(1, 1024), float32] */;
  %21379 = %21374.2 /* ty=Tensor[(1, 1024), float32] */;
  %21380 = sigmoid(%21378) /* ty=Tensor[(1, 1024), float32] */;
  %21381 = tanh(%21379) /* ty=Tensor[(1, 1024), float32] */;
  %21382 = multiply(%21377, %21320) /* ty=Tensor[(1, 1024), float32] */;
  %21383 = multiply(%21380, %21381) /* ty=Tensor[(1, 1024), float32] */;
  %21384 = add(%21382, %21383) /* ty=Tensor[(1, 1024), float32] */;
  %21385 = sigmoid(%21375) /* ty=Tensor[(1, 1024), float32] */;
  %21386 = tanh(%21384) /* ty=Tensor[(1, 1024), float32] */;
  %21387 = %12788.134 /* ty=Tensor[(1, 2048), float32] */;
  %21388 = (%21387, %21344) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21389 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21390 = concatenate(%21388, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21391 = concatenate(%21389, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21392 = nn.dense(%21390, %21391, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21393 = add(%21392, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21394 = add(%21393, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21395 = split(%21394, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21396 = %21395.3 /* ty=Tensor[(1, 1024), float32] */;
  %21397 = %21395.1 /* ty=Tensor[(1, 1024), float32] */;
  %21398 = sigmoid(%21397) /* ty=Tensor[(1, 1024), float32] */;
  %21399 = %21395.0 /* ty=Tensor[(1, 1024), float32] */;
  %21400 = %21395.2 /* ty=Tensor[(1, 1024), float32] */;
  %21401 = sigmoid(%21399) /* ty=Tensor[(1, 1024), float32] */;
  %21402 = tanh(%21400) /* ty=Tensor[(1, 1024), float32] */;
  %21403 = multiply(%21398, %21341) /* ty=Tensor[(1, 1024), float32] */;
  %21404 = multiply(%21401, %21402) /* ty=Tensor[(1, 1024), float32] */;
  %21405 = add(%21403, %21404) /* ty=Tensor[(1, 1024), float32] */;
  %21406 = sigmoid(%21396) /* ty=Tensor[(1, 1024), float32] */;
  %21407 = tanh(%21405) /* ty=Tensor[(1, 1024), float32] */;
  %21408 = multiply(%21406, %21407) /* ty=Tensor[(1, 1024), float32] */;
  %21409 = (%21408, %21365) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21410 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21411 = concatenate(%21409, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21412 = concatenate(%21410, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21413 = nn.dense(%21411, %21412, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21414 = add(%21413, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21415 = add(%21414, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21416 = split(%21415, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21417 = %21416.3 /* ty=Tensor[(1, 1024), float32] */;
  %21418 = %21416.1 /* ty=Tensor[(1, 1024), float32] */;
  %21419 = sigmoid(%21418) /* ty=Tensor[(1, 1024), float32] */;
  %21420 = %21416.0 /* ty=Tensor[(1, 1024), float32] */;
  %21421 = %21416.2 /* ty=Tensor[(1, 1024), float32] */;
  %21422 = sigmoid(%21420) /* ty=Tensor[(1, 1024), float32] */;
  %21423 = tanh(%21421) /* ty=Tensor[(1, 1024), float32] */;
  %21424 = multiply(%21419, %21362) /* ty=Tensor[(1, 1024), float32] */;
  %21425 = multiply(%21422, %21423) /* ty=Tensor[(1, 1024), float32] */;
  %21426 = add(%21424, %21425) /* ty=Tensor[(1, 1024), float32] */;
  %21427 = sigmoid(%21417) /* ty=Tensor[(1, 1024), float32] */;
  %21428 = tanh(%21426) /* ty=Tensor[(1, 1024), float32] */;
  %21429 = multiply(%21427, %21428) /* ty=Tensor[(1, 1024), float32] */;
  %21430 = multiply(%21385, %21386) /* ty=Tensor[(1, 1024), float32] */;
  %21431 = (%21429, %21430) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21432 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21433 = concatenate(%21431, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21434 = concatenate(%21432, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21435 = nn.dense(%21433, %21434, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21436 = add(%21435, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21437 = add(%21436, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21438 = split(%21437, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21439 = %21438.3 /* ty=Tensor[(1, 1024), float32] */;
  %21440 = %21438.1 /* ty=Tensor[(1, 1024), float32] */;
  %21441 = sigmoid(%21440) /* ty=Tensor[(1, 1024), float32] */;
  %21442 = %21438.0 /* ty=Tensor[(1, 1024), float32] */;
  %21443 = %21438.2 /* ty=Tensor[(1, 1024), float32] */;
  %21444 = sigmoid(%21442) /* ty=Tensor[(1, 1024), float32] */;
  %21445 = tanh(%21443) /* ty=Tensor[(1, 1024), float32] */;
  %21446 = multiply(%21441, %21384) /* ty=Tensor[(1, 1024), float32] */;
  %21447 = multiply(%21444, %21445) /* ty=Tensor[(1, 1024), float32] */;
  %21448 = add(%21446, %21447) /* ty=Tensor[(1, 1024), float32] */;
  %21449 = sigmoid(%21439) /* ty=Tensor[(1, 1024), float32] */;
  %21450 = tanh(%21448) /* ty=Tensor[(1, 1024), float32] */;
  %21451 = %12788.135 /* ty=Tensor[(1, 2048), float32] */;
  %21452 = (%21451, %21408) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21453 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21454 = concatenate(%21452, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21455 = concatenate(%21453, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21456 = nn.dense(%21454, %21455, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21457 = add(%21456, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21458 = add(%21457, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21459 = split(%21458, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21460 = %21459.3 /* ty=Tensor[(1, 1024), float32] */;
  %21461 = %21459.1 /* ty=Tensor[(1, 1024), float32] */;
  %21462 = sigmoid(%21461) /* ty=Tensor[(1, 1024), float32] */;
  %21463 = %21459.0 /* ty=Tensor[(1, 1024), float32] */;
  %21464 = %21459.2 /* ty=Tensor[(1, 1024), float32] */;
  %21465 = sigmoid(%21463) /* ty=Tensor[(1, 1024), float32] */;
  %21466 = tanh(%21464) /* ty=Tensor[(1, 1024), float32] */;
  %21467 = multiply(%21462, %21405) /* ty=Tensor[(1, 1024), float32] */;
  %21468 = multiply(%21465, %21466) /* ty=Tensor[(1, 1024), float32] */;
  %21469 = add(%21467, %21468) /* ty=Tensor[(1, 1024), float32] */;
  %21470 = sigmoid(%21460) /* ty=Tensor[(1, 1024), float32] */;
  %21471 = tanh(%21469) /* ty=Tensor[(1, 1024), float32] */;
  %21472 = multiply(%21470, %21471) /* ty=Tensor[(1, 1024), float32] */;
  %21473 = (%21472, %21429) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21474 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21475 = concatenate(%21473, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21476 = concatenate(%21474, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21477 = nn.dense(%21475, %21476, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21478 = add(%21477, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21479 = add(%21478, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21480 = split(%21479, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21481 = %21480.3 /* ty=Tensor[(1, 1024), float32] */;
  %21482 = %21480.1 /* ty=Tensor[(1, 1024), float32] */;
  %21483 = sigmoid(%21482) /* ty=Tensor[(1, 1024), float32] */;
  %21484 = %21480.0 /* ty=Tensor[(1, 1024), float32] */;
  %21485 = %21480.2 /* ty=Tensor[(1, 1024), float32] */;
  %21486 = sigmoid(%21484) /* ty=Tensor[(1, 1024), float32] */;
  %21487 = tanh(%21485) /* ty=Tensor[(1, 1024), float32] */;
  %21488 = multiply(%21483, %21426) /* ty=Tensor[(1, 1024), float32] */;
  %21489 = multiply(%21486, %21487) /* ty=Tensor[(1, 1024), float32] */;
  %21490 = add(%21488, %21489) /* ty=Tensor[(1, 1024), float32] */;
  %21491 = sigmoid(%21481) /* ty=Tensor[(1, 1024), float32] */;
  %21492 = tanh(%21490) /* ty=Tensor[(1, 1024), float32] */;
  %21493 = multiply(%21491, %21492) /* ty=Tensor[(1, 1024), float32] */;
  %21494 = multiply(%21449, %21450) /* ty=Tensor[(1, 1024), float32] */;
  %21495 = (%21493, %21494) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21496 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21497 = concatenate(%21495, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21498 = concatenate(%21496, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21499 = nn.dense(%21497, %21498, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21500 = add(%21499, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21501 = add(%21500, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21502 = split(%21501, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21503 = %21502.3 /* ty=Tensor[(1, 1024), float32] */;
  %21504 = %21502.1 /* ty=Tensor[(1, 1024), float32] */;
  %21505 = sigmoid(%21504) /* ty=Tensor[(1, 1024), float32] */;
  %21506 = %21502.0 /* ty=Tensor[(1, 1024), float32] */;
  %21507 = %21502.2 /* ty=Tensor[(1, 1024), float32] */;
  %21508 = sigmoid(%21506) /* ty=Tensor[(1, 1024), float32] */;
  %21509 = tanh(%21507) /* ty=Tensor[(1, 1024), float32] */;
  %21510 = multiply(%21505, %21448) /* ty=Tensor[(1, 1024), float32] */;
  %21511 = multiply(%21508, %21509) /* ty=Tensor[(1, 1024), float32] */;
  %21512 = add(%21510, %21511) /* ty=Tensor[(1, 1024), float32] */;
  %21513 = sigmoid(%21503) /* ty=Tensor[(1, 1024), float32] */;
  %21514 = tanh(%21512) /* ty=Tensor[(1, 1024), float32] */;
  %21515 = %12788.136 /* ty=Tensor[(1, 2048), float32] */;
  %21516 = (%21515, %21472) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21517 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21518 = concatenate(%21516, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21519 = concatenate(%21517, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21520 = nn.dense(%21518, %21519, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21521 = add(%21520, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21522 = add(%21521, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21523 = split(%21522, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21524 = %21523.3 /* ty=Tensor[(1, 1024), float32] */;
  %21525 = %21523.1 /* ty=Tensor[(1, 1024), float32] */;
  %21526 = sigmoid(%21525) /* ty=Tensor[(1, 1024), float32] */;
  %21527 = %21523.0 /* ty=Tensor[(1, 1024), float32] */;
  %21528 = %21523.2 /* ty=Tensor[(1, 1024), float32] */;
  %21529 = sigmoid(%21527) /* ty=Tensor[(1, 1024), float32] */;
  %21530 = tanh(%21528) /* ty=Tensor[(1, 1024), float32] */;
  %21531 = multiply(%21526, %21469) /* ty=Tensor[(1, 1024), float32] */;
  %21532 = multiply(%21529, %21530) /* ty=Tensor[(1, 1024), float32] */;
  %21533 = add(%21531, %21532) /* ty=Tensor[(1, 1024), float32] */;
  %21534 = sigmoid(%21524) /* ty=Tensor[(1, 1024), float32] */;
  %21535 = tanh(%21533) /* ty=Tensor[(1, 1024), float32] */;
  %21536 = multiply(%21534, %21535) /* ty=Tensor[(1, 1024), float32] */;
  %21537 = (%21536, %21493) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21538 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21539 = concatenate(%21537, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21540 = concatenate(%21538, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21541 = nn.dense(%21539, %21540, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21542 = add(%21541, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21543 = add(%21542, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21544 = split(%21543, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21545 = %21544.3 /* ty=Tensor[(1, 1024), float32] */;
  %21546 = %21544.1 /* ty=Tensor[(1, 1024), float32] */;
  %21547 = sigmoid(%21546) /* ty=Tensor[(1, 1024), float32] */;
  %21548 = %21544.0 /* ty=Tensor[(1, 1024), float32] */;
  %21549 = %21544.2 /* ty=Tensor[(1, 1024), float32] */;
  %21550 = sigmoid(%21548) /* ty=Tensor[(1, 1024), float32] */;
  %21551 = tanh(%21549) /* ty=Tensor[(1, 1024), float32] */;
  %21552 = multiply(%21547, %21490) /* ty=Tensor[(1, 1024), float32] */;
  %21553 = multiply(%21550, %21551) /* ty=Tensor[(1, 1024), float32] */;
  %21554 = add(%21552, %21553) /* ty=Tensor[(1, 1024), float32] */;
  %21555 = sigmoid(%21545) /* ty=Tensor[(1, 1024), float32] */;
  %21556 = tanh(%21554) /* ty=Tensor[(1, 1024), float32] */;
  %21557 = multiply(%21555, %21556) /* ty=Tensor[(1, 1024), float32] */;
  %21558 = multiply(%21513, %21514) /* ty=Tensor[(1, 1024), float32] */;
  %21559 = (%21557, %21558) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21560 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21561 = concatenate(%21559, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21562 = concatenate(%21560, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21563 = nn.dense(%21561, %21562, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21564 = add(%21563, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21565 = add(%21564, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21566 = split(%21565, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21567 = %21566.3 /* ty=Tensor[(1, 1024), float32] */;
  %21568 = %21566.1 /* ty=Tensor[(1, 1024), float32] */;
  %21569 = sigmoid(%21568) /* ty=Tensor[(1, 1024), float32] */;
  %21570 = %21566.0 /* ty=Tensor[(1, 1024), float32] */;
  %21571 = %21566.2 /* ty=Tensor[(1, 1024), float32] */;
  %21572 = sigmoid(%21570) /* ty=Tensor[(1, 1024), float32] */;
  %21573 = tanh(%21571) /* ty=Tensor[(1, 1024), float32] */;
  %21574 = multiply(%21569, %21512) /* ty=Tensor[(1, 1024), float32] */;
  %21575 = multiply(%21572, %21573) /* ty=Tensor[(1, 1024), float32] */;
  %21576 = add(%21574, %21575) /* ty=Tensor[(1, 1024), float32] */;
  %21577 = sigmoid(%21567) /* ty=Tensor[(1, 1024), float32] */;
  %21578 = tanh(%21576) /* ty=Tensor[(1, 1024), float32] */;
  %21579 = %12788.137 /* ty=Tensor[(1, 2048), float32] */;
  %21580 = (%21579, %21536) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21581 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21582 = concatenate(%21580, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21583 = concatenate(%21581, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21584 = nn.dense(%21582, %21583, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21585 = add(%21584, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21586 = add(%21585, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21587 = split(%21586, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21588 = %21587.3 /* ty=Tensor[(1, 1024), float32] */;
  %21589 = %21587.1 /* ty=Tensor[(1, 1024), float32] */;
  %21590 = sigmoid(%21589) /* ty=Tensor[(1, 1024), float32] */;
  %21591 = %21587.0 /* ty=Tensor[(1, 1024), float32] */;
  %21592 = %21587.2 /* ty=Tensor[(1, 1024), float32] */;
  %21593 = sigmoid(%21591) /* ty=Tensor[(1, 1024), float32] */;
  %21594 = tanh(%21592) /* ty=Tensor[(1, 1024), float32] */;
  %21595 = multiply(%21590, %21533) /* ty=Tensor[(1, 1024), float32] */;
  %21596 = multiply(%21593, %21594) /* ty=Tensor[(1, 1024), float32] */;
  %21597 = add(%21595, %21596) /* ty=Tensor[(1, 1024), float32] */;
  %21598 = sigmoid(%21588) /* ty=Tensor[(1, 1024), float32] */;
  %21599 = tanh(%21597) /* ty=Tensor[(1, 1024), float32] */;
  %21600 = multiply(%21598, %21599) /* ty=Tensor[(1, 1024), float32] */;
  %21601 = (%21600, %21557) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21602 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21603 = concatenate(%21601, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21604 = concatenate(%21602, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21605 = nn.dense(%21603, %21604, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21606 = add(%21605, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21607 = add(%21606, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21608 = split(%21607, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21609 = %21608.3 /* ty=Tensor[(1, 1024), float32] */;
  %21610 = %21608.1 /* ty=Tensor[(1, 1024), float32] */;
  %21611 = sigmoid(%21610) /* ty=Tensor[(1, 1024), float32] */;
  %21612 = %21608.0 /* ty=Tensor[(1, 1024), float32] */;
  %21613 = %21608.2 /* ty=Tensor[(1, 1024), float32] */;
  %21614 = sigmoid(%21612) /* ty=Tensor[(1, 1024), float32] */;
  %21615 = tanh(%21613) /* ty=Tensor[(1, 1024), float32] */;
  %21616 = multiply(%21611, %21554) /* ty=Tensor[(1, 1024), float32] */;
  %21617 = multiply(%21614, %21615) /* ty=Tensor[(1, 1024), float32] */;
  %21618 = add(%21616, %21617) /* ty=Tensor[(1, 1024), float32] */;
  %21619 = sigmoid(%21609) /* ty=Tensor[(1, 1024), float32] */;
  %21620 = tanh(%21618) /* ty=Tensor[(1, 1024), float32] */;
  %21621 = multiply(%21619, %21620) /* ty=Tensor[(1, 1024), float32] */;
  %21622 = multiply(%21577, %21578) /* ty=Tensor[(1, 1024), float32] */;
  %21623 = (%21621, %21622) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21624 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21625 = concatenate(%21623, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21626 = concatenate(%21624, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21627 = nn.dense(%21625, %21626, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21628 = add(%21627, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21629 = add(%21628, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21630 = split(%21629, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21631 = %21630.3 /* ty=Tensor[(1, 1024), float32] */;
  %21632 = %21630.1 /* ty=Tensor[(1, 1024), float32] */;
  %21633 = sigmoid(%21632) /* ty=Tensor[(1, 1024), float32] */;
  %21634 = %21630.0 /* ty=Tensor[(1, 1024), float32] */;
  %21635 = %21630.2 /* ty=Tensor[(1, 1024), float32] */;
  %21636 = sigmoid(%21634) /* ty=Tensor[(1, 1024), float32] */;
  %21637 = tanh(%21635) /* ty=Tensor[(1, 1024), float32] */;
  %21638 = multiply(%21633, %21576) /* ty=Tensor[(1, 1024), float32] */;
  %21639 = multiply(%21636, %21637) /* ty=Tensor[(1, 1024), float32] */;
  %21640 = add(%21638, %21639) /* ty=Tensor[(1, 1024), float32] */;
  %21641 = sigmoid(%21631) /* ty=Tensor[(1, 1024), float32] */;
  %21642 = tanh(%21640) /* ty=Tensor[(1, 1024), float32] */;
  %21643 = %12788.138 /* ty=Tensor[(1, 2048), float32] */;
  %21644 = (%21643, %21600) /* ty=(Tensor[(1, 2048), float32], Tensor[(1, 1024), float32]) */;
  %21645 = (%encoder.post_rnn.lstm.weight_ih_l0, %encoder.post_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(4096, 2048), float32], Tensor[(4096, 1024), float32]) */;
  %21646 = concatenate(%21644, axis=1) /* ty=Tensor[(1, 3072), float32] */;
  %21647 = concatenate(%21645, axis=1) /* ty=Tensor[(4096, 3072), float32] */;
  %21648 = nn.dense(%21646, %21647, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21649 = add(%21648, %encoder.post_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21650 = add(%21649, %encoder.post_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 4096), float32] */;
  %21651 = split(%21650, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21652 = %21651.3 /* ty=Tensor[(1, 1024), float32] */;
  %21653 = %21651.1 /* ty=Tensor[(1, 1024), float32] */;
  %21654 = sigmoid(%21653) /* ty=Tensor[(1, 1024), float32] */;
  %21655 = %21651.0 /* ty=Tensor[(1, 1024), float32] */;
  %21656 = %21651.2 /* ty=Tensor[(1, 1024), float32] */;
  %21657 = sigmoid(%21655) /* ty=Tensor[(1, 1024), float32] */;
  %21658 = tanh(%21656) /* ty=Tensor[(1, 1024), float32] */;
  %21659 = multiply(%21654, %21597) /* ty=Tensor[(1, 1024), float32] */;
  %21660 = multiply(%21657, %21658) /* ty=Tensor[(1, 1024), float32] */;
  %21661 = add(%21659, %21660) /* ty=Tensor[(1, 1024), float32] */;
  %21662 = sigmoid(%21652) /* ty=Tensor[(1, 1024), float32] */;
  %21663 = tanh(%21661) /* ty=Tensor[(1, 1024), float32] */;
  %21664 = multiply(%21662, %21663) /* ty=Tensor[(1, 1024), float32] */;
  %21665 = (%21664, %21621) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21666 = (%encoder.post_rnn.lstm.weight_ih_l1, %encoder.post_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21667 = concatenate(%21665, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21668 = concatenate(%21666, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21669 = nn.dense(%21667, %21668, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21670 = add(%21669, %encoder.post_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21671 = add(%21670, %encoder.post_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 4096), float32] */;
  %21672 = split(%21671, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21673 = %21672.3 /* ty=Tensor[(1, 1024), float32] */;
  %21674 = %21672.1 /* ty=Tensor[(1, 1024), float32] */;
  %21675 = sigmoid(%21674) /* ty=Tensor[(1, 1024), float32] */;
  %21676 = %21672.0 /* ty=Tensor[(1, 1024), float32] */;
  %21677 = %21672.2 /* ty=Tensor[(1, 1024), float32] */;
  %21678 = sigmoid(%21676) /* ty=Tensor[(1, 1024), float32] */;
  %21679 = tanh(%21677) /* ty=Tensor[(1, 1024), float32] */;
  %21680 = multiply(%21675, %21618) /* ty=Tensor[(1, 1024), float32] */;
  %21681 = multiply(%21678, %21679) /* ty=Tensor[(1, 1024), float32] */;
  %21682 = add(%21680, %21681) /* ty=Tensor[(1, 1024), float32] */;
  %21683 = sigmoid(%21673) /* ty=Tensor[(1, 1024), float32] */;
  %21684 = tanh(%21682) /* ty=Tensor[(1, 1024), float32] */;
  %21685 = multiply(%21683, %21684) /* ty=Tensor[(1, 1024), float32] */;
  %21686 = multiply(%21641, %21642) /* ty=Tensor[(1, 1024), float32] */;
  %21687 = (%21685, %21686) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21688 = (%encoder.post_rnn.lstm.weight_ih_l2, %encoder.post_rnn.lstm.weight_hh_l2) /* ty=(Tensor[(4096, 1024), float32], Tensor[(4096, 1024), float32]) */;
  %21689 = concatenate(%21687, axis=1) /* ty=Tensor[(1, 2048), float32] */;
  %21690 = concatenate(%21688, axis=1) /* ty=Tensor[(4096, 2048), float32] */;
  %21691 = nn.dense(%21689, %21690, units=None) /* ty=Tensor[(1, 4096), float32] */;
  %21692 = add(%21691, %encoder.post_rnn.lstm.bias_ih_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21693 = add(%21692, %encoder.post_rnn.lstm.bias_hh_l2) /* ty=Tensor[(1, 4096), float32] */;
  %21694 = split(%21693, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21695 = %21694.3 /* ty=Tensor[(1, 1024), float32] */;
  %21696 = %21694.1 /* ty=Tensor[(1, 1024), float32] */;
  %21697 = sigmoid(%21696) /* ty=Tensor[(1, 1024), float32] */;
  %21698 = %21694.0 /* ty=Tensor[(1, 1024), float32] */;
  %21699 = %21694.2 /* ty=Tensor[(1, 1024), float32] */;
  %21700 = sigmoid(%21698) /* ty=Tensor[(1, 1024), float32] */;
  %21701 = tanh(%21699) /* ty=Tensor[(1, 1024), float32] */;
  %21702 = multiply(%21697, %21640) /* ty=Tensor[(1, 1024), float32] */;
  %21703 = multiply(%21700, %21701) /* ty=Tensor[(1, 1024), float32] */;
  %21704 = add(%21702, %21703) /* ty=Tensor[(1, 1024), float32] */;
  %21705 = sigmoid(%21695) /* ty=Tensor[(1, 1024), float32] */;
  %21706 = tanh(%21704) /* ty=Tensor[(1, 1024), float32] */;
  %21707 = multiply(%21705, %21706) /* ty=Tensor[(1, 1024), float32] */;
  %21708 = (%12918, %12982, %13046, %13110, %13174, %13238, %13302, %13366, %13430, %13494, %13558, %13622, %13686, %13750, %13814, %13878, %13942, %14006, %14070, %14134, %14198, %14262, %14326, %14390, %14454, %14518, %14582, %14646, %14710, %14774, %14838, %14902, %14966, %15030, %15094, %15158, %15222, %15286, %15350, %15414, %15478, %15542, %15606, %15670, %15734, %15798, %15862, %15926, %15990, %16054, %16118, %16182, %16246, %16310, %16374, %16438, %16502, %16566, %16630, %16694, %16758, %16822, %16886, %16950, %17014, %17078, %17142, %17206, %17270, %17334, %17398, %17462, %17526, %17590, %17654, %17718, %17782, %17846, %17910, %17974, %18038, %18102, %18166, %18230, %18294, %18358, %18422, %18486, %18550, %18614, %18678, %18742, %18806, %18870, %18934, %18998, %19062, %19126, %19190, %19254, %19318, %19382, %19446, %19510, %19574, %19638, %19702, %19766, %19830, %19894, %19958, %20022, %20086, %20150, %20214, %20278, %20342, %20406, %20470, %20534, %20598, %20662, %20726, %20790, %20854, %20918, %20982, %21046, %21110, %21174, %21238, %21302, %21366, %21430, %21494, %21558, %21622, %21686, %21707) /* ty=(Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32], Tensor[(1, 1024), float32]) */;
  %21709 = stack(%21708) /* ty=Tensor[(139, 1, 1024), float32] */;
  %21710 = nn.dropout(%21709, rate=0.1f) /* ty=(Tensor[(139, 1, 1024), float32], Tensor[(139, 1, 1024), float32]) */;
  %21711 = %21710.0 /* ty=Tensor[(139, 1, 1024), float32] */;
  %21712 = transpose(%21711, axes=[1, 0, 2]) /* ty=Tensor[(1, 139, 1024), float32] */;
  %21713 = transpose(%joint_enc.weight, axes=[1, 0]) /* ty=Tensor[(1024, 512), float32] */;
  %21714 = reshape(%21712, newshape=[-1, 1024]) /* ty=Tensor[(139, 1024), float32] */;
  %21715 = transpose(%21713, axes=[1, 0]) /* ty=Tensor[(512, 1024), float32] */;
  %21716 = nn.dense(%21714, %21715, units=None) /* ty=Tensor[(139, 512), float32] */;
  %21717 = reshape(%21716, newshape=[1, 139, 512]) /* ty=Tensor[(1, 139, 512), float32] */;
  %21718 = add(%21717, %joint_enc.bias) /* ty=Tensor[(1, 139, 512), float32] */;
  %21719 = cast(%txt, dtype="int32") /* ty=Tensor[(1, 47), int32] */;
  %21720 = full(0f /* ty=float32 */, shape=[1, 1, 512], dtype="float32") /* ty=Tensor[(1, 1, 512), float32] */;
  %21721 = take(%prediction.embed.weight, %21719, axis=0) /* ty=Tensor[(1, 47, 512), float32] */;
  %21722 = (%21720, %21721) /* ty=(Tensor[(1, 1, 512), float32], Tensor[(1, 47, 512), float32]) */;
  %21723 = concatenate(%21722, axis=1) /* ty=Tensor[(1, 48, 512), float32] */;
  %21724 = transpose(%21723, axes=[1, 0, 2]) /* ty=Tensor[(48, 1, 512), float32] */;
  %21725 = split(%21724, indices_or_sections=48) /* ty=(Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32]) */;
  %21726 = %21725.0 /* ty=Tensor[(1, 1, 512), float32] */;
  %21727 = %21725.1 /* ty=Tensor[(1, 1, 512), float32] */;
  %21728 = %21725.2 /* ty=Tensor[(1, 1, 512), float32] */;
  %21729 = %21725.3 /* ty=Tensor[(1, 1, 512), float32] */;
  %21730 = %21725.4 /* ty=Tensor[(1, 1, 512), float32] */;
  %21731 = %21725.5 /* ty=Tensor[(1, 1, 512), float32] */;
  %21732 = %21725.6 /* ty=Tensor[(1, 1, 512), float32] */;
  %21733 = %21725.7 /* ty=Tensor[(1, 1, 512), float32] */;
  %21734 = %21725.8 /* ty=Tensor[(1, 1, 512), float32] */;
  %21735 = %21725.9 /* ty=Tensor[(1, 1, 512), float32] */;
  %21736 = %21725.10 /* ty=Tensor[(1, 1, 512), float32] */;
  %21737 = %21725.11 /* ty=Tensor[(1, 1, 512), float32] */;
  %21738 = %21725.12 /* ty=Tensor[(1, 1, 512), float32] */;
  %21739 = %21725.13 /* ty=Tensor[(1, 1, 512), float32] */;
  %21740 = %21725.14 /* ty=Tensor[(1, 1, 512), float32] */;
  %21741 = %21725.15 /* ty=Tensor[(1, 1, 512), float32] */;
  %21742 = %21725.16 /* ty=Tensor[(1, 1, 512), float32] */;
  %21743 = %21725.17 /* ty=Tensor[(1, 1, 512), float32] */;
  %21744 = %21725.18 /* ty=Tensor[(1, 1, 512), float32] */;
  %21745 = %21725.19 /* ty=Tensor[(1, 1, 512), float32] */;
  %21746 = %21725.20 /* ty=Tensor[(1, 1, 512), float32] */;
  %21747 = %21725.21 /* ty=Tensor[(1, 1, 512), float32] */;
  %21748 = %21725.22 /* ty=Tensor[(1, 1, 512), float32] */;
  %21749 = %21725.23 /* ty=Tensor[(1, 1, 512), float32] */;
  %21750 = %21725.24 /* ty=Tensor[(1, 1, 512), float32] */;
  %21751 = %21725.25 /* ty=Tensor[(1, 1, 512), float32] */;
  %21752 = %21725.26 /* ty=Tensor[(1, 1, 512), float32] */;
  %21753 = %21725.27 /* ty=Tensor[(1, 1, 512), float32] */;
  %21754 = %21725.28 /* ty=Tensor[(1, 1, 512), float32] */;
  %21755 = %21725.29 /* ty=Tensor[(1, 1, 512), float32] */;
  %21756 = %21725.30 /* ty=Tensor[(1, 1, 512), float32] */;
  %21757 = %21725.31 /* ty=Tensor[(1, 1, 512), float32] */;
  %21758 = %21725.32 /* ty=Tensor[(1, 1, 512), float32] */;
  %21759 = %21725.33 /* ty=Tensor[(1, 1, 512), float32] */;
  %21760 = %21725.34 /* ty=Tensor[(1, 1, 512), float32] */;
  %21761 = %21725.35 /* ty=Tensor[(1, 1, 512), float32] */;
  %21762 = %21725.36 /* ty=Tensor[(1, 1, 512), float32] */;
  %21763 = %21725.37 /* ty=Tensor[(1, 1, 512), float32] */;
  %21764 = %21725.38 /* ty=Tensor[(1, 1, 512), float32] */;
  %21765 = %21725.39 /* ty=Tensor[(1, 1, 512), float32] */;
  %21766 = %21725.40 /* ty=Tensor[(1, 1, 512), float32] */;
  %21767 = %21725.41 /* ty=Tensor[(1, 1, 512), float32] */;
  %21768 = %21725.42 /* ty=Tensor[(1, 1, 512), float32] */;
  %21769 = %21725.43 /* ty=Tensor[(1, 1, 512), float32] */;
  %21770 = %21725.44 /* ty=Tensor[(1, 1, 512), float32] */;
  %21771 = %21725.45 /* ty=Tensor[(1, 1, 512), float32] */;
  %21772 = %21725.46 /* ty=Tensor[(1, 1, 512), float32] */;
  %21773 = %21725.47 /* ty=Tensor[(1, 1, 512), float32] */;
  %21774 = squeeze(%21726, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21775 = squeeze(%21727, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21776 = squeeze(%21728, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21777 = squeeze(%21729, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21778 = squeeze(%21730, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21779 = squeeze(%21731, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21780 = squeeze(%21732, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21781 = squeeze(%21733, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21782 = squeeze(%21734, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21783 = squeeze(%21735, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21784 = squeeze(%21736, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21785 = squeeze(%21737, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21786 = squeeze(%21738, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21787 = squeeze(%21739, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21788 = squeeze(%21740, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21789 = squeeze(%21741, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21790 = squeeze(%21742, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21791 = squeeze(%21743, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21792 = squeeze(%21744, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21793 = squeeze(%21745, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21794 = squeeze(%21746, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21795 = squeeze(%21747, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21796 = squeeze(%21748, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21797 = squeeze(%21749, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21798 = squeeze(%21750, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21799 = squeeze(%21751, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21800 = squeeze(%21752, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21801 = squeeze(%21753, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21802 = squeeze(%21754, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21803 = squeeze(%21755, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21804 = squeeze(%21756, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21805 = squeeze(%21757, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21806 = squeeze(%21758, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21807 = squeeze(%21759, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21808 = squeeze(%21760, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21809 = squeeze(%21761, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21810 = squeeze(%21762, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21811 = squeeze(%21763, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21812 = squeeze(%21764, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21813 = squeeze(%21765, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21814 = squeeze(%21766, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21815 = squeeze(%21767, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21816 = squeeze(%21768, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21817 = squeeze(%21769, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21818 = squeeze(%21770, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21819 = squeeze(%21771, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21820 = squeeze(%21772, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21821 = squeeze(%21773, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21822 = (%21774, %21775, %21776, %21777, %21778, %21779, %21780, %21781, %21782, %21783, %21784, %21785, %21786, %21787, %21788, %21789, %21790, %21791, %21792, %21793, %21794, %21795, %21796, %21797, %21798, %21799, %21800, %21801, %21802, %21803, %21804, %21805, %21806, %21807, %21808, %21809, %21810, %21811, %21812, %21813, %21814, %21815, %21816, %21817, %21818, %21819, %21820, %21821) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21823 = full(0f /* ty=float32 */, shape=[2, 1, 512], dtype="float32") /* ty=Tensor[(2, 1, 512), float32] */;
  %21824 = split(%21823, indices_or_sections=2) /* ty=(Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32]) */;
  %21825 = %21824.0 /* ty=Tensor[(1, 1, 512), float32] */;
  %21826 = %21824.1 /* ty=Tensor[(1, 1, 512), float32] */;
  %21827 = squeeze(%21825, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21828 = squeeze(%21826, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21829 = (%21827, %21828) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21830 = %21822.0 /* ty=Tensor[(1, 512), float32] */;
  %21831 = %21829.0 /* ty=Tensor[(1, 512), float32] */;
  %21832 = (%21830, %21831) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21833 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21834 = concatenate(%21832, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21835 = concatenate(%21833, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21836 = nn.dense(%21834, %21835, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21837 = add(%21836, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21838 = add(%21837, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21839 = split(%21838, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21840 = %21839.3 /* ty=Tensor[(1, 512), float32] */;
  %21841 = %21839.1 /* ty=Tensor[(1, 512), float32] */;
  %21842 = split(%21823, indices_or_sections=2) /* ty=(Tensor[(1, 1, 512), float32], Tensor[(1, 1, 512), float32]) */;
  %21843 = %21842.0 /* ty=Tensor[(1, 1, 512), float32] */;
  %21844 = %21842.1 /* ty=Tensor[(1, 1, 512), float32] */;
  %21845 = squeeze(%21843, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21846 = squeeze(%21844, axis=[0]) /* ty=Tensor[(1, 512), float32] */;
  %21847 = (%21845, %21846) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21848 = sigmoid(%21841) /* ty=Tensor[(1, 512), float32] */;
  %21849 = %21847.0 /* ty=Tensor[(1, 512), float32] */;
  %21850 = %21839.0 /* ty=Tensor[(1, 512), float32] */;
  %21851 = %21839.2 /* ty=Tensor[(1, 512), float32] */;
  %21852 = sigmoid(%21850) /* ty=Tensor[(1, 512), float32] */;
  %21853 = tanh(%21851) /* ty=Tensor[(1, 512), float32] */;
  %21854 = multiply(%21848, %21849) /* ty=Tensor[(1, 512), float32] */;
  %21855 = multiply(%21852, %21853) /* ty=Tensor[(1, 512), float32] */;
  %21856 = add(%21854, %21855) /* ty=Tensor[(1, 512), float32] */;
  %21857 = sigmoid(%21840) /* ty=Tensor[(1, 512), float32] */;
  %21858 = tanh(%21856) /* ty=Tensor[(1, 512), float32] */;
  %21859 = multiply(%21857, %21858) /* ty=Tensor[(1, 512), float32] */;
  %21860 = %21829.1 /* ty=Tensor[(1, 512), float32] */;
  %21861 = (%21859, %21860) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21862 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21863 = concatenate(%21861, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21864 = concatenate(%21862, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21865 = nn.dense(%21863, %21864, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21866 = add(%21865, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21867 = add(%21866, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21868 = split(%21867, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21869 = %21868.3 /* ty=Tensor[(1, 512), float32] */;
  %21870 = %21868.1 /* ty=Tensor[(1, 512), float32] */;
  %21871 = sigmoid(%21870) /* ty=Tensor[(1, 512), float32] */;
  %21872 = %21847.1 /* ty=Tensor[(1, 512), float32] */;
  %21873 = %21868.0 /* ty=Tensor[(1, 512), float32] */;
  %21874 = %21868.2 /* ty=Tensor[(1, 512), float32] */;
  %21875 = sigmoid(%21873) /* ty=Tensor[(1, 512), float32] */;
  %21876 = tanh(%21874) /* ty=Tensor[(1, 512), float32] */;
  %21877 = multiply(%21871, %21872) /* ty=Tensor[(1, 512), float32] */;
  %21878 = multiply(%21875, %21876) /* ty=Tensor[(1, 512), float32] */;
  %21879 = add(%21877, %21878) /* ty=Tensor[(1, 512), float32] */;
  %21880 = sigmoid(%21869) /* ty=Tensor[(1, 512), float32] */;
  %21881 = tanh(%21879) /* ty=Tensor[(1, 512), float32] */;
  %21882 = %21822.1 /* ty=Tensor[(1, 512), float32] */;
  %21883 = (%21882, %21859) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21884 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21885 = concatenate(%21883, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21886 = concatenate(%21884, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21887 = nn.dense(%21885, %21886, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21888 = add(%21887, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21889 = add(%21888, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21890 = split(%21889, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21891 = %21890.3 /* ty=Tensor[(1, 512), float32] */;
  %21892 = %21890.1 /* ty=Tensor[(1, 512), float32] */;
  %21893 = sigmoid(%21892) /* ty=Tensor[(1, 512), float32] */;
  %21894 = %21890.0 /* ty=Tensor[(1, 512), float32] */;
  %21895 = %21890.2 /* ty=Tensor[(1, 512), float32] */;
  %21896 = sigmoid(%21894) /* ty=Tensor[(1, 512), float32] */;
  %21897 = tanh(%21895) /* ty=Tensor[(1, 512), float32] */;
  %21898 = multiply(%21893, %21856) /* ty=Tensor[(1, 512), float32] */;
  %21899 = multiply(%21896, %21897) /* ty=Tensor[(1, 512), float32] */;
  %21900 = add(%21898, %21899) /* ty=Tensor[(1, 512), float32] */;
  %21901 = sigmoid(%21891) /* ty=Tensor[(1, 512), float32] */;
  %21902 = tanh(%21900) /* ty=Tensor[(1, 512), float32] */;
  %21903 = multiply(%21901, %21902) /* ty=Tensor[(1, 512), float32] */;
  %21904 = multiply(%21880, %21881) /* ty=Tensor[(1, 512), float32] */;
  %21905 = (%21903, %21904) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21906 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21907 = concatenate(%21905, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21908 = concatenate(%21906, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21909 = nn.dense(%21907, %21908, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21910 = add(%21909, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21911 = add(%21910, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21912 = split(%21911, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21913 = %21912.3 /* ty=Tensor[(1, 512), float32] */;
  %21914 = %21912.1 /* ty=Tensor[(1, 512), float32] */;
  %21915 = sigmoid(%21914) /* ty=Tensor[(1, 512), float32] */;
  %21916 = %21912.0 /* ty=Tensor[(1, 512), float32] */;
  %21917 = %21912.2 /* ty=Tensor[(1, 512), float32] */;
  %21918 = sigmoid(%21916) /* ty=Tensor[(1, 512), float32] */;
  %21919 = tanh(%21917) /* ty=Tensor[(1, 512), float32] */;
  %21920 = multiply(%21915, %21879) /* ty=Tensor[(1, 512), float32] */;
  %21921 = multiply(%21918, %21919) /* ty=Tensor[(1, 512), float32] */;
  %21922 = add(%21920, %21921) /* ty=Tensor[(1, 512), float32] */;
  %21923 = sigmoid(%21913) /* ty=Tensor[(1, 512), float32] */;
  %21924 = tanh(%21922) /* ty=Tensor[(1, 512), float32] */;
  %21925 = %21822.2 /* ty=Tensor[(1, 512), float32] */;
  %21926 = (%21925, %21903) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21927 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21928 = concatenate(%21926, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21929 = concatenate(%21927, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21930 = nn.dense(%21928, %21929, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21931 = add(%21930, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21932 = add(%21931, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21933 = split(%21932, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21934 = %21933.3 /* ty=Tensor[(1, 512), float32] */;
  %21935 = %21933.1 /* ty=Tensor[(1, 512), float32] */;
  %21936 = sigmoid(%21935) /* ty=Tensor[(1, 512), float32] */;
  %21937 = %21933.0 /* ty=Tensor[(1, 512), float32] */;
  %21938 = %21933.2 /* ty=Tensor[(1, 512), float32] */;
  %21939 = sigmoid(%21937) /* ty=Tensor[(1, 512), float32] */;
  %21940 = tanh(%21938) /* ty=Tensor[(1, 512), float32] */;
  %21941 = multiply(%21936, %21900) /* ty=Tensor[(1, 512), float32] */;
  %21942 = multiply(%21939, %21940) /* ty=Tensor[(1, 512), float32] */;
  %21943 = add(%21941, %21942) /* ty=Tensor[(1, 512), float32] */;
  %21944 = sigmoid(%21934) /* ty=Tensor[(1, 512), float32] */;
  %21945 = tanh(%21943) /* ty=Tensor[(1, 512), float32] */;
  %21946 = multiply(%21944, %21945) /* ty=Tensor[(1, 512), float32] */;
  %21947 = multiply(%21923, %21924) /* ty=Tensor[(1, 512), float32] */;
  %21948 = (%21946, %21947) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21949 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21950 = concatenate(%21948, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21951 = concatenate(%21949, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21952 = nn.dense(%21950, %21951, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21953 = add(%21952, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21954 = add(%21953, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21955 = split(%21954, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21956 = %21955.3 /* ty=Tensor[(1, 512), float32] */;
  %21957 = %21955.1 /* ty=Tensor[(1, 512), float32] */;
  %21958 = sigmoid(%21957) /* ty=Tensor[(1, 512), float32] */;
  %21959 = %21955.0 /* ty=Tensor[(1, 512), float32] */;
  %21960 = %21955.2 /* ty=Tensor[(1, 512), float32] */;
  %21961 = sigmoid(%21959) /* ty=Tensor[(1, 512), float32] */;
  %21962 = tanh(%21960) /* ty=Tensor[(1, 512), float32] */;
  %21963 = multiply(%21958, %21922) /* ty=Tensor[(1, 512), float32] */;
  %21964 = multiply(%21961, %21962) /* ty=Tensor[(1, 512), float32] */;
  %21965 = add(%21963, %21964) /* ty=Tensor[(1, 512), float32] */;
  %21966 = sigmoid(%21956) /* ty=Tensor[(1, 512), float32] */;
  %21967 = tanh(%21965) /* ty=Tensor[(1, 512), float32] */;
  %21968 = %21822.3 /* ty=Tensor[(1, 512), float32] */;
  %21969 = (%21968, %21946) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21970 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21971 = concatenate(%21969, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21972 = concatenate(%21970, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21973 = nn.dense(%21971, %21972, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21974 = add(%21973, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21975 = add(%21974, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %21976 = split(%21975, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21977 = %21976.3 /* ty=Tensor[(1, 512), float32] */;
  %21978 = %21976.1 /* ty=Tensor[(1, 512), float32] */;
  %21979 = sigmoid(%21978) /* ty=Tensor[(1, 512), float32] */;
  %21980 = %21976.0 /* ty=Tensor[(1, 512), float32] */;
  %21981 = %21976.2 /* ty=Tensor[(1, 512), float32] */;
  %21982 = sigmoid(%21980) /* ty=Tensor[(1, 512), float32] */;
  %21983 = tanh(%21981) /* ty=Tensor[(1, 512), float32] */;
  %21984 = multiply(%21979, %21943) /* ty=Tensor[(1, 512), float32] */;
  %21985 = multiply(%21982, %21983) /* ty=Tensor[(1, 512), float32] */;
  %21986 = add(%21984, %21985) /* ty=Tensor[(1, 512), float32] */;
  %21987 = sigmoid(%21977) /* ty=Tensor[(1, 512), float32] */;
  %21988 = tanh(%21986) /* ty=Tensor[(1, 512), float32] */;
  %21989 = multiply(%21987, %21988) /* ty=Tensor[(1, 512), float32] */;
  %21990 = multiply(%21966, %21967) /* ty=Tensor[(1, 512), float32] */;
  %21991 = (%21989, %21990) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21992 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %21993 = concatenate(%21991, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %21994 = concatenate(%21992, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %21995 = nn.dense(%21993, %21994, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %21996 = add(%21995, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21997 = add(%21996, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %21998 = split(%21997, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %21999 = %21998.3 /* ty=Tensor[(1, 512), float32] */;
  %22000 = %21998.1 /* ty=Tensor[(1, 512), float32] */;
  %22001 = sigmoid(%22000) /* ty=Tensor[(1, 512), float32] */;
  %22002 = %21998.0 /* ty=Tensor[(1, 512), float32] */;
  %22003 = %21998.2 /* ty=Tensor[(1, 512), float32] */;
  %22004 = sigmoid(%22002) /* ty=Tensor[(1, 512), float32] */;
  %22005 = tanh(%22003) /* ty=Tensor[(1, 512), float32] */;
  %22006 = multiply(%22001, %21965) /* ty=Tensor[(1, 512), float32] */;
  %22007 = multiply(%22004, %22005) /* ty=Tensor[(1, 512), float32] */;
  %22008 = add(%22006, %22007) /* ty=Tensor[(1, 512), float32] */;
  %22009 = sigmoid(%21999) /* ty=Tensor[(1, 512), float32] */;
  %22010 = tanh(%22008) /* ty=Tensor[(1, 512), float32] */;
  %22011 = %21822.4 /* ty=Tensor[(1, 512), float32] */;
  %22012 = (%22011, %21989) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22013 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22014 = concatenate(%22012, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22015 = concatenate(%22013, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22016 = nn.dense(%22014, %22015, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22017 = add(%22016, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22018 = add(%22017, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22019 = split(%22018, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22020 = %22019.3 /* ty=Tensor[(1, 512), float32] */;
  %22021 = %22019.1 /* ty=Tensor[(1, 512), float32] */;
  %22022 = sigmoid(%22021) /* ty=Tensor[(1, 512), float32] */;
  %22023 = %22019.0 /* ty=Tensor[(1, 512), float32] */;
  %22024 = %22019.2 /* ty=Tensor[(1, 512), float32] */;
  %22025 = sigmoid(%22023) /* ty=Tensor[(1, 512), float32] */;
  %22026 = tanh(%22024) /* ty=Tensor[(1, 512), float32] */;
  %22027 = multiply(%22022, %21986) /* ty=Tensor[(1, 512), float32] */;
  %22028 = multiply(%22025, %22026) /* ty=Tensor[(1, 512), float32] */;
  %22029 = add(%22027, %22028) /* ty=Tensor[(1, 512), float32] */;
  %22030 = sigmoid(%22020) /* ty=Tensor[(1, 512), float32] */;
  %22031 = tanh(%22029) /* ty=Tensor[(1, 512), float32] */;
  %22032 = multiply(%22030, %22031) /* ty=Tensor[(1, 512), float32] */;
  %22033 = multiply(%22009, %22010) /* ty=Tensor[(1, 512), float32] */;
  %22034 = (%22032, %22033) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22035 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22036 = concatenate(%22034, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22037 = concatenate(%22035, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22038 = nn.dense(%22036, %22037, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22039 = add(%22038, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22040 = add(%22039, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22041 = split(%22040, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22042 = %22041.3 /* ty=Tensor[(1, 512), float32] */;
  %22043 = %22041.1 /* ty=Tensor[(1, 512), float32] */;
  %22044 = sigmoid(%22043) /* ty=Tensor[(1, 512), float32] */;
  %22045 = %22041.0 /* ty=Tensor[(1, 512), float32] */;
  %22046 = %22041.2 /* ty=Tensor[(1, 512), float32] */;
  %22047 = sigmoid(%22045) /* ty=Tensor[(1, 512), float32] */;
  %22048 = tanh(%22046) /* ty=Tensor[(1, 512), float32] */;
  %22049 = multiply(%22044, %22008) /* ty=Tensor[(1, 512), float32] */;
  %22050 = multiply(%22047, %22048) /* ty=Tensor[(1, 512), float32] */;
  %22051 = add(%22049, %22050) /* ty=Tensor[(1, 512), float32] */;
  %22052 = sigmoid(%22042) /* ty=Tensor[(1, 512), float32] */;
  %22053 = tanh(%22051) /* ty=Tensor[(1, 512), float32] */;
  %22054 = %21822.5 /* ty=Tensor[(1, 512), float32] */;
  %22055 = (%22054, %22032) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22056 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22057 = concatenate(%22055, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22058 = concatenate(%22056, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22059 = nn.dense(%22057, %22058, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22060 = add(%22059, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22061 = add(%22060, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22062 = split(%22061, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22063 = %22062.3 /* ty=Tensor[(1, 512), float32] */;
  %22064 = %22062.1 /* ty=Tensor[(1, 512), float32] */;
  %22065 = sigmoid(%22064) /* ty=Tensor[(1, 512), float32] */;
  %22066 = %22062.0 /* ty=Tensor[(1, 512), float32] */;
  %22067 = %22062.2 /* ty=Tensor[(1, 512), float32] */;
  %22068 = sigmoid(%22066) /* ty=Tensor[(1, 512), float32] */;
  %22069 = tanh(%22067) /* ty=Tensor[(1, 512), float32] */;
  %22070 = multiply(%22065, %22029) /* ty=Tensor[(1, 512), float32] */;
  %22071 = multiply(%22068, %22069) /* ty=Tensor[(1, 512), float32] */;
  %22072 = add(%22070, %22071) /* ty=Tensor[(1, 512), float32] */;
  %22073 = sigmoid(%22063) /* ty=Tensor[(1, 512), float32] */;
  %22074 = tanh(%22072) /* ty=Tensor[(1, 512), float32] */;
  %22075 = multiply(%22073, %22074) /* ty=Tensor[(1, 512), float32] */;
  %22076 = multiply(%22052, %22053) /* ty=Tensor[(1, 512), float32] */;
  %22077 = (%22075, %22076) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22078 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22079 = concatenate(%22077, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22080 = concatenate(%22078, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22081 = nn.dense(%22079, %22080, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22082 = add(%22081, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22083 = add(%22082, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22084 = split(%22083, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22085 = %22084.3 /* ty=Tensor[(1, 512), float32] */;
  %22086 = %22084.1 /* ty=Tensor[(1, 512), float32] */;
  %22087 = sigmoid(%22086) /* ty=Tensor[(1, 512), float32] */;
  %22088 = %22084.0 /* ty=Tensor[(1, 512), float32] */;
  %22089 = %22084.2 /* ty=Tensor[(1, 512), float32] */;
  %22090 = sigmoid(%22088) /* ty=Tensor[(1, 512), float32] */;
  %22091 = tanh(%22089) /* ty=Tensor[(1, 512), float32] */;
  %22092 = multiply(%22087, %22051) /* ty=Tensor[(1, 512), float32] */;
  %22093 = multiply(%22090, %22091) /* ty=Tensor[(1, 512), float32] */;
  %22094 = add(%22092, %22093) /* ty=Tensor[(1, 512), float32] */;
  %22095 = sigmoid(%22085) /* ty=Tensor[(1, 512), float32] */;
  %22096 = tanh(%22094) /* ty=Tensor[(1, 512), float32] */;
  %22097 = %21822.6 /* ty=Tensor[(1, 512), float32] */;
  %22098 = (%22097, %22075) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22099 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22100 = concatenate(%22098, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22101 = concatenate(%22099, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22102 = nn.dense(%22100, %22101, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22103 = add(%22102, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22104 = add(%22103, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22105 = split(%22104, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22106 = %22105.3 /* ty=Tensor[(1, 512), float32] */;
  %22107 = %22105.1 /* ty=Tensor[(1, 512), float32] */;
  %22108 = sigmoid(%22107) /* ty=Tensor[(1, 512), float32] */;
  %22109 = %22105.0 /* ty=Tensor[(1, 512), float32] */;
  %22110 = %22105.2 /* ty=Tensor[(1, 512), float32] */;
  %22111 = sigmoid(%22109) /* ty=Tensor[(1, 512), float32] */;
  %22112 = tanh(%22110) /* ty=Tensor[(1, 512), float32] */;
  %22113 = multiply(%22108, %22072) /* ty=Tensor[(1, 512), float32] */;
  %22114 = multiply(%22111, %22112) /* ty=Tensor[(1, 512), float32] */;
  %22115 = add(%22113, %22114) /* ty=Tensor[(1, 512), float32] */;
  %22116 = sigmoid(%22106) /* ty=Tensor[(1, 512), float32] */;
  %22117 = tanh(%22115) /* ty=Tensor[(1, 512), float32] */;
  %22118 = multiply(%22116, %22117) /* ty=Tensor[(1, 512), float32] */;
  %22119 = multiply(%22095, %22096) /* ty=Tensor[(1, 512), float32] */;
  %22120 = (%22118, %22119) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22121 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22122 = concatenate(%22120, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22123 = concatenate(%22121, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22124 = nn.dense(%22122, %22123, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22125 = add(%22124, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22126 = add(%22125, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22127 = split(%22126, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22128 = %22127.3 /* ty=Tensor[(1, 512), float32] */;
  %22129 = %22127.1 /* ty=Tensor[(1, 512), float32] */;
  %22130 = sigmoid(%22129) /* ty=Tensor[(1, 512), float32] */;
  %22131 = %22127.0 /* ty=Tensor[(1, 512), float32] */;
  %22132 = %22127.2 /* ty=Tensor[(1, 512), float32] */;
  %22133 = sigmoid(%22131) /* ty=Tensor[(1, 512), float32] */;
  %22134 = tanh(%22132) /* ty=Tensor[(1, 512), float32] */;
  %22135 = multiply(%22130, %22094) /* ty=Tensor[(1, 512), float32] */;
  %22136 = multiply(%22133, %22134) /* ty=Tensor[(1, 512), float32] */;
  %22137 = add(%22135, %22136) /* ty=Tensor[(1, 512), float32] */;
  %22138 = sigmoid(%22128) /* ty=Tensor[(1, 512), float32] */;
  %22139 = tanh(%22137) /* ty=Tensor[(1, 512), float32] */;
  %22140 = %21822.7 /* ty=Tensor[(1, 512), float32] */;
  %22141 = (%22140, %22118) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22142 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22143 = concatenate(%22141, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22144 = concatenate(%22142, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22145 = nn.dense(%22143, %22144, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22146 = add(%22145, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22147 = add(%22146, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22148 = split(%22147, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22149 = %22148.3 /* ty=Tensor[(1, 512), float32] */;
  %22150 = %22148.1 /* ty=Tensor[(1, 512), float32] */;
  %22151 = sigmoid(%22150) /* ty=Tensor[(1, 512), float32] */;
  %22152 = %22148.0 /* ty=Tensor[(1, 512), float32] */;
  %22153 = %22148.2 /* ty=Tensor[(1, 512), float32] */;
  %22154 = sigmoid(%22152) /* ty=Tensor[(1, 512), float32] */;
  %22155 = tanh(%22153) /* ty=Tensor[(1, 512), float32] */;
  %22156 = multiply(%22151, %22115) /* ty=Tensor[(1, 512), float32] */;
  %22157 = multiply(%22154, %22155) /* ty=Tensor[(1, 512), float32] */;
  %22158 = add(%22156, %22157) /* ty=Tensor[(1, 512), float32] */;
  %22159 = sigmoid(%22149) /* ty=Tensor[(1, 512), float32] */;
  %22160 = tanh(%22158) /* ty=Tensor[(1, 512), float32] */;
  %22161 = multiply(%22159, %22160) /* ty=Tensor[(1, 512), float32] */;
  %22162 = multiply(%22138, %22139) /* ty=Tensor[(1, 512), float32] */;
  %22163 = (%22161, %22162) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22164 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22165 = concatenate(%22163, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22166 = concatenate(%22164, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22167 = nn.dense(%22165, %22166, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22168 = add(%22167, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22169 = add(%22168, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22170 = split(%22169, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22171 = %22170.3 /* ty=Tensor[(1, 512), float32] */;
  %22172 = %22170.1 /* ty=Tensor[(1, 512), float32] */;
  %22173 = sigmoid(%22172) /* ty=Tensor[(1, 512), float32] */;
  %22174 = %22170.0 /* ty=Tensor[(1, 512), float32] */;
  %22175 = %22170.2 /* ty=Tensor[(1, 512), float32] */;
  %22176 = sigmoid(%22174) /* ty=Tensor[(1, 512), float32] */;
  %22177 = tanh(%22175) /* ty=Tensor[(1, 512), float32] */;
  %22178 = multiply(%22173, %22137) /* ty=Tensor[(1, 512), float32] */;
  %22179 = multiply(%22176, %22177) /* ty=Tensor[(1, 512), float32] */;
  %22180 = add(%22178, %22179) /* ty=Tensor[(1, 512), float32] */;
  %22181 = sigmoid(%22171) /* ty=Tensor[(1, 512), float32] */;
  %22182 = tanh(%22180) /* ty=Tensor[(1, 512), float32] */;
  %22183 = %21822.8 /* ty=Tensor[(1, 512), float32] */;
  %22184 = (%22183, %22161) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22185 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22186 = concatenate(%22184, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22187 = concatenate(%22185, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22188 = nn.dense(%22186, %22187, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22189 = add(%22188, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22190 = add(%22189, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22191 = split(%22190, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22192 = %22191.3 /* ty=Tensor[(1, 512), float32] */;
  %22193 = %22191.1 /* ty=Tensor[(1, 512), float32] */;
  %22194 = sigmoid(%22193) /* ty=Tensor[(1, 512), float32] */;
  %22195 = %22191.0 /* ty=Tensor[(1, 512), float32] */;
  %22196 = %22191.2 /* ty=Tensor[(1, 512), float32] */;
  %22197 = sigmoid(%22195) /* ty=Tensor[(1, 512), float32] */;
  %22198 = tanh(%22196) /* ty=Tensor[(1, 512), float32] */;
  %22199 = multiply(%22194, %22158) /* ty=Tensor[(1, 512), float32] */;
  %22200 = multiply(%22197, %22198) /* ty=Tensor[(1, 512), float32] */;
  %22201 = add(%22199, %22200) /* ty=Tensor[(1, 512), float32] */;
  %22202 = sigmoid(%22192) /* ty=Tensor[(1, 512), float32] */;
  %22203 = tanh(%22201) /* ty=Tensor[(1, 512), float32] */;
  %22204 = multiply(%22202, %22203) /* ty=Tensor[(1, 512), float32] */;
  %22205 = multiply(%22181, %22182) /* ty=Tensor[(1, 512), float32] */;
  %22206 = (%22204, %22205) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22207 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22208 = concatenate(%22206, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22209 = concatenate(%22207, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22210 = nn.dense(%22208, %22209, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22211 = add(%22210, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22212 = add(%22211, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22213 = split(%22212, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22214 = %22213.3 /* ty=Tensor[(1, 512), float32] */;
  %22215 = %22213.1 /* ty=Tensor[(1, 512), float32] */;
  %22216 = sigmoid(%22215) /* ty=Tensor[(1, 512), float32] */;
  %22217 = %22213.0 /* ty=Tensor[(1, 512), float32] */;
  %22218 = %22213.2 /* ty=Tensor[(1, 512), float32] */;
  %22219 = sigmoid(%22217) /* ty=Tensor[(1, 512), float32] */;
  %22220 = tanh(%22218) /* ty=Tensor[(1, 512), float32] */;
  %22221 = multiply(%22216, %22180) /* ty=Tensor[(1, 512), float32] */;
  %22222 = multiply(%22219, %22220) /* ty=Tensor[(1, 512), float32] */;
  %22223 = add(%22221, %22222) /* ty=Tensor[(1, 512), float32] */;
  %22224 = sigmoid(%22214) /* ty=Tensor[(1, 512), float32] */;
  %22225 = tanh(%22223) /* ty=Tensor[(1, 512), float32] */;
  %22226 = %21822.9 /* ty=Tensor[(1, 512), float32] */;
  %22227 = (%22226, %22204) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22228 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22229 = concatenate(%22227, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22230 = concatenate(%22228, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22231 = nn.dense(%22229, %22230, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22232 = add(%22231, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22233 = add(%22232, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22234 = split(%22233, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22235 = %22234.3 /* ty=Tensor[(1, 512), float32] */;
  %22236 = %22234.1 /* ty=Tensor[(1, 512), float32] */;
  %22237 = sigmoid(%22236) /* ty=Tensor[(1, 512), float32] */;
  %22238 = %22234.0 /* ty=Tensor[(1, 512), float32] */;
  %22239 = %22234.2 /* ty=Tensor[(1, 512), float32] */;
  %22240 = sigmoid(%22238) /* ty=Tensor[(1, 512), float32] */;
  %22241 = tanh(%22239) /* ty=Tensor[(1, 512), float32] */;
  %22242 = multiply(%22237, %22201) /* ty=Tensor[(1, 512), float32] */;
  %22243 = multiply(%22240, %22241) /* ty=Tensor[(1, 512), float32] */;
  %22244 = add(%22242, %22243) /* ty=Tensor[(1, 512), float32] */;
  %22245 = sigmoid(%22235) /* ty=Tensor[(1, 512), float32] */;
  %22246 = tanh(%22244) /* ty=Tensor[(1, 512), float32] */;
  %22247 = multiply(%22245, %22246) /* ty=Tensor[(1, 512), float32] */;
  %22248 = multiply(%22224, %22225) /* ty=Tensor[(1, 512), float32] */;
  %22249 = (%22247, %22248) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22250 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22251 = concatenate(%22249, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22252 = concatenate(%22250, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22253 = nn.dense(%22251, %22252, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22254 = add(%22253, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22255 = add(%22254, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22256 = split(%22255, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22257 = %22256.3 /* ty=Tensor[(1, 512), float32] */;
  %22258 = %22256.1 /* ty=Tensor[(1, 512), float32] */;
  %22259 = sigmoid(%22258) /* ty=Tensor[(1, 512), float32] */;
  %22260 = %22256.0 /* ty=Tensor[(1, 512), float32] */;
  %22261 = %22256.2 /* ty=Tensor[(1, 512), float32] */;
  %22262 = sigmoid(%22260) /* ty=Tensor[(1, 512), float32] */;
  %22263 = tanh(%22261) /* ty=Tensor[(1, 512), float32] */;
  %22264 = multiply(%22259, %22223) /* ty=Tensor[(1, 512), float32] */;
  %22265 = multiply(%22262, %22263) /* ty=Tensor[(1, 512), float32] */;
  %22266 = add(%22264, %22265) /* ty=Tensor[(1, 512), float32] */;
  %22267 = sigmoid(%22257) /* ty=Tensor[(1, 512), float32] */;
  %22268 = tanh(%22266) /* ty=Tensor[(1, 512), float32] */;
  %22269 = %21822.10 /* ty=Tensor[(1, 512), float32] */;
  %22270 = (%22269, %22247) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22271 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22272 = concatenate(%22270, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22273 = concatenate(%22271, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22274 = nn.dense(%22272, %22273, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22275 = add(%22274, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22276 = add(%22275, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22277 = split(%22276, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22278 = %22277.3 /* ty=Tensor[(1, 512), float32] */;
  %22279 = %22277.1 /* ty=Tensor[(1, 512), float32] */;
  %22280 = sigmoid(%22279) /* ty=Tensor[(1, 512), float32] */;
  %22281 = %22277.0 /* ty=Tensor[(1, 512), float32] */;
  %22282 = %22277.2 /* ty=Tensor[(1, 512), float32] */;
  %22283 = sigmoid(%22281) /* ty=Tensor[(1, 512), float32] */;
  %22284 = tanh(%22282) /* ty=Tensor[(1, 512), float32] */;
  %22285 = multiply(%22280, %22244) /* ty=Tensor[(1, 512), float32] */;
  %22286 = multiply(%22283, %22284) /* ty=Tensor[(1, 512), float32] */;
  %22287 = add(%22285, %22286) /* ty=Tensor[(1, 512), float32] */;
  %22288 = sigmoid(%22278) /* ty=Tensor[(1, 512), float32] */;
  %22289 = tanh(%22287) /* ty=Tensor[(1, 512), float32] */;
  %22290 = multiply(%22288, %22289) /* ty=Tensor[(1, 512), float32] */;
  %22291 = multiply(%22267, %22268) /* ty=Tensor[(1, 512), float32] */;
  %22292 = (%22290, %22291) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22293 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22294 = concatenate(%22292, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22295 = concatenate(%22293, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22296 = nn.dense(%22294, %22295, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22297 = add(%22296, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22298 = add(%22297, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22299 = split(%22298, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22300 = %22299.3 /* ty=Tensor[(1, 512), float32] */;
  %22301 = %22299.1 /* ty=Tensor[(1, 512), float32] */;
  %22302 = sigmoid(%22301) /* ty=Tensor[(1, 512), float32] */;
  %22303 = %22299.0 /* ty=Tensor[(1, 512), float32] */;
  %22304 = %22299.2 /* ty=Tensor[(1, 512), float32] */;
  %22305 = sigmoid(%22303) /* ty=Tensor[(1, 512), float32] */;
  %22306 = tanh(%22304) /* ty=Tensor[(1, 512), float32] */;
  %22307 = multiply(%22302, %22266) /* ty=Tensor[(1, 512), float32] */;
  %22308 = multiply(%22305, %22306) /* ty=Tensor[(1, 512), float32] */;
  %22309 = add(%22307, %22308) /* ty=Tensor[(1, 512), float32] */;
  %22310 = sigmoid(%22300) /* ty=Tensor[(1, 512), float32] */;
  %22311 = tanh(%22309) /* ty=Tensor[(1, 512), float32] */;
  %22312 = %21822.11 /* ty=Tensor[(1, 512), float32] */;
  %22313 = (%22312, %22290) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22314 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22315 = concatenate(%22313, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22316 = concatenate(%22314, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22317 = nn.dense(%22315, %22316, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22318 = add(%22317, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22319 = add(%22318, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22320 = split(%22319, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22321 = %22320.3 /* ty=Tensor[(1, 512), float32] */;
  %22322 = %22320.1 /* ty=Tensor[(1, 512), float32] */;
  %22323 = sigmoid(%22322) /* ty=Tensor[(1, 512), float32] */;
  %22324 = %22320.0 /* ty=Tensor[(1, 512), float32] */;
  %22325 = %22320.2 /* ty=Tensor[(1, 512), float32] */;
  %22326 = sigmoid(%22324) /* ty=Tensor[(1, 512), float32] */;
  %22327 = tanh(%22325) /* ty=Tensor[(1, 512), float32] */;
  %22328 = multiply(%22323, %22287) /* ty=Tensor[(1, 512), float32] */;
  %22329 = multiply(%22326, %22327) /* ty=Tensor[(1, 512), float32] */;
  %22330 = add(%22328, %22329) /* ty=Tensor[(1, 512), float32] */;
  %22331 = sigmoid(%22321) /* ty=Tensor[(1, 512), float32] */;
  %22332 = tanh(%22330) /* ty=Tensor[(1, 512), float32] */;
  %22333 = multiply(%22331, %22332) /* ty=Tensor[(1, 512), float32] */;
  %22334 = multiply(%22310, %22311) /* ty=Tensor[(1, 512), float32] */;
  %22335 = (%22333, %22334) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22336 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22337 = concatenate(%22335, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22338 = concatenate(%22336, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22339 = nn.dense(%22337, %22338, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22340 = add(%22339, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22341 = add(%22340, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22342 = split(%22341, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22343 = %22342.3 /* ty=Tensor[(1, 512), float32] */;
  %22344 = %22342.1 /* ty=Tensor[(1, 512), float32] */;
  %22345 = sigmoid(%22344) /* ty=Tensor[(1, 512), float32] */;
  %22346 = %22342.0 /* ty=Tensor[(1, 512), float32] */;
  %22347 = %22342.2 /* ty=Tensor[(1, 512), float32] */;
  %22348 = sigmoid(%22346) /* ty=Tensor[(1, 512), float32] */;
  %22349 = tanh(%22347) /* ty=Tensor[(1, 512), float32] */;
  %22350 = multiply(%22345, %22309) /* ty=Tensor[(1, 512), float32] */;
  %22351 = multiply(%22348, %22349) /* ty=Tensor[(1, 512), float32] */;
  %22352 = add(%22350, %22351) /* ty=Tensor[(1, 512), float32] */;
  %22353 = sigmoid(%22343) /* ty=Tensor[(1, 512), float32] */;
  %22354 = tanh(%22352) /* ty=Tensor[(1, 512), float32] */;
  %22355 = %21822.12 /* ty=Tensor[(1, 512), float32] */;
  %22356 = (%22355, %22333) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22357 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22358 = concatenate(%22356, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22359 = concatenate(%22357, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22360 = nn.dense(%22358, %22359, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22361 = add(%22360, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22362 = add(%22361, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22363 = split(%22362, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22364 = %22363.3 /* ty=Tensor[(1, 512), float32] */;
  %22365 = %22363.1 /* ty=Tensor[(1, 512), float32] */;
  %22366 = sigmoid(%22365) /* ty=Tensor[(1, 512), float32] */;
  %22367 = %22363.0 /* ty=Tensor[(1, 512), float32] */;
  %22368 = %22363.2 /* ty=Tensor[(1, 512), float32] */;
  %22369 = sigmoid(%22367) /* ty=Tensor[(1, 512), float32] */;
  %22370 = tanh(%22368) /* ty=Tensor[(1, 512), float32] */;
  %22371 = multiply(%22366, %22330) /* ty=Tensor[(1, 512), float32] */;
  %22372 = multiply(%22369, %22370) /* ty=Tensor[(1, 512), float32] */;
  %22373 = add(%22371, %22372) /* ty=Tensor[(1, 512), float32] */;
  %22374 = sigmoid(%22364) /* ty=Tensor[(1, 512), float32] */;
  %22375 = tanh(%22373) /* ty=Tensor[(1, 512), float32] */;
  %22376 = multiply(%22374, %22375) /* ty=Tensor[(1, 512), float32] */;
  %22377 = multiply(%22353, %22354) /* ty=Tensor[(1, 512), float32] */;
  %22378 = (%22376, %22377) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22379 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22380 = concatenate(%22378, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22381 = concatenate(%22379, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22382 = nn.dense(%22380, %22381, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22383 = add(%22382, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22384 = add(%22383, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22385 = split(%22384, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22386 = %22385.3 /* ty=Tensor[(1, 512), float32] */;
  %22387 = %22385.1 /* ty=Tensor[(1, 512), float32] */;
  %22388 = sigmoid(%22387) /* ty=Tensor[(1, 512), float32] */;
  %22389 = %22385.0 /* ty=Tensor[(1, 512), float32] */;
  %22390 = %22385.2 /* ty=Tensor[(1, 512), float32] */;
  %22391 = sigmoid(%22389) /* ty=Tensor[(1, 512), float32] */;
  %22392 = tanh(%22390) /* ty=Tensor[(1, 512), float32] */;
  %22393 = multiply(%22388, %22352) /* ty=Tensor[(1, 512), float32] */;
  %22394 = multiply(%22391, %22392) /* ty=Tensor[(1, 512), float32] */;
  %22395 = add(%22393, %22394) /* ty=Tensor[(1, 512), float32] */;
  %22396 = sigmoid(%22386) /* ty=Tensor[(1, 512), float32] */;
  %22397 = tanh(%22395) /* ty=Tensor[(1, 512), float32] */;
  %22398 = %21822.13 /* ty=Tensor[(1, 512), float32] */;
  %22399 = (%22398, %22376) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22400 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22401 = concatenate(%22399, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22402 = concatenate(%22400, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22403 = nn.dense(%22401, %22402, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22404 = add(%22403, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22405 = add(%22404, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22406 = split(%22405, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22407 = %22406.3 /* ty=Tensor[(1, 512), float32] */;
  %22408 = %22406.1 /* ty=Tensor[(1, 512), float32] */;
  %22409 = sigmoid(%22408) /* ty=Tensor[(1, 512), float32] */;
  %22410 = %22406.0 /* ty=Tensor[(1, 512), float32] */;
  %22411 = %22406.2 /* ty=Tensor[(1, 512), float32] */;
  %22412 = sigmoid(%22410) /* ty=Tensor[(1, 512), float32] */;
  %22413 = tanh(%22411) /* ty=Tensor[(1, 512), float32] */;
  %22414 = multiply(%22409, %22373) /* ty=Tensor[(1, 512), float32] */;
  %22415 = multiply(%22412, %22413) /* ty=Tensor[(1, 512), float32] */;
  %22416 = add(%22414, %22415) /* ty=Tensor[(1, 512), float32] */;
  %22417 = sigmoid(%22407) /* ty=Tensor[(1, 512), float32] */;
  %22418 = tanh(%22416) /* ty=Tensor[(1, 512), float32] */;
  %22419 = multiply(%22417, %22418) /* ty=Tensor[(1, 512), float32] */;
  %22420 = multiply(%22396, %22397) /* ty=Tensor[(1, 512), float32] */;
  %22421 = (%22419, %22420) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22422 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22423 = concatenate(%22421, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22424 = concatenate(%22422, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22425 = nn.dense(%22423, %22424, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22426 = add(%22425, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22427 = add(%22426, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22428 = split(%22427, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22429 = %22428.3 /* ty=Tensor[(1, 512), float32] */;
  %22430 = %22428.1 /* ty=Tensor[(1, 512), float32] */;
  %22431 = sigmoid(%22430) /* ty=Tensor[(1, 512), float32] */;
  %22432 = %22428.0 /* ty=Tensor[(1, 512), float32] */;
  %22433 = %22428.2 /* ty=Tensor[(1, 512), float32] */;
  %22434 = sigmoid(%22432) /* ty=Tensor[(1, 512), float32] */;
  %22435 = tanh(%22433) /* ty=Tensor[(1, 512), float32] */;
  %22436 = multiply(%22431, %22395) /* ty=Tensor[(1, 512), float32] */;
  %22437 = multiply(%22434, %22435) /* ty=Tensor[(1, 512), float32] */;
  %22438 = add(%22436, %22437) /* ty=Tensor[(1, 512), float32] */;
  %22439 = sigmoid(%22429) /* ty=Tensor[(1, 512), float32] */;
  %22440 = tanh(%22438) /* ty=Tensor[(1, 512), float32] */;
  %22441 = %21822.14 /* ty=Tensor[(1, 512), float32] */;
  %22442 = (%22441, %22419) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22443 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22444 = concatenate(%22442, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22445 = concatenate(%22443, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22446 = nn.dense(%22444, %22445, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22447 = add(%22446, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22448 = add(%22447, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22449 = split(%22448, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22450 = %22449.3 /* ty=Tensor[(1, 512), float32] */;
  %22451 = %22449.1 /* ty=Tensor[(1, 512), float32] */;
  %22452 = sigmoid(%22451) /* ty=Tensor[(1, 512), float32] */;
  %22453 = %22449.0 /* ty=Tensor[(1, 512), float32] */;
  %22454 = %22449.2 /* ty=Tensor[(1, 512), float32] */;
  %22455 = sigmoid(%22453) /* ty=Tensor[(1, 512), float32] */;
  %22456 = tanh(%22454) /* ty=Tensor[(1, 512), float32] */;
  %22457 = multiply(%22452, %22416) /* ty=Tensor[(1, 512), float32] */;
  %22458 = multiply(%22455, %22456) /* ty=Tensor[(1, 512), float32] */;
  %22459 = add(%22457, %22458) /* ty=Tensor[(1, 512), float32] */;
  %22460 = sigmoid(%22450) /* ty=Tensor[(1, 512), float32] */;
  %22461 = tanh(%22459) /* ty=Tensor[(1, 512), float32] */;
  %22462 = multiply(%22460, %22461) /* ty=Tensor[(1, 512), float32] */;
  %22463 = multiply(%22439, %22440) /* ty=Tensor[(1, 512), float32] */;
  %22464 = (%22462, %22463) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22465 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22466 = concatenate(%22464, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22467 = concatenate(%22465, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22468 = nn.dense(%22466, %22467, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22469 = add(%22468, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22470 = add(%22469, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22471 = split(%22470, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22472 = %22471.3 /* ty=Tensor[(1, 512), float32] */;
  %22473 = %22471.1 /* ty=Tensor[(1, 512), float32] */;
  %22474 = sigmoid(%22473) /* ty=Tensor[(1, 512), float32] */;
  %22475 = %22471.0 /* ty=Tensor[(1, 512), float32] */;
  %22476 = %22471.2 /* ty=Tensor[(1, 512), float32] */;
  %22477 = sigmoid(%22475) /* ty=Tensor[(1, 512), float32] */;
  %22478 = tanh(%22476) /* ty=Tensor[(1, 512), float32] */;
  %22479 = multiply(%22474, %22438) /* ty=Tensor[(1, 512), float32] */;
  %22480 = multiply(%22477, %22478) /* ty=Tensor[(1, 512), float32] */;
  %22481 = add(%22479, %22480) /* ty=Tensor[(1, 512), float32] */;
  %22482 = sigmoid(%22472) /* ty=Tensor[(1, 512), float32] */;
  %22483 = tanh(%22481) /* ty=Tensor[(1, 512), float32] */;
  %22484 = %21822.15 /* ty=Tensor[(1, 512), float32] */;
  %22485 = (%22484, %22462) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22486 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22487 = concatenate(%22485, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22488 = concatenate(%22486, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22489 = nn.dense(%22487, %22488, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22490 = add(%22489, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22491 = add(%22490, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22492 = split(%22491, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22493 = %22492.3 /* ty=Tensor[(1, 512), float32] */;
  %22494 = %22492.1 /* ty=Tensor[(1, 512), float32] */;
  %22495 = sigmoid(%22494) /* ty=Tensor[(1, 512), float32] */;
  %22496 = %22492.0 /* ty=Tensor[(1, 512), float32] */;
  %22497 = %22492.2 /* ty=Tensor[(1, 512), float32] */;
  %22498 = sigmoid(%22496) /* ty=Tensor[(1, 512), float32] */;
  %22499 = tanh(%22497) /* ty=Tensor[(1, 512), float32] */;
  %22500 = multiply(%22495, %22459) /* ty=Tensor[(1, 512), float32] */;
  %22501 = multiply(%22498, %22499) /* ty=Tensor[(1, 512), float32] */;
  %22502 = add(%22500, %22501) /* ty=Tensor[(1, 512), float32] */;
  %22503 = sigmoid(%22493) /* ty=Tensor[(1, 512), float32] */;
  %22504 = tanh(%22502) /* ty=Tensor[(1, 512), float32] */;
  %22505 = multiply(%22503, %22504) /* ty=Tensor[(1, 512), float32] */;
  %22506 = multiply(%22482, %22483) /* ty=Tensor[(1, 512), float32] */;
  %22507 = (%22505, %22506) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22508 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22509 = concatenate(%22507, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22510 = concatenate(%22508, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22511 = nn.dense(%22509, %22510, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22512 = add(%22511, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22513 = add(%22512, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22514 = split(%22513, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22515 = %22514.3 /* ty=Tensor[(1, 512), float32] */;
  %22516 = %22514.1 /* ty=Tensor[(1, 512), float32] */;
  %22517 = sigmoid(%22516) /* ty=Tensor[(1, 512), float32] */;
  %22518 = %22514.0 /* ty=Tensor[(1, 512), float32] */;
  %22519 = %22514.2 /* ty=Tensor[(1, 512), float32] */;
  %22520 = sigmoid(%22518) /* ty=Tensor[(1, 512), float32] */;
  %22521 = tanh(%22519) /* ty=Tensor[(1, 512), float32] */;
  %22522 = multiply(%22517, %22481) /* ty=Tensor[(1, 512), float32] */;
  %22523 = multiply(%22520, %22521) /* ty=Tensor[(1, 512), float32] */;
  %22524 = add(%22522, %22523) /* ty=Tensor[(1, 512), float32] */;
  %22525 = sigmoid(%22515) /* ty=Tensor[(1, 512), float32] */;
  %22526 = tanh(%22524) /* ty=Tensor[(1, 512), float32] */;
  %22527 = %21822.16 /* ty=Tensor[(1, 512), float32] */;
  %22528 = (%22527, %22505) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22529 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22530 = concatenate(%22528, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22531 = concatenate(%22529, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22532 = nn.dense(%22530, %22531, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22533 = add(%22532, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22534 = add(%22533, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22535 = split(%22534, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22536 = %22535.3 /* ty=Tensor[(1, 512), float32] */;
  %22537 = %22535.1 /* ty=Tensor[(1, 512), float32] */;
  %22538 = sigmoid(%22537) /* ty=Tensor[(1, 512), float32] */;
  %22539 = %22535.0 /* ty=Tensor[(1, 512), float32] */;
  %22540 = %22535.2 /* ty=Tensor[(1, 512), float32] */;
  %22541 = sigmoid(%22539) /* ty=Tensor[(1, 512), float32] */;
  %22542 = tanh(%22540) /* ty=Tensor[(1, 512), float32] */;
  %22543 = multiply(%22538, %22502) /* ty=Tensor[(1, 512), float32] */;
  %22544 = multiply(%22541, %22542) /* ty=Tensor[(1, 512), float32] */;
  %22545 = add(%22543, %22544) /* ty=Tensor[(1, 512), float32] */;
  %22546 = sigmoid(%22536) /* ty=Tensor[(1, 512), float32] */;
  %22547 = tanh(%22545) /* ty=Tensor[(1, 512), float32] */;
  %22548 = multiply(%22546, %22547) /* ty=Tensor[(1, 512), float32] */;
  %22549 = multiply(%22525, %22526) /* ty=Tensor[(1, 512), float32] */;
  %22550 = (%22548, %22549) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22551 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22552 = concatenate(%22550, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22553 = concatenate(%22551, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22554 = nn.dense(%22552, %22553, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22555 = add(%22554, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22556 = add(%22555, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22557 = split(%22556, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22558 = %22557.3 /* ty=Tensor[(1, 512), float32] */;
  %22559 = %22557.1 /* ty=Tensor[(1, 512), float32] */;
  %22560 = sigmoid(%22559) /* ty=Tensor[(1, 512), float32] */;
  %22561 = %22557.0 /* ty=Tensor[(1, 512), float32] */;
  %22562 = %22557.2 /* ty=Tensor[(1, 512), float32] */;
  %22563 = sigmoid(%22561) /* ty=Tensor[(1, 512), float32] */;
  %22564 = tanh(%22562) /* ty=Tensor[(1, 512), float32] */;
  %22565 = multiply(%22560, %22524) /* ty=Tensor[(1, 512), float32] */;
  %22566 = multiply(%22563, %22564) /* ty=Tensor[(1, 512), float32] */;
  %22567 = add(%22565, %22566) /* ty=Tensor[(1, 512), float32] */;
  %22568 = sigmoid(%22558) /* ty=Tensor[(1, 512), float32] */;
  %22569 = tanh(%22567) /* ty=Tensor[(1, 512), float32] */;
  %22570 = %21822.17 /* ty=Tensor[(1, 512), float32] */;
  %22571 = (%22570, %22548) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22572 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22573 = concatenate(%22571, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22574 = concatenate(%22572, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22575 = nn.dense(%22573, %22574, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22576 = add(%22575, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22577 = add(%22576, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22578 = split(%22577, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22579 = %22578.3 /* ty=Tensor[(1, 512), float32] */;
  %22580 = %22578.1 /* ty=Tensor[(1, 512), float32] */;
  %22581 = sigmoid(%22580) /* ty=Tensor[(1, 512), float32] */;
  %22582 = %22578.0 /* ty=Tensor[(1, 512), float32] */;
  %22583 = %22578.2 /* ty=Tensor[(1, 512), float32] */;
  %22584 = sigmoid(%22582) /* ty=Tensor[(1, 512), float32] */;
  %22585 = tanh(%22583) /* ty=Tensor[(1, 512), float32] */;
  %22586 = multiply(%22581, %22545) /* ty=Tensor[(1, 512), float32] */;
  %22587 = multiply(%22584, %22585) /* ty=Tensor[(1, 512), float32] */;
  %22588 = add(%22586, %22587) /* ty=Tensor[(1, 512), float32] */;
  %22589 = sigmoid(%22579) /* ty=Tensor[(1, 512), float32] */;
  %22590 = tanh(%22588) /* ty=Tensor[(1, 512), float32] */;
  %22591 = multiply(%22589, %22590) /* ty=Tensor[(1, 512), float32] */;
  %22592 = multiply(%22568, %22569) /* ty=Tensor[(1, 512), float32] */;
  %22593 = (%22591, %22592) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22594 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22595 = concatenate(%22593, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22596 = concatenate(%22594, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22597 = nn.dense(%22595, %22596, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22598 = add(%22597, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22599 = add(%22598, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22600 = split(%22599, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22601 = %22600.3 /* ty=Tensor[(1, 512), float32] */;
  %22602 = %22600.1 /* ty=Tensor[(1, 512), float32] */;
  %22603 = sigmoid(%22602) /* ty=Tensor[(1, 512), float32] */;
  %22604 = %22600.0 /* ty=Tensor[(1, 512), float32] */;
  %22605 = %22600.2 /* ty=Tensor[(1, 512), float32] */;
  %22606 = sigmoid(%22604) /* ty=Tensor[(1, 512), float32] */;
  %22607 = tanh(%22605) /* ty=Tensor[(1, 512), float32] */;
  %22608 = multiply(%22603, %22567) /* ty=Tensor[(1, 512), float32] */;
  %22609 = multiply(%22606, %22607) /* ty=Tensor[(1, 512), float32] */;
  %22610 = add(%22608, %22609) /* ty=Tensor[(1, 512), float32] */;
  %22611 = sigmoid(%22601) /* ty=Tensor[(1, 512), float32] */;
  %22612 = tanh(%22610) /* ty=Tensor[(1, 512), float32] */;
  %22613 = %21822.18 /* ty=Tensor[(1, 512), float32] */;
  %22614 = (%22613, %22591) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22615 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22616 = concatenate(%22614, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22617 = concatenate(%22615, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22618 = nn.dense(%22616, %22617, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22619 = add(%22618, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22620 = add(%22619, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22621 = split(%22620, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22622 = %22621.3 /* ty=Tensor[(1, 512), float32] */;
  %22623 = %22621.1 /* ty=Tensor[(1, 512), float32] */;
  %22624 = sigmoid(%22623) /* ty=Tensor[(1, 512), float32] */;
  %22625 = %22621.0 /* ty=Tensor[(1, 512), float32] */;
  %22626 = %22621.2 /* ty=Tensor[(1, 512), float32] */;
  %22627 = sigmoid(%22625) /* ty=Tensor[(1, 512), float32] */;
  %22628 = tanh(%22626) /* ty=Tensor[(1, 512), float32] */;
  %22629 = multiply(%22624, %22588) /* ty=Tensor[(1, 512), float32] */;
  %22630 = multiply(%22627, %22628) /* ty=Tensor[(1, 512), float32] */;
  %22631 = add(%22629, %22630) /* ty=Tensor[(1, 512), float32] */;
  %22632 = sigmoid(%22622) /* ty=Tensor[(1, 512), float32] */;
  %22633 = tanh(%22631) /* ty=Tensor[(1, 512), float32] */;
  %22634 = multiply(%22632, %22633) /* ty=Tensor[(1, 512), float32] */;
  %22635 = multiply(%22611, %22612) /* ty=Tensor[(1, 512), float32] */;
  %22636 = (%22634, %22635) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22637 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22638 = concatenate(%22636, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22639 = concatenate(%22637, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22640 = nn.dense(%22638, %22639, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22641 = add(%22640, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22642 = add(%22641, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22643 = split(%22642, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22644 = %22643.3 /* ty=Tensor[(1, 512), float32] */;
  %22645 = %22643.1 /* ty=Tensor[(1, 512), float32] */;
  %22646 = sigmoid(%22645) /* ty=Tensor[(1, 512), float32] */;
  %22647 = %22643.0 /* ty=Tensor[(1, 512), float32] */;
  %22648 = %22643.2 /* ty=Tensor[(1, 512), float32] */;
  %22649 = sigmoid(%22647) /* ty=Tensor[(1, 512), float32] */;
  %22650 = tanh(%22648) /* ty=Tensor[(1, 512), float32] */;
  %22651 = multiply(%22646, %22610) /* ty=Tensor[(1, 512), float32] */;
  %22652 = multiply(%22649, %22650) /* ty=Tensor[(1, 512), float32] */;
  %22653 = add(%22651, %22652) /* ty=Tensor[(1, 512), float32] */;
  %22654 = sigmoid(%22644) /* ty=Tensor[(1, 512), float32] */;
  %22655 = tanh(%22653) /* ty=Tensor[(1, 512), float32] */;
  %22656 = %21822.19 /* ty=Tensor[(1, 512), float32] */;
  %22657 = (%22656, %22634) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22658 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22659 = concatenate(%22657, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22660 = concatenate(%22658, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22661 = nn.dense(%22659, %22660, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22662 = add(%22661, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22663 = add(%22662, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22664 = split(%22663, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22665 = %22664.3 /* ty=Tensor[(1, 512), float32] */;
  %22666 = %22664.1 /* ty=Tensor[(1, 512), float32] */;
  %22667 = sigmoid(%22666) /* ty=Tensor[(1, 512), float32] */;
  %22668 = %22664.0 /* ty=Tensor[(1, 512), float32] */;
  %22669 = %22664.2 /* ty=Tensor[(1, 512), float32] */;
  %22670 = sigmoid(%22668) /* ty=Tensor[(1, 512), float32] */;
  %22671 = tanh(%22669) /* ty=Tensor[(1, 512), float32] */;
  %22672 = multiply(%22667, %22631) /* ty=Tensor[(1, 512), float32] */;
  %22673 = multiply(%22670, %22671) /* ty=Tensor[(1, 512), float32] */;
  %22674 = add(%22672, %22673) /* ty=Tensor[(1, 512), float32] */;
  %22675 = sigmoid(%22665) /* ty=Tensor[(1, 512), float32] */;
  %22676 = tanh(%22674) /* ty=Tensor[(1, 512), float32] */;
  %22677 = multiply(%22675, %22676) /* ty=Tensor[(1, 512), float32] */;
  %22678 = multiply(%22654, %22655) /* ty=Tensor[(1, 512), float32] */;
  %22679 = (%22677, %22678) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22680 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22681 = concatenate(%22679, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22682 = concatenate(%22680, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22683 = nn.dense(%22681, %22682, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22684 = add(%22683, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22685 = add(%22684, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22686 = split(%22685, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22687 = %22686.3 /* ty=Tensor[(1, 512), float32] */;
  %22688 = %22686.1 /* ty=Tensor[(1, 512), float32] */;
  %22689 = sigmoid(%22688) /* ty=Tensor[(1, 512), float32] */;
  %22690 = %22686.0 /* ty=Tensor[(1, 512), float32] */;
  %22691 = %22686.2 /* ty=Tensor[(1, 512), float32] */;
  %22692 = sigmoid(%22690) /* ty=Tensor[(1, 512), float32] */;
  %22693 = tanh(%22691) /* ty=Tensor[(1, 512), float32] */;
  %22694 = multiply(%22689, %22653) /* ty=Tensor[(1, 512), float32] */;
  %22695 = multiply(%22692, %22693) /* ty=Tensor[(1, 512), float32] */;
  %22696 = add(%22694, %22695) /* ty=Tensor[(1, 512), float32] */;
  %22697 = sigmoid(%22687) /* ty=Tensor[(1, 512), float32] */;
  %22698 = tanh(%22696) /* ty=Tensor[(1, 512), float32] */;
  %22699 = %21822.20 /* ty=Tensor[(1, 512), float32] */;
  %22700 = (%22699, %22677) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22701 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22702 = concatenate(%22700, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22703 = concatenate(%22701, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22704 = nn.dense(%22702, %22703, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22705 = add(%22704, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22706 = add(%22705, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22707 = split(%22706, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22708 = %22707.3 /* ty=Tensor[(1, 512), float32] */;
  %22709 = %22707.1 /* ty=Tensor[(1, 512), float32] */;
  %22710 = sigmoid(%22709) /* ty=Tensor[(1, 512), float32] */;
  %22711 = %22707.0 /* ty=Tensor[(1, 512), float32] */;
  %22712 = %22707.2 /* ty=Tensor[(1, 512), float32] */;
  %22713 = sigmoid(%22711) /* ty=Tensor[(1, 512), float32] */;
  %22714 = tanh(%22712) /* ty=Tensor[(1, 512), float32] */;
  %22715 = multiply(%22710, %22674) /* ty=Tensor[(1, 512), float32] */;
  %22716 = multiply(%22713, %22714) /* ty=Tensor[(1, 512), float32] */;
  %22717 = add(%22715, %22716) /* ty=Tensor[(1, 512), float32] */;
  %22718 = sigmoid(%22708) /* ty=Tensor[(1, 512), float32] */;
  %22719 = tanh(%22717) /* ty=Tensor[(1, 512), float32] */;
  %22720 = multiply(%22718, %22719) /* ty=Tensor[(1, 512), float32] */;
  %22721 = multiply(%22697, %22698) /* ty=Tensor[(1, 512), float32] */;
  %22722 = (%22720, %22721) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22723 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22724 = concatenate(%22722, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22725 = concatenate(%22723, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22726 = nn.dense(%22724, %22725, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22727 = add(%22726, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22728 = add(%22727, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22729 = split(%22728, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22730 = %22729.3 /* ty=Tensor[(1, 512), float32] */;
  %22731 = %22729.1 /* ty=Tensor[(1, 512), float32] */;
  %22732 = sigmoid(%22731) /* ty=Tensor[(1, 512), float32] */;
  %22733 = %22729.0 /* ty=Tensor[(1, 512), float32] */;
  %22734 = %22729.2 /* ty=Tensor[(1, 512), float32] */;
  %22735 = sigmoid(%22733) /* ty=Tensor[(1, 512), float32] */;
  %22736 = tanh(%22734) /* ty=Tensor[(1, 512), float32] */;
  %22737 = multiply(%22732, %22696) /* ty=Tensor[(1, 512), float32] */;
  %22738 = multiply(%22735, %22736) /* ty=Tensor[(1, 512), float32] */;
  %22739 = add(%22737, %22738) /* ty=Tensor[(1, 512), float32] */;
  %22740 = sigmoid(%22730) /* ty=Tensor[(1, 512), float32] */;
  %22741 = tanh(%22739) /* ty=Tensor[(1, 512), float32] */;
  %22742 = %21822.21 /* ty=Tensor[(1, 512), float32] */;
  %22743 = (%22742, %22720) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22744 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22745 = concatenate(%22743, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22746 = concatenate(%22744, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22747 = nn.dense(%22745, %22746, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22748 = add(%22747, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22749 = add(%22748, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22750 = split(%22749, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22751 = %22750.3 /* ty=Tensor[(1, 512), float32] */;
  %22752 = %22750.1 /* ty=Tensor[(1, 512), float32] */;
  %22753 = sigmoid(%22752) /* ty=Tensor[(1, 512), float32] */;
  %22754 = %22750.0 /* ty=Tensor[(1, 512), float32] */;
  %22755 = %22750.2 /* ty=Tensor[(1, 512), float32] */;
  %22756 = sigmoid(%22754) /* ty=Tensor[(1, 512), float32] */;
  %22757 = tanh(%22755) /* ty=Tensor[(1, 512), float32] */;
  %22758 = multiply(%22753, %22717) /* ty=Tensor[(1, 512), float32] */;
  %22759 = multiply(%22756, %22757) /* ty=Tensor[(1, 512), float32] */;
  %22760 = add(%22758, %22759) /* ty=Tensor[(1, 512), float32] */;
  %22761 = sigmoid(%22751) /* ty=Tensor[(1, 512), float32] */;
  %22762 = tanh(%22760) /* ty=Tensor[(1, 512), float32] */;
  %22763 = multiply(%22761, %22762) /* ty=Tensor[(1, 512), float32] */;
  %22764 = multiply(%22740, %22741) /* ty=Tensor[(1, 512), float32] */;
  %22765 = (%22763, %22764) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22766 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22767 = concatenate(%22765, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22768 = concatenate(%22766, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22769 = nn.dense(%22767, %22768, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22770 = add(%22769, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22771 = add(%22770, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22772 = split(%22771, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22773 = %22772.3 /* ty=Tensor[(1, 512), float32] */;
  %22774 = %22772.1 /* ty=Tensor[(1, 512), float32] */;
  %22775 = sigmoid(%22774) /* ty=Tensor[(1, 512), float32] */;
  %22776 = %22772.0 /* ty=Tensor[(1, 512), float32] */;
  %22777 = %22772.2 /* ty=Tensor[(1, 512), float32] */;
  %22778 = sigmoid(%22776) /* ty=Tensor[(1, 512), float32] */;
  %22779 = tanh(%22777) /* ty=Tensor[(1, 512), float32] */;
  %22780 = multiply(%22775, %22739) /* ty=Tensor[(1, 512), float32] */;
  %22781 = multiply(%22778, %22779) /* ty=Tensor[(1, 512), float32] */;
  %22782 = add(%22780, %22781) /* ty=Tensor[(1, 512), float32] */;
  %22783 = sigmoid(%22773) /* ty=Tensor[(1, 512), float32] */;
  %22784 = tanh(%22782) /* ty=Tensor[(1, 512), float32] */;
  %22785 = %21822.22 /* ty=Tensor[(1, 512), float32] */;
  %22786 = (%22785, %22763) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22787 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22788 = concatenate(%22786, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22789 = concatenate(%22787, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22790 = nn.dense(%22788, %22789, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22791 = add(%22790, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22792 = add(%22791, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22793 = split(%22792, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22794 = %22793.3 /* ty=Tensor[(1, 512), float32] */;
  %22795 = %22793.1 /* ty=Tensor[(1, 512), float32] */;
  %22796 = sigmoid(%22795) /* ty=Tensor[(1, 512), float32] */;
  %22797 = %22793.0 /* ty=Tensor[(1, 512), float32] */;
  %22798 = %22793.2 /* ty=Tensor[(1, 512), float32] */;
  %22799 = sigmoid(%22797) /* ty=Tensor[(1, 512), float32] */;
  %22800 = tanh(%22798) /* ty=Tensor[(1, 512), float32] */;
  %22801 = multiply(%22796, %22760) /* ty=Tensor[(1, 512), float32] */;
  %22802 = multiply(%22799, %22800) /* ty=Tensor[(1, 512), float32] */;
  %22803 = add(%22801, %22802) /* ty=Tensor[(1, 512), float32] */;
  %22804 = sigmoid(%22794) /* ty=Tensor[(1, 512), float32] */;
  %22805 = tanh(%22803) /* ty=Tensor[(1, 512), float32] */;
  %22806 = multiply(%22804, %22805) /* ty=Tensor[(1, 512), float32] */;
  %22807 = multiply(%22783, %22784) /* ty=Tensor[(1, 512), float32] */;
  %22808 = (%22806, %22807) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22809 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22810 = concatenate(%22808, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22811 = concatenate(%22809, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22812 = nn.dense(%22810, %22811, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22813 = add(%22812, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22814 = add(%22813, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22815 = split(%22814, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22816 = %22815.3 /* ty=Tensor[(1, 512), float32] */;
  %22817 = %22815.1 /* ty=Tensor[(1, 512), float32] */;
  %22818 = sigmoid(%22817) /* ty=Tensor[(1, 512), float32] */;
  %22819 = %22815.0 /* ty=Tensor[(1, 512), float32] */;
  %22820 = %22815.2 /* ty=Tensor[(1, 512), float32] */;
  %22821 = sigmoid(%22819) /* ty=Tensor[(1, 512), float32] */;
  %22822 = tanh(%22820) /* ty=Tensor[(1, 512), float32] */;
  %22823 = multiply(%22818, %22782) /* ty=Tensor[(1, 512), float32] */;
  %22824 = multiply(%22821, %22822) /* ty=Tensor[(1, 512), float32] */;
  %22825 = add(%22823, %22824) /* ty=Tensor[(1, 512), float32] */;
  %22826 = sigmoid(%22816) /* ty=Tensor[(1, 512), float32] */;
  %22827 = tanh(%22825) /* ty=Tensor[(1, 512), float32] */;
  %22828 = %21822.23 /* ty=Tensor[(1, 512), float32] */;
  %22829 = (%22828, %22806) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22830 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22831 = concatenate(%22829, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22832 = concatenate(%22830, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22833 = nn.dense(%22831, %22832, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22834 = add(%22833, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22835 = add(%22834, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22836 = split(%22835, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22837 = %22836.3 /* ty=Tensor[(1, 512), float32] */;
  %22838 = %22836.1 /* ty=Tensor[(1, 512), float32] */;
  %22839 = sigmoid(%22838) /* ty=Tensor[(1, 512), float32] */;
  %22840 = %22836.0 /* ty=Tensor[(1, 512), float32] */;
  %22841 = %22836.2 /* ty=Tensor[(1, 512), float32] */;
  %22842 = sigmoid(%22840) /* ty=Tensor[(1, 512), float32] */;
  %22843 = tanh(%22841) /* ty=Tensor[(1, 512), float32] */;
  %22844 = multiply(%22839, %22803) /* ty=Tensor[(1, 512), float32] */;
  %22845 = multiply(%22842, %22843) /* ty=Tensor[(1, 512), float32] */;
  %22846 = add(%22844, %22845) /* ty=Tensor[(1, 512), float32] */;
  %22847 = sigmoid(%22837) /* ty=Tensor[(1, 512), float32] */;
  %22848 = tanh(%22846) /* ty=Tensor[(1, 512), float32] */;
  %22849 = multiply(%22847, %22848) /* ty=Tensor[(1, 512), float32] */;
  %22850 = multiply(%22826, %22827) /* ty=Tensor[(1, 512), float32] */;
  %22851 = (%22849, %22850) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22852 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22853 = concatenate(%22851, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22854 = concatenate(%22852, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22855 = nn.dense(%22853, %22854, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22856 = add(%22855, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22857 = add(%22856, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22858 = split(%22857, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22859 = %22858.3 /* ty=Tensor[(1, 512), float32] */;
  %22860 = %22858.1 /* ty=Tensor[(1, 512), float32] */;
  %22861 = sigmoid(%22860) /* ty=Tensor[(1, 512), float32] */;
  %22862 = %22858.0 /* ty=Tensor[(1, 512), float32] */;
  %22863 = %22858.2 /* ty=Tensor[(1, 512), float32] */;
  %22864 = sigmoid(%22862) /* ty=Tensor[(1, 512), float32] */;
  %22865 = tanh(%22863) /* ty=Tensor[(1, 512), float32] */;
  %22866 = multiply(%22861, %22825) /* ty=Tensor[(1, 512), float32] */;
  %22867 = multiply(%22864, %22865) /* ty=Tensor[(1, 512), float32] */;
  %22868 = add(%22866, %22867) /* ty=Tensor[(1, 512), float32] */;
  %22869 = sigmoid(%22859) /* ty=Tensor[(1, 512), float32] */;
  %22870 = tanh(%22868) /* ty=Tensor[(1, 512), float32] */;
  %22871 = %21822.24 /* ty=Tensor[(1, 512), float32] */;
  %22872 = (%22871, %22849) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22873 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22874 = concatenate(%22872, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22875 = concatenate(%22873, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22876 = nn.dense(%22874, %22875, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22877 = add(%22876, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22878 = add(%22877, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22879 = split(%22878, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22880 = %22879.3 /* ty=Tensor[(1, 512), float32] */;
  %22881 = %22879.1 /* ty=Tensor[(1, 512), float32] */;
  %22882 = sigmoid(%22881) /* ty=Tensor[(1, 512), float32] */;
  %22883 = %22879.0 /* ty=Tensor[(1, 512), float32] */;
  %22884 = %22879.2 /* ty=Tensor[(1, 512), float32] */;
  %22885 = sigmoid(%22883) /* ty=Tensor[(1, 512), float32] */;
  %22886 = tanh(%22884) /* ty=Tensor[(1, 512), float32] */;
  %22887 = multiply(%22882, %22846) /* ty=Tensor[(1, 512), float32] */;
  %22888 = multiply(%22885, %22886) /* ty=Tensor[(1, 512), float32] */;
  %22889 = add(%22887, %22888) /* ty=Tensor[(1, 512), float32] */;
  %22890 = sigmoid(%22880) /* ty=Tensor[(1, 512), float32] */;
  %22891 = tanh(%22889) /* ty=Tensor[(1, 512), float32] */;
  %22892 = multiply(%22890, %22891) /* ty=Tensor[(1, 512), float32] */;
  %22893 = multiply(%22869, %22870) /* ty=Tensor[(1, 512), float32] */;
  %22894 = (%22892, %22893) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22895 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22896 = concatenate(%22894, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22897 = concatenate(%22895, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22898 = nn.dense(%22896, %22897, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22899 = add(%22898, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22900 = add(%22899, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22901 = split(%22900, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22902 = %22901.3 /* ty=Tensor[(1, 512), float32] */;
  %22903 = %22901.1 /* ty=Tensor[(1, 512), float32] */;
  %22904 = sigmoid(%22903) /* ty=Tensor[(1, 512), float32] */;
  %22905 = %22901.0 /* ty=Tensor[(1, 512), float32] */;
  %22906 = %22901.2 /* ty=Tensor[(1, 512), float32] */;
  %22907 = sigmoid(%22905) /* ty=Tensor[(1, 512), float32] */;
  %22908 = tanh(%22906) /* ty=Tensor[(1, 512), float32] */;
  %22909 = multiply(%22904, %22868) /* ty=Tensor[(1, 512), float32] */;
  %22910 = multiply(%22907, %22908) /* ty=Tensor[(1, 512), float32] */;
  %22911 = add(%22909, %22910) /* ty=Tensor[(1, 512), float32] */;
  %22912 = sigmoid(%22902) /* ty=Tensor[(1, 512), float32] */;
  %22913 = tanh(%22911) /* ty=Tensor[(1, 512), float32] */;
  %22914 = %21822.25 /* ty=Tensor[(1, 512), float32] */;
  %22915 = (%22914, %22892) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22916 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22917 = concatenate(%22915, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22918 = concatenate(%22916, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22919 = nn.dense(%22917, %22918, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22920 = add(%22919, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22921 = add(%22920, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22922 = split(%22921, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22923 = %22922.3 /* ty=Tensor[(1, 512), float32] */;
  %22924 = %22922.1 /* ty=Tensor[(1, 512), float32] */;
  %22925 = sigmoid(%22924) /* ty=Tensor[(1, 512), float32] */;
  %22926 = %22922.0 /* ty=Tensor[(1, 512), float32] */;
  %22927 = %22922.2 /* ty=Tensor[(1, 512), float32] */;
  %22928 = sigmoid(%22926) /* ty=Tensor[(1, 512), float32] */;
  %22929 = tanh(%22927) /* ty=Tensor[(1, 512), float32] */;
  %22930 = multiply(%22925, %22889) /* ty=Tensor[(1, 512), float32] */;
  %22931 = multiply(%22928, %22929) /* ty=Tensor[(1, 512), float32] */;
  %22932 = add(%22930, %22931) /* ty=Tensor[(1, 512), float32] */;
  %22933 = sigmoid(%22923) /* ty=Tensor[(1, 512), float32] */;
  %22934 = tanh(%22932) /* ty=Tensor[(1, 512), float32] */;
  %22935 = multiply(%22933, %22934) /* ty=Tensor[(1, 512), float32] */;
  %22936 = multiply(%22912, %22913) /* ty=Tensor[(1, 512), float32] */;
  %22937 = (%22935, %22936) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22938 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22939 = concatenate(%22937, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22940 = concatenate(%22938, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22941 = nn.dense(%22939, %22940, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22942 = add(%22941, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22943 = add(%22942, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22944 = split(%22943, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22945 = %22944.3 /* ty=Tensor[(1, 512), float32] */;
  %22946 = %22944.1 /* ty=Tensor[(1, 512), float32] */;
  %22947 = sigmoid(%22946) /* ty=Tensor[(1, 512), float32] */;
  %22948 = %22944.0 /* ty=Tensor[(1, 512), float32] */;
  %22949 = %22944.2 /* ty=Tensor[(1, 512), float32] */;
  %22950 = sigmoid(%22948) /* ty=Tensor[(1, 512), float32] */;
  %22951 = tanh(%22949) /* ty=Tensor[(1, 512), float32] */;
  %22952 = multiply(%22947, %22911) /* ty=Tensor[(1, 512), float32] */;
  %22953 = multiply(%22950, %22951) /* ty=Tensor[(1, 512), float32] */;
  %22954 = add(%22952, %22953) /* ty=Tensor[(1, 512), float32] */;
  %22955 = sigmoid(%22945) /* ty=Tensor[(1, 512), float32] */;
  %22956 = tanh(%22954) /* ty=Tensor[(1, 512), float32] */;
  %22957 = %21822.26 /* ty=Tensor[(1, 512), float32] */;
  %22958 = (%22957, %22935) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22959 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22960 = concatenate(%22958, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22961 = concatenate(%22959, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22962 = nn.dense(%22960, %22961, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22963 = add(%22962, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22964 = add(%22963, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %22965 = split(%22964, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22966 = %22965.3 /* ty=Tensor[(1, 512), float32] */;
  %22967 = %22965.1 /* ty=Tensor[(1, 512), float32] */;
  %22968 = sigmoid(%22967) /* ty=Tensor[(1, 512), float32] */;
  %22969 = %22965.0 /* ty=Tensor[(1, 512), float32] */;
  %22970 = %22965.2 /* ty=Tensor[(1, 512), float32] */;
  %22971 = sigmoid(%22969) /* ty=Tensor[(1, 512), float32] */;
  %22972 = tanh(%22970) /* ty=Tensor[(1, 512), float32] */;
  %22973 = multiply(%22968, %22932) /* ty=Tensor[(1, 512), float32] */;
  %22974 = multiply(%22971, %22972) /* ty=Tensor[(1, 512), float32] */;
  %22975 = add(%22973, %22974) /* ty=Tensor[(1, 512), float32] */;
  %22976 = sigmoid(%22966) /* ty=Tensor[(1, 512), float32] */;
  %22977 = tanh(%22975) /* ty=Tensor[(1, 512), float32] */;
  %22978 = multiply(%22976, %22977) /* ty=Tensor[(1, 512), float32] */;
  %22979 = multiply(%22955, %22956) /* ty=Tensor[(1, 512), float32] */;
  %22980 = (%22978, %22979) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22981 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %22982 = concatenate(%22980, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %22983 = concatenate(%22981, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %22984 = nn.dense(%22982, %22983, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %22985 = add(%22984, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22986 = add(%22985, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %22987 = split(%22986, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %22988 = %22987.3 /* ty=Tensor[(1, 512), float32] */;
  %22989 = %22987.1 /* ty=Tensor[(1, 512), float32] */;
  %22990 = sigmoid(%22989) /* ty=Tensor[(1, 512), float32] */;
  %22991 = %22987.0 /* ty=Tensor[(1, 512), float32] */;
  %22992 = %22987.2 /* ty=Tensor[(1, 512), float32] */;
  %22993 = sigmoid(%22991) /* ty=Tensor[(1, 512), float32] */;
  %22994 = tanh(%22992) /* ty=Tensor[(1, 512), float32] */;
  %22995 = multiply(%22990, %22954) /* ty=Tensor[(1, 512), float32] */;
  %22996 = multiply(%22993, %22994) /* ty=Tensor[(1, 512), float32] */;
  %22997 = add(%22995, %22996) /* ty=Tensor[(1, 512), float32] */;
  %22998 = sigmoid(%22988) /* ty=Tensor[(1, 512), float32] */;
  %22999 = tanh(%22997) /* ty=Tensor[(1, 512), float32] */;
  %23000 = %21822.27 /* ty=Tensor[(1, 512), float32] */;
  %23001 = (%23000, %22978) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23002 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23003 = concatenate(%23001, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23004 = concatenate(%23002, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23005 = nn.dense(%23003, %23004, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23006 = add(%23005, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23007 = add(%23006, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23008 = split(%23007, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23009 = %23008.3 /* ty=Tensor[(1, 512), float32] */;
  %23010 = %23008.1 /* ty=Tensor[(1, 512), float32] */;
  %23011 = sigmoid(%23010) /* ty=Tensor[(1, 512), float32] */;
  %23012 = %23008.0 /* ty=Tensor[(1, 512), float32] */;
  %23013 = %23008.2 /* ty=Tensor[(1, 512), float32] */;
  %23014 = sigmoid(%23012) /* ty=Tensor[(1, 512), float32] */;
  %23015 = tanh(%23013) /* ty=Tensor[(1, 512), float32] */;
  %23016 = multiply(%23011, %22975) /* ty=Tensor[(1, 512), float32] */;
  %23017 = multiply(%23014, %23015) /* ty=Tensor[(1, 512), float32] */;
  %23018 = add(%23016, %23017) /* ty=Tensor[(1, 512), float32] */;
  %23019 = sigmoid(%23009) /* ty=Tensor[(1, 512), float32] */;
  %23020 = tanh(%23018) /* ty=Tensor[(1, 512), float32] */;
  %23021 = multiply(%23019, %23020) /* ty=Tensor[(1, 512), float32] */;
  %23022 = multiply(%22998, %22999) /* ty=Tensor[(1, 512), float32] */;
  %23023 = (%23021, %23022) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23024 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23025 = concatenate(%23023, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23026 = concatenate(%23024, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23027 = nn.dense(%23025, %23026, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23028 = add(%23027, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23029 = add(%23028, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23030 = split(%23029, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23031 = %23030.3 /* ty=Tensor[(1, 512), float32] */;
  %23032 = %23030.1 /* ty=Tensor[(1, 512), float32] */;
  %23033 = sigmoid(%23032) /* ty=Tensor[(1, 512), float32] */;
  %23034 = %23030.0 /* ty=Tensor[(1, 512), float32] */;
  %23035 = %23030.2 /* ty=Tensor[(1, 512), float32] */;
  %23036 = sigmoid(%23034) /* ty=Tensor[(1, 512), float32] */;
  %23037 = tanh(%23035) /* ty=Tensor[(1, 512), float32] */;
  %23038 = multiply(%23033, %22997) /* ty=Tensor[(1, 512), float32] */;
  %23039 = multiply(%23036, %23037) /* ty=Tensor[(1, 512), float32] */;
  %23040 = add(%23038, %23039) /* ty=Tensor[(1, 512), float32] */;
  %23041 = sigmoid(%23031) /* ty=Tensor[(1, 512), float32] */;
  %23042 = tanh(%23040) /* ty=Tensor[(1, 512), float32] */;
  %23043 = %21822.28 /* ty=Tensor[(1, 512), float32] */;
  %23044 = (%23043, %23021) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23045 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23046 = concatenate(%23044, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23047 = concatenate(%23045, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23048 = nn.dense(%23046, %23047, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23049 = add(%23048, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23050 = add(%23049, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23051 = split(%23050, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23052 = %23051.3 /* ty=Tensor[(1, 512), float32] */;
  %23053 = %23051.1 /* ty=Tensor[(1, 512), float32] */;
  %23054 = sigmoid(%23053) /* ty=Tensor[(1, 512), float32] */;
  %23055 = %23051.0 /* ty=Tensor[(1, 512), float32] */;
  %23056 = %23051.2 /* ty=Tensor[(1, 512), float32] */;
  %23057 = sigmoid(%23055) /* ty=Tensor[(1, 512), float32] */;
  %23058 = tanh(%23056) /* ty=Tensor[(1, 512), float32] */;
  %23059 = multiply(%23054, %23018) /* ty=Tensor[(1, 512), float32] */;
  %23060 = multiply(%23057, %23058) /* ty=Tensor[(1, 512), float32] */;
  %23061 = add(%23059, %23060) /* ty=Tensor[(1, 512), float32] */;
  %23062 = sigmoid(%23052) /* ty=Tensor[(1, 512), float32] */;
  %23063 = tanh(%23061) /* ty=Tensor[(1, 512), float32] */;
  %23064 = multiply(%23062, %23063) /* ty=Tensor[(1, 512), float32] */;
  %23065 = multiply(%23041, %23042) /* ty=Tensor[(1, 512), float32] */;
  %23066 = (%23064, %23065) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23067 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23068 = concatenate(%23066, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23069 = concatenate(%23067, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23070 = nn.dense(%23068, %23069, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23071 = add(%23070, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23072 = add(%23071, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23073 = split(%23072, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23074 = %23073.3 /* ty=Tensor[(1, 512), float32] */;
  %23075 = %23073.1 /* ty=Tensor[(1, 512), float32] */;
  %23076 = sigmoid(%23075) /* ty=Tensor[(1, 512), float32] */;
  %23077 = %23073.0 /* ty=Tensor[(1, 512), float32] */;
  %23078 = %23073.2 /* ty=Tensor[(1, 512), float32] */;
  %23079 = sigmoid(%23077) /* ty=Tensor[(1, 512), float32] */;
  %23080 = tanh(%23078) /* ty=Tensor[(1, 512), float32] */;
  %23081 = multiply(%23076, %23040) /* ty=Tensor[(1, 512), float32] */;
  %23082 = multiply(%23079, %23080) /* ty=Tensor[(1, 512), float32] */;
  %23083 = add(%23081, %23082) /* ty=Tensor[(1, 512), float32] */;
  %23084 = sigmoid(%23074) /* ty=Tensor[(1, 512), float32] */;
  %23085 = tanh(%23083) /* ty=Tensor[(1, 512), float32] */;
  %23086 = %21822.29 /* ty=Tensor[(1, 512), float32] */;
  %23087 = (%23086, %23064) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23088 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23089 = concatenate(%23087, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23090 = concatenate(%23088, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23091 = nn.dense(%23089, %23090, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23092 = add(%23091, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23093 = add(%23092, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23094 = split(%23093, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23095 = %23094.3 /* ty=Tensor[(1, 512), float32] */;
  %23096 = %23094.1 /* ty=Tensor[(1, 512), float32] */;
  %23097 = sigmoid(%23096) /* ty=Tensor[(1, 512), float32] */;
  %23098 = %23094.0 /* ty=Tensor[(1, 512), float32] */;
  %23099 = %23094.2 /* ty=Tensor[(1, 512), float32] */;
  %23100 = sigmoid(%23098) /* ty=Tensor[(1, 512), float32] */;
  %23101 = tanh(%23099) /* ty=Tensor[(1, 512), float32] */;
  %23102 = multiply(%23097, %23061) /* ty=Tensor[(1, 512), float32] */;
  %23103 = multiply(%23100, %23101) /* ty=Tensor[(1, 512), float32] */;
  %23104 = add(%23102, %23103) /* ty=Tensor[(1, 512), float32] */;
  %23105 = sigmoid(%23095) /* ty=Tensor[(1, 512), float32] */;
  %23106 = tanh(%23104) /* ty=Tensor[(1, 512), float32] */;
  %23107 = multiply(%23105, %23106) /* ty=Tensor[(1, 512), float32] */;
  %23108 = multiply(%23084, %23085) /* ty=Tensor[(1, 512), float32] */;
  %23109 = (%23107, %23108) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23110 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23111 = concatenate(%23109, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23112 = concatenate(%23110, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23113 = nn.dense(%23111, %23112, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23114 = add(%23113, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23115 = add(%23114, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23116 = split(%23115, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23117 = %23116.3 /* ty=Tensor[(1, 512), float32] */;
  %23118 = %23116.1 /* ty=Tensor[(1, 512), float32] */;
  %23119 = sigmoid(%23118) /* ty=Tensor[(1, 512), float32] */;
  %23120 = %23116.0 /* ty=Tensor[(1, 512), float32] */;
  %23121 = %23116.2 /* ty=Tensor[(1, 512), float32] */;
  %23122 = sigmoid(%23120) /* ty=Tensor[(1, 512), float32] */;
  %23123 = tanh(%23121) /* ty=Tensor[(1, 512), float32] */;
  %23124 = multiply(%23119, %23083) /* ty=Tensor[(1, 512), float32] */;
  %23125 = multiply(%23122, %23123) /* ty=Tensor[(1, 512), float32] */;
  %23126 = add(%23124, %23125) /* ty=Tensor[(1, 512), float32] */;
  %23127 = sigmoid(%23117) /* ty=Tensor[(1, 512), float32] */;
  %23128 = tanh(%23126) /* ty=Tensor[(1, 512), float32] */;
  %23129 = %21822.30 /* ty=Tensor[(1, 512), float32] */;
  %23130 = (%23129, %23107) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23131 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23132 = concatenate(%23130, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23133 = concatenate(%23131, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23134 = nn.dense(%23132, %23133, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23135 = add(%23134, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23136 = add(%23135, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23137 = split(%23136, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23138 = %23137.3 /* ty=Tensor[(1, 512), float32] */;
  %23139 = %23137.1 /* ty=Tensor[(1, 512), float32] */;
  %23140 = sigmoid(%23139) /* ty=Tensor[(1, 512), float32] */;
  %23141 = %23137.0 /* ty=Tensor[(1, 512), float32] */;
  %23142 = %23137.2 /* ty=Tensor[(1, 512), float32] */;
  %23143 = sigmoid(%23141) /* ty=Tensor[(1, 512), float32] */;
  %23144 = tanh(%23142) /* ty=Tensor[(1, 512), float32] */;
  %23145 = multiply(%23140, %23104) /* ty=Tensor[(1, 512), float32] */;
  %23146 = multiply(%23143, %23144) /* ty=Tensor[(1, 512), float32] */;
  %23147 = add(%23145, %23146) /* ty=Tensor[(1, 512), float32] */;
  %23148 = sigmoid(%23138) /* ty=Tensor[(1, 512), float32] */;
  %23149 = tanh(%23147) /* ty=Tensor[(1, 512), float32] */;
  %23150 = multiply(%23148, %23149) /* ty=Tensor[(1, 512), float32] */;
  %23151 = multiply(%23127, %23128) /* ty=Tensor[(1, 512), float32] */;
  %23152 = (%23150, %23151) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23153 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23154 = concatenate(%23152, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23155 = concatenate(%23153, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23156 = nn.dense(%23154, %23155, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23157 = add(%23156, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23158 = add(%23157, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23159 = split(%23158, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23160 = %23159.3 /* ty=Tensor[(1, 512), float32] */;
  %23161 = %23159.1 /* ty=Tensor[(1, 512), float32] */;
  %23162 = sigmoid(%23161) /* ty=Tensor[(1, 512), float32] */;
  %23163 = %23159.0 /* ty=Tensor[(1, 512), float32] */;
  %23164 = %23159.2 /* ty=Tensor[(1, 512), float32] */;
  %23165 = sigmoid(%23163) /* ty=Tensor[(1, 512), float32] */;
  %23166 = tanh(%23164) /* ty=Tensor[(1, 512), float32] */;
  %23167 = multiply(%23162, %23126) /* ty=Tensor[(1, 512), float32] */;
  %23168 = multiply(%23165, %23166) /* ty=Tensor[(1, 512), float32] */;
  %23169 = add(%23167, %23168) /* ty=Tensor[(1, 512), float32] */;
  %23170 = sigmoid(%23160) /* ty=Tensor[(1, 512), float32] */;
  %23171 = tanh(%23169) /* ty=Tensor[(1, 512), float32] */;
  %23172 = %21822.31 /* ty=Tensor[(1, 512), float32] */;
  %23173 = (%23172, %23150) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23174 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23175 = concatenate(%23173, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23176 = concatenate(%23174, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23177 = nn.dense(%23175, %23176, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23178 = add(%23177, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23179 = add(%23178, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23180 = split(%23179, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23181 = %23180.3 /* ty=Tensor[(1, 512), float32] */;
  %23182 = %23180.1 /* ty=Tensor[(1, 512), float32] */;
  %23183 = sigmoid(%23182) /* ty=Tensor[(1, 512), float32] */;
  %23184 = %23180.0 /* ty=Tensor[(1, 512), float32] */;
  %23185 = %23180.2 /* ty=Tensor[(1, 512), float32] */;
  %23186 = sigmoid(%23184) /* ty=Tensor[(1, 512), float32] */;
  %23187 = tanh(%23185) /* ty=Tensor[(1, 512), float32] */;
  %23188 = multiply(%23183, %23147) /* ty=Tensor[(1, 512), float32] */;
  %23189 = multiply(%23186, %23187) /* ty=Tensor[(1, 512), float32] */;
  %23190 = add(%23188, %23189) /* ty=Tensor[(1, 512), float32] */;
  %23191 = sigmoid(%23181) /* ty=Tensor[(1, 512), float32] */;
  %23192 = tanh(%23190) /* ty=Tensor[(1, 512), float32] */;
  %23193 = multiply(%23191, %23192) /* ty=Tensor[(1, 512), float32] */;
  %23194 = multiply(%23170, %23171) /* ty=Tensor[(1, 512), float32] */;
  %23195 = (%23193, %23194) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23196 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23197 = concatenate(%23195, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23198 = concatenate(%23196, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23199 = nn.dense(%23197, %23198, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23200 = add(%23199, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23201 = add(%23200, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23202 = split(%23201, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23203 = %23202.3 /* ty=Tensor[(1, 512), float32] */;
  %23204 = %23202.1 /* ty=Tensor[(1, 512), float32] */;
  %23205 = sigmoid(%23204) /* ty=Tensor[(1, 512), float32] */;
  %23206 = %23202.0 /* ty=Tensor[(1, 512), float32] */;
  %23207 = %23202.2 /* ty=Tensor[(1, 512), float32] */;
  %23208 = sigmoid(%23206) /* ty=Tensor[(1, 512), float32] */;
  %23209 = tanh(%23207) /* ty=Tensor[(1, 512), float32] */;
  %23210 = multiply(%23205, %23169) /* ty=Tensor[(1, 512), float32] */;
  %23211 = multiply(%23208, %23209) /* ty=Tensor[(1, 512), float32] */;
  %23212 = add(%23210, %23211) /* ty=Tensor[(1, 512), float32] */;
  %23213 = sigmoid(%23203) /* ty=Tensor[(1, 512), float32] */;
  %23214 = tanh(%23212) /* ty=Tensor[(1, 512), float32] */;
  %23215 = %21822.32 /* ty=Tensor[(1, 512), float32] */;
  %23216 = (%23215, %23193) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23217 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23218 = concatenate(%23216, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23219 = concatenate(%23217, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23220 = nn.dense(%23218, %23219, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23221 = add(%23220, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23222 = add(%23221, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23223 = split(%23222, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23224 = %23223.3 /* ty=Tensor[(1, 512), float32] */;
  %23225 = %23223.1 /* ty=Tensor[(1, 512), float32] */;
  %23226 = sigmoid(%23225) /* ty=Tensor[(1, 512), float32] */;
  %23227 = %23223.0 /* ty=Tensor[(1, 512), float32] */;
  %23228 = %23223.2 /* ty=Tensor[(1, 512), float32] */;
  %23229 = sigmoid(%23227) /* ty=Tensor[(1, 512), float32] */;
  %23230 = tanh(%23228) /* ty=Tensor[(1, 512), float32] */;
  %23231 = multiply(%23226, %23190) /* ty=Tensor[(1, 512), float32] */;
  %23232 = multiply(%23229, %23230) /* ty=Tensor[(1, 512), float32] */;
  %23233 = add(%23231, %23232) /* ty=Tensor[(1, 512), float32] */;
  %23234 = sigmoid(%23224) /* ty=Tensor[(1, 512), float32] */;
  %23235 = tanh(%23233) /* ty=Tensor[(1, 512), float32] */;
  %23236 = multiply(%23234, %23235) /* ty=Tensor[(1, 512), float32] */;
  %23237 = multiply(%23213, %23214) /* ty=Tensor[(1, 512), float32] */;
  %23238 = (%23236, %23237) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23239 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23240 = concatenate(%23238, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23241 = concatenate(%23239, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23242 = nn.dense(%23240, %23241, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23243 = add(%23242, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23244 = add(%23243, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23245 = split(%23244, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23246 = %23245.3 /* ty=Tensor[(1, 512), float32] */;
  %23247 = %23245.1 /* ty=Tensor[(1, 512), float32] */;
  %23248 = sigmoid(%23247) /* ty=Tensor[(1, 512), float32] */;
  %23249 = %23245.0 /* ty=Tensor[(1, 512), float32] */;
  %23250 = %23245.2 /* ty=Tensor[(1, 512), float32] */;
  %23251 = sigmoid(%23249) /* ty=Tensor[(1, 512), float32] */;
  %23252 = tanh(%23250) /* ty=Tensor[(1, 512), float32] */;
  %23253 = multiply(%23248, %23212) /* ty=Tensor[(1, 512), float32] */;
  %23254 = multiply(%23251, %23252) /* ty=Tensor[(1, 512), float32] */;
  %23255 = add(%23253, %23254) /* ty=Tensor[(1, 512), float32] */;
  %23256 = sigmoid(%23246) /* ty=Tensor[(1, 512), float32] */;
  %23257 = tanh(%23255) /* ty=Tensor[(1, 512), float32] */;
  %23258 = %21822.33 /* ty=Tensor[(1, 512), float32] */;
  %23259 = (%23258, %23236) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23260 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23261 = concatenate(%23259, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23262 = concatenate(%23260, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23263 = nn.dense(%23261, %23262, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23264 = add(%23263, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23265 = add(%23264, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23266 = split(%23265, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23267 = %23266.3 /* ty=Tensor[(1, 512), float32] */;
  %23268 = %23266.1 /* ty=Tensor[(1, 512), float32] */;
  %23269 = sigmoid(%23268) /* ty=Tensor[(1, 512), float32] */;
  %23270 = %23266.0 /* ty=Tensor[(1, 512), float32] */;
  %23271 = %23266.2 /* ty=Tensor[(1, 512), float32] */;
  %23272 = sigmoid(%23270) /* ty=Tensor[(1, 512), float32] */;
  %23273 = tanh(%23271) /* ty=Tensor[(1, 512), float32] */;
  %23274 = multiply(%23269, %23233) /* ty=Tensor[(1, 512), float32] */;
  %23275 = multiply(%23272, %23273) /* ty=Tensor[(1, 512), float32] */;
  %23276 = add(%23274, %23275) /* ty=Tensor[(1, 512), float32] */;
  %23277 = sigmoid(%23267) /* ty=Tensor[(1, 512), float32] */;
  %23278 = tanh(%23276) /* ty=Tensor[(1, 512), float32] */;
  %23279 = multiply(%23277, %23278) /* ty=Tensor[(1, 512), float32] */;
  %23280 = multiply(%23256, %23257) /* ty=Tensor[(1, 512), float32] */;
  %23281 = (%23279, %23280) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23282 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23283 = concatenate(%23281, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23284 = concatenate(%23282, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23285 = nn.dense(%23283, %23284, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23286 = add(%23285, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23287 = add(%23286, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23288 = split(%23287, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23289 = %23288.3 /* ty=Tensor[(1, 512), float32] */;
  %23290 = %23288.1 /* ty=Tensor[(1, 512), float32] */;
  %23291 = sigmoid(%23290) /* ty=Tensor[(1, 512), float32] */;
  %23292 = %23288.0 /* ty=Tensor[(1, 512), float32] */;
  %23293 = %23288.2 /* ty=Tensor[(1, 512), float32] */;
  %23294 = sigmoid(%23292) /* ty=Tensor[(1, 512), float32] */;
  %23295 = tanh(%23293) /* ty=Tensor[(1, 512), float32] */;
  %23296 = multiply(%23291, %23255) /* ty=Tensor[(1, 512), float32] */;
  %23297 = multiply(%23294, %23295) /* ty=Tensor[(1, 512), float32] */;
  %23298 = add(%23296, %23297) /* ty=Tensor[(1, 512), float32] */;
  %23299 = sigmoid(%23289) /* ty=Tensor[(1, 512), float32] */;
  %23300 = tanh(%23298) /* ty=Tensor[(1, 512), float32] */;
  %23301 = %21822.34 /* ty=Tensor[(1, 512), float32] */;
  %23302 = (%23301, %23279) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23303 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23304 = concatenate(%23302, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23305 = concatenate(%23303, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23306 = nn.dense(%23304, %23305, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23307 = add(%23306, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23308 = add(%23307, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23309 = split(%23308, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23310 = %23309.3 /* ty=Tensor[(1, 512), float32] */;
  %23311 = %23309.1 /* ty=Tensor[(1, 512), float32] */;
  %23312 = sigmoid(%23311) /* ty=Tensor[(1, 512), float32] */;
  %23313 = %23309.0 /* ty=Tensor[(1, 512), float32] */;
  %23314 = %23309.2 /* ty=Tensor[(1, 512), float32] */;
  %23315 = sigmoid(%23313) /* ty=Tensor[(1, 512), float32] */;
  %23316 = tanh(%23314) /* ty=Tensor[(1, 512), float32] */;
  %23317 = multiply(%23312, %23276) /* ty=Tensor[(1, 512), float32] */;
  %23318 = multiply(%23315, %23316) /* ty=Tensor[(1, 512), float32] */;
  %23319 = add(%23317, %23318) /* ty=Tensor[(1, 512), float32] */;
  %23320 = sigmoid(%23310) /* ty=Tensor[(1, 512), float32] */;
  %23321 = tanh(%23319) /* ty=Tensor[(1, 512), float32] */;
  %23322 = multiply(%23320, %23321) /* ty=Tensor[(1, 512), float32] */;
  %23323 = multiply(%23299, %23300) /* ty=Tensor[(1, 512), float32] */;
  %23324 = (%23322, %23323) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23325 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23326 = concatenate(%23324, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23327 = concatenate(%23325, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23328 = nn.dense(%23326, %23327, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23329 = add(%23328, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23330 = add(%23329, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23331 = split(%23330, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23332 = %23331.3 /* ty=Tensor[(1, 512), float32] */;
  %23333 = %23331.1 /* ty=Tensor[(1, 512), float32] */;
  %23334 = sigmoid(%23333) /* ty=Tensor[(1, 512), float32] */;
  %23335 = %23331.0 /* ty=Tensor[(1, 512), float32] */;
  %23336 = %23331.2 /* ty=Tensor[(1, 512), float32] */;
  %23337 = sigmoid(%23335) /* ty=Tensor[(1, 512), float32] */;
  %23338 = tanh(%23336) /* ty=Tensor[(1, 512), float32] */;
  %23339 = multiply(%23334, %23298) /* ty=Tensor[(1, 512), float32] */;
  %23340 = multiply(%23337, %23338) /* ty=Tensor[(1, 512), float32] */;
  %23341 = add(%23339, %23340) /* ty=Tensor[(1, 512), float32] */;
  %23342 = sigmoid(%23332) /* ty=Tensor[(1, 512), float32] */;
  %23343 = tanh(%23341) /* ty=Tensor[(1, 512), float32] */;
  %23344 = %21822.35 /* ty=Tensor[(1, 512), float32] */;
  %23345 = (%23344, %23322) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23346 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23347 = concatenate(%23345, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23348 = concatenate(%23346, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23349 = nn.dense(%23347, %23348, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23350 = add(%23349, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23351 = add(%23350, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23352 = split(%23351, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23353 = %23352.3 /* ty=Tensor[(1, 512), float32] */;
  %23354 = %23352.1 /* ty=Tensor[(1, 512), float32] */;
  %23355 = sigmoid(%23354) /* ty=Tensor[(1, 512), float32] */;
  %23356 = %23352.0 /* ty=Tensor[(1, 512), float32] */;
  %23357 = %23352.2 /* ty=Tensor[(1, 512), float32] */;
  %23358 = sigmoid(%23356) /* ty=Tensor[(1, 512), float32] */;
  %23359 = tanh(%23357) /* ty=Tensor[(1, 512), float32] */;
  %23360 = multiply(%23355, %23319) /* ty=Tensor[(1, 512), float32] */;
  %23361 = multiply(%23358, %23359) /* ty=Tensor[(1, 512), float32] */;
  %23362 = add(%23360, %23361) /* ty=Tensor[(1, 512), float32] */;
  %23363 = sigmoid(%23353) /* ty=Tensor[(1, 512), float32] */;
  %23364 = tanh(%23362) /* ty=Tensor[(1, 512), float32] */;
  %23365 = multiply(%23363, %23364) /* ty=Tensor[(1, 512), float32] */;
  %23366 = multiply(%23342, %23343) /* ty=Tensor[(1, 512), float32] */;
  %23367 = (%23365, %23366) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23368 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23369 = concatenate(%23367, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23370 = concatenate(%23368, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23371 = nn.dense(%23369, %23370, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23372 = add(%23371, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23373 = add(%23372, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23374 = split(%23373, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23375 = %23374.3 /* ty=Tensor[(1, 512), float32] */;
  %23376 = %23374.1 /* ty=Tensor[(1, 512), float32] */;
  %23377 = sigmoid(%23376) /* ty=Tensor[(1, 512), float32] */;
  %23378 = %23374.0 /* ty=Tensor[(1, 512), float32] */;
  %23379 = %23374.2 /* ty=Tensor[(1, 512), float32] */;
  %23380 = sigmoid(%23378) /* ty=Tensor[(1, 512), float32] */;
  %23381 = tanh(%23379) /* ty=Tensor[(1, 512), float32] */;
  %23382 = multiply(%23377, %23341) /* ty=Tensor[(1, 512), float32] */;
  %23383 = multiply(%23380, %23381) /* ty=Tensor[(1, 512), float32] */;
  %23384 = add(%23382, %23383) /* ty=Tensor[(1, 512), float32] */;
  %23385 = sigmoid(%23375) /* ty=Tensor[(1, 512), float32] */;
  %23386 = tanh(%23384) /* ty=Tensor[(1, 512), float32] */;
  %23387 = %21822.36 /* ty=Tensor[(1, 512), float32] */;
  %23388 = (%23387, %23365) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23389 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23390 = concatenate(%23388, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23391 = concatenate(%23389, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23392 = nn.dense(%23390, %23391, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23393 = add(%23392, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23394 = add(%23393, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23395 = split(%23394, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23396 = %23395.3 /* ty=Tensor[(1, 512), float32] */;
  %23397 = %23395.1 /* ty=Tensor[(1, 512), float32] */;
  %23398 = sigmoid(%23397) /* ty=Tensor[(1, 512), float32] */;
  %23399 = %23395.0 /* ty=Tensor[(1, 512), float32] */;
  %23400 = %23395.2 /* ty=Tensor[(1, 512), float32] */;
  %23401 = sigmoid(%23399) /* ty=Tensor[(1, 512), float32] */;
  %23402 = tanh(%23400) /* ty=Tensor[(1, 512), float32] */;
  %23403 = multiply(%23398, %23362) /* ty=Tensor[(1, 512), float32] */;
  %23404 = multiply(%23401, %23402) /* ty=Tensor[(1, 512), float32] */;
  %23405 = add(%23403, %23404) /* ty=Tensor[(1, 512), float32] */;
  %23406 = sigmoid(%23396) /* ty=Tensor[(1, 512), float32] */;
  %23407 = tanh(%23405) /* ty=Tensor[(1, 512), float32] */;
  %23408 = multiply(%23406, %23407) /* ty=Tensor[(1, 512), float32] */;
  %23409 = multiply(%23385, %23386) /* ty=Tensor[(1, 512), float32] */;
  %23410 = (%23408, %23409) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23411 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23412 = concatenate(%23410, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23413 = concatenate(%23411, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23414 = nn.dense(%23412, %23413, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23415 = add(%23414, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23416 = add(%23415, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23417 = split(%23416, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23418 = %23417.3 /* ty=Tensor[(1, 512), float32] */;
  %23419 = %23417.1 /* ty=Tensor[(1, 512), float32] */;
  %23420 = sigmoid(%23419) /* ty=Tensor[(1, 512), float32] */;
  %23421 = %23417.0 /* ty=Tensor[(1, 512), float32] */;
  %23422 = %23417.2 /* ty=Tensor[(1, 512), float32] */;
  %23423 = sigmoid(%23421) /* ty=Tensor[(1, 512), float32] */;
  %23424 = tanh(%23422) /* ty=Tensor[(1, 512), float32] */;
  %23425 = multiply(%23420, %23384) /* ty=Tensor[(1, 512), float32] */;
  %23426 = multiply(%23423, %23424) /* ty=Tensor[(1, 512), float32] */;
  %23427 = add(%23425, %23426) /* ty=Tensor[(1, 512), float32] */;
  %23428 = sigmoid(%23418) /* ty=Tensor[(1, 512), float32] */;
  %23429 = tanh(%23427) /* ty=Tensor[(1, 512), float32] */;
  %23430 = %21822.37 /* ty=Tensor[(1, 512), float32] */;
  %23431 = (%23430, %23408) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23432 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23433 = concatenate(%23431, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23434 = concatenate(%23432, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23435 = nn.dense(%23433, %23434, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23436 = add(%23435, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23437 = add(%23436, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23438 = split(%23437, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23439 = %23438.3 /* ty=Tensor[(1, 512), float32] */;
  %23440 = %23438.1 /* ty=Tensor[(1, 512), float32] */;
  %23441 = sigmoid(%23440) /* ty=Tensor[(1, 512), float32] */;
  %23442 = %23438.0 /* ty=Tensor[(1, 512), float32] */;
  %23443 = %23438.2 /* ty=Tensor[(1, 512), float32] */;
  %23444 = sigmoid(%23442) /* ty=Tensor[(1, 512), float32] */;
  %23445 = tanh(%23443) /* ty=Tensor[(1, 512), float32] */;
  %23446 = multiply(%23441, %23405) /* ty=Tensor[(1, 512), float32] */;
  %23447 = multiply(%23444, %23445) /* ty=Tensor[(1, 512), float32] */;
  %23448 = add(%23446, %23447) /* ty=Tensor[(1, 512), float32] */;
  %23449 = sigmoid(%23439) /* ty=Tensor[(1, 512), float32] */;
  %23450 = tanh(%23448) /* ty=Tensor[(1, 512), float32] */;
  %23451 = multiply(%23449, %23450) /* ty=Tensor[(1, 512), float32] */;
  %23452 = multiply(%23428, %23429) /* ty=Tensor[(1, 512), float32] */;
  %23453 = (%23451, %23452) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23454 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23455 = concatenate(%23453, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23456 = concatenate(%23454, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23457 = nn.dense(%23455, %23456, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23458 = add(%23457, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23459 = add(%23458, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23460 = split(%23459, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23461 = %23460.3 /* ty=Tensor[(1, 512), float32] */;
  %23462 = %23460.1 /* ty=Tensor[(1, 512), float32] */;
  %23463 = sigmoid(%23462) /* ty=Tensor[(1, 512), float32] */;
  %23464 = %23460.0 /* ty=Tensor[(1, 512), float32] */;
  %23465 = %23460.2 /* ty=Tensor[(1, 512), float32] */;
  %23466 = sigmoid(%23464) /* ty=Tensor[(1, 512), float32] */;
  %23467 = tanh(%23465) /* ty=Tensor[(1, 512), float32] */;
  %23468 = multiply(%23463, %23427) /* ty=Tensor[(1, 512), float32] */;
  %23469 = multiply(%23466, %23467) /* ty=Tensor[(1, 512), float32] */;
  %23470 = add(%23468, %23469) /* ty=Tensor[(1, 512), float32] */;
  %23471 = sigmoid(%23461) /* ty=Tensor[(1, 512), float32] */;
  %23472 = tanh(%23470) /* ty=Tensor[(1, 512), float32] */;
  %23473 = %21822.38 /* ty=Tensor[(1, 512), float32] */;
  %23474 = (%23473, %23451) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23475 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23476 = concatenate(%23474, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23477 = concatenate(%23475, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23478 = nn.dense(%23476, %23477, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23479 = add(%23478, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23480 = add(%23479, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23481 = split(%23480, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23482 = %23481.3 /* ty=Tensor[(1, 512), float32] */;
  %23483 = %23481.1 /* ty=Tensor[(1, 512), float32] */;
  %23484 = sigmoid(%23483) /* ty=Tensor[(1, 512), float32] */;
  %23485 = %23481.0 /* ty=Tensor[(1, 512), float32] */;
  %23486 = %23481.2 /* ty=Tensor[(1, 512), float32] */;
  %23487 = sigmoid(%23485) /* ty=Tensor[(1, 512), float32] */;
  %23488 = tanh(%23486) /* ty=Tensor[(1, 512), float32] */;
  %23489 = multiply(%23484, %23448) /* ty=Tensor[(1, 512), float32] */;
  %23490 = multiply(%23487, %23488) /* ty=Tensor[(1, 512), float32] */;
  %23491 = add(%23489, %23490) /* ty=Tensor[(1, 512), float32] */;
  %23492 = sigmoid(%23482) /* ty=Tensor[(1, 512), float32] */;
  %23493 = tanh(%23491) /* ty=Tensor[(1, 512), float32] */;
  %23494 = multiply(%23492, %23493) /* ty=Tensor[(1, 512), float32] */;
  %23495 = multiply(%23471, %23472) /* ty=Tensor[(1, 512), float32] */;
  %23496 = (%23494, %23495) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23497 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23498 = concatenate(%23496, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23499 = concatenate(%23497, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23500 = nn.dense(%23498, %23499, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23501 = add(%23500, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23502 = add(%23501, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23503 = split(%23502, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23504 = %23503.3 /* ty=Tensor[(1, 512), float32] */;
  %23505 = %23503.1 /* ty=Tensor[(1, 512), float32] */;
  %23506 = sigmoid(%23505) /* ty=Tensor[(1, 512), float32] */;
  %23507 = %23503.0 /* ty=Tensor[(1, 512), float32] */;
  %23508 = %23503.2 /* ty=Tensor[(1, 512), float32] */;
  %23509 = sigmoid(%23507) /* ty=Tensor[(1, 512), float32] */;
  %23510 = tanh(%23508) /* ty=Tensor[(1, 512), float32] */;
  %23511 = multiply(%23506, %23470) /* ty=Tensor[(1, 512), float32] */;
  %23512 = multiply(%23509, %23510) /* ty=Tensor[(1, 512), float32] */;
  %23513 = add(%23511, %23512) /* ty=Tensor[(1, 512), float32] */;
  %23514 = sigmoid(%23504) /* ty=Tensor[(1, 512), float32] */;
  %23515 = tanh(%23513) /* ty=Tensor[(1, 512), float32] */;
  %23516 = %21822.39 /* ty=Tensor[(1, 512), float32] */;
  %23517 = (%23516, %23494) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23518 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23519 = concatenate(%23517, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23520 = concatenate(%23518, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23521 = nn.dense(%23519, %23520, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23522 = add(%23521, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23523 = add(%23522, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23524 = split(%23523, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23525 = %23524.3 /* ty=Tensor[(1, 512), float32] */;
  %23526 = %23524.1 /* ty=Tensor[(1, 512), float32] */;
  %23527 = sigmoid(%23526) /* ty=Tensor[(1, 512), float32] */;
  %23528 = %23524.0 /* ty=Tensor[(1, 512), float32] */;
  %23529 = %23524.2 /* ty=Tensor[(1, 512), float32] */;
  %23530 = sigmoid(%23528) /* ty=Tensor[(1, 512), float32] */;
  %23531 = tanh(%23529) /* ty=Tensor[(1, 512), float32] */;
  %23532 = multiply(%23527, %23491) /* ty=Tensor[(1, 512), float32] */;
  %23533 = multiply(%23530, %23531) /* ty=Tensor[(1, 512), float32] */;
  %23534 = add(%23532, %23533) /* ty=Tensor[(1, 512), float32] */;
  %23535 = sigmoid(%23525) /* ty=Tensor[(1, 512), float32] */;
  %23536 = tanh(%23534) /* ty=Tensor[(1, 512), float32] */;
  %23537 = multiply(%23535, %23536) /* ty=Tensor[(1, 512), float32] */;
  %23538 = multiply(%23514, %23515) /* ty=Tensor[(1, 512), float32] */;
  %23539 = (%23537, %23538) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23540 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23541 = concatenate(%23539, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23542 = concatenate(%23540, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23543 = nn.dense(%23541, %23542, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23544 = add(%23543, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23545 = add(%23544, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23546 = split(%23545, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23547 = %23546.3 /* ty=Tensor[(1, 512), float32] */;
  %23548 = %23546.1 /* ty=Tensor[(1, 512), float32] */;
  %23549 = sigmoid(%23548) /* ty=Tensor[(1, 512), float32] */;
  %23550 = %23546.0 /* ty=Tensor[(1, 512), float32] */;
  %23551 = %23546.2 /* ty=Tensor[(1, 512), float32] */;
  %23552 = sigmoid(%23550) /* ty=Tensor[(1, 512), float32] */;
  %23553 = tanh(%23551) /* ty=Tensor[(1, 512), float32] */;
  %23554 = multiply(%23549, %23513) /* ty=Tensor[(1, 512), float32] */;
  %23555 = multiply(%23552, %23553) /* ty=Tensor[(1, 512), float32] */;
  %23556 = add(%23554, %23555) /* ty=Tensor[(1, 512), float32] */;
  %23557 = sigmoid(%23547) /* ty=Tensor[(1, 512), float32] */;
  %23558 = tanh(%23556) /* ty=Tensor[(1, 512), float32] */;
  %23559 = %21822.40 /* ty=Tensor[(1, 512), float32] */;
  %23560 = (%23559, %23537) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23561 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23562 = concatenate(%23560, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23563 = concatenate(%23561, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23564 = nn.dense(%23562, %23563, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23565 = add(%23564, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23566 = add(%23565, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23567 = split(%23566, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23568 = %23567.3 /* ty=Tensor[(1, 512), float32] */;
  %23569 = %23567.1 /* ty=Tensor[(1, 512), float32] */;
  %23570 = sigmoid(%23569) /* ty=Tensor[(1, 512), float32] */;
  %23571 = %23567.0 /* ty=Tensor[(1, 512), float32] */;
  %23572 = %23567.2 /* ty=Tensor[(1, 512), float32] */;
  %23573 = sigmoid(%23571) /* ty=Tensor[(1, 512), float32] */;
  %23574 = tanh(%23572) /* ty=Tensor[(1, 512), float32] */;
  %23575 = multiply(%23570, %23534) /* ty=Tensor[(1, 512), float32] */;
  %23576 = multiply(%23573, %23574) /* ty=Tensor[(1, 512), float32] */;
  %23577 = add(%23575, %23576) /* ty=Tensor[(1, 512), float32] */;
  %23578 = sigmoid(%23568) /* ty=Tensor[(1, 512), float32] */;
  %23579 = tanh(%23577) /* ty=Tensor[(1, 512), float32] */;
  %23580 = multiply(%23578, %23579) /* ty=Tensor[(1, 512), float32] */;
  %23581 = multiply(%23557, %23558) /* ty=Tensor[(1, 512), float32] */;
  %23582 = (%23580, %23581) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23583 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23584 = concatenate(%23582, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23585 = concatenate(%23583, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23586 = nn.dense(%23584, %23585, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23587 = add(%23586, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23588 = add(%23587, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23589 = split(%23588, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23590 = %23589.3 /* ty=Tensor[(1, 512), float32] */;
  %23591 = %23589.1 /* ty=Tensor[(1, 512), float32] */;
  %23592 = sigmoid(%23591) /* ty=Tensor[(1, 512), float32] */;
  %23593 = %23589.0 /* ty=Tensor[(1, 512), float32] */;
  %23594 = %23589.2 /* ty=Tensor[(1, 512), float32] */;
  %23595 = sigmoid(%23593) /* ty=Tensor[(1, 512), float32] */;
  %23596 = tanh(%23594) /* ty=Tensor[(1, 512), float32] */;
  %23597 = multiply(%23592, %23556) /* ty=Tensor[(1, 512), float32] */;
  %23598 = multiply(%23595, %23596) /* ty=Tensor[(1, 512), float32] */;
  %23599 = add(%23597, %23598) /* ty=Tensor[(1, 512), float32] */;
  %23600 = sigmoid(%23590) /* ty=Tensor[(1, 512), float32] */;
  %23601 = tanh(%23599) /* ty=Tensor[(1, 512), float32] */;
  %23602 = %21822.41 /* ty=Tensor[(1, 512), float32] */;
  %23603 = (%23602, %23580) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23604 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23605 = concatenate(%23603, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23606 = concatenate(%23604, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23607 = nn.dense(%23605, %23606, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23608 = add(%23607, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23609 = add(%23608, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23610 = split(%23609, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23611 = %23610.3 /* ty=Tensor[(1, 512), float32] */;
  %23612 = %23610.1 /* ty=Tensor[(1, 512), float32] */;
  %23613 = sigmoid(%23612) /* ty=Tensor[(1, 512), float32] */;
  %23614 = %23610.0 /* ty=Tensor[(1, 512), float32] */;
  %23615 = %23610.2 /* ty=Tensor[(1, 512), float32] */;
  %23616 = sigmoid(%23614) /* ty=Tensor[(1, 512), float32] */;
  %23617 = tanh(%23615) /* ty=Tensor[(1, 512), float32] */;
  %23618 = multiply(%23613, %23577) /* ty=Tensor[(1, 512), float32] */;
  %23619 = multiply(%23616, %23617) /* ty=Tensor[(1, 512), float32] */;
  %23620 = add(%23618, %23619) /* ty=Tensor[(1, 512), float32] */;
  %23621 = sigmoid(%23611) /* ty=Tensor[(1, 512), float32] */;
  %23622 = tanh(%23620) /* ty=Tensor[(1, 512), float32] */;
  %23623 = multiply(%23621, %23622) /* ty=Tensor[(1, 512), float32] */;
  %23624 = multiply(%23600, %23601) /* ty=Tensor[(1, 512), float32] */;
  %23625 = (%23623, %23624) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23626 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23627 = concatenate(%23625, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23628 = concatenate(%23626, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23629 = nn.dense(%23627, %23628, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23630 = add(%23629, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23631 = add(%23630, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23632 = split(%23631, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23633 = %23632.3 /* ty=Tensor[(1, 512), float32] */;
  %23634 = %23632.1 /* ty=Tensor[(1, 512), float32] */;
  %23635 = sigmoid(%23634) /* ty=Tensor[(1, 512), float32] */;
  %23636 = %23632.0 /* ty=Tensor[(1, 512), float32] */;
  %23637 = %23632.2 /* ty=Tensor[(1, 512), float32] */;
  %23638 = sigmoid(%23636) /* ty=Tensor[(1, 512), float32] */;
  %23639 = tanh(%23637) /* ty=Tensor[(1, 512), float32] */;
  %23640 = multiply(%23635, %23599) /* ty=Tensor[(1, 512), float32] */;
  %23641 = multiply(%23638, %23639) /* ty=Tensor[(1, 512), float32] */;
  %23642 = add(%23640, %23641) /* ty=Tensor[(1, 512), float32] */;
  %23643 = sigmoid(%23633) /* ty=Tensor[(1, 512), float32] */;
  %23644 = tanh(%23642) /* ty=Tensor[(1, 512), float32] */;
  %23645 = %21822.42 /* ty=Tensor[(1, 512), float32] */;
  %23646 = (%23645, %23623) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23647 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23648 = concatenate(%23646, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23649 = concatenate(%23647, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23650 = nn.dense(%23648, %23649, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23651 = add(%23650, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23652 = add(%23651, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23653 = split(%23652, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23654 = %23653.3 /* ty=Tensor[(1, 512), float32] */;
  %23655 = %23653.1 /* ty=Tensor[(1, 512), float32] */;
  %23656 = sigmoid(%23655) /* ty=Tensor[(1, 512), float32] */;
  %23657 = %23653.0 /* ty=Tensor[(1, 512), float32] */;
  %23658 = %23653.2 /* ty=Tensor[(1, 512), float32] */;
  %23659 = sigmoid(%23657) /* ty=Tensor[(1, 512), float32] */;
  %23660 = tanh(%23658) /* ty=Tensor[(1, 512), float32] */;
  %23661 = multiply(%23656, %23620) /* ty=Tensor[(1, 512), float32] */;
  %23662 = multiply(%23659, %23660) /* ty=Tensor[(1, 512), float32] */;
  %23663 = add(%23661, %23662) /* ty=Tensor[(1, 512), float32] */;
  %23664 = sigmoid(%23654) /* ty=Tensor[(1, 512), float32] */;
  %23665 = tanh(%23663) /* ty=Tensor[(1, 512), float32] */;
  %23666 = multiply(%23664, %23665) /* ty=Tensor[(1, 512), float32] */;
  %23667 = multiply(%23643, %23644) /* ty=Tensor[(1, 512), float32] */;
  %23668 = (%23666, %23667) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23669 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23670 = concatenate(%23668, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23671 = concatenate(%23669, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23672 = nn.dense(%23670, %23671, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23673 = add(%23672, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23674 = add(%23673, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23675 = split(%23674, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23676 = %23675.3 /* ty=Tensor[(1, 512), float32] */;
  %23677 = %23675.1 /* ty=Tensor[(1, 512), float32] */;
  %23678 = sigmoid(%23677) /* ty=Tensor[(1, 512), float32] */;
  %23679 = %23675.0 /* ty=Tensor[(1, 512), float32] */;
  %23680 = %23675.2 /* ty=Tensor[(1, 512), float32] */;
  %23681 = sigmoid(%23679) /* ty=Tensor[(1, 512), float32] */;
  %23682 = tanh(%23680) /* ty=Tensor[(1, 512), float32] */;
  %23683 = multiply(%23678, %23642) /* ty=Tensor[(1, 512), float32] */;
  %23684 = multiply(%23681, %23682) /* ty=Tensor[(1, 512), float32] */;
  %23685 = add(%23683, %23684) /* ty=Tensor[(1, 512), float32] */;
  %23686 = sigmoid(%23676) /* ty=Tensor[(1, 512), float32] */;
  %23687 = tanh(%23685) /* ty=Tensor[(1, 512), float32] */;
  %23688 = %21822.43 /* ty=Tensor[(1, 512), float32] */;
  %23689 = (%23688, %23666) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23690 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23691 = concatenate(%23689, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23692 = concatenate(%23690, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23693 = nn.dense(%23691, %23692, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23694 = add(%23693, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23695 = add(%23694, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23696 = split(%23695, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23697 = %23696.3 /* ty=Tensor[(1, 512), float32] */;
  %23698 = %23696.1 /* ty=Tensor[(1, 512), float32] */;
  %23699 = sigmoid(%23698) /* ty=Tensor[(1, 512), float32] */;
  %23700 = %23696.0 /* ty=Tensor[(1, 512), float32] */;
  %23701 = %23696.2 /* ty=Tensor[(1, 512), float32] */;
  %23702 = sigmoid(%23700) /* ty=Tensor[(1, 512), float32] */;
  %23703 = tanh(%23701) /* ty=Tensor[(1, 512), float32] */;
  %23704 = multiply(%23699, %23663) /* ty=Tensor[(1, 512), float32] */;
  %23705 = multiply(%23702, %23703) /* ty=Tensor[(1, 512), float32] */;
  %23706 = add(%23704, %23705) /* ty=Tensor[(1, 512), float32] */;
  %23707 = sigmoid(%23697) /* ty=Tensor[(1, 512), float32] */;
  %23708 = tanh(%23706) /* ty=Tensor[(1, 512), float32] */;
  %23709 = multiply(%23707, %23708) /* ty=Tensor[(1, 512), float32] */;
  %23710 = multiply(%23686, %23687) /* ty=Tensor[(1, 512), float32] */;
  %23711 = (%23709, %23710) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23712 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23713 = concatenate(%23711, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23714 = concatenate(%23712, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23715 = nn.dense(%23713, %23714, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23716 = add(%23715, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23717 = add(%23716, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23718 = split(%23717, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23719 = %23718.3 /* ty=Tensor[(1, 512), float32] */;
  %23720 = %23718.1 /* ty=Tensor[(1, 512), float32] */;
  %23721 = sigmoid(%23720) /* ty=Tensor[(1, 512), float32] */;
  %23722 = %23718.0 /* ty=Tensor[(1, 512), float32] */;
  %23723 = %23718.2 /* ty=Tensor[(1, 512), float32] */;
  %23724 = sigmoid(%23722) /* ty=Tensor[(1, 512), float32] */;
  %23725 = tanh(%23723) /* ty=Tensor[(1, 512), float32] */;
  %23726 = multiply(%23721, %23685) /* ty=Tensor[(1, 512), float32] */;
  %23727 = multiply(%23724, %23725) /* ty=Tensor[(1, 512), float32] */;
  %23728 = add(%23726, %23727) /* ty=Tensor[(1, 512), float32] */;
  %23729 = sigmoid(%23719) /* ty=Tensor[(1, 512), float32] */;
  %23730 = tanh(%23728) /* ty=Tensor[(1, 512), float32] */;
  %23731 = %21822.44 /* ty=Tensor[(1, 512), float32] */;
  %23732 = (%23731, %23709) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23733 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23734 = concatenate(%23732, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23735 = concatenate(%23733, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23736 = nn.dense(%23734, %23735, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23737 = add(%23736, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23738 = add(%23737, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23739 = split(%23738, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23740 = %23739.3 /* ty=Tensor[(1, 512), float32] */;
  %23741 = %23739.1 /* ty=Tensor[(1, 512), float32] */;
  %23742 = sigmoid(%23741) /* ty=Tensor[(1, 512), float32] */;
  %23743 = %23739.0 /* ty=Tensor[(1, 512), float32] */;
  %23744 = %23739.2 /* ty=Tensor[(1, 512), float32] */;
  %23745 = sigmoid(%23743) /* ty=Tensor[(1, 512), float32] */;
  %23746 = tanh(%23744) /* ty=Tensor[(1, 512), float32] */;
  %23747 = multiply(%23742, %23706) /* ty=Tensor[(1, 512), float32] */;
  %23748 = multiply(%23745, %23746) /* ty=Tensor[(1, 512), float32] */;
  %23749 = add(%23747, %23748) /* ty=Tensor[(1, 512), float32] */;
  %23750 = sigmoid(%23740) /* ty=Tensor[(1, 512), float32] */;
  %23751 = tanh(%23749) /* ty=Tensor[(1, 512), float32] */;
  %23752 = multiply(%23750, %23751) /* ty=Tensor[(1, 512), float32] */;
  %23753 = multiply(%23729, %23730) /* ty=Tensor[(1, 512), float32] */;
  %23754 = (%23752, %23753) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23755 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23756 = concatenate(%23754, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23757 = concatenate(%23755, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23758 = nn.dense(%23756, %23757, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23759 = add(%23758, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23760 = add(%23759, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23761 = split(%23760, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23762 = %23761.3 /* ty=Tensor[(1, 512), float32] */;
  %23763 = %23761.1 /* ty=Tensor[(1, 512), float32] */;
  %23764 = sigmoid(%23763) /* ty=Tensor[(1, 512), float32] */;
  %23765 = %23761.0 /* ty=Tensor[(1, 512), float32] */;
  %23766 = %23761.2 /* ty=Tensor[(1, 512), float32] */;
  %23767 = sigmoid(%23765) /* ty=Tensor[(1, 512), float32] */;
  %23768 = tanh(%23766) /* ty=Tensor[(1, 512), float32] */;
  %23769 = multiply(%23764, %23728) /* ty=Tensor[(1, 512), float32] */;
  %23770 = multiply(%23767, %23768) /* ty=Tensor[(1, 512), float32] */;
  %23771 = add(%23769, %23770) /* ty=Tensor[(1, 512), float32] */;
  %23772 = sigmoid(%23762) /* ty=Tensor[(1, 512), float32] */;
  %23773 = tanh(%23771) /* ty=Tensor[(1, 512), float32] */;
  %23774 = %21822.45 /* ty=Tensor[(1, 512), float32] */;
  %23775 = (%23774, %23752) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23776 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23777 = concatenate(%23775, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23778 = concatenate(%23776, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23779 = nn.dense(%23777, %23778, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23780 = add(%23779, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23781 = add(%23780, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23782 = split(%23781, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23783 = %23782.3 /* ty=Tensor[(1, 512), float32] */;
  %23784 = %23782.1 /* ty=Tensor[(1, 512), float32] */;
  %23785 = sigmoid(%23784) /* ty=Tensor[(1, 512), float32] */;
  %23786 = %23782.0 /* ty=Tensor[(1, 512), float32] */;
  %23787 = %23782.2 /* ty=Tensor[(1, 512), float32] */;
  %23788 = sigmoid(%23786) /* ty=Tensor[(1, 512), float32] */;
  %23789 = tanh(%23787) /* ty=Tensor[(1, 512), float32] */;
  %23790 = multiply(%23785, %23749) /* ty=Tensor[(1, 512), float32] */;
  %23791 = multiply(%23788, %23789) /* ty=Tensor[(1, 512), float32] */;
  %23792 = add(%23790, %23791) /* ty=Tensor[(1, 512), float32] */;
  %23793 = sigmoid(%23783) /* ty=Tensor[(1, 512), float32] */;
  %23794 = tanh(%23792) /* ty=Tensor[(1, 512), float32] */;
  %23795 = multiply(%23793, %23794) /* ty=Tensor[(1, 512), float32] */;
  %23796 = multiply(%23772, %23773) /* ty=Tensor[(1, 512), float32] */;
  %23797 = (%23795, %23796) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23798 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23799 = concatenate(%23797, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23800 = concatenate(%23798, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23801 = nn.dense(%23799, %23800, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23802 = add(%23801, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23803 = add(%23802, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23804 = split(%23803, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23805 = %23804.3 /* ty=Tensor[(1, 512), float32] */;
  %23806 = %23804.1 /* ty=Tensor[(1, 512), float32] */;
  %23807 = sigmoid(%23806) /* ty=Tensor[(1, 512), float32] */;
  %23808 = %23804.0 /* ty=Tensor[(1, 512), float32] */;
  %23809 = %23804.2 /* ty=Tensor[(1, 512), float32] */;
  %23810 = sigmoid(%23808) /* ty=Tensor[(1, 512), float32] */;
  %23811 = tanh(%23809) /* ty=Tensor[(1, 512), float32] */;
  %23812 = multiply(%23807, %23771) /* ty=Tensor[(1, 512), float32] */;
  %23813 = multiply(%23810, %23811) /* ty=Tensor[(1, 512), float32] */;
  %23814 = add(%23812, %23813) /* ty=Tensor[(1, 512), float32] */;
  %23815 = sigmoid(%23805) /* ty=Tensor[(1, 512), float32] */;
  %23816 = tanh(%23814) /* ty=Tensor[(1, 512), float32] */;
  %23817 = %21822.46 /* ty=Tensor[(1, 512), float32] */;
  %23818 = (%23817, %23795) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23819 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23820 = concatenate(%23818, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23821 = concatenate(%23819, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23822 = nn.dense(%23820, %23821, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23823 = add(%23822, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23824 = add(%23823, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23825 = split(%23824, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23826 = %23825.3 /* ty=Tensor[(1, 512), float32] */;
  %23827 = %23825.1 /* ty=Tensor[(1, 512), float32] */;
  %23828 = sigmoid(%23827) /* ty=Tensor[(1, 512), float32] */;
  %23829 = %23825.0 /* ty=Tensor[(1, 512), float32] */;
  %23830 = %23825.2 /* ty=Tensor[(1, 512), float32] */;
  %23831 = sigmoid(%23829) /* ty=Tensor[(1, 512), float32] */;
  %23832 = tanh(%23830) /* ty=Tensor[(1, 512), float32] */;
  %23833 = multiply(%23828, %23792) /* ty=Tensor[(1, 512), float32] */;
  %23834 = multiply(%23831, %23832) /* ty=Tensor[(1, 512), float32] */;
  %23835 = add(%23833, %23834) /* ty=Tensor[(1, 512), float32] */;
  %23836 = sigmoid(%23826) /* ty=Tensor[(1, 512), float32] */;
  %23837 = tanh(%23835) /* ty=Tensor[(1, 512), float32] */;
  %23838 = multiply(%23836, %23837) /* ty=Tensor[(1, 512), float32] */;
  %23839 = multiply(%23815, %23816) /* ty=Tensor[(1, 512), float32] */;
  %23840 = (%23838, %23839) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23841 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23842 = concatenate(%23840, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23843 = concatenate(%23841, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23844 = nn.dense(%23842, %23843, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23845 = add(%23844, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23846 = add(%23845, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23847 = split(%23846, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23848 = %23847.3 /* ty=Tensor[(1, 512), float32] */;
  %23849 = %23847.1 /* ty=Tensor[(1, 512), float32] */;
  %23850 = sigmoid(%23849) /* ty=Tensor[(1, 512), float32] */;
  %23851 = %23847.0 /* ty=Tensor[(1, 512), float32] */;
  %23852 = %23847.2 /* ty=Tensor[(1, 512), float32] */;
  %23853 = sigmoid(%23851) /* ty=Tensor[(1, 512), float32] */;
  %23854 = tanh(%23852) /* ty=Tensor[(1, 512), float32] */;
  %23855 = multiply(%23850, %23814) /* ty=Tensor[(1, 512), float32] */;
  %23856 = multiply(%23853, %23854) /* ty=Tensor[(1, 512), float32] */;
  %23857 = add(%23855, %23856) /* ty=Tensor[(1, 512), float32] */;
  %23858 = sigmoid(%23848) /* ty=Tensor[(1, 512), float32] */;
  %23859 = tanh(%23857) /* ty=Tensor[(1, 512), float32] */;
  %23860 = %21822.47 /* ty=Tensor[(1, 512), float32] */;
  %23861 = (%23860, %23838) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23862 = (%prediction.dec_rnn.lstm.weight_ih_l0, %prediction.dec_rnn.lstm.weight_hh_l0) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23863 = concatenate(%23861, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23864 = concatenate(%23862, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23865 = nn.dense(%23863, %23864, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23866 = add(%23865, %prediction.dec_rnn.lstm.bias_ih_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23867 = add(%23866, %prediction.dec_rnn.lstm.bias_hh_l0) /* ty=Tensor[(1, 2048), float32] */;
  %23868 = split(%23867, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23869 = %23868.3 /* ty=Tensor[(1, 512), float32] */;
  %23870 = %23868.1 /* ty=Tensor[(1, 512), float32] */;
  %23871 = sigmoid(%23870) /* ty=Tensor[(1, 512), float32] */;
  %23872 = %23868.0 /* ty=Tensor[(1, 512), float32] */;
  %23873 = %23868.2 /* ty=Tensor[(1, 512), float32] */;
  %23874 = sigmoid(%23872) /* ty=Tensor[(1, 512), float32] */;
  %23875 = tanh(%23873) /* ty=Tensor[(1, 512), float32] */;
  %23876 = multiply(%23871, %23835) /* ty=Tensor[(1, 512), float32] */;
  %23877 = multiply(%23874, %23875) /* ty=Tensor[(1, 512), float32] */;
  %23878 = add(%23876, %23877) /* ty=Tensor[(1, 512), float32] */;
  %23879 = sigmoid(%23869) /* ty=Tensor[(1, 512), float32] */;
  %23880 = tanh(%23878) /* ty=Tensor[(1, 512), float32] */;
  %23881 = multiply(%23879, %23880) /* ty=Tensor[(1, 512), float32] */;
  %23882 = multiply(%23858, %23859) /* ty=Tensor[(1, 512), float32] */;
  %23883 = (%23881, %23882) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23884 = (%prediction.dec_rnn.lstm.weight_ih_l1, %prediction.dec_rnn.lstm.weight_hh_l1) /* ty=(Tensor[(2048, 512), float32], Tensor[(2048, 512), float32]) */;
  %23885 = concatenate(%23883, axis=1) /* ty=Tensor[(1, 1024), float32] */;
  %23886 = concatenate(%23884, axis=1) /* ty=Tensor[(2048, 1024), float32] */;
  %23887 = nn.dense(%23885, %23886, units=None) /* ty=Tensor[(1, 2048), float32] */;
  %23888 = add(%23887, %prediction.dec_rnn.lstm.bias_ih_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23889 = add(%23888, %prediction.dec_rnn.lstm.bias_hh_l1) /* ty=Tensor[(1, 2048), float32] */;
  %23890 = split(%23889, indices_or_sections=4, axis=-1) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23891 = %23890.3 /* ty=Tensor[(1, 512), float32] */;
  %23892 = %23890.1 /* ty=Tensor[(1, 512), float32] */;
  %23893 = sigmoid(%23892) /* ty=Tensor[(1, 512), float32] */;
  %23894 = %23890.0 /* ty=Tensor[(1, 512), float32] */;
  %23895 = %23890.2 /* ty=Tensor[(1, 512), float32] */;
  %23896 = sigmoid(%23894) /* ty=Tensor[(1, 512), float32] */;
  %23897 = tanh(%23895) /* ty=Tensor[(1, 512), float32] */;
  %23898 = multiply(%23893, %23857) /* ty=Tensor[(1, 512), float32] */;
  %23899 = multiply(%23896, %23897) /* ty=Tensor[(1, 512), float32] */;
  %23900 = add(%23898, %23899) /* ty=Tensor[(1, 512), float32] */;
  %23901 = sigmoid(%23891) /* ty=Tensor[(1, 512), float32] */;
  %23902 = tanh(%23900) /* ty=Tensor[(1, 512), float32] */;
  %23903 = multiply(%23901, %23902) /* ty=Tensor[(1, 512), float32] */;
  %23904 = (%21904, %21947, %21990, %22033, %22076, %22119, %22162, %22205, %22248, %22291, %22334, %22377, %22420, %22463, %22506, %22549, %22592, %22635, %22678, %22721, %22764, %22807, %22850, %22893, %22936, %22979, %23022, %23065, %23108, %23151, %23194, %23237, %23280, %23323, %23366, %23409, %23452, %23495, %23538, %23581, %23624, %23667, %23710, %23753, %23796, %23839, %23882, %23903) /* ty=(Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32], Tensor[(1, 512), float32]) */;
  %23905 = stack(%23904) /* ty=Tensor[(48, 1, 512), float32] */;
  %23906 = nn.dropout(%23905, rate=0.3f) /* ty=(Tensor[(48, 1, 512), float32], Tensor[(48, 1, 512), float32]) */;
  %23907 = %23906.0 /* ty=Tensor[(48, 1, 512), float32] */;
  %23908 = transpose(%23907, axes=[1, 0, 2]) /* ty=Tensor[(1, 48, 512), float32] */;
  %23909 = transpose(%joint_pred.weight, axes=[1, 0]) /* ty=Tensor[(512, 512), float32] */;
  %23910 = reshape(%23908, newshape=[-1, 512]) /* ty=Tensor[(48, 512), float32] */;
  %23911 = transpose(%23909, axes=[1, 0]) /* ty=Tensor[(512, 512), float32] */;
  %23912 = nn.dense(%23910, %23911, units=None) /* ty=Tensor[(48, 512), float32] */;
  %23913 = reshape(%23912, newshape=[1, 48, 512]) /* ty=Tensor[(1, 48, 512), float32] */;
  %23914 = add(%23913, %joint_pred.bias) /* ty=Tensor[(1, 48, 512), float32] */;
  %23915 = expand_dims(%21718, axis=2) /* ty=Tensor[(1, 139, 1, 512), float32] */;
  %23916 = expand_dims(%23914, axis=1) /* ty=Tensor[(1, 1, 48, 512), float32] */;
  %23917 = add(%23915, %23916) /* ty=Tensor[(1, 139, 48, 512), float32] */;
  %23918 = nn.relu(%23917) /* ty=Tensor[(1, 139, 48, 512), float32] */;
  %23919 = nn.dropout(%23918, rate=0.3f) /* ty=(Tensor[(1, 139, 48, 512), float32], Tensor[(1, 139, 48, 512), float32]) */;
  %23920 = %23919.0 /* ty=Tensor[(1, 139, 48, 512), float32] */;
  %23921 = transpose(%joint_net.2.weight, axes=[1, 0]) /* ty=Tensor[(512, 501), float32] */;
  %23922 = reshape(%23920, newshape=[-1, 512]) /* ty=Tensor[(6672, 512), float32] */;
  %23923 = transpose(%23921, axes=[1, 0]) /* ty=Tensor[(501, 512), float32] */;
  %23924 = nn.dense(%23922, %23923, units=None) /* ty=Tensor[(6672, 501), float32] */;
  %23925 = reshape(%23924, newshape=[1, 139, 48, 501]) /* ty=Tensor[(1, 139, 48, 501), float32] */;
  %23926 = add(%feat_lens, 2 /* ty=int32 */) /* ty=Tensor[(1), int32] */;
  %23927 = multiply(1 /* ty=int32 */, 1 /* ty=int32 */) /* ty=int32 */;
  %23928 = subtract(%23926, %23927) /* ty=Tensor[(1), int32] */;
  %23929 = add(%23925, %joint_net.2.bias) /* ty=Tensor[(1, 139, 48, 501), float32] */;
  %23930 = floor_divide(%23928, 2 /* ty=int32 */) /* ty=Tensor[(1), int32] */;
  (%23929, %23930) /* ty=(Tensor[(1, 139, 48, 501), float32], Tensor[(1), int32]) */
}


